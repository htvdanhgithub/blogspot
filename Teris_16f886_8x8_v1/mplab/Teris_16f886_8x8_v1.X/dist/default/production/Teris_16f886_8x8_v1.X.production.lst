

Microchip Technology PIC LITE Macro Assembler V1.37 build -260352376 
                                                                                               Sun Sep 04 01:01:49 2016

Microchip Technology Omniscient Code Generator v1.37 (Free mode) build 201603110536
     1                           	processor	16F886
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	idataBANK1,global,class=CODE,delta=2
     6                           	psect	idataBANK3,global,class=CODE,delta=2
     7                           	psect	stringtext,global,reloc=256,class=STRCODE,delta=2
     8                           	psect	cinit,global,class=CODE,merge=1,delta=2
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    13                           	psect	dataBANK3,global,class=BANK3,space=1,delta=1
    14                           	psect	clrtext,global,class=CODE,delta=2
    15                           	psect	inittext,global,class=CODE,delta=2
    16                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    17                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    18                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    19                           	psect	maintext,global,class=CODE,split=1,delta=2
    20                           	psect	text1,local,class=CODE,merge=1,delta=2
    21                           	psect	text2,local,class=CODE,merge=1,delta=2
    22                           	psect	text3,local,class=CODE,merge=1,delta=2
    23                           	psect	text4,local,class=CODE,merge=1,delta=2
    24                           	psect	text5,local,class=CODE,merge=1,delta=2
    25                           	psect	text6,local,class=CODE,merge=1,delta=2
    26                           	psect	text7,local,class=CODE,merge=1,delta=2
    27                           	psect	text8,local,class=CODE,merge=1,delta=2
    28                           	psect	text9,local,class=CODE,merge=1,delta=2
    29                           	psect	text10,local,class=CODE,merge=1,delta=2
    30                           	psect	text11,local,class=CODE,merge=1,delta=2
    31                           	psect	text12,local,class=CODE,merge=1,delta=2
    32                           	psect	text13,local,class=CODE,merge=1,delta=2
    33                           	psect	text14,local,class=CODE,merge=1,delta=2
    34                           	psect	text15,local,class=CODE,merge=1,delta=2
    35                           	psect	text16,local,class=CODE,merge=1,delta=2
    36                           	psect	text17,local,class=CODE,merge=1,delta=2
    37                           	psect	text18,local,class=CODE,merge=1,delta=2
    38                           	psect	text19,local,class=CODE,merge=1,delta=2
    39                           	psect	text20,local,class=CODE,merge=1,delta=2
    40                           	psect	text21,local,class=CODE,merge=1,delta=2
    41                           	psect	text22,local,class=CODE,merge=1,delta=2
    42                           	psect	text23,local,class=CODE,merge=1,delta=2
    43                           	psect	text24,local,class=CODE,merge=1,delta=2
    44                           	psect	text25,local,class=CODE,merge=1,delta=2
    45                           	psect	text26,local,class=CODE,merge=1,delta=2
    46                           	psect	text27,local,class=CODE,merge=1,delta=2
    47                           	psect	text28,local,class=CODE,merge=1,delta=2
    48                           	psect	text29,local,class=CODE,merge=1,delta=2
    49                           	psect	text30,local,class=CODE,merge=1,delta=2
    50                           	psect	text31,local,class=CODE,merge=1,delta=2
    51                           	psect	text32,local,class=CODE,merge=1,delta=2
    52                           	psect	text33,local,class=CODE,merge=1,delta=2
    53                           	psect	text34,local,class=CODE,merge=1,delta=2
    54                           	psect	text35,local,class=CODE,merge=1,delta=2
    55                           	psect	text36,local,class=CODE,merge=1,delta=2
    56                           	psect	text37,local,class=CODE,merge=1,delta=2
    57                           	psect	text38,local,class=CODE,merge=1,delta=2
    58                           	psect	text39,local,class=CODE,merge=1,delta=2
    59                           	psect	text40,local,class=CODE,merge=1,delta=2
    60                           	psect	text41,local,class=CODE,merge=1,delta=2
    61                           	psect	text42,local,class=CODE,merge=1,delta=2
    62                           	psect	text43,local,class=CODE,merge=1,delta=2
    63                           	psect	text44,local,class=CODE,merge=1,delta=2
    64                           	psect	text45,local,class=CODE,merge=1,delta=2
    65                           	psect	text46,local,class=CODE,merge=1,delta=2
    66                           	psect	text47,local,class=CODE,merge=1,delta=2
    67                           	psect	text48,local,class=CODE,merge=1,delta=2
    68                           	psect	text49,local,class=CODE,merge=1,delta=2
    69                           	psect	text50,local,class=CODE,merge=1,delta=2
    70                           	psect	text51,local,class=CODE,merge=1,delta=2
    71                           	psect	text52,local,class=CODE,merge=1,delta=2
    72                           	psect	text53,local,class=CODE,merge=1,delta=2
    73                           	psect	text54,local,class=CODE,merge=1,delta=2
    74                           	psect	text55,local,class=CODE,merge=1,delta=2
    75                           	psect	text56,local,class=CODE,merge=1,delta=2
    76                           	psect	text57,local,class=CODE,merge=1,delta=2
    77                           	dabs	1,0x7E,2
    78  0000                     	;# 
    79  0001                     	;# 
    80  0002                     	;# 
    81  0003                     	;# 
    82  0004                     	;# 
    83  0005                     	;# 
    84  0006                     	;# 
    85  0007                     	;# 
    86  0009                     	;# 
    87  000A                     	;# 
    88  000B                     	;# 
    89  000C                     	;# 
    90  000D                     	;# 
    91  000E                     	;# 
    92  000E                     	;# 
    93  000F                     	;# 
    94  0010                     	;# 
    95  0011                     	;# 
    96  0012                     	;# 
    97  0013                     	;# 
    98  0014                     	;# 
    99  0015                     	;# 
   100  0015                     	;# 
   101  0016                     	;# 
   102  0017                     	;# 
   103  0018                     	;# 
   104  0019                     	;# 
   105  001A                     	;# 
   106  001B                     	;# 
   107  001B                     	;# 
   108  001C                     	;# 
   109  001D                     	;# 
   110  001E                     	;# 
   111  001F                     	;# 
   112  0081                     	;# 
   113  0085                     	;# 
   114  0086                     	;# 
   115  0087                     	;# 
   116  0089                     	;# 
   117  008C                     	;# 
   118  008D                     	;# 
   119  008E                     	;# 
   120  008F                     	;# 
   121  0090                     	;# 
   122  0091                     	;# 
   123  0092                     	;# 
   124  0093                     	;# 
   125  0093                     	;# 
   126  0093                     	;# 
   127  0094                     	;# 
   128  0095                     	;# 
   129  0096                     	;# 
   130  0097                     	;# 
   131  0098                     	;# 
   132  0099                     	;# 
   133  009A                     	;# 
   134  009B                     	;# 
   135  009C                     	;# 
   136  009D                     	;# 
   137  009E                     	;# 
   138  009F                     	;# 
   139  0105                     	;# 
   140  0107                     	;# 
   141  0108                     	;# 
   142  0109                     	;# 
   143  010C                     	;# 
   144  010C                     	;# 
   145  010D                     	;# 
   146  010E                     	;# 
   147  010F                     	;# 
   148  0185                     	;# 
   149  0187                     	;# 
   150  0188                     	;# 
   151  0189                     	;# 
   152  018C                     	;# 
   153  018D                     	;# 
   154  0000                     	;# 
   155  0001                     	;# 
   156  0002                     	;# 
   157  0003                     	;# 
   158  0004                     	;# 
   159  0005                     	;# 
   160  0006                     	;# 
   161  0007                     	;# 
   162  0009                     	;# 
   163  000A                     	;# 
   164  000B                     	;# 
   165  000C                     	;# 
   166  000D                     	;# 
   167  000E                     	;# 
   168  000E                     	;# 
   169  000F                     	;# 
   170  0010                     	;# 
   171  0011                     	;# 
   172  0012                     	;# 
   173  0013                     	;# 
   174  0014                     	;# 
   175  0015                     	;# 
   176  0015                     	;# 
   177  0016                     	;# 
   178  0017                     	;# 
   179  0018                     	;# 
   180  0019                     	;# 
   181  001A                     	;# 
   182  001B                     	;# 
   183  001B                     	;# 
   184  001C                     	;# 
   185  001D                     	;# 
   186  001E                     	;# 
   187  001F                     	;# 
   188  0081                     	;# 
   189  0085                     	;# 
   190  0086                     	;# 
   191  0087                     	;# 
   192  0089                     	;# 
   193  008C                     	;# 
   194  008D                     	;# 
   195  008E                     	;# 
   196  008F                     	;# 
   197  0090                     	;# 
   198  0091                     	;# 
   199  0092                     	;# 
   200  0093                     	;# 
   201  0093                     	;# 
   202  0093                     	;# 
   203  0094                     	;# 
   204  0095                     	;# 
   205  0096                     	;# 
   206  0097                     	;# 
   207  0098                     	;# 
   208  0099                     	;# 
   209  009A                     	;# 
   210  009B                     	;# 
   211  009C                     	;# 
   212  009D                     	;# 
   213  009E                     	;# 
   214  009F                     	;# 
   215  0105                     	;# 
   216  0107                     	;# 
   217  0108                     	;# 
   218  0109                     	;# 
   219  010C                     	;# 
   220  010C                     	;# 
   221  010D                     	;# 
   222  010E                     	;# 
   223  010F                     	;# 
   224  0185                     	;# 
   225  0187                     	;# 
   226  0188                     	;# 
   227  0189                     	;# 
   228  018C                     	;# 
   229  018D                     	;# 
   230                           
   231                           	psect	idataBANK0
   232  0003                     __pidataBANK0:	
   233                           
   234                           ;initializer for _cur_x
   235  0003  3402               	retlw	2
   236                           
   237                           	psect	idataBANK1
   238  1F12                     __pidataBANK1:	
   239                           
   240                           ;initializer for _randx
   241  1F12  3401               	retlw	1
   242  1F13  3400               	retlw	0
   243  1F14  3400               	retlw	0
   244  1F15  3400               	retlw	0
   245                           
   246                           	psect	idataBANK3
   247  1F9F                     __pidataBANK3:	
   248                           
   249                           ;initializer for _g_char_info
   250  1F9F  3400               	retlw	0
   251  1FA0  3402               	retlw	2
   252  1FA1  3402               	retlw	2
   253  1FA2  3402               	retlw	2
   254  1FA3  3404               	retlw	4
   255  1FA4  3402               	retlw	2
   256  1FA5  3406               	retlw	6
   257  1FA6  3404               	retlw	4
   258  1FA7  340A               	retlw	10
   259  1FA8  3404               	retlw	4
   260  1FA9  340E               	retlw	14
   261  1FAA  3401               	retlw	1
   262  1FAB  340F               	retlw	15
   263  1FAC  3404               	retlw	4
   264  1FAD  3413               	retlw	19
   265  1FAE  3401               	retlw	1
   266  1FAF  3414               	retlw	20
   267  1FB0  3404               	retlw	4
   268                           
   269                           	psect	stringtext
   270  0800                     __pstringtext:	
   271  0800                     stringtab:	
   272  0800                     __stringtab:	
   273                           
   274                           ;	String table - string pointers are 2 bytes each
   275  0800  1BFF               	btfsc	btemp+1,7
   276  0801  280A               	ljmp	stringcode
   277  0802  1383               	bcf	3,7
   278  0803  187F               	btfsc	btemp+1,0
   279  0804  1783               	bsf	3,7
   280  0805  0800               	movf	0,w
   281  0806  0A84               	incf	4,f
   282  0807  1903               	skipnz
   283  0808  0AFF               	incf	btemp+1,f
   284  0809  0008               	return
   285  080A                     stringcode:	
   286  080A  087F               	movf	btemp+1,w
   287  080B  397F               	andlw	127
   288  080C  008A               	movwf	10
   289  080D  0804               	movf	4,w
   290  080E  0A84               	incf	4,f
   291  080F  1903               	skipnz
   292  0810  0AFF               	incf	btemp+1,f
   293  0811  0082               	movwf	2
   294  0812                     __stringbase:	
   295  0812                     __end_of__stringtab:	
   296  0812                     _dpowers:	
   297  0812  3401               	retlw	1
   298  0813  3400               	retlw	0
   299  0814  340A               	retlw	10
   300  0815  3400               	retlw	0
   301  0816  3464               	retlw	100
   302  0817  3400               	retlw	0
   303  0818  34E8               	retlw	232
   304  0819  3403               	retlw	3
   305  081A  3410               	retlw	16
   306  081B  3427               	retlw	39
   307  081C                     __end_of_dpowers:	
   308  081C                     _hexpowers:	
   309  081C  3401               	retlw	1
   310  081D  3400               	retlw	0
   311  081E  3410               	retlw	16
   312  081F  3400               	retlw	0
   313  0820  3400               	retlw	0
   314  0821  3401               	retlw	1
   315  0822  3400               	retlw	0
   316  0823  3410               	retlw	16
   317  0824                     __end_of_hexpowers:	
   318  0824                     _g_matrix4x4:	
   319  0824  3402               	retlw	2
   320  0825  3402               	retlw	2
   321  0826  3402               	retlw	2
   322  0827  3402               	retlw	2
   323  0828  3400               	retlw	0
   324  0829  340F               	retlw	15
   325  082A  3400               	retlw	0
   326  082B  3400               	retlw	0
   327  082C  3406               	retlw	6
   328  082D  3403               	retlw	3
   329  082E  3400               	retlw	0
   330  082F  3400               	retlw	0
   331  0830  3402               	retlw	2
   332  0831  3406               	retlw	6
   333  0832  3404               	retlw	4
   334  0833  3400               	retlw	0
   335  0834  3403               	retlw	3
   336  0835  3406               	retlw	6
   337  0836  3400               	retlw	0
   338  0837  3400               	retlw	0
   339  0838  3402               	retlw	2
   340  0839  3403               	retlw	3
   341  083A  3401               	retlw	1
   342  083B  3400               	retlw	0
   343  083C  3400               	retlw	0
   344  083D  3407               	retlw	7
   345  083E  3404               	retlw	4
   346  083F  3400               	retlw	0
   347  0840  3406               	retlw	6
   348  0841  3402               	retlw	2
   349  0842  3402               	retlw	2
   350  0843  3400               	retlw	0
   351  0844  3401               	retlw	1
   352  0845  3407               	retlw	7
   353  0846  3400               	retlw	0
   354  0847  3400               	retlw	0
   355  0848  3402               	retlw	2
   356  0849  3402               	retlw	2
   357  084A  3403               	retlw	3
   358  084B  3400               	retlw	0
   359  084C  3400               	retlw	0
   360  084D  3407               	retlw	7
   361  084E  3401               	retlw	1
   362  084F  3400               	retlw	0
   363  0850  3403               	retlw	3
   364  0851  3402               	retlw	2
   365  0852  3402               	retlw	2
   366  0853  3400               	retlw	0
   367  0854  3404               	retlw	4
   368  0855  3407               	retlw	7
   369  0856  3400               	retlw	0
   370  0857  3400               	retlw	0
   371  0858  3402               	retlw	2
   372  0859  3402               	retlw	2
   373  085A  3406               	retlw	6
   374  085B  3400               	retlw	0
   375  085C  3403               	retlw	3
   376  085D  3403               	retlw	3
   377  085E  3400               	retlw	0
   378  085F  3400               	retlw	0
   379  0860  3400               	retlw	0
   380  0861  3406               	retlw	6
   381  0862  3402               	retlw	2
   382  0863  3400               	retlw	0
   383  0864  3400               	retlw	0
   384  0865  3403               	retlw	3
   385  0866  3402               	retlw	2
   386  0867  3400               	retlw	0
   387  0868  3402               	retlw	2
   388  0869  3403               	retlw	3
   389  086A  3400               	retlw	0
   390  086B  3400               	retlw	0
   391  086C  3402               	retlw	2
   392  086D  3406               	retlw	6
   393  086E  3400               	retlw	0
   394  086F  3400               	retlw	0
   395  0870  3402               	retlw	2
   396  0871  3407               	retlw	7
   397  0872  3402               	retlw	2
   398  0873  3400               	retlw	0
   399  0874  3407               	retlw	7
   400  0875  3402               	retlw	2
   401  0876  3402               	retlw	2
   402  0877  3400               	retlw	0
   403  0878  3404               	retlw	4
   404  0879  3407               	retlw	7
   405  087A  3404               	retlw	4
   406  087B  3400               	retlw	0
   407  087C  3402               	retlw	2
   408  087D  3402               	retlw	2
   409  087E  3407               	retlw	7
   410  087F  3400               	retlw	0
   411  0880  3401               	retlw	1
   412  0881  3407               	retlw	7
   413  0882  3401               	retlw	1
   414  0883  3400               	retlw	0
   415  0884                     __end_of_g_matrix4x4:	
   416  000C                     _PIR1bits	set	12
   417  0018                     _RCSTAbits	set	24
   418  0019                     _TXREG	set	25
   419  0018                     _CARRY	set	24
   420  005F                     _GIE	set	95
   421  005E                     _PEIE	set	94
   422  0029                     _RA1	set	41
   423  002A                     _RA2	set	42
   424  002B                     _RA3	set	43
   425  0099                     _SPBRG	set	153
   426  0085                     _TRISAbits	set	133
   427  0098                     _TXSTAbits	set	152
   428  0465                     _RCIE	set	1125
   429  010D                     _EEADR	set	269
   430  010C                     _EEDATA	set	268
   431  0188                     _ANSELbits	set	392
   432  018C                     _EECON1	set	396
   433  018D                     _EECON2	set	397
   434  0C60                     _RD	set	3168
   435  0C61                     _WR	set	3169
   436  0C62                     _WREN	set	3170
   437  0884                     STR_73:	
   438  0884  3463               	retlw	99	;'c'
   439  0885  3468               	retlw	104	;'h'
   440  0886  346F               	retlw	111	;'o'
   441  0887  3473               	retlw	115	;'s'
   442  0888  3465               	retlw	101	;'e'
   443  0889  346E               	retlw	110	;'n'
   444  088A  3420               	retlw	32	;' '
   445  088B  3473               	retlw	115	;'s'
   446  088C  3475               	retlw	117	;'u'
   447  088D  3462               	retlw	98	;'b'
   448  088E  345F               	retlw	95	;'_'
   449  088F  3469               	retlw	105	;'i'
   450  0890  346E               	retlw	110	;'n'
   451  0891  3464               	retlw	100	;'d'
   452  0892  3465               	retlw	101	;'e'
   453  0893  3478               	retlw	120	;'x'
   454  0894  3420               	retlw	32	;' '
   455  0895  343D               	retlw	61	;'='
   456  0896  3420               	retlw	32	;' '
   457  0897  3425               	retlw	37	;'%'
   458  0898  3464               	retlw	100	;'d'
   459  0899  342C               	retlw	44	;','
   460  089A  3420               	retlw	32	;' '
   461  089B  3474               	retlw	116	;'t'
   462  089C  3465               	retlw	101	;'e'
   463  089D  346D               	retlw	109	;'m'
   464  089E  3470               	retlw	112	;'p'
   465  089F  345F               	retlw	95	;'_'
   466  08A0  3470               	retlw	112	;'p'
   467  08A1  3472               	retlw	114	;'r'
   468  08A2  3465               	retlw	101	;'e'
   469  08A3  345F               	retlw	95	;'_'
   470  08A4  3478               	retlw	120	;'x'
   471  08A5  3420               	retlw	32	;' '
   472  08A6  343D               	retlw	61	;'='
   473  08A7  3420               	retlw	32	;' '
   474  08A8  3425               	retlw	37	;'%'
   475  08A9  3464               	retlw	100	;'d'
   476  08AA  342C               	retlw	44	;','
   477  08AB  3420               	retlw	32	;' '
   478  08AC  3474               	retlw	116	;'t'
   479  08AD  3465               	retlw	101	;'e'
   480  08AE  346D               	retlw	109	;'m'
   481  08AF  3470               	retlw	112	;'p'
   482  08B0  345F               	retlw	95	;'_'
   483  08B1  3470               	retlw	112	;'p'
   484  08B2  3472               	retlw	114	;'r'
   485  08B3  3465               	retlw	101	;'e'
   486  08B4  345F               	retlw	95	;'_'
   487  08B5  3472               	retlw	114	;'r'
   488  08B6  3469               	retlw	105	;'i'
   489  08B7  3473               	retlw	115	;'s'
   490  08B8  346B               	retlw	107	;'k'
   491  08B9  3420               	retlw	32	;' '
   492  08BA  343D               	retlw	61	;'='
   493  08BB  3420               	retlw	32	;' '
   494  08BC  3425               	retlw	37	;'%'
   495  08BD  3464               	retlw	100	;'d'
   496  08BE  340D               	retlw	13
   497  08BF  340A               	retlw	10
   498  08C0  3400               	retlw	0
   499  08C1                     STR_34:	
   500  08C1  343D               	retlw	61	;'='
   501  08C2  343D               	retlw	61	;'='
   502  08C3  343D               	retlw	61	;'='
   503  08C4  343D               	retlw	61	;'='
   504  08C5  343D               	retlw	61	;'='
   505  08C6  343D               	retlw	61	;'='
   506  08C7  343D               	retlw	61	;'='
   507  08C8  343D               	retlw	61	;'='
   508  08C9  343D               	retlw	61	;'='
   509  08CA  343D               	retlw	61	;'='
   510  08CB  343D               	retlw	61	;'='
   511  08CC  343D               	retlw	61	;'='
   512  08CD  343D               	retlw	61	;'='
   513  08CE  343D               	retlw	61	;'='
   514  08CF  3469               	retlw	105	;'i'
   515  08D0  3473               	retlw	115	;'s'
   516  08D1  345F               	retlw	95	;'_'
   517  08D2  3476               	retlw	118	;'v'
   518  08D3  3461               	retlw	97	;'a'
   519  08D4  346C               	retlw	108	;'l'
   520  08D5  3469               	retlw	105	;'i'
   521  08D6  3464               	retlw	100	;'d'
   522  08D7  343D               	retlw	61	;'='
   523  08D8  343D               	retlw	61	;'='
   524  08D9  343D               	retlw	61	;'='
   525  08DA  343D               	retlw	61	;'='
   526  08DB  343D               	retlw	61	;'='
   527  08DC  343D               	retlw	61	;'='
   528  08DD  343D               	retlw	61	;'='
   529  08DE  343D               	retlw	61	;'='
   530  08DF  343D               	retlw	61	;'='
   531  08E0  343D               	retlw	61	;'='
   532  08E1  343D               	retlw	61	;'='
   533  08E2  343D               	retlw	61	;'='
   534  08E3  340D               	retlw	13
   535  08E4  340A               	retlw	10
   536  08E5  3400               	retlw	0
   537  08E6                     STR_30:	
   538  08E6  343D               	retlw	61	;'='
   539  08E7  343D               	retlw	61	;'='
   540  08E8  343D               	retlw	61	;'='
   541  08E9  343D               	retlw	61	;'='
   542  08EA  343D               	retlw	61	;'='
   543  08EB  343D               	retlw	61	;'='
   544  08EC  343D               	retlw	61	;'='
   545  08ED  343D               	retlw	61	;'='
   546  08EE  343D               	retlw	61	;'='
   547  08EF  343D               	retlw	61	;'='
   548  08F0  343D               	retlw	61	;'='
   549  08F1  343D               	retlw	61	;'='
   550  08F2  343D               	retlw	61	;'='
   551  08F3  343D               	retlw	61	;'='
   552  08F4  3468               	retlw	104	;'h'
   553  08F5  3469               	retlw	105	;'i'
   554  08F6  3474               	retlw	116	;'t'
   555  08F7  345F               	retlw	95	;'_'
   556  08F8  346C               	retlw	108	;'l'
   557  08F9  3461               	retlw	97	;'a'
   558  08FA  346E               	retlw	110	;'n'
   559  08FB  3464               	retlw	100	;'d'
   560  08FC  343D               	retlw	61	;'='
   561  08FD  343D               	retlw	61	;'='
   562  08FE  343D               	retlw	61	;'='
   563  08FF  343D               	retlw	61	;'='
   564  0900  343D               	retlw	61	;'='
   565  0901  343D               	retlw	61	;'='
   566  0902  343D               	retlw	61	;'='
   567  0903  343D               	retlw	61	;'='
   568  0904  343D               	retlw	61	;'='
   569  0905  343D               	retlw	61	;'='
   570  0906  343D               	retlw	61	;'='
   571  0907  343D               	retlw	61	;'='
   572  0908  340D               	retlw	13
   573  0909  340A               	retlw	10
   574  090A  3400               	retlw	0
   575  090B                     STR_2:	
   576  090B  343C               	retlw	60	;'<'
   577  090C  343C               	retlw	60	;'<'
   578  090D  343C               	retlw	60	;'<'
   579  090E  343C               	retlw	60	;'<'
   580  090F  343C               	retlw	60	;'<'
   581  0910  343C               	retlw	60	;'<'
   582  0911  343C               	retlw	60	;'<'
   583  0912  343C               	retlw	60	;'<'
   584  0913  343C               	retlw	60	;'<'
   585  0914  343C               	retlw	60	;'<'
   586  0915  343C               	retlw	60	;'<'
   587  0916  343C               	retlw	60	;'<'
   588  0917  343C               	retlw	60	;'<'
   589  0918  343C               	retlw	60	;'<'
   590  0919  343C               	retlw	60	;'<'
   591  091A  343C               	retlw	60	;'<'
   592  091B  343C               	retlw	60	;'<'
   593  091C  343C               	retlw	60	;'<'
   594  091D  343C               	retlw	60	;'<'
   595  091E  343C               	retlw	60	;'<'
   596  091F  344D               	retlw	77	;'M'
   597  0920  3441               	retlw	65	;'A'
   598  0921  3454               	retlw	84	;'T'
   599  0922  3452               	retlw	82	;'R'
   600  0923  3449               	retlw	73	;'I'
   601  0924  3458               	retlw	88	;'X'
   602  0925  3434               	retlw	52	;'4'
   603  0926  3478               	retlw	120	;'x'
   604  0927  3434               	retlw	52	;'4'
   605  0928  340D               	retlw	13
   606  0929  340A               	retlw	10
   607  092A  3400               	retlw	0
   608  092B                     STR_8:	
   609  092B  343C               	retlw	60	;'<'
   610  092C  343C               	retlw	60	;'<'
   611  092D  343C               	retlw	60	;'<'
   612  092E  343C               	retlw	60	;'<'
   613  092F  343C               	retlw	60	;'<'
   614  0930  343C               	retlw	60	;'<'
   615  0931  343C               	retlw	60	;'<'
   616  0932  343C               	retlw	60	;'<'
   617  0933  343C               	retlw	60	;'<'
   618  0934  343C               	retlw	60	;'<'
   619  0935  343C               	retlw	60	;'<'
   620  0936  343C               	retlw	60	;'<'
   621  0937  343C               	retlw	60	;'<'
   622  0938  343C               	retlw	60	;'<'
   623  0939  343C               	retlw	60	;'<'
   624  093A  343C               	retlw	60	;'<'
   625  093B  343C               	retlw	60	;'<'
   626  093C  343C               	retlw	60	;'<'
   627  093D  343C               	retlw	60	;'<'
   628  093E  343C               	retlw	60	;'<'
   629  093F  344D               	retlw	77	;'M'
   630  0940  3441               	retlw	65	;'A'
   631  0941  3454               	retlw	84	;'T'
   632  0942  3452               	retlw	82	;'R'
   633  0943  3449               	retlw	73	;'I'
   634  0944  3458               	retlw	88	;'X'
   635  0945  3438               	retlw	56	;'8'
   636  0946  3478               	retlw	120	;'x'
   637  0947  3438               	retlw	56	;'8'
   638  0948  340D               	retlw	13
   639  0949  340A               	retlw	10
   640  094A  3400               	retlw	0
   641  094B                     STR_77:	
   642  094B  3469               	retlw	105	;'i'
   643  094C  346E               	retlw	110	;'n'
   644  094D  3464               	retlw	100	;'d'
   645  094E  3465               	retlw	101	;'e'
   646  094F  3478               	retlw	120	;'x'
   647  0950  3420               	retlw	32	;' '
   648  0951  343D               	retlw	61	;'='
   649  0952  3420               	retlw	32	;' '
   650  0953  3425               	retlw	37	;'%'
   651  0954  3464               	retlw	100	;'d'
   652  0955  342C               	retlw	44	;','
   653  0956  3420               	retlw	32	;' '
   654  0957  3473               	retlw	115	;'s'
   655  0958  3475               	retlw	117	;'u'
   656  0959  3462               	retlw	98	;'b'
   657  095A  345F               	retlw	95	;'_'
   658  095B  3469               	retlw	105	;'i'
   659  095C  346E               	retlw	110	;'n'
   660  095D  3464               	retlw	100	;'d'
   661  095E  3465               	retlw	101	;'e'
   662  095F  3478               	retlw	120	;'x'
   663  0960  3420               	retlw	32	;' '
   664  0961  343D               	retlw	61	;'='
   665  0962  3420               	retlw	32	;' '
   666  0963  3425               	retlw	37	;'%'
   667  0964  3464               	retlw	100	;'d'
   668  0965  340D               	retlw	13
   669  0966  340A               	retlw	10
   670  0967  3400               	retlw	0
   671  0968                     STR_43:	
   672  0968  3441               	retlw	65	;'A'
   673  0969  344C               	retlw	76	;'L'
   674  096A  3449               	retlw	73	;'I'
   675  096B  3447               	retlw	71	;'G'
   676  096C  344E               	retlw	78	;'N'
   677  096D  345F               	retlw	95	;'_'
   678  096E  3452               	retlw	82	;'R'
   679  096F  3449               	retlw	73	;'I'
   680  0970  3447               	retlw	71	;'G'
   681  0971  3448               	retlw	72	;'H'
   682  0972  3454               	retlw	84	;'T'
   683  0973  345F               	retlw	95	;'_'
   684  0974  344F               	retlw	79	;'O'
   685  0975  3456               	retlw	86	;'V'
   686  0976  3445               	retlw	69	;'E'
   687  0977  3452               	retlw	82	;'R'
   688  0978  345F               	retlw	95	;'_'
   689  0979  3442               	retlw	66	;'B'
   690  097A  344F               	retlw	79	;'O'
   691  097B  3455               	retlw	85	;'U'
   692  097C  344E               	retlw	78	;'N'
   693  097D  3444               	retlw	68	;'D'
   694  097E  3441               	retlw	65	;'A'
   695  097F  3452               	retlw	82	;'R'
   696  0980  3459               	retlw	89	;'Y'
   697  0981  340D               	retlw	13
   698  0982  340A               	retlw	10
   699  0983  3400               	retlw	0
   700  0984                     STR_55:	
   701  0984  346C               	retlw	108	;'l'
   702  0985  3467               	retlw	103	;'g'
   703  0986  345F               	retlw	95	;'_'
   704  0987  3467               	retlw	103	;'g'
   705  0988  3465               	retlw	101	;'e'
   706  0989  3474               	retlw	116	;'t'
   707  098A  345F               	retlw	95	;'_'
   708  098B  3468               	retlw	104	;'h'
   709  098C  3465               	retlw	101	;'e'
   710  098D  3469               	retlw	105	;'i'
   711  098E  3467               	retlw	103	;'g'
   712  098F  3468               	retlw	104	;'h'
   713  0990  3474               	retlw	116	;'t'
   714  0991  3420               	retlw	32	;' '
   715  0992  3468               	retlw	104	;'h'
   716  0993  3465               	retlw	101	;'e'
   717  0994  3469               	retlw	105	;'i'
   718  0995  3467               	retlw	103	;'g'
   719  0996  3468               	retlw	104	;'h'
   720  0997  3474               	retlw	116	;'t'
   721  0998  3420               	retlw	32	;' '
   722  0999  343D               	retlw	61	;'='
   723  099A  3420               	retlw	32	;' '
   724  099B  3425               	retlw	37	;'%'
   725  099C  3464               	retlw	100	;'d'
   726  099D  340D               	retlw	13
   727  099E  340A               	retlw	10
   728  099F  3400               	retlw	0
   729  09A0                     STR_56:	
   730  09A0  346C               	retlw	108	;'l'
   731  09A1  3467               	retlw	103	;'g'
   732  09A2  345F               	retlw	95	;'_'
   733  09A3  3467               	retlw	103	;'g'
   734  09A4  3465               	retlw	101	;'e'
   735  09A5  3474               	retlw	116	;'t'
   736  09A6  345F               	retlw	95	;'_'
   737  09A7  3468               	retlw	104	;'h'
   738  09A8  3465               	retlw	101	;'e'
   739  09A9  3469               	retlw	105	;'i'
   740  09AA  3467               	retlw	103	;'g'
   741  09AB  3468               	retlw	104	;'h'
   742  09AC  3474               	retlw	116	;'t'
   743  09AD  345F               	retlw	95	;'_'
   744  09AE  3461               	retlw	97	;'a'
   745  09AF  3466               	retlw	102	;'f'
   746  09B0  3474               	retlw	116	;'t'
   747  09B1  3465               	retlw	101	;'e'
   748  09B2  3472               	retlw	114	;'r'
   749  09B3  345F               	retlw	95	;'_'
   750  09B4  346D               	retlw	109	;'m'
   751  09B5  3465               	retlw	101	;'e'
   752  09B6  3472               	retlw	114	;'r'
   753  09B7  3467               	retlw	103	;'g'
   754  09B8  3465               	retlw	101	;'e'
   755  09B9  340D               	retlw	13
   756  09BA  340A               	retlw	10
   757  09BB  3400               	retlw	0
   758  09BC                     STR_64:	
   759  09BC  343D               	retlw	61	;'='
   760  09BD  343D               	retlw	61	;'='
   761  09BE  343D               	retlw	61	;'='
   762  09BF  3466               	retlw	102	;'f'
   763  09C0  3469               	retlw	105	;'i'
   764  09C1  346E               	retlw	110	;'n'
   765  09C2  3464               	retlw	100	;'d'
   766  09C3  345F               	retlw	95	;'_'
   767  09C4  3462               	retlw	98	;'b'
   768  09C5  3465               	retlw	101	;'e'
   769  09C6  3473               	retlw	115	;'s'
   770  09C7  3474               	retlw	116	;'t'
   771  09C8  345F               	retlw	95	;'_'
   772  09C9  3473               	retlw	115	;'s'
   773  09CA  346F               	retlw	111	;'o'
   774  09CB  346C               	retlw	108	;'l'
   775  09CC  3475               	retlw	117	;'u'
   776  09CD  3474               	retlw	116	;'t'
   777  09CE  3469               	retlw	105	;'i'
   778  09CF  346F               	retlw	111	;'o'
   779  09D0  346E               	retlw	110	;'n'
   780  09D1  343D               	retlw	61	;'='
   781  09D2  343D               	retlw	61	;'='
   782  09D3  343D               	retlw	61	;'='
   783  09D4  340D               	retlw	13
   784  09D5  340A               	retlw	10
   785  09D6  3400               	retlw	0
   786  09D7                     STR_42:	
   787  09D7  3441               	retlw	65	;'A'
   788  09D8  344C               	retlw	76	;'L'
   789  09D9  3449               	retlw	73	;'I'
   790  09DA  3447               	retlw	71	;'G'
   791  09DB  344E               	retlw	78	;'N'
   792  09DC  345F               	retlw	95	;'_'
   793  09DD  344C               	retlw	76	;'L'
   794  09DE  3445               	retlw	69	;'E'
   795  09DF  3446               	retlw	70	;'F'
   796  09E0  3454               	retlw	84	;'T'
   797  09E1  345F               	retlw	95	;'_'
   798  09E2  344F               	retlw	79	;'O'
   799  09E3  3456               	retlw	86	;'V'
   800  09E4  3445               	retlw	69	;'E'
   801  09E5  3452               	retlw	82	;'R'
   802  09E6  345F               	retlw	95	;'_'
   803  09E7  3442               	retlw	66	;'B'
   804  09E8  344F               	retlw	79	;'O'
   805  09E9  3455               	retlw	85	;'U'
   806  09EA  344E               	retlw	78	;'N'
   807  09EB  3444               	retlw	68	;'D'
   808  09EC  3441               	retlw	65	;'A'
   809  09ED  3452               	retlw	82	;'R'
   810  09EE  3459               	retlw	89	;'Y'
   811  09EF  340D               	retlw	13
   812  09F0  340A               	retlw	10
   813  09F1  3400               	retlw	0
   814  09F2                     STR_28:	
   815  09F2  3464               	retlw	100	;'d'
   816  09F3  3465               	retlw	101	;'e'
   817  09F4  346C               	retlw	108	;'l'
   818  09F5  3465               	retlw	101	;'e'
   819  09F6  3474               	retlw	116	;'t'
   820  09F7  3465               	retlw	101	;'e'
   821  09F8  345F               	retlw	95	;'_'
   822  09F9  346D               	retlw	109	;'m'
   823  09FA  3461               	retlw	97	;'a'
   824  09FB  3474               	retlw	116	;'t'
   825  09FC  3472               	retlw	114	;'r'
   826  09FD  3469               	retlw	105	;'i'
   827  09FE  3478               	retlw	120	;'x'
   828  09FF  3420               	retlw	32	;' '
   829  0A00  3463               	retlw	99	;'c'
   830  0A01  346F               	retlw	111	;'o'
   831  0A02  3475               	retlw	117	;'u'
   832  0A03  346E               	retlw	110	;'n'
   833  0A04  3474               	retlw	116	;'t'
   834  0A05  3420               	retlw	32	;' '
   835  0A06  343D               	retlw	61	;'='
   836  0A07  3420               	retlw	32	;' '
   837  0A08  3425               	retlw	37	;'%'
   838  0A09  3464               	retlw	100	;'d'
   839  0A0A  340D               	retlw	13
   840  0A0B  340A               	retlw	10
   841  0A0C  3400               	retlw	0
   842  0A0D                     STR_31:	
   843  0A0D  3468               	retlw	104	;'h'
   844  0A0E  3469               	retlw	105	;'i'
   845  0A0F  3474               	retlw	116	;'t'
   846  0A10  3431               	retlw	49	;'1'
   847  0A11  3420               	retlw	32	;' '
   848  0A12  3472               	retlw	114	;'r'
   849  0A13  346F               	retlw	111	;'o'
   850  0A14  3477               	retlw	119	;'w'
   851  0A15  3420               	retlw	32	;' '
   852  0A16  343D               	retlw	61	;'='
   853  0A17  3420               	retlw	32	;' '
   854  0A18  3425               	retlw	37	;'%'
   855  0A19  3464               	retlw	100	;'d'
   856  0A1A  342C               	retlw	44	;','
   857  0A1B  3420               	retlw	32	;' '
   858  0A1C  3463               	retlw	99	;'c'
   859  0A1D  346F               	retlw	111	;'o'
   860  0A1E  346C               	retlw	108	;'l'
   861  0A1F  3420               	retlw	32	;' '
   862  0A20  343D               	retlw	61	;'='
   863  0A21  3420               	retlw	32	;' '
   864  0A22  3425               	retlw	37	;'%'
   865  0A23  3464               	retlw	100	;'d'
   866  0A24  340D               	retlw	13
   867  0A25  340A               	retlw	10
   868  0A26  3400               	retlw	0
   869  0A27                     STR_32:	
   870  0A27  3468               	retlw	104	;'h'
   871  0A28  3469               	retlw	105	;'i'
   872  0A29  3474               	retlw	116	;'t'
   873  0A2A  3432               	retlw	50	;'2'
   874  0A2B  3420               	retlw	32	;' '
   875  0A2C  3472               	retlw	114	;'r'
   876  0A2D  346F               	retlw	111	;'o'
   877  0A2E  3477               	retlw	119	;'w'
   878  0A2F  3420               	retlw	32	;' '
   879  0A30  343D               	retlw	61	;'='
   880  0A31  3420               	retlw	32	;' '
   881  0A32  3425               	retlw	37	;'%'
   882  0A33  3464               	retlw	100	;'d'
   883  0A34  342C               	retlw	44	;','
   884  0A35  3420               	retlw	32	;' '
   885  0A36  3463               	retlw	99	;'c'
   886  0A37  346F               	retlw	111	;'o'
   887  0A38  346C               	retlw	108	;'l'
   888  0A39  3420               	retlw	32	;' '
   889  0A3A  343D               	retlw	61	;'='
   890  0A3B  3420               	retlw	32	;' '
   891  0A3C  3425               	retlw	37	;'%'
   892  0A3D  3464               	retlw	100	;'d'
   893  0A3E  340D               	retlw	13
   894  0A3F  340A               	retlw	10
   895  0A40  3400               	retlw	0
   896  0A41                     STR_78:	
   897  0A41  3467               	retlw	103	;'g'
   898  0A42  345F               	retlw	95	;'_'
   899  0A43  3463               	retlw	99	;'c'
   900  0A44  3468               	retlw	104	;'h'
   901  0A45  3461               	retlw	97	;'a'
   902  0A46  3472               	retlw	114	;'r'
   903  0A47  345F               	retlw	95	;'_'
   904  0A48  3469               	retlw	105	;'i'
   905  0A49  346E               	retlw	110	;'n'
   906  0A4A  3466               	retlw	102	;'f'
   907  0A4B  346F               	retlw	111	;'o'
   908  0A4C  345F               	retlw	95	;'_'
   909  0A4D  3469               	retlw	105	;'i'
   910  0A4E  346E               	retlw	110	;'n'
   911  0A4F  3464               	retlw	100	;'d'
   912  0A50  3465               	retlw	101	;'e'
   913  0A51  3478               	retlw	120	;'x'
   914  0A52  3420               	retlw	32	;' '
   915  0A53  343D               	retlw	61	;'='
   916  0A54  3420               	retlw	32	;' '
   917  0A55  3425               	retlw	37	;'%'
   918  0A56  3464               	retlw	100	;'d'
   919  0A57  340D               	retlw	13
   920  0A58  340A               	retlw	10
   921  0A59  3400               	retlw	0
   922  0A5A                     STR_21:	
   923  0A5A  3465               	retlw	101	;'e'
   924  0A5B  3465               	retlw	101	;'e'
   925  0A5C  3470               	retlw	112	;'p'
   926  0A5D  3472               	retlw	114	;'r'
   927  0A5E  346F               	retlw	111	;'o'
   928  0A5F  346D               	retlw	109	;'m'
   929  0A60  345F               	retlw	95	;'_'
   930  0A61  3477               	retlw	119	;'w'
   931  0A62  3472               	retlw	114	;'r'
   932  0A63  3469               	retlw	105	;'i'
   933  0A64  3474               	retlw	116	;'t'
   934  0A65  3465               	retlw	101	;'e'
   935  0A66  345F               	retlw	95	;'_'
   936  0A67  3469               	retlw	105	;'i'
   937  0A68  346E               	retlw	110	;'n'
   938  0A69  3474               	retlw	116	;'t'
   939  0A6A  3420               	retlw	32	;' '
   940  0A6B  343D               	retlw	61	;'='
   941  0A6C  3420               	retlw	32	;' '
   942  0A6D  3425               	retlw	37	;'%'
   943  0A6E  3464               	retlw	100	;'d'
   944  0A6F  340D               	retlw	13
   945  0A70  340A               	retlw	10
   946  0A71  3400               	retlw	0
   947  0A72                     STR_26:	
   948  0A72  3442               	retlw	66	;'B'
   949  0A73  3465               	retlw	101	;'e'
   950  0A74  3466               	retlw	102	;'f'
   951  0A75  346F               	retlw	111	;'o'
   952  0A76  3472               	retlw	114	;'r'
   953  0A77  3465               	retlw	101	;'e'
   954  0A78  3420               	retlw	32	;' '
   955  0A79  3464               	retlw	100	;'d'
   956  0A7A  3465               	retlw	101	;'e'
   957  0A7B  346C               	retlw	108	;'l'
   958  0A7C  3465               	retlw	101	;'e'
   959  0A7D  3474               	retlw	116	;'t'
   960  0A7E  3465               	retlw	101	;'e'
   961  0A7F  3420               	retlw	32	;' '
   962  0A80  344D               	retlw	77	;'M'
   963  0A81  3441               	retlw	65	;'A'
   964  0A82  3454               	retlw	84	;'T'
   965  0A83  3452               	retlw	82	;'R'
   966  0A84  3449               	retlw	73	;'I'
   967  0A85  3458               	retlw	88	;'X'
   968  0A86  3438               	retlw	56	;'8'
   969  0A87  3478               	retlw	120	;'x'
   970  0A88  3438               	retlw	56	;'8'
   971  0A89  3400               	retlw	0
   972  0A8A                     STR_75:	
   973  0A8A  3470               	retlw	112	;'p'
   974  0A8B  3472               	retlw	114	;'r'
   975  0A8C  3469               	retlw	105	;'i'
   976  0A8D  346E               	retlw	110	;'n'
   977  0A8E  3474               	retlw	116	;'t'
   978  0A8F  3466               	retlw	102	;'f'
   979  0A90  345F               	retlw	95	;'_'
   980  0A91  3461               	retlw	97	;'a'
   981  0A92  346C               	retlw	108	;'l'
   982  0A93  346C               	retlw	108	;'l'
   983  0A94  345F               	retlw	95	;'_'
   984  0A95  344D               	retlw	77	;'M'
   985  0A96  3441               	retlw	65	;'A'
   986  0A97  3454               	retlw	84	;'T'
   987  0A98  3452               	retlw	82	;'R'
   988  0A99  3449               	retlw	73	;'I'
   989  0A9A  3458               	retlw	88	;'X'
   990  0A9B  3434               	retlw	52	;'4'
   991  0A9C  3478               	retlw	120	;'x'
   992  0A9D  3434               	retlw	52	;'4'
   993  0A9E  340D               	retlw	13
   994  0A9F  340A               	retlw	10
   995  0AA0  3400               	retlw	0
   996  0AA1                     STR_14:	
   997  0AA1  343C               	retlw	60	;'<'
   998  0AA2  343C               	retlw	60	;'<'
   999  0AA3  343C               	retlw	60	;'<'
  1000  0AA4  343C               	retlw	60	;'<'
  1001  0AA5  343C               	retlw	60	;'<'
  1002  0AA6  343C               	retlw	60	;'<'
  1003  0AA7  343C               	retlw	60	;'<'
  1004  0AA8  343C               	retlw	60	;'<'
  1005  0AA9  343C               	retlw	60	;'<'
  1006  0AAA  343C               	retlw	60	;'<'
  1007  0AAB  343C               	retlw	60	;'<'
  1008  0AAC  343C               	retlw	60	;'<'
  1009  0AAD  343C               	retlw	60	;'<'
  1010  0AAE  343C               	retlw	60	;'<'
  1011  0AAF  343C               	retlw	60	;'<'
  1012  0AB0  343C               	retlw	60	;'<'
  1013  0AB1  343C               	retlw	60	;'<'
  1014  0AB2  343C               	retlw	60	;'<'
  1015  0AB3  343C               	retlw	60	;'<'
  1016  0AB4  343C               	retlw	60	;'<'
  1017  0AB5  340D               	retlw	13
  1018  0AB6  340A               	retlw	10
  1019  0AB7  3400               	retlw	0
  1020  0AB8                     STR_6:	
  1021  0AB8  343E               	retlw	62	;'>'
  1022  0AB9  343E               	retlw	62	;'>'
  1023  0ABA  343E               	retlw	62	;'>'
  1024  0ABB  343E               	retlw	62	;'>'
  1025  0ABC  343E               	retlw	62	;'>'
  1026  0ABD  343E               	retlw	62	;'>'
  1027  0ABE  343E               	retlw	62	;'>'
  1028  0ABF  343E               	retlw	62	;'>'
  1029  0AC0  343E               	retlw	62	;'>'
  1030  0AC1  343E               	retlw	62	;'>'
  1031  0AC2  343E               	retlw	62	;'>'
  1032  0AC3  343E               	retlw	62	;'>'
  1033  0AC4  343E               	retlw	62	;'>'
  1034  0AC5  343E               	retlw	62	;'>'
  1035  0AC6  343E               	retlw	62	;'>'
  1036  0AC7  343E               	retlw	62	;'>'
  1037  0AC8  343E               	retlw	62	;'>'
  1038  0AC9  343E               	retlw	62	;'>'
  1039  0ACA  343E               	retlw	62	;'>'
  1040  0ACB  343E               	retlw	62	;'>'
  1041  0ACC  340D               	retlw	13
  1042  0ACD  340A               	retlw	10
  1043  0ACE  3400               	retlw	0
  1044  0ACF                     STR_22:	
  1045  0ACF  3465               	retlw	101	;'e'
  1046  0AD0  3465               	retlw	101	;'e'
  1047  0AD1  3470               	retlw	112	;'p'
  1048  0AD2  3472               	retlw	114	;'r'
  1049  0AD3  346F               	retlw	111	;'o'
  1050  0AD4  346D               	retlw	109	;'m'
  1051  0AD5  345F               	retlw	95	;'_'
  1052  0AD6  3472               	retlw	114	;'r'
  1053  0AD7  3465               	retlw	101	;'e'
  1054  0AD8  3461               	retlw	97	;'a'
  1055  0AD9  3464               	retlw	100	;'d'
  1056  0ADA  345F               	retlw	95	;'_'
  1057  0ADB  3469               	retlw	105	;'i'
  1058  0ADC  346E               	retlw	110	;'n'
  1059  0ADD  3474               	retlw	116	;'t'
  1060  0ADE  3420               	retlw	32	;' '
  1061  0ADF  343D               	retlw	61	;'='
  1062  0AE0  3420               	retlw	32	;' '
  1063  0AE1  3425               	retlw	37	;'%'
  1064  0AE2  3464               	retlw	100	;'d'
  1065  0AE3  340D               	retlw	13
  1066  0AE4  340A               	retlw	10
  1067  0AE5  3400               	retlw	0
  1068  0AE6                     STR_48:	
  1069  0AE6  3442               	retlw	66	;'B'
  1070  0AE7  3465               	retlw	101	;'e'
  1071  0AE8  3466               	retlw	102	;'f'
  1072  0AE9  346F               	retlw	111	;'o'
  1073  0AEA  3472               	retlw	114	;'r'
  1074  0AEB  3465               	retlw	101	;'e'
  1075  0AEC  3420               	retlw	32	;' '
  1076  0AED  346D               	retlw	109	;'m'
  1077  0AEE  3465               	retlw	101	;'e'
  1078  0AEF  3472               	retlw	114	;'r'
  1079  0AF0  3467               	retlw	103	;'g'
  1080  0AF1  3465               	retlw	101	;'e'
  1081  0AF2  3420               	retlw	32	;' '
  1082  0AF3  344D               	retlw	77	;'M'
  1083  0AF4  3441               	retlw	65	;'A'
  1084  0AF5  3454               	retlw	84	;'T'
  1085  0AF6  3452               	retlw	82	;'R'
  1086  0AF7  3449               	retlw	73	;'I'
  1087  0AF8  3458               	retlw	88	;'X'
  1088  0AF9  3438               	retlw	56	;'8'
  1089  0AFA  3478               	retlw	120	;'x'
  1090  0AFB  3438               	retlw	56	;'8'
  1091  0AFC  3400               	retlw	0
  1092  0AFD                     STR_27:	
  1093  0AFD  3441               	retlw	65	;'A'
  1094  0AFE  3466               	retlw	102	;'f'
  1095  0AFF  3474               	retlw	116	;'t'
  1096  0B00  3465               	retlw	101	;'e'
  1097  0B01  3472               	retlw	114	;'r'
  1098  0B02  3420               	retlw	32	;' '
  1099  0B03  3464               	retlw	100	;'d'
  1100  0B04  3465               	retlw	101	;'e'
  1101  0B05  346C               	retlw	108	;'l'
  1102  0B06  3465               	retlw	101	;'e'
  1103  0B07  3474               	retlw	116	;'t'
  1104  0B08  3465               	retlw	101	;'e'
  1105  0B09  3420               	retlw	32	;' '
  1106  0B0A  344D               	retlw	77	;'M'
  1107  0B0B  3441               	retlw	65	;'A'
  1108  0B0C  3454               	retlw	84	;'T'
  1109  0B0D  3452               	retlw	82	;'R'
  1110  0B0E  3449               	retlw	73	;'I'
  1111  0B0F  3458               	retlw	88	;'X'
  1112  0B10  3438               	retlw	56	;'8'
  1113  0B11  3478               	retlw	120	;'x'
  1114  0B12  3438               	retlw	56	;'8'
  1115  0B13  3400               	retlw	0
  1116  0B14                     STR_50:	
  1117  0B14  3441               	retlw	65	;'A'
  1118  0B15  3466               	retlw	102	;'f'
  1119  0B16  3474               	retlw	116	;'t'
  1120  0B17  3465               	retlw	101	;'e'
  1121  0B18  3472               	retlw	114	;'r'
  1122  0B19  3420               	retlw	32	;' '
  1123  0B1A  346D               	retlw	109	;'m'
  1124  0B1B  3465               	retlw	101	;'e'
  1125  0B1C  3472               	retlw	114	;'r'
  1126  0B1D  3467               	retlw	103	;'g'
  1127  0B1E  3465               	retlw	101	;'e'
  1128  0B1F  3420               	retlw	32	;' '
  1129  0B20  344D               	retlw	77	;'M'
  1130  0B21  3441               	retlw	65	;'A'
  1131  0B22  3454               	retlw	84	;'T'
  1132  0B23  3452               	retlw	82	;'R'
  1133  0B24  3449               	retlw	73	;'I'
  1134  0B25  3458               	retlw	88	;'X'
  1135  0B26  3438               	retlw	56	;'8'
  1136  0B27  3478               	retlw	120	;'x'
  1137  0B28  3438               	retlw	56	;'8'
  1138  0B29  3400               	retlw	0
  1139  0B2A                     STR_29:	
  1140  0B2A  346E               	retlw	110	;'n'
  1141  0B2B  3475               	retlw	117	;'u'
  1142  0B2C  346D               	retlw	109	;'m'
  1143  0B2D  3420               	retlw	32	;' '
  1144  0B2E  3466               	retlw	102	;'f'
  1145  0B2F  3475               	retlw	117	;'u'
  1146  0B30  346C               	retlw	108	;'l'
  1147  0B31  346C               	retlw	108	;'l'
  1148  0B32  3420               	retlw	32	;' '
  1149  0B33  3472               	retlw	114	;'r'
  1150  0B34  346F               	retlw	111	;'o'
  1151  0B35  3477               	retlw	119	;'w'
  1152  0B36  3473               	retlw	115	;'s'
  1153  0B37  3420               	retlw	32	;' '
  1154  0B38  343D               	retlw	61	;'='
  1155  0B39  3420               	retlw	32	;' '
  1156  0B3A  3425               	retlw	37	;'%'
  1157  0B3B  3464               	retlw	100	;'d'
  1158  0B3C  340D               	retlw	13
  1159  0B3D  340A               	retlw	10
  1160  0B3E  3400               	retlw	0
  1161  0B3F                     STR_70:	
  1162  0B3F  3472               	retlw	114	;'r'
  1163  0B40  3469               	retlw	105	;'i'
  1164  0B41  3473               	retlw	115	;'s'
  1165  0B42  346B               	retlw	107	;'k'
  1166  0B43  343A               	retlw	58	;':'
  1167  0B44  3420               	retlw	32	;' '
  1168  0B45  3428               	retlw	40	;'('
  1169  0B46  3425               	retlw	37	;'%'
  1170  0B47  3464               	retlw	100	;'d'
  1171  0B48  3429               	retlw	41	;')'
  1172  0B49  3420               	retlw	32	;' '
  1173  0B4A  343E               	retlw	62	;'>'
  1174  0B4B  3420               	retlw	32	;' '
  1175  0B4C  3428               	retlw	40	;'('
  1176  0B4D  3425               	retlw	37	;'%'
  1177  0B4E  3464               	retlw	100	;'d'
  1178  0B4F  3429               	retlw	41	;')'
  1179  0B50  340D               	retlw	13
  1180  0B51  340A               	retlw	10
  1181  0B52  3400               	retlw	0
  1182  0B53                     STR_68:	
  1183  0B53  3453               	retlw	83	;'S'
  1184  0B54  3474               	retlw	116	;'t'
  1185  0B55  3461               	retlw	97	;'a'
  1186  0B56  3472               	retlw	114	;'r'
  1187  0B57  3474               	retlw	116	;'t'
  1188  0B58  3420               	retlw	32	;' '
  1189  0B59  3465               	retlw	101	;'e'
  1190  0B5A  3476               	retlw	118	;'v'
  1191  0B5B  3461               	retlw	97	;'a'
  1192  0B5C  346C               	retlw	108	;'l'
  1193  0B5D  3475               	retlw	117	;'u'
  1194  0B5E  3461               	retlw	97	;'a'
  1195  0B5F  3474               	retlw	116	;'t'
  1196  0B60  3469               	retlw	105	;'i'
  1197  0B61  346F               	retlw	111	;'o'
  1198  0B62  346E               	retlw	110	;'n'
  1199  0B63  340D               	retlw	13
  1200  0B64  340A               	retlw	10
  1201  0B65  3400               	retlw	0
  1202  0B66                     STR_54:	
  1203  0B66  3472               	retlw	114	;'r'
  1204  0B67  3469               	retlw	105	;'i'
  1205  0B68  3467               	retlw	103	;'g'
  1206  0B69  3468               	retlw	104	;'h'
  1207  0B6A  3474               	retlw	116	;'t'
  1208  0B6B  345F               	retlw	95	;'_'
  1209  0B6C  346D               	retlw	109	;'m'
  1210  0B6D  346F               	retlw	111	;'o'
  1211  0B6E  3473               	retlw	115	;'s'
  1212  0B6F  3474               	retlw	116	;'t'
  1213  0B70  3420               	retlw	32	;' '
  1214  0B71  343D               	retlw	61	;'='
  1215  0B72  3420               	retlw	32	;' '
  1216  0B73  3425               	retlw	37	;'%'
  1217  0B74  3464               	retlw	100	;'d'
  1218  0B75  340D               	retlw	13
  1219  0B76  340A               	retlw	10
  1220  0B77  3400               	retlw	0
  1221  0B78                     STR_24:	
  1222  0B78  3472               	retlw	114	;'r'
  1223  0B79  346F               	retlw	111	;'o'
  1224  0B7A  3477               	retlw	119	;'w'
  1225  0B7B  3428               	retlw	40	;'('
  1226  0B7C  3425               	retlw	37	;'%'
  1227  0B7D  3464               	retlw	100	;'d'
  1228  0B7E  3429               	retlw	41	;')'
  1229  0B7F  3420               	retlw	32	;' '
  1230  0B80  3469               	retlw	105	;'i'
  1231  0B81  3473               	retlw	115	;'s'
  1232  0B82  3420               	retlw	32	;' '
  1233  0B83  3466               	retlw	102	;'f'
  1234  0B84  3475               	retlw	117	;'u'
  1235  0B85  346C               	retlw	108	;'l'
  1236  0B86  346C               	retlw	108	;'l'
  1237  0B87  340D               	retlw	13
  1238  0B88  340A               	retlw	10
  1239  0B89  3400               	retlw	0
  1240  0B8A                     STR_82:	
  1241  0B8A  3430               	retlw	48	;'0'
  1242  0B8B  3431               	retlw	49	;'1'
  1243  0B8C  3432               	retlw	50	;'2'
  1244  0B8D  3433               	retlw	51	;'3'
  1245  0B8E  3434               	retlw	52	;'4'
  1246  0B8F  3435               	retlw	53	;'5'
  1247  0B90  3436               	retlw	54	;'6'
  1248  0B91  3437               	retlw	55	;'7'
  1249  0B92  3438               	retlw	56	;'8'
  1250  0B93  3439               	retlw	57	;'9'
  1251  0B94  3441               	retlw	65	;'A'
  1252  0B95  3442               	retlw	66	;'B'
  1253  0B96  3443               	retlw	67	;'C'
  1254  0B97  3444               	retlw	68	;'D'
  1255  0B98  3445               	retlw	69	;'E'
  1256  0B99  3446               	retlw	70	;'F'
  1257  0B9A  3400               	retlw	0
  1258  0B9B                     STR_69:	
  1259  0B9B  3474               	retlw	116	;'t'
  1260  0B9C  3465               	retlw	101	;'e'
  1261  0B9D  346D               	retlw	109	;'m'
  1262  0B9E  3470               	retlw	112	;'p'
  1263  0B9F  345F               	retlw	95	;'_'
  1264  0BA0  3472               	retlw	114	;'r'
  1265  0BA1  3469               	retlw	105	;'i'
  1266  0BA2  3473               	retlw	115	;'s'
  1267  0BA3  346B               	retlw	107	;'k'
  1268  0BA4  3420               	retlw	32	;' '
  1269  0BA5  343D               	retlw	61	;'='
  1270  0BA6  3420               	retlw	32	;' '
  1271  0BA7  3425               	retlw	37	;'%'
  1272  0BA8  3464               	retlw	100	;'d'
  1273  0BA9  340D               	retlw	13
  1274  0BAA  340A               	retlw	10
  1275  0BAB  3400               	retlw	0
  1276  0BAC                     STR_53:	
  1277  0BAC  346C               	retlw	108	;'l'
  1278  0BAD  3465               	retlw	101	;'e'
  1279  0BAE  3466               	retlw	102	;'f'
  1280  0BAF  3474               	retlw	116	;'t'
  1281  0BB0  345F               	retlw	95	;'_'
  1282  0BB1  346D               	retlw	109	;'m'
  1283  0BB2  346F               	retlw	111	;'o'
  1284  0BB3  3473               	retlw	115	;'s'
  1285  0BB4  3474               	retlw	116	;'t'
  1286  0BB5  3420               	retlw	32	;' '
  1287  0BB6  343D               	retlw	61	;'='
  1288  0BB7  3420               	retlw	32	;' '
  1289  0BB8  3425               	retlw	37	;'%'
  1290  0BB9  3464               	retlw	100	;'d'
  1291  0BBA  340D               	retlw	13
  1292  0BBB  340A               	retlw	10
  1293  0BBC  3400               	retlw	0
  1294  0BBD                     STR_45:	
  1295  0BBD  3478               	retlw	120	;'x'
  1296  0BBE  3420               	retlw	32	;' '
  1297  0BBF  343D               	retlw	61	;'='
  1298  0BC0  3420               	retlw	32	;' '
  1299  0BC1  3425               	retlw	37	;'%'
  1300  0BC2  3464               	retlw	100	;'d'
  1301  0BC3  342C               	retlw	44	;','
  1302  0BC4  3420               	retlw	32	;' '
  1303  0BC5  3479               	retlw	121	;'y'
  1304  0BC6  3420               	retlw	32	;' '
  1305  0BC7  343D               	retlw	61	;'='
  1306  0BC8  3420               	retlw	32	;' '
  1307  0BC9  3425               	retlw	37	;'%'
  1308  0BCA  3464               	retlw	100	;'d'
  1309  0BCB  340D               	retlw	13
  1310  0BCC  340A               	retlw	10
  1311  0BCD  3400               	retlw	0
  1312  0BCE                     STR_63:	
  1313  0BCE  346E               	retlw	110	;'n'
  1314  0BCF  3475               	retlw	117	;'u'
  1315  0BD0  346D               	retlw	109	;'m'
  1316  0BD1  345F               	retlw	95	;'_'
  1317  0BD2  3468               	retlw	104	;'h'
  1318  0BD3  346F               	retlw	111	;'o'
  1319  0BD4  346C               	retlw	108	;'l'
  1320  0BD5  3465               	retlw	101	;'e'
  1321  0BD6  3420               	retlw	32	;' '
  1322  0BD7  343D               	retlw	61	;'='
  1323  0BD8  3420               	retlw	32	;' '
  1324  0BD9  3425               	retlw	37	;'%'
  1325  0BDA  3464               	retlw	100	;'d'
  1326  0BDB  340D               	retlw	13
  1327  0BDC  340A               	retlw	10
  1328  0BDD  3400               	retlw	0
  1329  0BDE                     STR_74:	
  1330  0BDE  3447               	retlw	71	;'G'
  1331  0BDF  3441               	retlw	65	;'A'
  1332  0BE0  344D               	retlw	77	;'M'
  1333  0BE1  3445               	retlw	69	;'E'
  1334  0BE2  3420               	retlw	32	;' '
  1335  0BE3  344F               	retlw	79	;'O'
  1336  0BE4  3456               	retlw	86	;'V'
  1337  0BE5  3445               	retlw	69	;'E'
  1338  0BE6  3452               	retlw	82	;'R'
  1339  0BE7  3421               	retlw	33	;'!'
  1340  0BE8  3421               	retlw	33	;'!'
  1341  0BE9  3421               	retlw	33	;'!'
  1342  0BEA  340D               	retlw	13
  1343  0BEB  340A               	retlw	10
  1344  0BEC  3400               	retlw	0
  1345  0BED                     STR_80:	
  1346  0BED  3468               	retlw	104	;'h'
  1347  0BEE  3469               	retlw	105	;'i'
  1348  0BEF  3474               	retlw	116	;'t'
  1349  0BF0  345F               	retlw	95	;'_'
  1350  0BF1  3472               	retlw	114	;'r'
  1351  0BF2  3465               	retlw	101	;'e'
  1352  0BF3  3473               	retlw	115	;'s'
  1353  0BF4  3420               	retlw	32	;' '
  1354  0BF5  343D               	retlw	61	;'='
  1355  0BF6  3420               	retlw	32	;' '
  1356  0BF7  3425               	retlw	37	;'%'
  1357  0BF8  3464               	retlw	100	;'d'
  1358  0BF9  340D               	retlw	13
  1359  0BFA  340A               	retlw	10
  1360  0BFB  3400               	retlw	0
  1361  0BFC                     STR_67:	
  1362  0BFC  3456               	retlw	86	;'V'
  1363  0BFD  3461               	retlw	97	;'a'
  1364  0BFE  346C               	retlw	108	;'l'
  1365  0BFF  3469               	retlw	105	;'i'
  1366  0C00  3464               	retlw	100	;'d'
  1367  0C01  3420               	retlw	32	;' '
  1368  0C02  3469               	retlw	105	;'i'
  1369  0C03  346E               	retlw	110	;'n'
  1370  0C04  3473               	retlw	115	;'s'
  1371  0C05  3474               	retlw	116	;'t'
  1372  0C06  3461               	retlw	97	;'a'
  1373  0C07  346E               	retlw	110	;'n'
  1374  0C08  3463               	retlw	99	;'c'
  1375  0C09  3465               	retlw	101	;'e'
  1376  0C0A  3400               	retlw	0
  1377  0C0B                     STR_65:	
  1378  0C0B  3441               	retlw	65	;'A'
  1379  0C0C  3466               	retlw	102	;'f'
  1380  0C0D  3474               	retlw	116	;'t'
  1381  0C0E  3465               	retlw	101	;'e'
  1382  0C0F  3472               	retlw	114	;'r'
  1383  0C10  3420               	retlw	32	;' '
  1384  0C11  3466               	retlw	102	;'f'
  1385  0C12  3461               	retlw	97	;'a'
  1386  0C13  346C               	retlw	108	;'l'
  1387  0C14  346C               	retlw	108	;'l'
  1388  0C15  3420               	retlw	32	;' '
  1389  0C16  346F               	retlw	111	;'o'
  1390  0C17  3466               	retlw	102	;'f'
  1391  0C18  3466               	retlw	102	;'f'
  1392  0C19  3400               	retlw	0
  1393  0C1A                     STR_35:	
  1394  0C1A  346E               	retlw	110	;'n'
  1395  0C1B  346F               	retlw	111	;'o'
  1396  0C1C  3474               	retlw	116	;'t'
  1397  0C1D  3420               	retlw	32	;' '
  1398  0C1E  3476               	retlw	118	;'v'
  1399  0C1F  3461               	retlw	97	;'a'
  1400  0C20  346C               	retlw	108	;'l'
  1401  0C21  3469               	retlw	105	;'i'
  1402  0C22  3464               	retlw	100	;'d'
  1403  0C23  3431               	retlw	49	;'1'
  1404  0C24  340D               	retlw	13
  1405  0C25  340A               	retlw	10
  1406  0C26  3400               	retlw	0
  1407  0C27                     STR_37:	
  1408  0C27  346E               	retlw	110	;'n'
  1409  0C28  346F               	retlw	111	;'o'
  1410  0C29  3474               	retlw	116	;'t'
  1411  0C2A  3420               	retlw	32	;' '
  1412  0C2B  3476               	retlw	118	;'v'
  1413  0C2C  3461               	retlw	97	;'a'
  1414  0C2D  346C               	retlw	108	;'l'
  1415  0C2E  3469               	retlw	105	;'i'
  1416  0C2F  3464               	retlw	100	;'d'
  1417  0C30  3432               	retlw	50	;'2'
  1418  0C31  340D               	retlw	13
  1419  0C32  340A               	retlw	10
  1420  0C33  3400               	retlw	0
  1421  0C34                     STR_39:	
  1422  0C34  346E               	retlw	110	;'n'
  1423  0C35  346F               	retlw	111	;'o'
  1424  0C36  3474               	retlw	116	;'t'
  1425  0C37  3420               	retlw	32	;' '
  1426  0C38  3476               	retlw	118	;'v'
  1427  0C39  3461               	retlw	97	;'a'
  1428  0C3A  346C               	retlw	108	;'l'
  1429  0C3B  3469               	retlw	105	;'i'
  1430  0C3C  3464               	retlw	100	;'d'
  1431  0C3D  3433               	retlw	51	;'3'
  1432  0C3E  340D               	retlw	13
  1433  0C3F  340A               	retlw	10
  1434  0C40  3400               	retlw	0
  1435  0C41                     STR_61:	
  1436  0C41  3473               	retlw	115	;'s'
  1437  0C42  3474               	retlw	116	;'t'
  1438  0C43  3461               	retlw	97	;'a'
  1439  0C44  3472               	retlw	114	;'r'
  1440  0C45  3474               	retlw	116	;'t'
  1441  0C46  3420               	retlw	32	;' '
  1442  0C47  343D               	retlw	61	;'='
  1443  0C48  3420               	retlw	32	;' '
  1444  0C49  3425               	retlw	37	;'%'
  1445  0C4A  3464               	retlw	100	;'d'
  1446  0C4B  340D               	retlw	13
  1447  0C4C  340A               	retlw	10
  1448  0C4D  3400               	retlw	0
  1449  0C4E                     STR_44:	
  1450  0C4E  3466               	retlw	102	;'f'
  1451  0C4F  3461               	retlw	97	;'a'
  1452  0C50  346C               	retlw	108	;'l'
  1453  0C51  346C               	retlw	108	;'l'
  1454  0C52  345F               	retlw	95	;'_'
  1455  0C53  346F               	retlw	111	;'o'
  1456  0C54  3466               	retlw	102	;'f'
  1457  0C55  3466               	retlw	102	;'f'
  1458  0C56  3431               	retlw	49	;'1'
  1459  0C57  340D               	retlw	13
  1460  0C58  340A               	retlw	10
  1461  0C59  3400               	retlw	0
  1462  0C5A                     STR_46:	
  1463  0C5A  3466               	retlw	102	;'f'
  1464  0C5B  3461               	retlw	97	;'a'
  1465  0C5C  346C               	retlw	108	;'l'
  1466  0C5D  346C               	retlw	108	;'l'
  1467  0C5E  345F               	retlw	95	;'_'
  1468  0C5F  346F               	retlw	111	;'o'
  1469  0C60  3466               	retlw	102	;'f'
  1470  0C61  3466               	retlw	102	;'f'
  1471  0C62  3432               	retlw	50	;'2'
  1472  0C63  340D               	retlw	13
  1473  0C64  340A               	retlw	10
  1474  0C65  3400               	retlw	0
  1475  0C66                     STR_76:	
  1476  0C66  3473               	retlw	115	;'s'
  1477  0C67  3469               	retlw	105	;'i'
  1478  0C68  347A               	retlw	122	;'z'
  1479  0C69  3465               	retlw	101	;'e'
  1480  0C6A  3420               	retlw	32	;' '
  1481  0C6B  343D               	retlw	61	;'='
  1482  0C6C  3420               	retlw	32	;' '
  1483  0C6D  3425               	retlw	37	;'%'
  1484  0C6E  3464               	retlw	100	;'d'
  1485  0C6F  340D               	retlw	13
  1486  0C70  340A               	retlw	10
  1487  0C71  3400               	retlw	0
  1488  0C72                     STR_62:	
  1489  0C72  3473               	retlw	115	;'s'
  1490  0C73  3474               	retlw	116	;'t'
  1491  0C74  346F               	retlw	111	;'o'
  1492  0C75  3470               	retlw	112	;'p'
  1493  0C76  3420               	retlw	32	;' '
  1494  0C77  343D               	retlw	61	;'='
  1495  0C78  3420               	retlw	32	;' '
  1496  0C79  3425               	retlw	37	;'%'
  1497  0C7A  3464               	retlw	100	;'d'
  1498  0C7B  340D               	retlw	13
  1499  0C7C  340A               	retlw	10
  1500  0C7D  3400               	retlw	0
  1501  0C7E                     STR_25:	
  1502  0C7E  3452               	retlw	82	;'R'
  1503  0C7F  346F               	retlw	111	;'o'
  1504  0C80  3477               	retlw	119	;'w'
  1505  0C81  3420               	retlw	32	;' '
  1506  0C82  3469               	retlw	105	;'i'
  1507  0C83  3473               	retlw	115	;'s'
  1508  0C84  3420               	retlw	32	;' '
  1509  0C85  3466               	retlw	102	;'f'
  1510  0C86  3475               	retlw	117	;'u'
  1511  0C87  346C               	retlw	108	;'l'
  1512  0C88  346C               	retlw	108	;'l'
  1513  0C89  3400               	retlw	0
  1514  0C8A                     STR_81:	
  1515  0C8A  344D               	retlw	77	;'M'
  1516  0C8B  3461               	retlw	97	;'a'
  1517  0C8C  3469               	retlw	105	;'i'
  1518  0C8D  346E               	retlw	110	;'n'
  1519  0C8E  3420               	retlw	32	;' '
  1520  0C8F  3473               	retlw	115	;'s'
  1521  0C90  3463               	retlw	99	;'c'
  1522  0C91  3472               	retlw	114	;'r'
  1523  0C92  3465               	retlw	101	;'e'
  1524  0C93  3465               	retlw	101	;'e'
  1525  0C94  346E               	retlw	110	;'n'
  1526  0C95  3400               	retlw	0
  1527  0C96                     STR_23:	
  1528  0C96  3472               	retlw	114	;'r'
  1529  0C97  346F               	retlw	111	;'o'
  1530  0C98  3477               	retlw	119	;'w'
  1531  0C99  3420               	retlw	32	;' '
  1532  0C9A  343D               	retlw	61	;'='
  1533  0C9B  3420               	retlw	32	;' '
  1534  0C9C  3425               	retlw	37	;'%'
  1535  0C9D  3458               	retlw	88	;'X'
  1536  0C9E  340D               	retlw	13
  1537  0C9F  340A               	retlw	10
  1538  0CA0  3400               	retlw	0
  1539  0CA1                     STR_58:	
  1540  0CA1  3472               	retlw	114	;'r'
  1541  0CA2  346F               	retlw	111	;'o'
  1542  0CA3  3477               	retlw	119	;'w'
  1543  0CA4  3420               	retlw	32	;' '
  1544  0CA5  343D               	retlw	61	;'='
  1545  0CA6  3420               	retlw	32	;' '
  1546  0CA7  3425               	retlw	37	;'%'
  1547  0CA8  3464               	retlw	100	;'d'
  1548  0CA9  340D               	retlw	13
  1549  0CAA  340A               	retlw	10
  1550  0CAB  3400               	retlw	0
  1551  0CAC                     STR_33:	
  1552  0CAC  346E               	retlw	110	;'n'
  1553  0CAD  346F               	retlw	111	;'o'
  1554  0CAE  3474               	retlw	116	;'t'
  1555  0CAF  3420               	retlw	32	;' '
  1556  0CB0  3468               	retlw	104	;'h'
  1557  0CB1  3469               	retlw	105	;'i'
  1558  0CB2  3474               	retlw	116	;'t'
  1559  0CB3  340D               	retlw	13
  1560  0CB4  340A               	retlw	10
  1561  0CB5  3400               	retlw	0
  1562  0CB6                     STR_41:	
  1563  0CB6  3476               	retlw	118	;'v'
  1564  0CB7  3461               	retlw	97	;'a'
  1565  0CB8  346C               	retlw	108	;'l'
  1566  0CB9  3469               	retlw	105	;'i'
  1567  0CBA  3464               	retlw	100	;'d'
  1568  0CBB  340D               	retlw	13
  1569  0CBC  340A               	retlw	10
  1570  0CBD  3400               	retlw	0
  1571  0CBE                     STR_72:	
  1572  0CBE  3443               	retlw	67	;'C'
  1573  0CBF  3468               	retlw	104	;'h'
  1574  0CC0  346F               	retlw	111	;'o'
  1575  0CC1  3473               	retlw	115	;'s'
  1576  0CC2  3465               	retlw	101	;'e'
  1577  0CC3  346E               	retlw	110	;'n'
  1578  0CC4  3400               	retlw	0
  1579  0CC5                     STR_1:	
  1580  0CC5  343A               	retlw	58	;':'
  1581  0CC6  340D               	retlw	13
  1582  0CC7  340A               	retlw	10
  1583  0CC8  3400               	retlw	0
  1584  0CC9                     STR_3:	
  1585  0CC9  342A               	retlw	42	;'*'
  1586  0CCA  3400               	retlw	0
  1587  0CCB                     STR_4:	
  1588  0CCB  345F               	retlw	95	;'_'
  1589  0CCC  3400               	retlw	0
  1590  0BEA                     
  1591                           ; #config settings
  1592  0000                     
  1593                           	psect	cinit
  1594  07D2                     start_initialization:	
  1595  07D2                     __initialization:	
  1596                           
  1597                           ; Clear objects allocated to BANK0
  1598  07D2  01EE               	clrf	__pbssBANK0& (0+127)
  1599                           
  1600                           ; Clear objects allocated to BANK1
  1601  07D3  1383               	bcf	3,7	;select IRP bank0
  1602  07D4  30A0               	movlw	low __pbssBANK1
  1603  07D5  0084               	movwf	4
  1604  07D6  30DD               	movlw	low (__pbssBANK1+61)
  1605  07D7  160A  158A  2733  120A  118A  	fcall	clear_ram0
  1606                           
  1607                           ; Initialize objects allocated to BANK3
  1608  07DC  1783               	bsf	3,7	;select IRP bank2
  1609  07DD  30A2               	movlw	low (__pdataBANK3+18)
  1610  07DE  00FD               	movwf	btemp+-1
  1611  07DF  301F               	movlw	high __pidataBANK3
  1612  07E0  00FE               	movwf	btemp
  1613  07E1  309F               	movlw	low __pidataBANK3
  1614  07E2  00FF               	movwf	btemp+1
  1615  07E3  3090               	movlw	low __pdataBANK3
  1616  07E4  0084               	movwf	4
  1617  07E5  160A  158A  276E  120A  118A  	fcall	init_ram0
  1618                           
  1619                           ; Initialize objects allocated to BANK1
  1620  07EA  1383               	bcf	3,7	;select IRP bank0
  1621  07EB  30E1               	movlw	low (__pdataBANK1+4)
  1622  07EC  00FD               	movwf	btemp+-1
  1623  07ED  301F               	movlw	high __pidataBANK1
  1624  07EE  00FE               	movwf	btemp
  1625  07EF  3012               	movlw	low __pidataBANK1
  1626  07F0  00FF               	movwf	btemp+1
  1627  07F1  30DD               	movlw	low __pdataBANK1
  1628  07F2  0084               	movwf	4
  1629  07F3  160A  158A  276E  120A  118A  	fcall	init_ram0
  1630                           
  1631                           ; Initialize objects allocated to BANK0
  1632  07F8  120A  118A  2003   	fcall	__pidataBANK0	;fetch initializer
  1633  07FB  00EF               	movwf	__pdataBANK0& (0+127)
  1634  07FC                     end_of_initialization:	
  1635                           ;End of C runtime variable initialization code
  1636                           
  1637  07FC                     __end_of__initialization:	
  1638  07FC  0183               	clrf	3
  1639  07FD  120A  118A  2BBC   	ljmp	_main	;jump to C main() function
  1640                           
  1641                           	psect	bssBANK0
  1642  006E                     __pbssBANK0:	
  1643  006E                     _g_char_info_index:	
  1644  006E                     	ds	1
  1645                           
  1646                           	psect	dataBANK0
  1647  006F                     __pdataBANK0:	
  1648  006F                     _cur_x:	
  1649  006F                     	ds	1
  1650                           
  1651                           	psect	bssBANK1
  1652  00A0                     __pbssBANK1:	
  1653  00A0                     USARTWriteInt@F1605:	
  1654  00A0                     	ds	5
  1655  00A5                     _Seed:	
  1656  00A5                     	ds	2
  1657  00A7                     _g_cur_matrix4x4:	
  1658  00A7                     	ds	2
  1659  00A9                     _temp_cur_matrix4x4:	
  1660  00A9                     	ds	2
  1661  00AB                     _cur_y:	
  1662  00AB                     	ds	1
  1663  00AC                     _g_char_info_sub_index:	
  1664  00AC                     	ds	1
  1665  00AD                     _g_debug:	
  1666  00AD                     	ds	32
  1667  00CD                     _g_matrix8x8:	
  1668  00CD                     	ds	8
  1669  00D5                     _temp_matrix8x8:	
  1670  00D5                     	ds	8
  1671                           
  1672                           	psect	dataBANK1
  1673  00DD                     __pdataBANK1:	
  1674  00DD                     _randx:	
  1675  00DD                     	ds	4
  1676                           
  1677                           	psect	dataBANK3
  1678  0190                     __pdataBANK3:	
  1679  0190                     _g_char_info:	
  1680  0190                     	ds	18
  1681                           
  1682                           	psect	clrtext
  1683  1F33                     clear_ram0:	
  1684                           ;	Called with FSR containing the base address, and
  1685                           ;	W with the last address+1
  1686                           
  1687  1F33  0064               	clrwdt	;clear the watchdog before getting into this loop
  1688  1F34                     clrloop0:	
  1689  1F34  0180               	clrf	0	;clear RAM location pointed to by FSR
  1690  1F35  0A84               	incf	4,f	;increment pointer
  1691  1F36  0604               	xorwf	4,w	;XOR with final address
  1692  1F37  1903               	btfsc	3,2	;have we reached the end yet?
  1693  1F38  3400               	retlw	0	;all done for this memory range, return
  1694  1F39  0604               	xorwf	4,w	;XOR again to restore value
  1695  1F3A  2F34               	goto	clrloop0	;do the next byte
  1696                           
  1697                           	psect	inittext
  1698  1F6A                     init_fetch0:	
  1699                           ;	Called with low address in FSR and high address in W
  1700                           
  1701  1F6A  087E               	movf	126,w
  1702  1F6B  008A               	movwf	10
  1703  1F6C  087F               	movf	127,w
  1704  1F6D  0082               	movwf	2
  1705  1F6E                     init_ram0:	
  1706                           ;Called with:
  1707                           ;	high address of idata address in btemp 
  1708                           ;	low address of idata address in btemp+1 
  1709                           ;	low address of data in FSR
  1710                           ;	high address + 1 of data in btemp-1
  1711                           
  1712  1F6E  276A  160A  158A   	fcall	init_fetch0
  1713  1F71  0080               	movwf	0
  1714  1F72  0A84               	incf	4,f
  1715  1F73  0804               	movf	4,w
  1716  1F74  067D               	xorwf	125,w
  1717  1F75  1903               	btfsc	3,2
  1718  1F76  3400               	retlw	0
  1719  1F77  0AFF               	incf	127,f
  1720  1F78  1903               	btfsc	3,2
  1721  1F79  0AFE               	incf	126,f
  1722  1F7A  2F6E               	goto	init_ram0
  1723                           
  1724                           	psect	cstackBANK1
  1725  00E1                     __pcstackBANK1:	
  1726  00E1                     ??_main:	
  1727                           
  1728                           ; 1 bytes @ 0x0
  1729  00E1                     	ds	4
  1730                           
  1731                           	psect	cstackCOMMON
  1732  0070                     __pcstackCOMMON:	
  1733  0070                     ?_USARTInit:	
  1734  0070                     ?_USARTWriteString:	
  1735                           ; 1 bytes @ 0x0
  1736                           
  1737  0070                     ?_eeprom_write:	
  1738                           ; 1 bytes @ 0x0
  1739                           
  1740  0070                     ?_eeprom_read:	
  1741                           ; 1 bytes @ 0x0
  1742                           
  1743  0070                     ??_eeprom_read:	
  1744                           ; 1 bytes @ 0x0
  1745                           
  1746  0070                     ?_memset:	
  1747                           ; 1 bytes @ 0x0
  1748                           
  1749  0070                     ?_memcpy:	
  1750                           ; 1 bytes @ 0x0
  1751                           
  1752  0070                     ?_srand:	
  1753                           ; 1 bytes @ 0x0
  1754                           
  1755  0070                     ?_setbit:	
  1756                           ; 1 bytes @ 0x0
  1757                           
  1758  0070                     ?_getbit:	
  1759                           ; 1 bytes @ 0x0
  1760                           
  1761  0070                     ?_SPI1_write:	
  1762                           ; 1 bytes @ 0x0
  1763                           
  1764  0070                     ??_SPI1_write:	
  1765                           ; 1 bytes @ 0x0
  1766                           
  1767  0070                     ?_max7219_init1:	
  1768                           ; 1 bytes @ 0x0
  1769                           
  1770  0070                     ?_dbg_init:	
  1771                           ; 1 bytes @ 0x0
  1772                           
  1773  0070                     ?_hal_print_MATRIX7219:	
  1774                           ; 1 bytes @ 0x0
  1775                           
  1776  0070                     ?_hal_print_MATRIX8x8:	
  1777                           ; 1 bytes @ 0x0
  1778                           
  1779  0070                     ?_hal_print_Screen:	
  1780                           ; 1 bytes @ 0x0
  1781                           
  1782  0070                     ?_lg_clear_matrix:	
  1783                           ; 1 bytes @ 0x0
  1784                           
  1785  0070                     ?_lg_delete_matrix_row:	
  1786                           ; 1 bytes @ 0x0
  1787                           
  1788  0070                     ?_lg_delete_matrix:	
  1789                           ; 1 bytes @ 0x0
  1790                           
  1791  0070                     ?_lg_get_num_removed_rows:	
  1792                           ; 1 bytes @ 0x0
  1793                           
  1794  0070                     ?_lg_is_row_empty:	
  1795                           ; 1 bytes @ 0x0
  1796                           
  1797  0070                     ?_lg_char_info_index_rand:	
  1798                           ; 1 bytes @ 0x0
  1799                           
  1800  0070                     ?_lg_get_height:	
  1801                           ; 1 bytes @ 0x0
  1802                           
  1803  0070                     ?_lg_get_holes_after_merge:	
  1804                           ; 1 bytes @ 0x0
  1805                           
  1806  0070                     ?_lg_find_best_solution:	
  1807                           ; 1 bytes @ 0x0
  1808                           
  1809  0070                     ?_main_init:	
  1810                           ; 1 bytes @ 0x0
  1811                           
  1812  0070                     ?_USARTWriteChar:	
  1813                           ; 1 bytes @ 0x0
  1814                           
  1815  0070                     ??_USARTWriteChar:	
  1816                           ; 1 bytes @ 0x0
  1817                           
  1818  0070                     ?_main:	
  1819                           ; 1 bytes @ 0x0
  1820                           
  1821  0070                     ?___lwdiv:	
  1822                           ; 2 bytes @ 0x0
  1823                           
  1824  0070                     ?___lmul:	
  1825                           ; 2 bytes @ 0x0
  1826                           
  1827  0070                     setbit@at:	
  1828                           ; 4 bytes @ 0x0
  1829                           
  1830  0070                     lg_delete_matrix_row@row:	
  1831                           ; 1 bytes @ 0x0
  1832                           
  1833  0070                     lg_is_row_empty@row:	
  1834                           ; 1 bytes @ 0x0
  1835                           
  1836  0070                     USARTWriteChar@ch:	
  1837                           ; 1 bytes @ 0x0
  1838                           
  1839  0070                     eeprom_write@value:	
  1840                           ; 1 bytes @ 0x0
  1841                           
  1842  0070                     memcpy@s1:	
  1843                           ; 1 bytes @ 0x0
  1844                           
  1845  0070                     getbit@byte:	
  1846                           ; 1 bytes @ 0x0
  1847                           
  1848  0070                     USARTInit@baud_rate:	
  1849                           ; 2 bytes @ 0x0
  1850                           
  1851  0070                     ___lwdiv@divisor:	
  1852                           ; 2 bytes @ 0x0
  1853                           
  1854  0070                     memset@c:	
  1855                           ; 2 bytes @ 0x0
  1856                           
  1857  0070                     srand@x:	
  1858                           ; 2 bytes @ 0x0
  1859                           
  1860  0070                     ___lmul@multiplier:	
  1861                           ; 2 bytes @ 0x0
  1862                           
  1863                           
  1864                           ; 4 bytes @ 0x0
  1865  0070                     	ds	1
  1866  0071                     ??_USARTWriteString:	
  1867  0071                     ??_eeprom_write:	
  1868                           ; 1 bytes @ 0x1
  1869                           
  1870  0071                     ??_lg_delete_matrix_row:	
  1871                           ; 1 bytes @ 0x1
  1872                           
  1873  0071                     ??_lg_is_row_empty:	
  1874                           ; 1 bytes @ 0x1
  1875                           
  1876  0071                     setbit@value:	
  1877                           ; 1 bytes @ 0x1
  1878                           
  1879  0071                     SPI1_write@data:	
  1880                           ; 1 bytes @ 0x1
  1881                           
  1882  0071                     lg_is_row_empty@matrix:	
  1883                           ; 1 bytes @ 0x1
  1884                           
  1885  0071                     eeprom_read@addr:	
  1886                           ; 1 bytes @ 0x1
  1887                           
  1888  0071                     memcpy@n:	
  1889                           ; 1 bytes @ 0x1
  1890                           
  1891                           
  1892                           ; 2 bytes @ 0x1
  1893  0071                     	ds	1
  1894  0072                     ??_USARTInit:	
  1895  0072                     ??_srand:	
  1896                           ; 1 bytes @ 0x2
  1897                           
  1898  0072                     ??_setbit:	
  1899                           ; 1 bytes @ 0x2
  1900                           
  1901  0072                     ??_dbg_init:	
  1902                           ; 1 bytes @ 0x2
  1903                           
  1904  0072                     getbit@at:	
  1905                           ; 1 bytes @ 0x2
  1906                           
  1907  0072                     SPI1_write@mask:	
  1908                           ; 1 bytes @ 0x2
  1909                           
  1910  0072                     USARTWriteString@str:	
  1911                           ; 1 bytes @ 0x2
  1912                           
  1913  0072                     eeprom_write@addr:	
  1914                           ; 1 bytes @ 0x2
  1915                           
  1916  0072                     ___lwdiv@dividend:	
  1917                           ; 1 bytes @ 0x2
  1918                           
  1919  0072                     memset@n:	
  1920                           ; 2 bytes @ 0x2
  1921                           
  1922                           
  1923                           ; 2 bytes @ 0x2
  1924  0072                     	ds	1
  1925  0073                     ??_memcpy:	
  1926  0073                     ??_getbit:	
  1927                           ; 1 bytes @ 0x3
  1928                           
  1929  0073                     setbit@byte:	
  1930                           ; 1 bytes @ 0x3
  1931                           
  1932  0073                     SPI1_write@i:	
  1933                           ; 1 bytes @ 0x3
  1934                           
  1935                           
  1936                           ; 1 bytes @ 0x3
  1937  0073                     	ds	1
  1938  0074                     ??_memset:	
  1939  0074                     ?_Write_Byte:	
  1940                           ; 1 bytes @ 0x4
  1941                           
  1942  0074                     ??___lwdiv:	
  1943                           ; 1 bytes @ 0x4
  1944                           
  1945  0074                     setbit@temp:	
  1946                           ; 1 bytes @ 0x4
  1947                           
  1948  0074                     Write_Byte@myValue:	
  1949                           ; 1 bytes @ 0x4
  1950                           
  1951  0074                     lg_delete_matrix_row@matrix:	
  1952                           ; 1 bytes @ 0x4
  1953                           
  1954  0074                     memcpy@d1:	
  1955                           ; 1 bytes @ 0x4
  1956                           
  1957  0074                     ___lmul@multiplicand:	
  1958                           ; 1 bytes @ 0x4
  1959                           
  1960                           
  1961                           ; 4 bytes @ 0x4
  1962  0074                     	ds	1
  1963  0075                     ?_set_matrix_bit:	
  1964  0075                     ??_Write_Byte:	
  1965                           ; 1 bytes @ 0x5
  1966                           
  1967  0075                     set_matrix_bit@row:	
  1968                           ; 1 bytes @ 0x5
  1969                           
  1970  0075                     Write_Byte@myColumn:	
  1971                           ; 1 bytes @ 0x5
  1972                           
  1973  0075                     lg_delete_matrix_row@i:	
  1974                           ; 1 bytes @ 0x5
  1975                           
  1976  0075                     memcpy@d:	
  1977                           ; 1 bytes @ 0x5
  1978                           
  1979  0075                     memset@p1:	
  1980                           ; 1 bytes @ 0x5
  1981                           
  1982  0075                     getbit@temp:	
  1983                           ; 1 bytes @ 0x5
  1984                           
  1985  0075                     ___lwdiv@quotient:	
  1986                           ; 2 bytes @ 0x5
  1987                           
  1988                           
  1989                           ; 2 bytes @ 0x5
  1990  0075                     	ds	1
  1991  0076                     ??_max7219_init1:	
  1992  0076                     ??_hal_print_MATRIX7219:	
  1993                           ; 1 bytes @ 0x6
  1994                           
  1995  0076                     set_matrix_bit@col:	
  1996                           ; 1 bytes @ 0x6
  1997                           
  1998  0076                     memcpy@s:	
  1999                           ; 1 bytes @ 0x6
  2000                           
  2001  0076                     memset@p:	
  2002                           ; 1 bytes @ 0x6
  2003                           
  2004                           
  2005                           ; 1 bytes @ 0x6
  2006  0076                     	ds	1
  2007  0077                     ?_get_matrix_bit:	
  2008  0077                     set_matrix_bit@value:	
  2009                           ; 1 bytes @ 0x7
  2010                           
  2011  0077                     ___lwdiv@counter:	
  2012                           ; 1 bytes @ 0x7
  2013                           
  2014  0077                     get_matrix_bit@byte:	
  2015                           ; 1 bytes @ 0x7
  2016                           
  2017                           
  2018                           ; 2 bytes @ 0x7
  2019  0077                     	ds	1
  2020  0078                     ??_set_matrix_bit:	
  2021  0078                     ??___lmul:	
  2022                           ; 1 bytes @ 0x8
  2023                           
  2024  0078                     ?___lwmod:	
  2025                           ; 1 bytes @ 0x8
  2026                           
  2027  0078                     hal_print_MATRIX7219@matrix7219:	
  2028                           ; 2 bytes @ 0x8
  2029                           
  2030  0078                     ___lwmod@divisor:	
  2031                           ; 1 bytes @ 0x8
  2032                           
  2033                           
  2034                           ; 2 bytes @ 0x8
  2035  0078                     	ds	1
  2036  0079                     get_matrix_bit@row:	
  2037  0079                     hal_print_MATRIX7219@col:	
  2038                           ; 1 bytes @ 0x9
  2039                           
  2040  0079                     ___lmul@product:	
  2041                           ; 1 bytes @ 0x9
  2042                           
  2043                           
  2044                           ; 4 bytes @ 0x9
  2045  0079                     	ds	1
  2046  007A                     set_matrix_bit@byte:	
  2047  007A                     get_matrix_bit@col:	
  2048                           ; 1 bytes @ 0xA
  2049                           
  2050  007A                     ___lwmod@dividend:	
  2051                           ; 1 bytes @ 0xA
  2052                           
  2053                           
  2054                           ; 2 bytes @ 0xA
  2055  007A                     	ds	1
  2056  007B                     ??_get_matrix_bit:	
  2057                           
  2058                           ; 1 bytes @ 0xB
  2059  007B                     	ds	1
  2060  007C                     ?_hal_MATRIX8x8_to_MATRIX7219:	
  2061  007C                     ??_lg_clear:	
  2062                           ; 1 bytes @ 0xC
  2063                           
  2064  007C                     ??_lg_merge1:	
  2065                           ; 1 bytes @ 0xC
  2066                           
  2067  007C                     ??___lwmod:	
  2068                           ; 1 bytes @ 0xC
  2069                           
  2070  007C                     hal_MATRIX8x8_to_MATRIX7219@matrix7219:	
  2071                           ; 1 bytes @ 0xC
  2072                           
  2073                           
  2074                           ; 1 bytes @ 0xC
  2075  007C                     	ds	1
  2076  007D                     ??_hal_print_MATRIX8x8:	
  2077  007D                     ??___awmod:	
  2078                           ; 1 bytes @ 0xD
  2079                           
  2080  007D                     ___lwmod@counter:	
  2081                           ; 1 bytes @ 0xD
  2082                           
  2083                           
  2084                           ; 1 bytes @ 0xD
  2085  007D                     	ds	1
  2086  007E                     ??_hal_print_Screen:	
  2087  007E                     ??_lg_clear_matrix:	
  2088                           ; 1 bytes @ 0xE
  2089                           
  2090  007E                     ??_lg_char_info_index_rand:	
  2091                           ; 1 bytes @ 0xE
  2092                           
  2093  007E                     ??_main_init:	
  2094                           ; 1 bytes @ 0xE
  2095                           
  2096  007E                     ??___wmul:	
  2097                           ; 1 bytes @ 0xE
  2098                           
  2099                           
  2100                           	psect	cstackBANK0
  2101  0020                     __pcstackBANK0:	
  2102                           ; 1 bytes @ 0xE
  2103                           
  2104  0020                     ??_hal_MATRIX8x8_to_MATRIX7219:	
  2105  0020                     ?_lg_clear:	
  2106                           ; 1 bytes @ 0x0
  2107                           
  2108  0020                     ?_lg_merge1:	
  2109                           ; 1 bytes @ 0x0
  2110                           
  2111  0020                     ?_sprintf:	
  2112                           ; 1 bytes @ 0x0
  2113                           
  2114  0020                     ?_rand:	
  2115                           ; 2 bytes @ 0x0
  2116                           
  2117  0020                     lg_clear@y:	
  2118                           ; 2 bytes @ 0x0
  2119                           
  2120  0020                     lg_merge1@y:	
  2121                           ; 1 bytes @ 0x0
  2122                           
  2123  0020                     sprintf@f:	
  2124                           ; 1 bytes @ 0x0
  2125                           
  2126                           
  2127                           ; 2 bytes @ 0x0
  2128  0020                     	ds	1
  2129  0021                     lg_clear@matrix4x4:	
  2130  0021                     lg_merge1@matrix4x4:	
  2131                           ; 2 bytes @ 0x1
  2132                           
  2133                           
  2134                           ; 2 bytes @ 0x1
  2135  0021                     	ds	1
  2136  0022                     ??_rand:	
  2137  0022                     hal_MATRIX8x8_to_MATRIX7219@matrix8x8:	
  2138                           ; 1 bytes @ 0x2
  2139                           
  2140                           
  2141                           ; 1 bytes @ 0x2
  2142  0022                     	ds	1
  2143  0023                     hal_MATRIX8x8_to_MATRIX7219@mask:	
  2144  0023                     lg_clear@matrix8x8:	
  2145                           ; 1 bytes @ 0x3
  2146                           
  2147  0023                     lg_merge1@matrix8x8_in:	
  2148                           ; 1 bytes @ 0x3
  2149                           
  2150                           
  2151                           ; 1 bytes @ 0x3
  2152  0023                     	ds	1
  2153  0024                     hal_MATRIX8x8_to_MATRIX7219@row:	
  2154  0024                     lg_clear@x:	
  2155                           ; 1 bytes @ 0x4
  2156                           
  2157  0024                     lg_merge1@matrix8x8_out:	
  2158                           ; 1 bytes @ 0x4
  2159                           
  2160                           
  2161                           ; 1 bytes @ 0x4
  2162  0024                     	ds	1
  2163  0025                     hal_MATRIX8x8_to_MATRIX7219@col:	
  2164  0025                     lg_clear@row:	
  2165                           ; 1 bytes @ 0x5
  2166                           
  2167  0025                     lg_merge1@len:	
  2168                           ; 1 bytes @ 0x5
  2169                           
  2170                           
  2171                           ; 2 bytes @ 0x5
  2172  0025                     	ds	1
  2173  0026                     hal_print_MATRIX8x8@matrix88:	
  2174  0026                     lg_clear@col:	
  2175                           ; 1 bytes @ 0x6
  2176                           
  2177                           
  2178                           ; 1 bytes @ 0x6
  2179  0026                     	ds	1
  2180  0027                     ?___awmod:	
  2181  0027                     lg_merge1@x:	
  2182                           ; 2 bytes @ 0x7
  2183                           
  2184  0027                     ___awmod@divisor:	
  2185                           ; 1 bytes @ 0x7
  2186                           
  2187  0027                     hal_print_MATRIX8x8@matrix7219:	
  2188                           ; 2 bytes @ 0x7
  2189                           
  2190                           
  2191                           ; 8 bytes @ 0x7
  2192  0027                     	ds	1
  2193  0028                     ??_sprintf:	
  2194  0028                     lg_merge1@row:	
  2195                           ; 1 bytes @ 0x8
  2196                           
  2197                           
  2198                           ; 1 bytes @ 0x8
  2199  0028                     	ds	1
  2200  0029                     lg_merge1@col:	
  2201  0029                     ___awmod@dividend:	
  2202                           ; 1 bytes @ 0x9
  2203                           
  2204                           
  2205                           ; 2 bytes @ 0x9
  2206  0029                     	ds	2
  2207  002B                     sprintf@idx:	
  2208  002B                     ___awmod@counter:	
  2209                           ; 1 bytes @ 0xB
  2210                           
  2211                           
  2212                           ; 1 bytes @ 0xB
  2213  002B                     	ds	1
  2214  002C                     sprintf@ap:	
  2215  002C                     ___awmod@sign:	
  2216                           ; 1 bytes @ 0xC
  2217                           
  2218                           
  2219                           ; 1 bytes @ 0xC
  2220  002C                     	ds	1
  2221  002D                     sprintf@prec:	
  2222                           
  2223                           ; 1 bytes @ 0xD
  2224  002D                     	ds	1
  2225  002E                     sprintf@flag:	
  2226                           
  2227                           ; 1 bytes @ 0xE
  2228  002E                     	ds	1
  2229  002F                     sprintf@val:	
  2230                           
  2231                           ; 2 bytes @ 0xF
  2232  002F                     	ds	2
  2233  0031                     sprintf@c:	
  2234                           
  2235                           ; 1 bytes @ 0x11
  2236  0031                     	ds	1
  2237  0032                     sprintf@sp:	
  2238                           
  2239                           ; 1 bytes @ 0x12
  2240  0032                     	ds	1
  2241  0033                     ?_dbg_print_MATRIX4x4:	
  2242  0033                     ?_dbg_print_MATRIX8x8:	
  2243                           ; 1 bytes @ 0x13
  2244                           
  2245  0033                     ?_eeprom_write_int:	
  2246                           ; 1 bytes @ 0x13
  2247                           
  2248  0033                     ?_lg_hit_land:	
  2249                           ; 1 bytes @ 0x13
  2250                           
  2251  0033                     ?_lg_is_valid:	
  2252                           ; 1 bytes @ 0x13
  2253                           
  2254  0033                     ?_lg_is_left_boundary:	
  2255                           ; 1 bytes @ 0x13
  2256                           
  2257  0033                     ?_lg_is_right_boundary:	
  2258                           ; 1 bytes @ 0x13
  2259                           
  2260  0033                     ?_lg_fall_off:	
  2261                           ; 1 bytes @ 0x13
  2262                           
  2263  0033                     ??_lg_get_height:	
  2264                           ; 1 bytes @ 0x13
  2265                           
  2266  0033                     ?_lg_get_height_after_merge:	
  2267                           ; 1 bytes @ 0x13
  2268                           
  2269  0033                     ??_lg_get_holes_after_merge:	
  2270                           ; 1 bytes @ 0x13
  2271                           
  2272  0033                     ?_eeprom_read_int:	
  2273                           ; 1 bytes @ 0x13
  2274                           
  2275  0033                     ?_lg_get_num_of_orphan:	
  2276                           ; 2 bytes @ 0x13
  2277                           
  2278  0033                     ?_lg_get_weight:	
  2279                           ; 2 bytes @ 0x13
  2280                           
  2281  0033                     lg_hit_land@y:	
  2282                           ; 2 bytes @ 0x13
  2283                           
  2284  0033                     lg_is_valid@y:	
  2285                           ; 1 bytes @ 0x13
  2286                           
  2287  0033                     lg_fall_off@y:	
  2288                           ; 1 bytes @ 0x13
  2289                           
  2290  0033                     dbg_print_MATRIX4x4@lable:	
  2291                           ; 1 bytes @ 0x13
  2292                           
  2293  0033                     dbg_print_MATRIX8x8@lable:	
  2294                           ; 2 bytes @ 0x13
  2295                           
  2296  0033                     eeprom_write_int@value:	
  2297                           ; 2 bytes @ 0x13
  2298                           
  2299  0033                     lg_is_left_boundary@matrix4x4:	
  2300                           ; 2 bytes @ 0x13
  2301                           
  2302  0033                     lg_is_right_boundary@matrix4x4:	
  2303                           ; 2 bytes @ 0x13
  2304                           
  2305  0033                     lg_get_height_after_merge@matrix:	
  2306                           ; 2 bytes @ 0x13
  2307                           
  2308                           
  2309                           ; 2 bytes @ 0x13
  2310  0033                     	ds	1
  2311  0034                     lg_hit_land@matrix4x4:	
  2312  0034                     lg_is_valid@matrix4x4:	
  2313                           ; 2 bytes @ 0x14
  2314                           
  2315  0034                     lg_fall_off@matrix4x4:	
  2316                           ; 2 bytes @ 0x14
  2317                           
  2318                           
  2319                           ; 2 bytes @ 0x14
  2320  0034                     	ds	1
  2321  0035                     ??_eeprom_write_int:	
  2322  0035                     ??_eeprom_read_int:	
  2323                           ; 1 bytes @ 0x15
  2324                           
  2325  0035                     ??_lg_get_num_of_orphan:	
  2326                           ; 1 bytes @ 0x15
  2327                           
  2328  0035                     ??_lg_get_weight:	
  2329                           ; 1 bytes @ 0x15
  2330                           
  2331  0035                     ??_lg_get_height_after_merge:	
  2332                           ; 1 bytes @ 0x15
  2333                           
  2334  0035                     dbg_print_MATRIX4x4@x:	
  2335                           ; 1 bytes @ 0x15
  2336                           
  2337  0035                     dbg_print_MATRIX8x8@matrix:	
  2338                           ; 1 bytes @ 0x15
  2339                           
  2340  0035                     lg_is_left_boundary@matrix8x8:	
  2341                           ; 1 bytes @ 0x15
  2342                           
  2343  0035                     lg_is_right_boundary@matrix8x8:	
  2344                           ; 1 bytes @ 0x15
  2345                           
  2346  0035                     lg_get_height@matrix:	
  2347                           ; 1 bytes @ 0x15
  2348                           
  2349                           
  2350                           ; 1 bytes @ 0x15
  2351  0035                     	ds	1
  2352  0036                     ??_dbg_print_MATRIX8x8:	
  2353  0036                     ??_lg_is_left_boundary:	
  2354                           ; 1 bytes @ 0x16
  2355                           
  2356  0036                     ??_lg_is_right_boundary:	
  2357                           ; 1 bytes @ 0x16
  2358                           
  2359  0036                     dbg_print_MATRIX4x4@y:	
  2360                           ; 1 bytes @ 0x16
  2361                           
  2362  0036                     eeprom_write_int@at:	
  2363                           ; 1 bytes @ 0x16
  2364                           
  2365  0036                     lg_hit_land@matrix8x8:	
  2366                           ; 1 bytes @ 0x16
  2367                           
  2368  0036                     lg_is_valid@matrix8x8:	
  2369                           ; 1 bytes @ 0x16
  2370                           
  2371  0036                     lg_fall_off@matrix8x8:	
  2372                           ; 1 bytes @ 0x16
  2373                           
  2374  0036                     lg_get_height@row:	
  2375                           ; 1 bytes @ 0x16
  2376                           
  2377                           
  2378                           ; 1 bytes @ 0x16
  2379  0036                     	ds	1
  2380  0037                     ??_lg_hit_land:	
  2381  0037                     ??_lg_is_valid:	
  2382                           ; 1 bytes @ 0x17
  2383                           
  2384  0037                     ??_lg_fall_off:	
  2385                           ; 1 bytes @ 0x17
  2386                           
  2387  0037                     eeprom_write_int@temp:	
  2388                           ; 1 bytes @ 0x17
  2389                           
  2390  0037                     eeprom_read_int@at:	
  2391                           ; 1 bytes @ 0x17
  2392                           
  2393  0037                     lg_get_height_after_merge@y:	
  2394                           ; 1 bytes @ 0x17
  2395                           
  2396  0037                     dbg_print_MATRIX4x4@matrix:	
  2397                           ; 1 bytes @ 0x17
  2398                           
  2399                           
  2400                           ; 2 bytes @ 0x17
  2401  0037                     	ds	1
  2402  0038                     dbg_print_MATRIX8x8@enable:	
  2403  0038                     lg_is_right_boundary@x:	
  2404                           ; 1 bytes @ 0x18
  2405                           
  2406  0038                     lg_get_weight@start:	
  2407                           ; 1 bytes @ 0x18
  2408                           
  2409  0038                     lg_get_height_after_merge@col:	
  2410                           ; 1 bytes @ 0x18
  2411                           
  2412  0038                     eeprom_read_int@value:	
  2413                           ; 1 bytes @ 0x18
  2414                           
  2415  0038                     lg_get_num_of_orphan@risk:	
  2416                           ; 2 bytes @ 0x18
  2417                           
  2418                           
  2419                           ; 2 bytes @ 0x18
  2420  0038                     	ds	1
  2421  0039                     ??_dbg_print_MATRIX4x4:	
  2422  0039                     dbg_print_MATRIX8x8@row:	
  2423                           ; 1 bytes @ 0x19
  2424                           
  2425  0039                     lg_hit_land@x:	
  2426                           ; 1 bytes @ 0x19
  2427                           
  2428  0039                     lg_is_valid@x:	
  2429                           ; 1 bytes @ 0x19
  2430                           
  2431  0039                     lg_is_right_boundary@row:	
  2432                           ; 1 bytes @ 0x19
  2433                           
  2434  0039                     lg_fall_off@x:	
  2435                           ; 1 bytes @ 0x19
  2436                           
  2437  0039                     lg_get_height_after_merge@row:	
  2438                           ; 1 bytes @ 0x19
  2439                           
  2440  0039                     lg_get_holes_after_merge@num_hole:	
  2441                           ; 1 bytes @ 0x19
  2442                           
  2443  0039                     lg_get_weight@risk:	
  2444                           ; 1 bytes @ 0x19
  2445                           
  2446                           
  2447                           ; 2 bytes @ 0x19
  2448  0039                     	ds	1
  2449  003A                     dbg_print_MATRIX8x8@col:	
  2450  003A                     lg_hit_land@col:	
  2451                           ; 1 bytes @ 0x1A
  2452                           
  2453  003A                     lg_is_valid@row:	
  2454                           ; 1 bytes @ 0x1A
  2455                           
  2456  003A                     lg_is_right_boundary@col:	
  2457                           ; 1 bytes @ 0x1A
  2458                           
  2459  003A                     lg_fall_off@col:	
  2460                           ; 1 bytes @ 0x1A
  2461                           
  2462  003A                     lg_get_num_of_orphan@full:	
  2463                           ; 1 bytes @ 0x1A
  2464                           
  2465  003A                     lg_get_holes_after_merge@stop:	
  2466                           ; 1 bytes @ 0x1A
  2467                           
  2468                           
  2469                           ; 1 bytes @ 0x1A
  2470  003A                     	ds	1
  2471  003B                     ?_dbg_print_Screen:	
  2472  003B                     ?_lg_is_row_full:	
  2473                           ; 1 bytes @ 0x1B
  2474                           
  2475  003B                     ?_lg_right_most:	
  2476                           ; 1 bytes @ 0x1B
  2477                           
  2478  003B                     lg_is_row_full@row:	
  2479                           ; 1 bytes @ 0x1B
  2480                           
  2481  003B                     lg_hit_land@row:	
  2482                           ; 1 bytes @ 0x1B
  2483                           
  2484  003B                     lg_is_valid@col:	
  2485                           ; 1 bytes @ 0x1B
  2486                           
  2487  003B                     lg_is_left_boundary@x:	
  2488                           ; 1 bytes @ 0x1B
  2489                           
  2490  003B                     lg_fall_off@row:	
  2491                           ; 1 bytes @ 0x1B
  2492                           
  2493  003B                     lg_get_num_of_orphan@matrix:	
  2494                           ; 1 bytes @ 0x1B
  2495                           
  2496  003B                     lg_get_weight@matrix:	
  2497                           ; 1 bytes @ 0x1B
  2498                           
  2499  003B                     lg_get_holes_after_merge@start:	
  2500                           ; 1 bytes @ 0x1B
  2501                           
  2502  003B                     dbg_print_Screen@lable:	
  2503                           ; 1 bytes @ 0x1B
  2504                           
  2505  003B                     lg_right_most@matrix4x4:	
  2506                           ; 2 bytes @ 0x1B
  2507                           
  2508                           
  2509                           ; 2 bytes @ 0x1B
  2510  003B                     	ds	1
  2511  003C                     ??_lg_is_row_full:	
  2512  003C                     lg_is_left_boundary@row:	
  2513                           ; 1 bytes @ 0x1C
  2514                           
  2515  003C                     lg_get_num_of_orphan@col:	
  2516                           ; 1 bytes @ 0x1C
  2517                           
  2518  003C                     lg_get_weight@pre:	
  2519                           ; 1 bytes @ 0x1C
  2520                           
  2521  003C                     lg_get_holes_after_merge@matrix:	
  2522                           ; 1 bytes @ 0x1C
  2523                           
  2524                           
  2525                           ; 1 bytes @ 0x1C
  2526  003C                     	ds	1
  2527  003D                     ??_dbg_print_Screen:	
  2528  003D                     lg_is_left_boundary@col:	
  2529                           ; 1 bytes @ 0x1D
  2530                           
  2531  003D                     lg_get_num_of_orphan@row:	
  2532                           ; 1 bytes @ 0x1D
  2533                           
  2534  003D                     lg_get_weight@col:	
  2535                           ; 1 bytes @ 0x1D
  2536                           
  2537  003D                     lg_right_most@matrix8x8:	
  2538                           ; 1 bytes @ 0x1D
  2539                           
  2540  003D                     lg_get_holes_after_merge@col:	
  2541                           ; 1 bytes @ 0x1D
  2542                           
  2543                           
  2544                           ; 1 bytes @ 0x1D
  2545  003D                     	ds	1
  2546  003E                     ?_lg_left_most:	
  2547  003E                     ??_lg_right_most:	
  2548                           ; 1 bytes @ 0x1E
  2549                           
  2550  003E                     dbg_print_Screen@enable:	
  2551                           ; 1 bytes @ 0x1E
  2552                           
  2553  003E                     lg_get_weight@row:	
  2554                           ; 1 bytes @ 0x1E
  2555                           
  2556  003E                     lg_get_holes_after_merge@row:	
  2557                           ; 1 bytes @ 0x1E
  2558                           
  2559  003E                     lg_left_most@matrix4x4:	
  2560                           ; 1 bytes @ 0x1E
  2561                           
  2562                           
  2563                           ; 2 bytes @ 0x1E
  2564  003E                     	ds	1
  2565  003F                     ?___wmul:	
  2566  003F                     dbg_print_MATRIX4x4@enable:	
  2567                           ; 2 bytes @ 0x1F
  2568                           
  2569  003F                     lg_is_row_full@matrix:	
  2570                           ; 1 bytes @ 0x1F
  2571                           
  2572  003F                     ___wmul@multiplier:	
  2573                           ; 1 bytes @ 0x1F
  2574                           
  2575                           
  2576                           ; 2 bytes @ 0x1F
  2577  003F                     	ds	1
  2578  0040                     ??_lg_delete_matrix:	
  2579  0040                     ??_lg_get_num_removed_rows:	
  2580                           ; 1 bytes @ 0x20
  2581                           
  2582  0040                     dbg_print_MATRIX4x4@row:	
  2583                           ; 1 bytes @ 0x20
  2584                           
  2585  0040                     lg_left_most@matrix8x8:	
  2586                           ; 1 bytes @ 0x20
  2587                           
  2588  0040                     lg_right_most@x:	
  2589                           ; 1 bytes @ 0x20
  2590                           
  2591                           
  2592                           ; 1 bytes @ 0x20
  2593  0040                     	ds	1
  2594  0041                     ??_lg_left_most:	
  2595  0041                     dbg_print_MATRIX4x4@col:	
  2596                           ; 1 bytes @ 0x21
  2597                           
  2598  0041                     ___wmul@multiplicand:	
  2599                           ; 1 bytes @ 0x21
  2600                           
  2601                           
  2602                           ; 2 bytes @ 0x21
  2603  0041                     	ds	1
  2604  0042                     ?_dbg_print_cur_MATRIX4x4:	
  2605  0042                     ?_lg_merge:	
  2606                           ; 1 bytes @ 0x22
  2607                           
  2608  0042                     lg_delete_matrix@count:	
  2609                           ; 1 bytes @ 0x22
  2610                           
  2611  0042                     lg_get_num_removed_rows@matrix:	
  2612                           ; 1 bytes @ 0x22
  2613                           
  2614  0042                     lg_merge@y:	
  2615                           ; 1 bytes @ 0x22
  2616                           
  2617  0042                     lg_left_most@x:	
  2618                           ; 1 bytes @ 0x22
  2619                           
  2620  0042                     dbg_print_cur_MATRIX4x4@lable:	
  2621                           ; 1 bytes @ 0x22
  2622                           
  2623                           
  2624                           ; 2 bytes @ 0x22
  2625  0042                     	ds	1
  2626  0043                     lg_delete_matrix@matrix:	
  2627  0043                     lg_get_num_removed_rows@count:	
  2628                           ; 1 bytes @ 0x23
  2629                           
  2630  0043                     lg_merge@matrix4x4:	
  2631                           ; 1 bytes @ 0x23
  2632                           
  2633  0043                     ___wmul@product:	
  2634                           ; 2 bytes @ 0x23
  2635                           
  2636                           
  2637                           ; 2 bytes @ 0x23
  2638  0043                     	ds	1
  2639  0044                     dbg_print_cur_MATRIX4x4@x:	
  2640  0044                     lg_delete_matrix@row:	
  2641                           ; 1 bytes @ 0x24
  2642                           
  2643  0044                     lg_get_num_removed_rows@row:	
  2644                           ; 1 bytes @ 0x24
  2645                           
  2646                           
  2647                           ; 1 bytes @ 0x24
  2648  0044                     	ds	1
  2649  0045                     dbg_print_cur_MATRIX4x4@y:	
  2650  0045                     lg_merge@matrix8x8:	
  2651                           ; 1 bytes @ 0x25
  2652                           
  2653                           
  2654                           ; 1 bytes @ 0x25
  2655  0045                     	ds	1
  2656  0046                     ??_dbg_print_cur_MATRIX4x4:	
  2657  0046                     ??_lg_merge:	
  2658                           ; 1 bytes @ 0x26
  2659                           
  2660                           
  2661                           ; 1 bytes @ 0x26
  2662  0046                     	ds	2
  2663  0048                     lg_merge@x:	
  2664                           
  2665                           ; 1 bytes @ 0x28
  2666  0048                     	ds	1
  2667  0049                     lg_merge@row:	
  2668                           
  2669                           ; 1 bytes @ 0x29
  2670  0049                     	ds	1
  2671  004A                     lg_merge@col:	
  2672  004A                     dbg_print_cur_MATRIX4x4@matrix:	
  2673                           ; 1 bytes @ 0x2A
  2674                           
  2675                           
  2676                           ; 2 bytes @ 0x2A
  2677  004A                     	ds	2
  2678  004C                     dbg_print_cur_MATRIX4x4@enable:	
  2679                           
  2680                           ; 1 bytes @ 0x2C
  2681  004C                     	ds	1
  2682  004D                     ??_lg_find_best_solution:	
  2683                           
  2684                           ; 1 bytes @ 0x2D
  2685  004D                     	ds	18
  2686  005F                     lg_find_best_solution@left_most_index:	
  2687                           
  2688                           ; 1 bytes @ 0x3F
  2689  005F                     	ds	1
  2690  0060                     lg_find_best_solution@right_most_index:	
  2691                           
  2692                           ; 1 bytes @ 0x40
  2693  0060                     	ds	1
  2694  0061                     lg_find_best_solution@res:	
  2695                           
  2696                           ; 1 bytes @ 0x41
  2697  0061                     	ds	1
  2698  0062                     lg_find_best_solution@temp_high:	
  2699                           
  2700                           ; 2 bytes @ 0x42
  2701  0062                     	ds	2
  2702  0064                     lg_find_best_solution@temp_pre_x:	
  2703                           
  2704                           ; 1 bytes @ 0x44
  2705  0064                     	ds	1
  2706  0065                     lg_find_best_solution@tem_pre_sub_index:	
  2707                           
  2708                           ; 1 bytes @ 0x45
  2709  0065                     	ds	1
  2710  0066                     lg_find_best_solution@tem_sub_index:	
  2711                           
  2712                           ; 1 bytes @ 0x46
  2713  0066                     	ds	1
  2714  0067                     lg_find_best_solution@temp_pre_risk:	
  2715                           
  2716                           ; 2 bytes @ 0x47
  2717  0067                     	ds	2
  2718  0069                     lg_find_best_solution@temp_risk:	
  2719                           
  2720                           ; 2 bytes @ 0x49
  2721  0069                     	ds	2
  2722  006B                     lg_find_best_solution@temp_y:	
  2723                           
  2724                           ; 1 bytes @ 0x4B
  2725  006B                     	ds	1
  2726  006C                     lg_find_best_solution@temp_x:	
  2727                           
  2728                           ; 1 bytes @ 0x4C
  2729  006C                     	ds	1
  2730  006D                     main@hit_res:	
  2731                           
  2732                           ; 1 bytes @ 0x4D
  2733  006D                     	ds	1
  2734                           
  2735                           	psect	maintext
  2736  03BC                     __pmaintext:	
  2737 ;;
  2738 ;;Main: autosize = 0, tempsize = 4, incstack = 0, save=0
  2739 ;;
  2740 ;; *************** function _main *****************
  2741 ;; Defined at:
  2742 ;;		line 85 in file "../main.c"
  2743 ;; Parameters:    Size  Location     Type
  2744 ;;		None
  2745 ;; Auto vars:     Size  Location     Type
  2746 ;;  hit_res         1   77[BANK0 ] unsigned char 
  2747 ;; Return value:  Size  Location     Type
  2748 ;;                  2  615[None  ] int 
  2749 ;; Registers used:
  2750 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2751 ;; Tracked objects:
  2752 ;;		On entry : B00/0
  2753 ;;		On exit  : 0/0
  2754 ;;		Unchanged: 0/0
  2755 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2756 ;;      Params:         0       0       0       0       0
  2757 ;;      Locals:         0       1       0       0       0
  2758 ;;      Temps:          0       0       4       0       0
  2759 ;;      Totals:         0       1       4       0       0
  2760 ;;Total ram usage:        5 bytes
  2761 ;; Hardware stack levels required when called:    7
  2762 ;; This function calls:
  2763 ;;		_USARTWriteString
  2764 ;;		_dbg_print_MATRIX8x8
  2765 ;;		_eeprom_write_int
  2766 ;;		_hal_print_Screen
  2767 ;;		_lg_char_info_index_rand
  2768 ;;		_lg_clear
  2769 ;;		_lg_clear_matrix
  2770 ;;		_lg_delete_matrix
  2771 ;;		_lg_find_best_solution
  2772 ;;		_lg_hit_land
  2773 ;;		_lg_merge
  2774 ;;		_main_init
  2775 ;;		_sprintf
  2776 ;; This function is called by:
  2777 ;;		Startup code after reset
  2778 ;; This function uses a non-reentrant model
  2779 ;;
  2780                           
  2781                           
  2782                           ;psect for function _main
  2783  03BC                     _main:	
  2784                           
  2785                           ;main.c: 87: main_init();
  2786                           
  2787                           ;incstack = 0
  2788                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2789  03BC  160A  118A  2087  120A  118A  	fcall	_main_init
  2790  03C1  2BD4               	goto	l4516
  2791  03C2                     l4536:	
  2792                           ;main.c: 104: {
  2793                           ;main.c: 105: do { if(1) { sprintf(g_debug, "GAME OVER!!!""\r\n"); USARTWriteString(g_de
      +                          bug); } } while (0);;
  2794                           
  2795  03C2  30DE               	movlw	low (STR_74| (0+32768))
  2796  03C3  1283               	bcf	3,5	;RP0=0, select bank0
  2797  03C4  1303               	bcf	3,6	;RP1=0, select bank0
  2798  03C5  00A0               	movwf	sprintf@f
  2799  03C6  308B               	movlw	high (STR_74| (0+32768))
  2800  03C7  00A1               	movwf	sprintf@f+1
  2801  03C8  30AD               	movlw	(low (_g_debug| 0))& (0+255)
  2802  03C9  120A  118A  2250  120A  118A  	fcall	_sprintf
  2803  03CE  30AD               	movlw	(low (_g_debug| 0))& (0+255)
  2804  03CF  120A  118A  2004  120A  118A  	fcall	_USARTWriteString
  2805  03D4                     l4516:	
  2806                           ;main.c: 89: uint8_t hit_res;
  2807                           ;main.c: 90: __start:
  2808                           
  2809                           ;main.c: 106: goto __start;
  2810                           
  2811                           
  2812                           ;main.c: 92: Seed++;
  2813  03D4  3001               	movlw	1
  2814  03D5  1683               	bsf	3,5	;RP0=1, select bank1
  2815  03D6  1303               	bcf	3,6	;RP1=0, select bank1
  2816  03D7  07A5               	addwf	_Seed^(0+128),f
  2817  03D8  1803               	skipnc
  2818  03D9  0AA6               	incf	(_Seed+1)^(0+128),f
  2819  03DA  3000               	movlw	0
  2820  03DB  07A6               	addwf	(_Seed+1)^(0+128),f
  2821                           
  2822                           ;main.c: 93: eeprom_write_int(0, Seed);
  2823  03DC  0826               	movf	(_Seed+1)^(0+128),w
  2824  03DD  1283               	bcf	3,5	;RP0=0, select bank0
  2825  03DE  1303               	bcf	3,6	;RP1=0, select bank0
  2826  03DF  00B4               	movwf	eeprom_write_int@value+1
  2827  03E0  1683               	bsf	3,5	;RP0=1, select bank1
  2828  03E1  1303               	bcf	3,6	;RP1=0, select bank1
  2829  03E2  0825               	movf	_Seed^(0+128),w
  2830  03E3  1283               	bcf	3,5	;RP0=0, select bank0
  2831  03E4  1303               	bcf	3,6	;RP1=0, select bank0
  2832  03E5  00B3               	movwf	eeprom_write_int@value
  2833  03E6  3000               	movlw	0
  2834  03E7  160A  118A  2043  120A  118A  	fcall	_eeprom_write_int
  2835                           
  2836                           ;main.c: 95: lg_clear_matrix();
  2837  03EC  160A  158A  2759  120A  118A  	fcall	_lg_clear_matrix
  2838  03F1                     l4522:	
  2839                           ;main.c: 96: while(1)
  2840                           
  2841                           
  2842                           ;main.c: 97: {
  2843                           ;main.c: 98: cur_x = 2, cur_y = 0;
  2844  03F1  3002               	movlw	2
  2845  03F2  1683               	bsf	3,5	;RP0=1, select bank1
  2846  03F3  1303               	bcf	3,6	;RP1=0, select bank1
  2847  03F4  00E1               	movwf	??_main^(0+128)
  2848  03F5  0861               	movf	??_main^(0+128),w
  2849  03F6  1283               	bcf	3,5	;RP0=0, select bank0
  2850  03F7  1303               	bcf	3,6	;RP1=0, select bank0
  2851  03F8  00EF               	movwf	_cur_x
  2852  03F9  1683               	bsf	3,5	;RP0=1, select bank1
  2853  03FA  1303               	bcf	3,6	;RP1=0, select bank1
  2854  03FB  01AB               	clrf	_cur_y^(0+128)
  2855                           
  2856                           ;main.c: 99: g_char_info_index = lg_char_info_index_rand();
  2857  03FC  160A  158A  27B1  120A  118A  	fcall	_lg_char_info_index_rand
  2858  0401  1683               	bsf	3,5	;RP0=1, select bank1
  2859  0402  1303               	bcf	3,6	;RP1=0, select bank1
  2860  0403  00E1               	movwf	??_main^(0+128)
  2861  0404  0861               	movf	??_main^(0+128),w
  2862  0405  1283               	bcf	3,5	;RP0=0, select bank0
  2863  0406  1303               	bcf	3,6	;RP1=0, select bank0
  2864  0407  00EE               	movwf	_g_char_info_index
  2865                           
  2866                           ;main.c: 100: g_char_info_sub_index = 0;
  2867  0408  1683               	bsf	3,5	;RP0=1, select bank1
  2868  0409  1303               	bcf	3,6	;RP1=0, select bank1
  2869  040A  01AC               	clrf	_g_char_info_sub_index^(0+128)
  2870                           
  2871                           ;main.c: 102: do { if(1) { sprintf(g_debug, "g_char_info_index = %d""\r\n", g_char_info_
      +                          index); USARTWriteString(g_debug); } } while (0);;
  2872  040B  3041               	movlw	low (STR_78| (0+32768))
  2873  040C  1283               	bcf	3,5	;RP0=0, select bank0
  2874  040D  1303               	bcf	3,6	;RP1=0, select bank0
  2875  040E  00A0               	movwf	sprintf@f
  2876  040F  308A               	movlw	high (STR_78| (0+32768))
  2877  0410  00A1               	movwf	sprintf@f+1
  2878  0411  086E               	movf	_g_char_info_index,w
  2879  0412  1683               	bsf	3,5	;RP0=1, select bank1
  2880  0413  1303               	bcf	3,6	;RP1=0, select bank1
  2881  0414  00E1               	movwf	??_main^(0+128)
  2882  0415  01E2               	clrf	(??_main^(0+128)+1)
  2883  0416  0861               	movf	??_main^(0+128),w
  2884  0417  1283               	bcf	3,5	;RP0=0, select bank0
  2885  0418  1303               	bcf	3,6	;RP1=0, select bank0
  2886  0419  00A2               	movwf	?_sprintf+2
  2887  041A  1683               	bsf	3,5	;RP0=1, select bank1
  2888  041B  1303               	bcf	3,6	;RP1=0, select bank1
  2889  041C  0862               	movf	(??_main+1)^(0+128),w
  2890  041D  1283               	bcf	3,5	;RP0=0, select bank0
  2891  041E  1303               	bcf	3,6	;RP1=0, select bank0
  2892  041F  00A3               	movwf	?_sprintf+3
  2893  0420  30AD               	movlw	(low (_g_debug| 0))& (0+255)
  2894  0421  120A  118A  2250  120A  118A  	fcall	_sprintf
  2895  0426  30AD               	movlw	(low (_g_debug| 0))& (0+255)
  2896  0427  120A  118A  2004  120A  118A  	fcall	_USARTWriteString
  2897                           
  2898                           ;main.c: 103: if(lg_find_best_solution() == 0)
  2899  042C  120A  118A  2536  120A  118A  	fcall	_lg_find_best_solution
  2900  0431  3A00               	xorlw	0
  2901  0432  1903               	btfsc	3,2
  2902  0433  2BC2               	goto	l4536
  2903                           
  2904                           ;main.c: 107: }
  2905                           ;main.c: 108: g_cur_matrix4x4 = &g_matrix4x4[g_char_info[g_char_info_index].start_index 
      +                          + g_char_info_sub_index];
  2906  0434  1283               	bcf	3,5	;RP0=0, select bank0
  2907  0435  1303               	bcf	3,6	;RP1=0, select bank0
  2908  0436  086E               	movf	_g_char_info_index,w
  2909  0437  1683               	bsf	3,5	;RP0=1, select bank1
  2910  0438  1303               	bcf	3,6	;RP1=0, select bank1
  2911  0439  00E1               	movwf	??_main^(0+128)
  2912  043A  0761               	addwf	??_main^(0+128),w
  2913  043B  3E90               	addlw	(low (_g_char_info| (0+256)))& (0+255)
  2914  043C  0084               	movwf	4
  2915  043D  082C               	movf	_g_char_info_sub_index^(0+128),w
  2916  043E  1783               	bsf	3,7	;select IRP bank3
  2917  043F  0700               	addwf	0,w
  2918  0440  00E2               	movwf	(??_main+1)^(0+128)
  2919  0441  3001               	movlw	1
  2920  0442                     u4665:	
  2921  0442  1003               	clrc
  2922  0443  0DE2               	rlf	(??_main+1)^(0+128),f
  2923  0444  3EFF               	addlw	-1
  2924  0445  1D03               	skipz
  2925  0446  2C42               	goto	u4665
  2926  0447  1003               	clrc
  2927  0448  0D62               	rlf	(??_main+1)^(0+128),w
  2928  0449  3E24               	addlw	low (_g_matrix4x4| (0+32768))
  2929  044A  00E3               	movwf	(??_main+2)^(0+128)
  2930  044B  3088               	movlw	high (_g_matrix4x4| (0+32768))
  2931  044C  1803               	skipnc
  2932  044D  3E01               	addlw	1
  2933  044E  00E4               	movwf	((??_main+2)^(0+128)+1)
  2934  044F  0863               	movf	(??_main+2)^(0+128),w
  2935  0450  00A7               	movwf	_g_cur_matrix4x4^(0+128)
  2936  0451  0864               	movf	((??_main+2)^(0+128)+1),w
  2937  0452  00A8               	movwf	(_g_cur_matrix4x4+1)^(0+128)
  2938  0453                     l4542:	
  2939                           ;main.c: 109: while(1)
  2940                           
  2941                           
  2942                           ;main.c: 110: {
  2943                           ;main.c: 112: Seed++;
  2944  0453  3001               	movlw	1
  2945  0454  07A5               	addwf	_Seed^(0+128),f
  2946  0455  1803               	skipnc
  2947  0456  0AA6               	incf	(_Seed+1)^(0+128),f
  2948  0457  3000               	movlw	0
  2949  0458  07A6               	addwf	(_Seed+1)^(0+128),f
  2950                           
  2951                           ;main.c: 114: hit_res = lg_hit_land(cur_x, cur_y, g_cur_matrix4x4, &g_matrix8x8);
  2952  0459  082B               	movf	_cur_y^(0+128),w
  2953  045A  00E1               	movwf	??_main^(0+128)
  2954  045B  0861               	movf	??_main^(0+128),w
  2955  045C  1283               	bcf	3,5	;RP0=0, select bank0
  2956  045D  1303               	bcf	3,6	;RP1=0, select bank0
  2957  045E  00B3               	movwf	lg_hit_land@y
  2958  045F  1683               	bsf	3,5	;RP0=1, select bank1
  2959  0460  1303               	bcf	3,6	;RP1=0, select bank1
  2960  0461  0827               	movf	_g_cur_matrix4x4^(0+128),w
  2961  0462  1283               	bcf	3,5	;RP0=0, select bank0
  2962  0463  1303               	bcf	3,6	;RP1=0, select bank0
  2963  0464  00B4               	movwf	lg_hit_land@matrix4x4
  2964  0465  1683               	bsf	3,5	;RP0=1, select bank1
  2965  0466  1303               	bcf	3,6	;RP1=0, select bank1
  2966  0467  0828               	movf	(_g_cur_matrix4x4+1)^(0+128),w
  2967  0468  1283               	bcf	3,5	;RP0=0, select bank0
  2968  0469  1303               	bcf	3,6	;RP1=0, select bank0
  2969  046A  00B5               	movwf	lg_hit_land@matrix4x4+1
  2970  046B  30CD               	movlw	(low (_g_matrix8x8| 0))& (0+255)
  2971  046C  1683               	bsf	3,5	;RP0=1, select bank1
  2972  046D  1303               	bcf	3,6	;RP1=0, select bank1
  2973  046E  00E2               	movwf	(??_main+1)^(0+128)
  2974  046F  0862               	movf	(??_main+1)^(0+128),w
  2975  0470  1283               	bcf	3,5	;RP0=0, select bank0
  2976  0471  1303               	bcf	3,6	;RP1=0, select bank0
  2977  0472  00B6               	movwf	lg_hit_land@matrix8x8
  2978  0473  086F               	movf	_cur_x,w
  2979  0474  160A  118A  2717  120A  118A  	fcall	_lg_hit_land
  2980  0479  1683               	bsf	3,5	;RP0=1, select bank1
  2981  047A  1303               	bcf	3,6	;RP1=0, select bank1
  2982  047B  00E3               	movwf	(??_main+2)^(0+128)
  2983  047C  0863               	movf	(??_main+2)^(0+128),w
  2984  047D  1283               	bcf	3,5	;RP0=0, select bank0
  2985  047E  1303               	bcf	3,6	;RP1=0, select bank0
  2986  047F  00ED               	movwf	main@hit_res
  2987                           
  2988                           ;main.c: 115: do { if(1) { sprintf(g_debug, "hit_res = %d""\r\n", hit_res); USARTWriteSt
      +                          ring(g_debug); } } while (0);;
  2989  0480  30ED               	movlw	low (STR_80| (0+32768))
  2990  0481  00A0               	movwf	sprintf@f
  2991  0482  308B               	movlw	high (STR_80| (0+32768))
  2992  0483  00A1               	movwf	sprintf@f+1
  2993  0484  086D               	movf	main@hit_res,w
  2994  0485  1683               	bsf	3,5	;RP0=1, select bank1
  2995  0486  1303               	bcf	3,6	;RP1=0, select bank1
  2996  0487  00E1               	movwf	??_main^(0+128)
  2997  0488  01E2               	clrf	(??_main^(0+128)+1)
  2998  0489  0861               	movf	??_main^(0+128),w
  2999  048A  1283               	bcf	3,5	;RP0=0, select bank0
  3000  048B  1303               	bcf	3,6	;RP1=0, select bank0
  3001  048C  00A2               	movwf	?_sprintf+2
  3002  048D  1683               	bsf	3,5	;RP0=1, select bank1
  3003  048E  1303               	bcf	3,6	;RP1=0, select bank1
  3004  048F  0862               	movf	(??_main+1)^(0+128),w
  3005  0490  1283               	bcf	3,5	;RP0=0, select bank0
  3006  0491  1303               	bcf	3,6	;RP1=0, select bank0
  3007  0492  00A3               	movwf	?_sprintf+3
  3008  0493  30AD               	movlw	(low (_g_debug| 0))& (0+255)
  3009  0494  120A  118A  2250  120A  118A  	fcall	_sprintf
  3010  0499  30AD               	movlw	(low (_g_debug| 0))& (0+255)
  3011  049A  120A  118A  2004  120A  118A  	fcall	_USARTWriteString
  3012                           
  3013                           ;main.c: 116: lg_merge(cur_x, cur_y, g_cur_matrix4x4, &g_matrix8x8);
  3014  049F  1683               	bsf	3,5	;RP0=1, select bank1
  3015  04A0  1303               	bcf	3,6	;RP1=0, select bank1
  3016  04A1  082B               	movf	_cur_y^(0+128),w
  3017  04A2  00E1               	movwf	??_main^(0+128)
  3018  04A3  0861               	movf	??_main^(0+128),w
  3019  04A4  1283               	bcf	3,5	;RP0=0, select bank0
  3020  04A5  1303               	bcf	3,6	;RP1=0, select bank0
  3021  04A6  00C2               	movwf	lg_merge@y
  3022  04A7  1683               	bsf	3,5	;RP0=1, select bank1
  3023  04A8  1303               	bcf	3,6	;RP1=0, select bank1
  3024  04A9  0827               	movf	_g_cur_matrix4x4^(0+128),w
  3025  04AA  1283               	bcf	3,5	;RP0=0, select bank0
  3026  04AB  1303               	bcf	3,6	;RP1=0, select bank0
  3027  04AC  00C3               	movwf	lg_merge@matrix4x4
  3028  04AD  1683               	bsf	3,5	;RP0=1, select bank1
  3029  04AE  1303               	bcf	3,6	;RP1=0, select bank1
  3030  04AF  0828               	movf	(_g_cur_matrix4x4+1)^(0+128),w
  3031  04B0  1283               	bcf	3,5	;RP0=0, select bank0
  3032  04B1  1303               	bcf	3,6	;RP1=0, select bank0
  3033  04B2  00C4               	movwf	lg_merge@matrix4x4+1
  3034  04B3  30CD               	movlw	(low (_g_matrix8x8| 0))& (0+255)
  3035  04B4  1683               	bsf	3,5	;RP0=1, select bank1
  3036  04B5  1303               	bcf	3,6	;RP1=0, select bank1
  3037  04B6  00E2               	movwf	(??_main+1)^(0+128)
  3038  04B7  0862               	movf	(??_main+1)^(0+128),w
  3039  04B8  1283               	bcf	3,5	;RP0=0, select bank0
  3040  04B9  1303               	bcf	3,6	;RP1=0, select bank0
  3041  04BA  00C5               	movwf	lg_merge@matrix8x8
  3042  04BB  086F               	movf	_cur_x,w
  3043  04BC  160A  118A  2784  120A  118A  	fcall	_lg_merge
  3044                           
  3045                           ;main.c: 117: if(hit_res == 1)
  3046  04C1  1283               	bcf	3,5	;RP0=0, select bank0
  3047  04C2  1303               	bcf	3,6	;RP1=0, select bank0
  3048  04C3  036D               	decf	main@hit_res,w
  3049  04C4  1D03               	btfss	3,2
  3050  04C5  2CE0               	goto	l4560
  3051                           
  3052                           ;main.c: 118: {
  3053                           ;main.c: 119: hal_print_Screen();
  3054  04C6  160A  158A  2716  120A  118A  	fcall	_hal_print_Screen
  3055                           
  3056                           ;main.c: 123: _delay((unsigned long)((100)*(20000000/4000.0)));
  3057  04CB  3003               	movlw	3
  3058  04CC  1683               	bsf	3,5	;RP0=1, select bank1
  3059  04CD  1303               	bcf	3,6	;RP1=0, select bank1
  3060  04CE  00E3               	movwf	(??_main^(0+128)+2)
  3061  04CF  308A               	movlw	138
  3062  04D0  00E2               	movwf	(??_main^(0+128)+1)
  3063  04D1  3056               	movlw	86
  3064  04D2  00E1               	movwf	??_main^(0+128)
  3065  04D3                     u4877:	
  3066  04D3  0BE1               	decfsz	??_main^(0+128),f
  3067  04D4  2CD3               	goto	u4877
  3068  04D5  0BE2               	decfsz	(??_main^(0+128)+1),f
  3069  04D6  2CD3               	goto	u4877
  3070  04D7  0BE3               	decfsz	(??_main^(0+128)+2),f
  3071  04D8  2CD3               	goto	u4877
  3072  04D9  2CDA               	nop2
  3073                           
  3074                           ;main.c: 125: lg_delete_matrix(&g_matrix8x8);
  3075  04DA  30CD               	movlw	(low (_g_matrix8x8| 0))& (0+255)
  3076  04DB  160A  118A  25F2  120A  118A  	fcall	_lg_delete_matrix
  3077  04E0                     l4560:	
  3078                           
  3079                           ;main.c: 126: }
  3080                           ;main.c: 127: dbg_print_MATRIX8x8(1, "Main screen", &g_matrix8x8);
  3081  04E0  308A               	movlw	low (STR_81| (0+32768))
  3082  04E1  1283               	bcf	3,5	;RP0=0, select bank0
  3083  04E2  1303               	bcf	3,6	;RP1=0, select bank0
  3084  04E3  00B3               	movwf	dbg_print_MATRIX8x8@lable
  3085  04E4  308C               	movlw	high (STR_81| (0+32768))
  3086  04E5  00B4               	movwf	dbg_print_MATRIX8x8@lable+1
  3087  04E6  30CD               	movlw	(low (_g_matrix8x8| 0))& (0+255)
  3088  04E7  1683               	bsf	3,5	;RP0=1, select bank1
  3089  04E8  1303               	bcf	3,6	;RP1=0, select bank1
  3090  04E9  00E1               	movwf	??_main^(0+128)
  3091  04EA  0861               	movf	??_main^(0+128),w
  3092  04EB  1283               	bcf	3,5	;RP0=0, select bank0
  3093  04EC  1303               	bcf	3,6	;RP1=0, select bank0
  3094  04ED  00B5               	movwf	dbg_print_MATRIX8x8@matrix
  3095  04EE  3001               	movlw	1
  3096  04EF  120A  158A  2757  120A  118A  	fcall	_dbg_print_MATRIX8x8
  3097                           
  3098                           ;main.c: 128: hal_print_Screen();
  3099  04F4  160A  158A  2716  120A  118A  	fcall	_hal_print_Screen
  3100                           
  3101                           ;main.c: 129: if(hit_res == 0)
  3102  04F9  1283               	bcf	3,5	;RP0=0, select bank0
  3103  04FA  1303               	bcf	3,6	;RP1=0, select bank0
  3104  04FB  086D               	movf	main@hit_res,w
  3105  04FC  1D03               	btfss	3,2
  3106  04FD  2BF1               	goto	l4522
  3107                           
  3108                           ;main.c: 130: {
  3109                           ;main.c: 131: lg_clear(cur_x, cur_y, g_cur_matrix4x4, &g_matrix8x8);
  3110  04FE  1683               	bsf	3,5	;RP0=1, select bank1
  3111  04FF  1303               	bcf	3,6	;RP1=0, select bank1
  3112  0500  082B               	movf	_cur_y^(0+128),w
  3113  0501  00E1               	movwf	??_main^(0+128)
  3114  0502  0861               	movf	??_main^(0+128),w
  3115  0503  1283               	bcf	3,5	;RP0=0, select bank0
  3116  0504  1303               	bcf	3,6	;RP1=0, select bank0
  3117  0505  00A0               	movwf	lg_clear@y
  3118  0506  1683               	bsf	3,5	;RP0=1, select bank1
  3119  0507  1303               	bcf	3,6	;RP1=0, select bank1
  3120  0508  0827               	movf	_g_cur_matrix4x4^(0+128),w
  3121  0509  1283               	bcf	3,5	;RP0=0, select bank0
  3122  050A  1303               	bcf	3,6	;RP1=0, select bank0
  3123  050B  00A1               	movwf	lg_clear@matrix4x4
  3124  050C  1683               	bsf	3,5	;RP0=1, select bank1
  3125  050D  1303               	bcf	3,6	;RP1=0, select bank1
  3126  050E  0828               	movf	(_g_cur_matrix4x4+1)^(0+128),w
  3127  050F  1283               	bcf	3,5	;RP0=0, select bank0
  3128  0510  1303               	bcf	3,6	;RP1=0, select bank0
  3129  0511  00A2               	movwf	lg_clear@matrix4x4+1
  3130  0512  30CD               	movlw	(low (_g_matrix8x8| 0))& (0+255)
  3131  0513  1683               	bsf	3,5	;RP0=1, select bank1
  3132  0514  1303               	bcf	3,6	;RP1=0, select bank1
  3133  0515  00E2               	movwf	(??_main+1)^(0+128)
  3134  0516  0862               	movf	(??_main+1)^(0+128),w
  3135  0517  1283               	bcf	3,5	;RP0=0, select bank0
  3136  0518  1303               	bcf	3,6	;RP1=0, select bank0
  3137  0519  00A3               	movwf	lg_clear@matrix8x8
  3138  051A  086F               	movf	_cur_x,w
  3139  051B  160A  118A  23C6  120A  118A  	fcall	_lg_clear
  3140                           
  3141                           ;main.c: 136: }
  3142                           ;main.c: 140: _delay((unsigned long)((500)*(20000000/4000.0)));
  3143                           
  3144                           ;main.c: 133: else
  3145                           ;main.c: 134: {
  3146                           ;main.c: 135: break;
  3147                           
  3148                           ;main.c: 132: }
  3149  0520  300D               	movlw	13
  3150  0521  1683               	bsf	3,5	;RP0=1, select bank1
  3151  0522  1303               	bcf	3,6	;RP1=0, select bank1
  3152  0523  00E3               	movwf	(??_main^(0+128)+2)
  3153  0524  30AF               	movlw	175
  3154  0525  00E2               	movwf	(??_main^(0+128)+1)
  3155  0526  30C1               	movlw	193
  3156  0527  00E1               	movwf	??_main^(0+128)
  3157  0528                     u4887:	
  3158  0528  0BE1               	decfsz	??_main^(0+128),f
  3159  0529  2D28               	goto	u4887
  3160  052A  0BE2               	decfsz	(??_main^(0+128)+1),f
  3161  052B  2D28               	goto	u4887
  3162  052C  0BE3               	decfsz	(??_main^(0+128)+2),f
  3163  052D  2D28               	goto	u4887
  3164  052E  0000               	nop
  3165                           
  3166                           ;main.c: 142: cur_y++;
  3167  052F  3001               	movlw	1
  3168  0530  1683               	bsf	3,5	;RP0=1, select bank1
  3169  0531  1303               	bcf	3,6	;RP1=0, select bank1
  3170  0532  00E1               	movwf	??_main^(0+128)
  3171  0533  0861               	movf	??_main^(0+128),w
  3172  0534  07AB               	addwf	_cur_y^(0+128),f
  3173  0535  2C53               	goto	l4542
  3174  0536                     __end_of_main:	
  3175                           ;main.c: 152: return 0;
  3176                           ;	Return value of _main is never used
  3177                           
  3178                           ;main.c: 143: }
  3179                           ;main.c: 144: }
  3180                           ;main.c: 145: __exit:
  3181                           
  3182                           
  3183                           	psect	text1
  3184  1087                     __ptext1:	
  3185 ;; *************** function _main_init *****************
  3186 ;; Defined at:
  3187 ;;		line 65 in file "../main.c"
  3188 ;; Parameters:    Size  Location     Type
  3189 ;;		None
  3190 ;; Auto vars:     Size  Location     Type
  3191 ;;		None
  3192 ;; Return value:  Size  Location     Type
  3193 ;;                  1    wreg      void 
  3194 ;; Registers used:
  3195 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3196 ;; Tracked objects:
  3197 ;;		On entry : 0/0
  3198 ;;		On exit  : 0/0
  3199 ;;		Unchanged: 0/0
  3200 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3201 ;;      Params:         0       0       0       0       0
  3202 ;;      Locals:         0       0       0       0       0
  3203 ;;      Temps:          0       0       0       0       0
  3204 ;;      Totals:         0       0       0       0       0
  3205 ;;Total ram usage:        0 bytes
  3206 ;; Hardware stack levels used:    1
  3207 ;; Hardware stack levels required when called:    3
  3208 ;; This function calls:
  3209 ;;		_dbg_init
  3210 ;;		_eeprom_read_int
  3211 ;;		_max7219_init1
  3212 ;;		_srand
  3213 ;; This function is called by:
  3214 ;;		_main
  3215 ;; This function uses a non-reentrant model
  3216 ;;
  3217                           
  3218                           
  3219                           ;psect for function _main_init
  3220  1087                     _main_init:	
  3221                           
  3222                           ;main.c: 68: max7219_init1();
  3223                           
  3224                           ;incstack = 0
  3225                           ; Regs used in _main_init: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3226  1087  160A  118A  2294  160A  118A  	fcall	_max7219_init1
  3227                           
  3228                           ;main.c: 70: dbg_init();
  3229  108C  160A  158A  272B  160A  118A  	fcall	_dbg_init
  3230                           
  3231                           ;main.c: 75: Seed = eeprom_read_int(0);
  3232  1091  3000               	movlw	0
  3233  1092  160A  118A  21C5  160A  118A  	fcall	_eeprom_read_int
  3234  1097  1283               	bcf	3,5	;RP0=0, select bank0
  3235  1098  1303               	bcf	3,6	;RP1=0, select bank0
  3236  1099  0834               	movf	?_eeprom_read_int+1,w
  3237  109A  1683               	bsf	3,5	;RP0=1, select bank1
  3238  109B  1303               	bcf	3,6	;RP1=0, select bank1
  3239  109C  00A6               	movwf	(_Seed+1)^(0+128)
  3240  109D  1283               	bcf	3,5	;RP0=0, select bank0
  3241  109E  1303               	bcf	3,6	;RP1=0, select bank0
  3242  109F  0833               	movf	?_eeprom_read_int,w
  3243  10A0  1683               	bsf	3,5	;RP0=1, select bank1
  3244  10A1  1303               	bcf	3,6	;RP1=0, select bank1
  3245  10A2  00A5               	movwf	_Seed^(0+128)
  3246                           
  3247                           ;main.c: 76: srand(Seed);
  3248  10A3  0826               	movf	(_Seed+1)^(0+128),w
  3249  10A4  00F1               	movwf	srand@x+1
  3250  10A5  0825               	movf	_Seed^(0+128),w
  3251  10A6  00F0               	movwf	srand@x
  3252  10A7  160A  118A  2000   	fcall	_srand
  3253  10AA  0008               	return
  3254  10AB                     __end_of_main_init:	
  3255                           
  3256                           	psect	text2
  3257  1000                     __ptext2:	
  3258 ;; *************** function _srand *****************
  3259 ;; Defined at:
  3260 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\rand.c"
  3261 ;; Parameters:    Size  Location     Type
  3262 ;;  x               2    0[COMMON] unsigned int 
  3263 ;; Auto vars:     Size  Location     Type
  3264 ;;		None
  3265 ;; Return value:  Size  Location     Type
  3266 ;;                  1    wreg      void 
  3267 ;; Registers used:
  3268 ;;		wreg
  3269 ;; Tracked objects:
  3270 ;;		On entry : 0/0
  3271 ;;		On exit  : 0/0
  3272 ;;		Unchanged: 0/0
  3273 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3274 ;;      Params:         2       0       0       0       0
  3275 ;;      Locals:         0       0       0       0       0
  3276 ;;      Temps:          0       0       0       0       0
  3277 ;;      Totals:         2       0       0       0       0
  3278 ;;Total ram usage:        2 bytes
  3279 ;; Hardware stack levels used:    1
  3280 ;; This function calls:
  3281 ;;		Nothing
  3282 ;; This function is called by:
  3283 ;;		_main_init
  3284 ;; This function uses a non-reentrant model
  3285 ;;
  3286                           
  3287                           
  3288                           ;psect for function _srand
  3289  1000                     _srand:	
  3290                           
  3291                           ;incstack = 0
  3292                           ; Regs used in _srand: [wreg]
  3293  1000  0870               	movf	srand@x,w
  3294  1001  1683               	bsf	3,5	;RP0=1, select bank1
  3295  1002  1303               	bcf	3,6	;RP1=0, select bank1
  3296  1003  00DD               	movwf	_randx^(0+128)
  3297  1004  0871               	movf	srand@x+1,w
  3298  1005  00DE               	movwf	(_randx^(0+128)+1)
  3299  1006  01DF               	clrf	(_randx^(0+128)+2)
  3300  1007  01E0               	clrf	(_randx^(0+128)+3)
  3301  1008  0008               	return
  3302  1009                     __end_of_srand:	
  3303                           
  3304                           	psect	text3
  3305  1294                     __ptext3:	
  3306 ;; *************** function _max7219_init1 *****************
  3307 ;; Defined at:
  3308 ;;		line 49 in file "../max7219.h"
  3309 ;; Parameters:    Size  Location     Type
  3310 ;;		None
  3311 ;; Auto vars:     Size  Location     Type
  3312 ;;		None
  3313 ;; Return value:  Size  Location     Type
  3314 ;;                  1    wreg      void 
  3315 ;; Registers used:
  3316 ;;		wreg, status,2, status,0, pclath, cstack
  3317 ;; Tracked objects:
  3318 ;;		On entry : 0/0
  3319 ;;		On exit  : 0/0
  3320 ;;		Unchanged: 0/0
  3321 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3322 ;;      Params:         0       0       0       0       0
  3323 ;;      Locals:         0       0       0       0       0
  3324 ;;      Temps:          1       0       0       0       0
  3325 ;;      Totals:         1       0       0       0       0
  3326 ;;Total ram usage:        1 bytes
  3327 ;; Hardware stack levels used:    1
  3328 ;; Hardware stack levels required when called:    2
  3329 ;; This function calls:
  3330 ;;		_Write_Byte
  3331 ;; This function is called by:
  3332 ;;		_main_init
  3333 ;; This function uses a non-reentrant model
  3334 ;;
  3335                           
  3336                           
  3337                           ;psect for function _max7219_init1
  3338  1294                     _max7219_init1:	
  3339                           
  3340                           ;max7219.h: 51: (TRISAbits.TRISA3 = 0);
  3341                           
  3342                           ;incstack = 0
  3343                           ; Regs used in _max7219_init1: [wreg+status,2+status,0+pclath+cstack]
  3344  1294  1683               	bsf	3,5	;RP0=1, select bank1
  3345  1295  1303               	bcf	3,6	;RP1=0, select bank1
  3346  1296  1185               	bcf	5,3	;volatile
  3347                           
  3348                           ;max7219.h: 52: (TRISAbits.TRISA2 = 0);
  3349  1297  1105               	bcf	5,2	;volatile
  3350                           
  3351                           ;max7219.h: 53: (TRISAbits.TRISA1 = 0);
  3352  1298  1085               	bcf	5,1	;volatile
  3353                           
  3354                           ;max7219.h: 55: ANSELbits.ANS1 = 0;
  3355  1299  1683               	bsf	3,5	;RP0=1, select bank3
  3356  129A  1703               	bsf	3,6	;RP1=1, select bank3
  3357  129B  1088               	bcf	8,1	;volatile
  3358                           
  3359                           ;max7219.h: 56: ANSELbits.ANS2 = 0;
  3360  129C  1108               	bcf	8,2	;volatile
  3361                           
  3362                           ;max7219.h: 57: ANSELbits.ANS3 = 0;
  3363  129D  1188               	bcf	8,3	;volatile
  3364                           
  3365                           ;max7219.h: 58: RA2 = 1;
  3366  129E  1283               	bcf	3,5	;RP0=0, select bank0
  3367  129F  1303               	bcf	3,6	;RP1=0, select bank0
  3368  12A0  1505               	bsf	5,2	;volatile
  3369                           
  3370                           ;max7219.h: 59: RA1 = 0;
  3371  12A1  1085               	bcf	5,1	;volatile
  3372                           
  3373                           ;max7219.h: 61: Write_Byte(0x09, 0x00);
  3374  12A2  01F4               	clrf	Write_Byte@myValue
  3375  12A3  3009               	movlw	9
  3376  12A4  160A  158A  277B  160A  118A  	fcall	_Write_Byte
  3377                           
  3378                           ;max7219.h: 62: Write_Byte(0x0A, 0x0F);
  3379  12A9  300F               	movlw	15
  3380  12AA  00F6               	movwf	??_max7219_init1
  3381  12AB  0876               	movf	??_max7219_init1,w
  3382  12AC  00F4               	movwf	Write_Byte@myValue
  3383  12AD  300A               	movlw	10
  3384  12AE  160A  158A  277B  160A  118A  	fcall	_Write_Byte
  3385                           
  3386                           ;max7219.h: 63: Write_Byte(0x0B, 0x07);
  3387  12B3  3007               	movlw	7
  3388  12B4  00F6               	movwf	??_max7219_init1
  3389  12B5  0876               	movf	??_max7219_init1,w
  3390  12B6  00F4               	movwf	Write_Byte@myValue
  3391  12B7  300B               	movlw	11
  3392  12B8  160A  158A  277B  160A  118A  	fcall	_Write_Byte
  3393                           
  3394                           ;max7219.h: 64: Write_Byte(0x0C, 0x01);
  3395  12BD  01F4               	clrf	Write_Byte@myValue
  3396  12BE  0AF4               	incf	Write_Byte@myValue,f
  3397  12BF  300C               	movlw	12
  3398  12C0  160A  158A  277B  160A  118A  	fcall	_Write_Byte
  3399                           
  3400                           ;max7219.h: 65: Write_Byte(0x00, 0xFF);
  3401  12C5  30FF               	movlw	255
  3402  12C6  00F6               	movwf	??_max7219_init1
  3403  12C7  0876               	movf	??_max7219_init1,w
  3404  12C8  00F4               	movwf	Write_Byte@myValue
  3405  12C9  3000               	movlw	0
  3406  12CA  160A  158A  277B   	fcall	_Write_Byte
  3407  12CD  0008               	return
  3408  12CE                     __end_of_max7219_init1:	
  3409                           
  3410                           	psect	text4
  3411  11C5                     __ptext4:	
  3412 ;; *************** function _eeprom_read_int *****************
  3413 ;; Defined at:
  3414 ;;		line 12 in file "../eeprom_operator.h"
  3415 ;; Parameters:    Size  Location     Type
  3416 ;;  at              1    wreg     unsigned char 
  3417 ;; Auto vars:     Size  Location     Type
  3418 ;;  at              1   23[BANK0 ] unsigned char 
  3419 ;;  value           2   24[BANK0 ] unsigned int 
  3420 ;; Return value:  Size  Location     Type
  3421 ;;                  2   19[BANK0 ] unsigned int 
  3422 ;; Registers used:
  3423 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3424 ;; Tracked objects:
  3425 ;;		On entry : 0/0
  3426 ;;		On exit  : 0/0
  3427 ;;		Unchanged: 0/0
  3428 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3429 ;;      Params:         0       2       0       0       0
  3430 ;;      Locals:         0       3       0       0       0
  3431 ;;      Temps:          0       2       0       0       0
  3432 ;;      Totals:         0       7       0       0       0
  3433 ;;Total ram usage:        7 bytes
  3434 ;; Hardware stack levels used:    1
  3435 ;; Hardware stack levels required when called:    2
  3436 ;; This function calls:
  3437 ;;		_USARTWriteString
  3438 ;;		_eeprom_read
  3439 ;;		_sprintf
  3440 ;; This function is called by:
  3441 ;;		_main_init
  3442 ;; This function uses a non-reentrant model
  3443 ;;
  3444                           
  3445                           
  3446                           ;psect for function _eeprom_read_int
  3447  11C5                     _eeprom_read_int:	
  3448                           
  3449                           ;incstack = 0
  3450                           ; Regs used in _eeprom_read_int: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3451                           ;eeprom_read_int@at stored from wreg
  3452  11C5  1283               	bcf	3,5	;RP0=0, select bank0
  3453  11C6  1303               	bcf	3,6	;RP1=0, select bank0
  3454  11C7  00B7               	movwf	eeprom_read_int@at
  3455                           
  3456                           ;eeprom_operator.h: 14: uint16_t value = 0;
  3457  11C8  01B8               	clrf	eeprom_read_int@value
  3458  11C9  01B9               	clrf	eeprom_read_int@value+1
  3459                           
  3460                           ;eeprom_operator.h: 15: value = eeprom_read(at) << 8;
  3461  11CA  0837               	movf	eeprom_read_int@at,w
  3462  11CB  160A  158A  27C9  160A  118A  	fcall	_eeprom_read
  3463  11D0  1283               	bcf	3,5	;RP0=0, select bank0
  3464  11D1  1303               	bcf	3,6	;RP1=0, select bank0
  3465  11D2  00B5               	movwf	??_eeprom_read_int
  3466  11D3  01B6               	clrf	??_eeprom_read_int+1
  3467  11D4  0835               	movf	??_eeprom_read_int,w
  3468  11D5  00B6               	movwf	??_eeprom_read_int+1
  3469  11D6  01B5               	clrf	??_eeprom_read_int
  3470  11D7  0835               	movf	??_eeprom_read_int,w
  3471  11D8  00B8               	movwf	eeprom_read_int@value
  3472  11D9  0836               	movf	??_eeprom_read_int+1,w
  3473  11DA  00B9               	movwf	eeprom_read_int@value+1
  3474                           
  3475                           ;eeprom_operator.h: 16: value += eeprom_read(at + 1);
  3476  11DB  0837               	movf	eeprom_read_int@at,w
  3477  11DC  3E01               	addlw	1
  3478  11DD  160A  158A  27C9   	fcall	_eeprom_read
  3479  11E0  1283               	bcf	3,5	;RP0=0, select bank0
  3480  11E1  1303               	bcf	3,6	;RP1=0, select bank0
  3481  11E2  00B5               	movwf	??_eeprom_read_int
  3482  11E3  01B6               	clrf	??_eeprom_read_int+1
  3483  11E4  0835               	movf	??_eeprom_read_int,w
  3484  11E5  07B8               	addwf	eeprom_read_int@value,f
  3485  11E6  1803               	skipnc
  3486  11E7  0AB9               	incf	eeprom_read_int@value+1,f
  3487  11E8  0836               	movf	??_eeprom_read_int+1,w
  3488  11E9  07B9               	addwf	eeprom_read_int@value+1,f
  3489                           
  3490                           ;eeprom_operator.h: 18: return value;
  3491                           
  3492                           ;eeprom_operator.h: 17: do { if(0) { sprintf(g_debug, "eeprom_read_int = %d""\r\n", valu
      +                          e); USARTWriteString(g_debug); } } while (0);;
  3493  11EA  1283               	bcf	3,5	;RP0=0, select bank0
  3494  11EB  1303               	bcf	3,6	;RP1=0, select bank0
  3495  11EC  0839               	movf	eeprom_read_int@value+1,w
  3496  11ED  00B4               	movwf	?_eeprom_read_int+1
  3497  11EE  0838               	movf	eeprom_read_int@value,w
  3498  11EF  00B3               	movwf	?_eeprom_read_int
  3499  11F0  0008               	return
  3500  11F1                     __end_of_eeprom_read_int:	
  3501                           
  3502                           	psect	text5
  3503  1FC9                     __ptext5:	
  3504 ;; *************** function _eeprom_read *****************
  3505 ;; Defined at:
  3506 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\pic\eeread.c"
  3507 ;; Parameters:    Size  Location     Type
  3508 ;;  addr            1    wreg     unsigned char 
  3509 ;; Auto vars:     Size  Location     Type
  3510 ;;  addr            1    1[COMMON] unsigned char 
  3511 ;; Return value:  Size  Location     Type
  3512 ;;                  1    wreg      unsigned char 
  3513 ;; Registers used:
  3514 ;;		wreg, status,2, status,0
  3515 ;; Tracked objects:
  3516 ;;		On entry : 0/0
  3517 ;;		On exit  : 0/0
  3518 ;;		Unchanged: 0/0
  3519 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3520 ;;      Params:         0       0       0       0       0
  3521 ;;      Locals:         1       0       0       0       0
  3522 ;;      Temps:          1       0       0       0       0
  3523 ;;      Totals:         2       0       0       0       0
  3524 ;;Total ram usage:        2 bytes
  3525 ;; Hardware stack levels used:    1
  3526 ;; This function calls:
  3527 ;;		Nothing
  3528 ;; This function is called by:
  3529 ;;		_eeprom_read_int
  3530 ;; This function uses a non-reentrant model
  3531 ;;
  3532                           
  3533                           
  3534                           ;psect for function _eeprom_read
  3535  1FC9                     _eeprom_read:	
  3536                           
  3537                           ;incstack = 0
  3538                           ; Regs used in _eeprom_read: [wreg+status,2+status,0]
  3539                           ;eeprom_read@addr stored from wreg
  3540  1FC9  00F1               	movwf	eeprom_read@addr
  3541  1FCA                     l756:	
  3542  1FCA  0064               	clrwdt	;# 
  3543  1FCB  1683               	bsf	3,5	;RP0=1, select bank3
  3544  1FCC  1703               	bsf	3,6	;RP1=1, select bank3
  3545  1FCD  188C               	btfsc	12,1	;volsfr
  3546  1FCE  2FCA               	goto	l756
  3547  1FCF  0871               	movf	eeprom_read@addr,w
  3548  1FD0  1283               	bcf	3,5	;RP0=0, select bank2
  3549  1FD1  1703               	bsf	3,6	;RP1=1, select bank2
  3550  1FD2  008D               	movwf	13	;volatile
  3551  1FD3  303F               	movlw	63
  3552  1FD4  00F0               	movwf	??_eeprom_read
  3553  1FD5  0870               	movf	??_eeprom_read,w
  3554  1FD6  1683               	bsf	3,5	;RP0=1, select bank3
  3555  1FD7  1703               	bsf	3,6	;RP1=1, select bank3
  3556  1FD8  058C               	andwf	12,f	;volsfr
  3557  1FD9  140C               	bsf	12,0	;volsfr
  3558  1FDA  1003               	clrc
  3559  1FDB  180C               	btfsc	12,0	;volsfr
  3560  1FDC  1403               	setc
  3561  1FDD  3000               	movlw	0
  3562  1FDE  1803               	skipnc
  3563  1FDF  3001               	movlw	1
  3564  1FE0  1283               	bcf	3,5	;RP0=0, select bank2
  3565  1FE1  1703               	bsf	3,6	;RP1=1, select bank2
  3566  1FE2  080C               	movf	12,w	;volatile
  3567  1FE3  0008               	return
  3568  1FE4                     __end_of_eeprom_read:	
  3569                           
  3570                           	psect	text6
  3571  1F2B                     __ptext6:	
  3572 ;; *************** function _dbg_init *****************
  3573 ;; Defined at:
  3574 ;;		line 83 in file "../debug_uart.h"
  3575 ;; Parameters:    Size  Location     Type
  3576 ;;		None
  3577 ;; Auto vars:     Size  Location     Type
  3578 ;;		None
  3579 ;; Return value:  Size  Location     Type
  3580 ;;                  1    wreg      void 
  3581 ;; Registers used:
  3582 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3583 ;; Tracked objects:
  3584 ;;		On entry : 0/0
  3585 ;;		On exit  : 0/0
  3586 ;;		Unchanged: 0/0
  3587 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3588 ;;      Params:         0       0       0       0       0
  3589 ;;      Locals:         0       0       0       0       0
  3590 ;;      Temps:          0       0       0       0       0
  3591 ;;      Totals:         0       0       0       0       0
  3592 ;;Total ram usage:        0 bytes
  3593 ;; Hardware stack levels used:    1
  3594 ;; Hardware stack levels required when called:    1
  3595 ;; This function calls:
  3596 ;;		_USARTInit
  3597 ;; This function is called by:
  3598 ;;		_main_init
  3599 ;; This function uses a non-reentrant model
  3600 ;;
  3601                           
  3602                           
  3603                           ;psect for function _dbg_init
  3604  1F2B                     _dbg_init:	
  3605                           
  3606                           ;debug_uart.h: 85: USARTInit(9600);
  3607                           
  3608                           ;incstack = 0
  3609                           ; Regs used in _dbg_init: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3610  1F2B  3080               	movlw	128
  3611  1F2C  00F0               	movwf	USARTInit@baud_rate
  3612  1F2D  3025               	movlw	37
  3613  1F2E  00F1               	movwf	USARTInit@baud_rate+1
  3614  1F2F  160A  118A  2386   	fcall	_USARTInit
  3615  1F32  0008               	return
  3616  1F33                     __end_of_dbg_init:	
  3617                           
  3618                           	psect	text7
  3619  1386                     __ptext7:	
  3620 ;; *************** function _USARTInit *****************
  3621 ;; Defined at:
  3622 ;;		line 31 in file "../usart_pic16.c"
  3623 ;; Parameters:    Size  Location     Type
  3624 ;;  baud_rate       2    0[COMMON] unsigned int 
  3625 ;; Auto vars:     Size  Location     Type
  3626 ;;		None
  3627 ;; Return value:  Size  Location     Type
  3628 ;;                  1    wreg      void 
  3629 ;; Registers used:
  3630 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  3631 ;; Tracked objects:
  3632 ;;		On entry : 0/0
  3633 ;;		On exit  : 0/0
  3634 ;;		Unchanged: 0/0
  3635 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3636 ;;      Params:         2       0       0       0       0
  3637 ;;      Locals:         0       0       0       0       0
  3638 ;;      Temps:          0       0       0       0       0
  3639 ;;      Totals:         2       0       0       0       0
  3640 ;;Total ram usage:        2 bytes
  3641 ;; Hardware stack levels used:    1
  3642 ;; This function calls:
  3643 ;;		Nothing
  3644 ;; This function is called by:
  3645 ;;		_dbg_init
  3646 ;; This function uses a non-reentrant model
  3647 ;;
  3648                           
  3649                           
  3650                           ;psect for function _USARTInit
  3651  1386                     _USARTInit:	
  3652                           
  3653                           ;usart_pic16.c: 33: switch (baud_rate) {
  3654                           
  3655                           ;incstack = 0
  3656                           ; Regs used in _USARTInit: [wreg-fsr0h+status,2+status,0]
  3657  1386  2B92               	goto	l3354
  3658  1387                     l3344:	
  3659                           ;usart_pic16.c: 34: case 9600:
  3660                           
  3661                           
  3662                           ;usart_pic16.c: 35: SPBRG = 129;
  3663  1387  3081               	movlw	129
  3664  1388  2B8E               	goto	L3
  3665  1389                     l3346:	
  3666                           ;usart_pic16.c: 37: case 19200:
  3667                           
  3668                           ;usart_pic16.c: 36: break;
  3669                           
  3670                           
  3671                           ;usart_pic16.c: 38: SPBRG = 64;
  3672  1389  3040               	movlw	64
  3673  138A  2B8E               	goto	L3
  3674  138B                     l3348:	
  3675                           ;usart_pic16.c: 40: case 28800:
  3676                           
  3677                           ;usart_pic16.c: 39: break;
  3678                           
  3679                           
  3680                           ;usart_pic16.c: 41: SPBRG = 42;
  3681  138B  302A               	movlw	42
  3682  138C  2B8E               	goto	L3
  3683  138D                     l3350:	
  3684                           ;usart_pic16.c: 43: case 33600:
  3685                           
  3686                           ;usart_pic16.c: 42: break;
  3687                           
  3688                           
  3689                           ;usart_pic16.c: 44: SPBRG = 36;
  3690  138D  3024               	movlw	36
  3691  138E                     L3:	
  3692  138E  1683               	bsf	3,5	;RP0=1, select bank1
  3693  138F  1303               	bcf	3,6	;RP1=0, select bank1
  3694  1390  0099               	movwf	25	;volatile
  3695                           
  3696                           ;usart_pic16.c: 46: }
  3697                           
  3698                           ;usart_pic16.c: 45: break;
  3699  1391  2BB4               	goto	l658
  3700  1392                     l3354:	
  3701                           
  3702                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 4 sub-sw
      +                          itches
  3703                           ; Switch size 1, requested type "space"
  3704                           ; Number of cases is 4, Range of values is 37 to 131
  3705                           ; switch strategies available:
  3706                           ; Name         Instructions Cycles
  3707                           ; simple_byte           13     7 (average)
  3708                           ; jumptable            263     9 (fixed)
  3709                           ;	Chosen strategy is simple_byte
  3710  1392  0871               	movf	USARTInit@baud_rate+1,w
  3711  1393  3A25               	xorlw	37	; case 37
  3712  1394  1903               	skipnz
  3713  1395  2BA0               	goto	l4754
  3714  1396  3A6E               	xorlw	110	; case 75
  3715  1397  1903               	skipnz
  3716  1398  2BA5               	goto	l4756
  3717  1399  3A3B               	xorlw	59	; case 112
  3718  139A  1903               	skipnz
  3719  139B  2BAA               	goto	l4758
  3720  139C  3AF3               	xorlw	243	; case 131
  3721  139D  1903               	skipnz
  3722  139E  2BAF               	goto	l4760
  3723  139F  2BB4               	goto	l658
  3724  13A0                     l4754:	
  3725                           
  3726                           ; Switch size 1, requested type "space"
  3727                           ; Number of cases is 1, Range of values is 128 to 128
  3728                           ; switch strategies available:
  3729                           ; Name         Instructions Cycles
  3730                           ; simple_byte            4     3 (average)
  3731                           ; direct_byte           14    11 (fixed)
  3732                           ; jumptable            263     9 (fixed)
  3733                           ;	Chosen strategy is simple_byte
  3734  13A0  0870               	movf	USARTInit@baud_rate,w
  3735  13A1  3A80               	xorlw	128	; case 128
  3736  13A2  1903               	skipnz
  3737  13A3  2B87               	goto	l3344
  3738  13A4  2BB4               	goto	l658
  3739  13A5                     l4756:	
  3740                           
  3741                           ; Switch size 1, requested type "space"
  3742                           ; Number of cases is 1, Range of values is 0 to 0
  3743                           ; switch strategies available:
  3744                           ; Name         Instructions Cycles
  3745                           ; simple_byte            4     3 (average)
  3746                           ; direct_byte           11     8 (fixed)
  3747                           ; jumptable            260     6 (fixed)
  3748                           ;	Chosen strategy is simple_byte
  3749  13A5  0870               	movf	USARTInit@baud_rate,w
  3750  13A6  3A00               	xorlw	0	; case 0
  3751  13A7  1903               	skipnz
  3752  13A8  2B89               	goto	l3346
  3753  13A9  2BB4               	goto	l658
  3754  13AA                     l4758:	
  3755                           
  3756                           ; Switch size 1, requested type "space"
  3757                           ; Number of cases is 1, Range of values is 128 to 128
  3758                           ; switch strategies available:
  3759                           ; Name         Instructions Cycles
  3760                           ; simple_byte            4     3 (average)
  3761                           ; direct_byte           14    11 (fixed)
  3762                           ; jumptable            263     9 (fixed)
  3763                           ;	Chosen strategy is simple_byte
  3764  13AA  0870               	movf	USARTInit@baud_rate,w
  3765  13AB  3A80               	xorlw	128	; case 128
  3766  13AC  1903               	skipnz
  3767  13AD  2B8B               	goto	l3348
  3768  13AE  2BB4               	goto	l658
  3769  13AF                     l4760:	
  3770                           
  3771                           ; Switch size 1, requested type "space"
  3772                           ; Number of cases is 1, Range of values is 64 to 64
  3773                           ; switch strategies available:
  3774                           ; Name         Instructions Cycles
  3775                           ; simple_byte            4     3 (average)
  3776                           ; direct_byte           14    11 (fixed)
  3777                           ; jumptable            263     9 (fixed)
  3778                           ;	Chosen strategy is simple_byte
  3779  13AF  0870               	movf	USARTInit@baud_rate,w
  3780  13B0  3A40               	xorlw	64	; case 64
  3781  13B1  1903               	skipnz
  3782  13B2  2B8D               	goto	l3350
  3783  13B3  2BB4               	goto	l658
  3784  13B4                     l658:	
  3785                           
  3786                           ;usart_pic16.c: 49: TXSTAbits.TX9 = 0;
  3787  13B4  1683               	bsf	3,5	;RP0=1, select bank1
  3788  13B5  1303               	bcf	3,6	;RP1=0, select bank1
  3789  13B6  1318               	bcf	24,6	;volatile
  3790                           
  3791                           ;usart_pic16.c: 50: TXSTAbits.TXEN = 1;
  3792  13B7  1698               	bsf	24,5	;volatile
  3793                           
  3794                           ;usart_pic16.c: 51: TXSTAbits.SYNC = 0;
  3795  13B8  1218               	bcf	24,4	;volatile
  3796                           
  3797                           ;usart_pic16.c: 52: TXSTAbits.BRGH = 1;
  3798  13B9  1518               	bsf	24,2	;volatile
  3799                           
  3800                           ;usart_pic16.c: 55: RCSTAbits.SPEN = 1;
  3801  13BA  1283               	bcf	3,5	;RP0=0, select bank0
  3802  13BB  1303               	bcf	3,6	;RP1=0, select bank0
  3803  13BC  1798               	bsf	24,7	;volatile
  3804                           
  3805                           ;usart_pic16.c: 56: RCSTAbits.RX9 = 0;
  3806  13BD  1318               	bcf	24,6	;volatile
  3807                           
  3808                           ;usart_pic16.c: 57: RCSTAbits.CREN = 1;
  3809  13BE  1618               	bsf	24,4	;volatile
  3810                           
  3811                           ;usart_pic16.c: 58: RCSTAbits.ADDEN = 0;
  3812  13BF  1198               	bcf	24,3	;volatile
  3813                           
  3814                           ;usart_pic16.c: 61: RCIE = 1;
  3815  13C0  1683               	bsf	3,5	;RP0=1, select bank1
  3816  13C1  1303               	bcf	3,6	;RP1=0, select bank1
  3817  13C2  168C               	bsf	12,5	;volatile
  3818                           
  3819                           ;usart_pic16.c: 62: PEIE = 1;
  3820  13C3  170B               	bsf	11,6	;volatile
  3821                           
  3822                           ;usart_pic16.c: 64: (GIE = 1);
  3823  13C4  178B               	bsf	11,7	;volatile
  3824  13C5  0008               	return
  3825  13C6                     __end_of_USARTInit:	
  3826                           
  3827                           	psect	text8
  3828  1784                     __ptext8:	
  3829 ;; *************** function _lg_merge *****************
  3830 ;; Defined at:
  3831 ;;		line 231 in file "../logic.h"
  3832 ;; Parameters:    Size  Location     Type
  3833 ;;  x               1    wreg     char 
  3834 ;;  y               1   34[BANK0 ] char 
  3835 ;;  matrix4x4       2   35[BANK0 ] PTR const struct .
  3836 ;;		 -> NULL(0), g_matrix4x4(96), 
  3837 ;;  matrix8x8       1   37[BANK0 ] PTR struct .
  3838 ;;		 -> g_matrix8x8(8), 
  3839 ;; Auto vars:     Size  Location     Type
  3840 ;;  x               1   40[BANK0 ] char 
  3841 ;;  col             1   42[BANK0 ] unsigned char 
  3842 ;;  row             1   41[BANK0 ] unsigned char 
  3843 ;; Return value:  Size  Location     Type
  3844 ;;                  1    wreg      void 
  3845 ;; Registers used:
  3846 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3847 ;; Tracked objects:
  3848 ;;		On entry : 0/0
  3849 ;;		On exit  : 0/0
  3850 ;;		Unchanged: 0/0
  3851 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3852 ;;      Params:         0       4       0       0       0
  3853 ;;      Locals:         0       3       0       0       0
  3854 ;;      Temps:          0       2       0       0       0
  3855 ;;      Totals:         0       9       0       0       0
  3856 ;;Total ram usage:        9 bytes
  3857 ;; Hardware stack levels used:    1
  3858 ;; Hardware stack levels required when called:    4
  3859 ;; This function calls:
  3860 ;;		_dbg_print_MATRIX4x4
  3861 ;;		_dbg_print_MATRIX8x8
  3862 ;;		_get_matrix_bit
  3863 ;;		_set_matrix_bit
  3864 ;; This function is called by:
  3865 ;;		_main
  3866 ;; This function uses a non-reentrant model
  3867 ;;
  3868                           
  3869                           
  3870                           ;psect for function _lg_merge
  3871  1784                     _lg_merge:	
  3872                           
  3873                           ;incstack = 0
  3874                           ; Regs used in _lg_merge: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3875                           ;lg_merge@x stored from wreg
  3876  1784  1283               	bcf	3,5	;RP0=0, select bank0
  3877  1785  1303               	bcf	3,6	;RP1=0, select bank0
  3878  1786  00C8               	movwf	lg_merge@x
  3879                           
  3880                           ;logic.h: 233: dbg_print_MATRIX4x4(0, "Before merge MATRIX8x8", x, y, matrix4x4);
  3881  1787  30E6               	movlw	low (STR_48| (0+32768))
  3882  1788  00B3               	movwf	dbg_print_MATRIX4x4@lable
  3883  1789  308A               	movlw	high (STR_48| (0+32768))
  3884  178A  00B4               	movwf	dbg_print_MATRIX4x4@lable+1
  3885  178B  0848               	movf	lg_merge@x,w
  3886  178C  00C6               	movwf	??_lg_merge
  3887  178D  0846               	movf	??_lg_merge,w
  3888  178E  00B5               	movwf	dbg_print_MATRIX4x4@x
  3889  178F  0842               	movf	lg_merge@y,w
  3890  1790  00C7               	movwf	??_lg_merge+1
  3891  1791  0847               	movf	??_lg_merge+1,w
  3892  1792  00B6               	movwf	dbg_print_MATRIX4x4@y
  3893  1793  0843               	movf	lg_merge@matrix4x4,w
  3894  1794  00B7               	movwf	dbg_print_MATRIX4x4@matrix
  3895  1795  0844               	movf	lg_merge@matrix4x4+1,w
  3896  1796  00B8               	movwf	dbg_print_MATRIX4x4@matrix+1
  3897  1797  3000               	movlw	0
  3898  1798  120A  118A  2125  160A  118A  	fcall	_dbg_print_MATRIX4x4
  3899                           
  3900                           ;logic.h: 234: dbg_print_MATRIX8x8(0, "Before merge MATRIX8x8", matrix8x8);
  3901  179D  30E6               	movlw	low (STR_48| (0+32768))
  3902  179E  1283               	bcf	3,5	;RP0=0, select bank0
  3903  179F  1303               	bcf	3,6	;RP1=0, select bank0
  3904  17A0  00B3               	movwf	dbg_print_MATRIX8x8@lable
  3905  17A1  308A               	movlw	high (STR_48| (0+32768))
  3906  17A2  00B4               	movwf	dbg_print_MATRIX8x8@lable+1
  3907  17A3  0845               	movf	lg_merge@matrix8x8,w
  3908  17A4  00C6               	movwf	??_lg_merge
  3909  17A5  0846               	movf	??_lg_merge,w
  3910  17A6  00B5               	movwf	dbg_print_MATRIX8x8@matrix
  3911  17A7  3000               	movlw	0
  3912  17A8  120A  158A  2757  160A  118A  	fcall	_dbg_print_MATRIX8x8
  3913                           
  3914                           ;logic.h: 236: for(uint8_t row = 0; row < 4; row++)
  3915  17AD  1283               	bcf	3,5	;RP0=0, select bank0
  3916  17AE  1303               	bcf	3,6	;RP1=0, select bank0
  3917  17AF  01C9               	clrf	lg_merge@row
  3918  17B0  3004               	movlw	4
  3919  17B1  0249               	subwf	lg_merge@row,w
  3920  17B2  1803               	btfsc	3,0
  3921  17B3  2FF3               	goto	l4330
  3922  17B4                     l4312:	
  3923                           
  3924                           ;logic.h: 237: {
  3925                           ;logic.h: 238: for(uint8_t col = 0; col < 4; col++)
  3926  17B4  01CA               	clrf	lg_merge@col
  3927  17B5  3004               	movlw	4
  3928  17B6  024A               	subwf	lg_merge@col,w
  3929  17B7  1803               	btfsc	3,0
  3930  17B8  2FEB               	goto	l4326
  3931  17B9                     l4318:	
  3932                           
  3933                           ;logic.h: 239: {
  3934                           ;logic.h: 240: if(get_matrix_bit((uint8_t*)matrix4x4->row, row, col) == 1)
  3935  17B9  0843               	movf	lg_merge@matrix4x4,w
  3936  17BA  00F7               	movwf	get_matrix_bit@byte
  3937  17BB  0844               	movf	lg_merge@matrix4x4+1,w
  3938  17BC  00F8               	movwf	get_matrix_bit@byte+1
  3939  17BD  0849               	movf	lg_merge@row,w
  3940  17BE  00C6               	movwf	??_lg_merge
  3941  17BF  0846               	movf	??_lg_merge,w
  3942  17C0  00F9               	movwf	get_matrix_bit@row
  3943  17C1  084A               	movf	lg_merge@col,w
  3944  17C2  00C7               	movwf	??_lg_merge+1
  3945  17C3  0847               	movf	??_lg_merge+1,w
  3946  17C4  00FA               	movwf	get_matrix_bit@col
  3947  17C5  160A  158A  273B  160A  118A  	fcall	_get_matrix_bit
  3948  17CA  3A01               	xorlw	1
  3949  17CB  1D03               	skipz
  3950  17CC  2FE1               	goto	l4322
  3951                           
  3952                           ;logic.h: 241: {
  3953                           ;logic.h: 242: set_matrix_bit((uint8_t*)matrix8x8->row, y + row, x + col, 1);
  3954  17CD  1283               	bcf	3,5	;RP0=0, select bank0
  3955  17CE  1303               	bcf	3,6	;RP1=0, select bank0
  3956  17CF  0849               	movf	lg_merge@row,w
  3957  17D0  0742               	addwf	lg_merge@y,w
  3958  17D1  00C6               	movwf	??_lg_merge
  3959  17D2  0846               	movf	??_lg_merge,w
  3960  17D3  00F5               	movwf	set_matrix_bit@row
  3961  17D4  084A               	movf	lg_merge@col,w
  3962  17D5  0748               	addwf	lg_merge@x,w
  3963  17D6  00C7               	movwf	??_lg_merge+1
  3964  17D7  0847               	movf	??_lg_merge+1,w
  3965  17D8  00F6               	movwf	set_matrix_bit@col
  3966  17D9  01F7               	clrf	set_matrix_bit@value
  3967  17DA  0AF7               	incf	set_matrix_bit@value,f
  3968  17DB  0845               	movf	lg_merge@matrix8x8,w
  3969  17DC  160A  158A  274A  160A  118A  	fcall	_set_matrix_bit
  3970  17E1                     l4322:	
  3971  17E1  3001               	movlw	1
  3972  17E2  1283               	bcf	3,5	;RP0=0, select bank0
  3973  17E3  1303               	bcf	3,6	;RP1=0, select bank0
  3974  17E4  00C6               	movwf	??_lg_merge
  3975  17E5  0846               	movf	??_lg_merge,w
  3976  17E6  07CA               	addwf	lg_merge@col,f
  3977  17E7  3004               	movlw	4
  3978  17E8  024A               	subwf	lg_merge@col,w
  3979  17E9  1C03               	skipc
  3980  17EA  2FB9               	goto	l4318
  3981  17EB                     l4326:	
  3982  17EB  3001               	movlw	1
  3983  17EC  00C6               	movwf	??_lg_merge
  3984  17ED  0846               	movf	??_lg_merge,w
  3985  17EE  07C9               	addwf	lg_merge@row,f
  3986  17EF  3004               	movlw	4
  3987  17F0  0249               	subwf	lg_merge@row,w
  3988  17F1  1C03               	skipc
  3989  17F2  2FB4               	goto	l4312
  3990  17F3                     l4330:	
  3991                           
  3992                           ;logic.h: 243: }
  3993                           ;logic.h: 244: }
  3994                           ;logic.h: 245: }
  3995                           ;logic.h: 246: dbg_print_MATRIX8x8(0, "After merge MATRIX8x8", matrix8x8);
  3996  17F3  3014               	movlw	low (STR_50| (0+32768))
  3997  17F4  00B3               	movwf	dbg_print_MATRIX8x8@lable
  3998  17F5  308B               	movlw	high (STR_50| (0+32768))
  3999  17F6  00B4               	movwf	dbg_print_MATRIX8x8@lable+1
  4000  17F7  0845               	movf	lg_merge@matrix8x8,w
  4001  17F8  00C6               	movwf	??_lg_merge
  4002  17F9  0846               	movf	??_lg_merge,w
  4003  17FA  00B5               	movwf	dbg_print_MATRIX8x8@matrix
  4004  17FB  3000               	movlw	0
  4005  17FC  120A  158A  2757   	fcall	_dbg_print_MATRIX8x8
  4006  17FF  0008               	return
  4007  1800                     __end_of_lg_merge:	
  4008                           
  4009                           	psect	text9
  4010  1717                     __ptext9:	
  4011 ;; *************** function _lg_hit_land *****************
  4012 ;; Defined at:
  4013 ;;		line 90 in file "../logic.h"
  4014 ;; Parameters:    Size  Location     Type
  4015 ;;  x               1    wreg     char 
  4016 ;;  y               1   19[BANK0 ] char 
  4017 ;;  matrix4x4       2   20[BANK0 ] PTR const struct .
  4018 ;;		 -> NULL(0), g_matrix4x4(96), 
  4019 ;;  matrix8x8       1   22[BANK0 ] PTR const struct .
  4020 ;;		 -> g_matrix8x8(8), 
  4021 ;; Auto vars:     Size  Location     Type
  4022 ;;  x               1   25[BANK0 ] char 
  4023 ;;  col             1   26[BANK0 ] char 
  4024 ;;  row             1   27[BANK0 ] char 
  4025 ;; Return value:  Size  Location     Type
  4026 ;;                  1    wreg      unsigned char 
  4027 ;; Registers used:
  4028 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  4029 ;; Tracked objects:
  4030 ;;		On entry : 0/0
  4031 ;;		On exit  : 0/0
  4032 ;;		Unchanged: 0/0
  4033 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4034 ;;      Params:         0       4       0       0       0
  4035 ;;      Locals:         0       3       0       0       0
  4036 ;;      Temps:          0       2       0       0       0
  4037 ;;      Totals:         0       9       0       0       0
  4038 ;;Total ram usage:        9 bytes
  4039 ;; Hardware stack levels used:    1
  4040 ;; Hardware stack levels required when called:    3
  4041 ;; This function calls:
  4042 ;;		_USARTWriteString
  4043 ;;		_get_matrix_bit
  4044 ;;		_sprintf
  4045 ;; This function is called by:
  4046 ;;		_main
  4047 ;; This function uses a non-reentrant model
  4048 ;;
  4049                           
  4050                           
  4051                           ;psect for function _lg_hit_land
  4052  1717                     _lg_hit_land:	
  4053                           
  4054                           ;incstack = 0
  4055                           ; Regs used in _lg_hit_land: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  4056                           ;lg_hit_land@x stored from wreg
  4057  1717  1283               	bcf	3,5	;RP0=0, select bank0
  4058  1718  1303               	bcf	3,6	;RP1=0, select bank0
  4059  1719  00B9               	movwf	lg_hit_land@x
  4060                           
  4061                           ;logic.h: 94: for(int8_t row = 4 - 1; row >= 0; row--)
  4062                           
  4063                           ;logic.h: 92: do { if(0) { sprintf(g_debug, "==============hit_land============""\r\n");
      +                           USARTWriteString(g_debug); } } while (0);;
  4064  171A  3003               	movlw	3
  4065  171B  1283               	bcf	3,5	;RP0=0, select bank0
  4066  171C  1303               	bcf	3,6	;RP1=0, select bank0
  4067  171D  00B7               	movwf	??_lg_hit_land
  4068  171E  0837               	movf	??_lg_hit_land,w
  4069  171F  00BB               	movwf	lg_hit_land@row
  4070  1720                     L4:	
  4071  1720  1BBB               	btfsc	lg_hit_land@row,7
  4072  1721  2F82               	goto	l4276
  4073                           
  4074                           ;logic.h: 95: {
  4075                           ;logic.h: 96: for(int8_t col = 0; col < 4; col++)
  4076  1722  01BA               	clrf	lg_hit_land@col
  4077  1723  083A               	movf	lg_hit_land@col,w
  4078  1724  3A80               	xorlw	128
  4079  1725  3E7C               	addlw	-132
  4080  1726  1803               	btfsc	3,0
  4081  1727  2F7D               	goto	l4268
  4082  1728                     l4242:	
  4083                           
  4084                           ;logic.h: 97: {
  4085                           ;logic.h: 98: if(get_matrix_bit((uint8_t*)matrix4x4->row, row, col) == 1)
  4086  1728  0834               	movf	lg_hit_land@matrix4x4,w
  4087  1729  00F7               	movwf	get_matrix_bit@byte
  4088  172A  0835               	movf	lg_hit_land@matrix4x4+1,w
  4089  172B  00F8               	movwf	get_matrix_bit@byte+1
  4090  172C  083B               	movf	lg_hit_land@row,w
  4091  172D  00B7               	movwf	??_lg_hit_land
  4092  172E  0837               	movf	??_lg_hit_land,w
  4093  172F  00F9               	movwf	get_matrix_bit@row
  4094  1730  083A               	movf	lg_hit_land@col,w
  4095  1731  00B8               	movwf	??_lg_hit_land+1
  4096  1732  0838               	movf	??_lg_hit_land+1,w
  4097  1733  00FA               	movwf	get_matrix_bit@col
  4098  1734  160A  158A  273B  160A  118A  	fcall	_get_matrix_bit
  4099  1739  3A01               	xorlw	1
  4100  173A  1D03               	skipz
  4101  173B  2F72               	goto	l4264
  4102                           
  4103                           ;logic.h: 99: {
  4104                           ;logic.h: 100: if((y + row) >= (8 - 1))
  4105  173C  1283               	bcf	3,5	;RP0=0, select bank0
  4106  173D  1303               	bcf	3,6	;RP1=0, select bank0
  4107  173E  0833               	movf	lg_hit_land@y,w
  4108  173F  073B               	addwf	lg_hit_land@row,w
  4109  1740  00B7               	movwf	??_lg_hit_land
  4110  1741  01B8               	clrf	??_lg_hit_land+1
  4111  1742  1803               	skipnc
  4112  1743  0AB8               	incf	??_lg_hit_land+1,f
  4113  1744  1BB3               	btfsc	lg_hit_land@y,7
  4114  1745  03B8               	decf	??_lg_hit_land+1,f
  4115  1746  1BBB               	btfsc	lg_hit_land@row,7
  4116  1747  03B8               	decf	??_lg_hit_land+1,f
  4117  1748  1283               	bcf	3,5	;RP0=0, select bank0
  4118  1749  1303               	bcf	3,6	;RP1=0, select bank0
  4119  174A  0838               	movf	??_lg_hit_land+1,w
  4120  174B  3A80               	xorlw	128
  4121  174C  00FF               	movwf	127
  4122  174D  3080               	movlw	128
  4123  174E  027F               	subwf	127,w
  4124  174F  1D03               	skipz
  4125  1750  2F53               	goto	u4305
  4126  1751  3007               	movlw	7
  4127  1752  0237               	subwf	??_lg_hit_land,w
  4128  1753                     u4305:	
  4129  1753  1C03               	skipc
  4130  1754  2F57               	goto	l4254
  4131                           
  4132                           ;logic.h: 103: return 1;
  4133                           
  4134                           ;logic.h: 101: {
  4135                           ;logic.h: 102: do { if(0) { sprintf(g_debug, "hit1 row = %d, col = %d""\r\n", row, col);
      +                           USARTWriteString(g_debug); } } while (0);;
  4136  1755  3001               	movlw	1
  4137  1756  0008               	return
  4138  1757                     l4254:	
  4139                           
  4140                           ;logic.h: 104: }
  4141                           ;logic.h: 106: if(get_matrix_bit((uint8_t*)matrix8x8->row, y + row + 1, x + col) == 1)
  4142  1757  1283               	bcf	3,5	;RP0=0, select bank0
  4143  1758  1303               	bcf	3,6	;RP1=0, select bank0
  4144  1759  0836               	movf	lg_hit_land@matrix8x8,w
  4145  175A  00F7               	movwf	get_matrix_bit@byte
  4146  175B  3000               	movlw	0
  4147  175C  00F8               	movwf	get_matrix_bit@byte+1
  4148  175D  083B               	movf	lg_hit_land@row,w
  4149  175E  0733               	addwf	lg_hit_land@y,w
  4150  175F  3E01               	addlw	1
  4151  1760  00B7               	movwf	??_lg_hit_land
  4152  1761  0837               	movf	??_lg_hit_land,w
  4153  1762  00F9               	movwf	get_matrix_bit@row
  4154  1763  083A               	movf	lg_hit_land@col,w
  4155  1764  0739               	addwf	lg_hit_land@x,w
  4156  1765  00B8               	movwf	??_lg_hit_land+1
  4157  1766  0838               	movf	??_lg_hit_land+1,w
  4158  1767  00FA               	movwf	get_matrix_bit@col
  4159  1768  160A  158A  273B  160A  118A  	fcall	_get_matrix_bit
  4160  176D  3A01               	xorlw	1
  4161  176E  1D03               	skipz
  4162  176F  2F72               	goto	l4264
  4163                           
  4164                           ;logic.h: 109: return 1;
  4165                           
  4166                           ;logic.h: 107: {
  4167                           ;logic.h: 108: do { if(0) { sprintf(g_debug, "hit2 row = %d, col = %d""\r\n", row, col);
      +                           USARTWriteString(g_debug); } } while (0);;
  4168  1770  3001               	movlw	1
  4169  1771  0008               	return
  4170  1772                     l4264:	
  4171  1772  3001               	movlw	1
  4172  1773  1283               	bcf	3,5	;RP0=0, select bank0
  4173  1774  1303               	bcf	3,6	;RP1=0, select bank0
  4174  1775  00B7               	movwf	??_lg_hit_land
  4175  1776  0837               	movf	??_lg_hit_land,w
  4176  1777  07BA               	addwf	lg_hit_land@col,f
  4177  1778  083A               	movf	lg_hit_land@col,w
  4178  1779  3A80               	xorlw	128
  4179  177A  3E7C               	addlw	-132
  4180  177B  1C03               	skipc
  4181  177C  2F28               	goto	l4242
  4182  177D                     l4268:	
  4183  177D  30FF               	movlw	255
  4184  177E  00B7               	movwf	??_lg_hit_land
  4185  177F  0837               	movf	??_lg_hit_land,w
  4186  1780  07BB               	addwf	lg_hit_land@row,f
  4187  1781  2F20               	goto	L4
  4188  1782                     l4276:	
  4189                           ;logic.h: 110: }
  4190                           ;logic.h: 111: }
  4191                           ;logic.h: 112: }
  4192                           ;logic.h: 113: }
  4193                           ;logic.h: 114: do { if(0) { sprintf(g_debug, "not hit""\r\n"); USARTWriteString(g_debug)
      +                          ; } } while (0);;
  4194                           
  4195                           
  4196                           ;logic.h: 115: return 0;
  4197  1782  3000               	movlw	0
  4198  1783  0008               	return
  4199  1784                     __end_of_lg_hit_land:	
  4200                           
  4201                           	psect	text10
  4202  0536                     __ptext10:	
  4203 ;; *************** function _lg_find_best_solution *****************
  4204 ;; Defined at:
  4205 ;;		line 475 in file "../logic.h"
  4206 ;; Parameters:    Size  Location     Type
  4207 ;;		None
  4208 ;; Auto vars:     Size  Location     Type
  4209 ;;  temp_x          1   76[BANK0 ] char 
  4210 ;;  tem_sub_inde    1   70[BANK0 ] unsigned char 
  4211 ;;  temp_risk       2   73[BANK0 ] int 
  4212 ;;  temp_pre_ris    2   71[BANK0 ] int 
  4213 ;;  temp_high       2   66[BANK0 ] unsigned int 
  4214 ;;  temp_y          1   75[BANK0 ] char 
  4215 ;;  tem_pre_sub_    1   69[BANK0 ] char 
  4216 ;;  temp_pre_x      1   68[BANK0 ] char 
  4217 ;;  res             1   65[BANK0 ] unsigned char 
  4218 ;;  right_most_i    1   64[BANK0 ] char 
  4219 ;;  left_most_in    1   63[BANK0 ] char 
  4220 ;; Return value:  Size  Location     Type
  4221 ;;                  1    wreg      unsigned char 
  4222 ;; Registers used:
  4223 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  4224 ;; Tracked objects:
  4225 ;;		On entry : 0/0
  4226 ;;		On exit  : 0/0
  4227 ;;		Unchanged: 0/0
  4228 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4229 ;;      Params:         0       0       0       0       0
  4230 ;;      Locals:         0      14       0       0       0
  4231 ;;      Temps:          0      18       0       0       0
  4232 ;;      Totals:         0      32       0       0       0
  4233 ;;Total ram usage:       32 bytes
  4234 ;; Hardware stack levels used:    1
  4235 ;; Hardware stack levels required when called:    6
  4236 ;; This function calls:
  4237 ;;		_USARTWriteString
  4238 ;;		___wmul
  4239 ;;		_dbg_print_MATRIX4x4
  4240 ;;		_dbg_print_MATRIX8x8
  4241 ;;		_dbg_print_Screen
  4242 ;;		_dbg_print_cur_MATRIX4x4
  4243 ;;		_lg_fall_off
  4244 ;;		_lg_get_height
  4245 ;;		_lg_get_height_after_merge
  4246 ;;		_lg_get_holes_after_merge
  4247 ;;		_lg_get_num_of_orphan
  4248 ;;		_lg_get_num_removed_rows
  4249 ;;		_lg_get_weight
  4250 ;;		_lg_is_valid
  4251 ;;		_lg_left_most
  4252 ;;		_lg_merge1
  4253 ;;		_lg_right_most
  4254 ;;		_sprintf
  4255 ;; This function is called by:
  4256 ;;		_main
  4257 ;; This function uses a non-reentrant model
  4258 ;;
  4259                           
  4260                           
  4261                           ;psect for function _lg_find_best_solution
  4262  0536                     _lg_find_best_solution:	
  4263                           
  4264                           ;logic.h: 479: uint8_t res = 0;
  4265                           
  4266                           ;incstack = 0
  4267                           ; Regs used in _lg_find_best_solution: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+csta
      +                          ck]
  4268                           ;logic.h: 477: do { if(0) { sprintf(g_debug, "===find_best_solution===""\r\n"); USARTWri
      +                          teString(g_debug); } } while (0);;
  4269  0536  1283               	bcf	3,5	;RP0=0, select bank0
  4270  0537  1303               	bcf	3,6	;RP1=0, select bank0
  4271  0538  01E1               	clrf	lg_find_best_solution@res
  4272                           
  4273                           ;logic.h: 480: int8_t left_most_index, right_most_index;
  4274                           ;logic.h: 482: int8_t temp_pre_x = 0xF, tem_pre_sub_index = 0xF;
  4275  0539  300F               	movlw	15
  4276  053A  00CD               	movwf	??_lg_find_best_solution
  4277  053B  084D               	movf	??_lg_find_best_solution,w
  4278  053C  00E4               	movwf	lg_find_best_solution@temp_pre_x
  4279  053D  300F               	movlw	15
  4280  053E  00CD               	movwf	??_lg_find_best_solution
  4281  053F  084D               	movf	??_lg_find_best_solution,w
  4282  0540  00E5               	movwf	lg_find_best_solution@tem_pre_sub_index
  4283                           
  4284                           ;logic.h: 483: int16_t temp_pre_risk = -30000;
  4285  0541  30D0               	movlw	208
  4286  0542  00E7               	movwf	lg_find_best_solution@temp_pre_risk
  4287  0543  308A               	movlw	138
  4288  0544  00E8               	movwf	lg_find_best_solution@temp_pre_risk+1
  4289                           
  4290                           ;logic.h: 484: int8_t temp_y;
  4291                           ;logic.h: 485: int16_t temp_risk;
  4292                           ;logic.h: 486: uint16_t temp_high;
  4293                           ;logic.h: 488: for(uint8_t tem_sub_index = 0; tem_sub_index < g_char_info[g_char_info_in
      +                          dex].num; tem_sub_index++)
  4294  0545  01E6               	clrf	lg_find_best_solution@tem_sub_index
  4295  0546                     l4400:	
  4296  0546  1403               	setc
  4297  0547  0D6E               	rlf	_g_char_info_index,w
  4298  0548  3E90               	addlw	(low (_g_char_info| (0+256)))& (0+255)
  4299  0549  0084               	movwf	4
  4300  054A  1783               	bsf	3,7	;select IRP bank3
  4301  054B  0800               	movf	0,w
  4302  054C  0266               	subwf	lg_find_best_solution@tem_sub_index,w
  4303  054D  1803               	btfsc	3,0
  4304  054E  2FAB               	goto	l4402
  4305                           
  4306                           ;logic.h: 489: {
  4307                           ;logic.h: 490: temp_cur_matrix4x4 = &g_matrix4x4[g_char_info[g_char_info_index].start_in
      +                          dex + tem_sub_index];
  4308  054F  086E               	movf	_g_char_info_index,w
  4309  0550  00CD               	movwf	??_lg_find_best_solution
  4310  0551  074D               	addwf	??_lg_find_best_solution,w
  4311  0552  3E90               	addlw	(low (_g_char_info| (0+256)))& (0+255)
  4312  0553  0084               	movwf	4
  4313  0554  0866               	movf	lg_find_best_solution@tem_sub_index,w
  4314  0555  1783               	bsf	3,7	;select IRP bank3
  4315  0556  0700               	addwf	0,w
  4316  0557  00CE               	movwf	??_lg_find_best_solution+1
  4317  0558  3001               	movlw	1
  4318  0559                     u4445:	
  4319  0559  1003               	clrc
  4320  055A  0DCE               	rlf	??_lg_find_best_solution+1,f
  4321  055B  3EFF               	addlw	-1
  4322  055C  1D03               	skipz
  4323  055D  2D59               	goto	u4445
  4324  055E  1003               	clrc
  4325  055F  0D4E               	rlf	??_lg_find_best_solution+1,w
  4326  0560  3E24               	addlw	low (_g_matrix4x4| (0+32768))
  4327  0561  00CF               	movwf	??_lg_find_best_solution+2
  4328  0562  3088               	movlw	high (_g_matrix4x4| (0+32768))
  4329  0563  1803               	skipnc
  4330  0564  3E01               	addlw	1
  4331  0565  00D0               	movwf	??_lg_find_best_solution+3
  4332  0566  084F               	movf	??_lg_find_best_solution+2,w
  4333  0567  1683               	bsf	3,5	;RP0=1, select bank1
  4334  0568  1303               	bcf	3,6	;RP1=0, select bank1
  4335  0569  00A9               	movwf	_temp_cur_matrix4x4^(0+128)
  4336  056A  1283               	bcf	3,5	;RP0=0, select bank0
  4337  056B  1303               	bcf	3,6	;RP1=0, select bank0
  4338  056C  0850               	movf	??_lg_find_best_solution+3,w
  4339  056D  1683               	bsf	3,5	;RP0=1, select bank1
  4340  056E  1303               	bcf	3,6	;RP1=0, select bank1
  4341  056F  00AA               	movwf	(_temp_cur_matrix4x4+1)^(0+128)
  4342                           
  4343                           ;logic.h: 491: left_most_index = lg_left_most(cur_x, temp_cur_matrix4x4, &g_matrix8x8);
  4344  0570  0829               	movf	_temp_cur_matrix4x4^(0+128),w
  4345  0571  1283               	bcf	3,5	;RP0=0, select bank0
  4346  0572  1303               	bcf	3,6	;RP1=0, select bank0
  4347  0573  00BE               	movwf	lg_left_most@matrix4x4
  4348  0574  1683               	bsf	3,5	;RP0=1, select bank1
  4349  0575  1303               	bcf	3,6	;RP1=0, select bank1
  4350  0576  082A               	movf	(_temp_cur_matrix4x4+1)^(0+128),w
  4351  0577  1283               	bcf	3,5	;RP0=0, select bank0
  4352  0578  1303               	bcf	3,6	;RP1=0, select bank0
  4353  0579  00BF               	movwf	lg_left_most@matrix4x4+1
  4354  057A  30CD               	movlw	(low (_g_matrix8x8| 0))& (0+255)
  4355  057B  00CD               	movwf	??_lg_find_best_solution
  4356  057C  084D               	movf	??_lg_find_best_solution,w
  4357  057D  00C0               	movwf	lg_left_most@matrix8x8
  4358  057E  086F               	movf	_cur_x,w
  4359  057F  160A  118A  2171  120A  118A  	fcall	_lg_left_most
  4360  0584  1283               	bcf	3,5	;RP0=0, select bank0
  4361  0585  1303               	bcf	3,6	;RP1=0, select bank0
  4362  0586  00CE               	movwf	??_lg_find_best_solution+1
  4363  0587  084E               	movf	??_lg_find_best_solution+1,w
  4364  0588  00DF               	movwf	lg_find_best_solution@left_most_index
  4365                           
  4366                           ;logic.h: 492: right_most_index = lg_right_most(cur_x, temp_cur_matrix4x4, &g_matrix8x8)
      +                          ;
  4367  0589  1683               	bsf	3,5	;RP0=1, select bank1
  4368  058A  1303               	bcf	3,6	;RP1=0, select bank1
  4369  058B  0829               	movf	_temp_cur_matrix4x4^(0+128),w
  4370  058C  1283               	bcf	3,5	;RP0=0, select bank0
  4371  058D  1303               	bcf	3,6	;RP1=0, select bank0
  4372  058E  00BB               	movwf	lg_right_most@matrix4x4
  4373  058F  1683               	bsf	3,5	;RP0=1, select bank1
  4374  0590  1303               	bcf	3,6	;RP1=0, select bank1
  4375  0591  082A               	movf	(_temp_cur_matrix4x4+1)^(0+128),w
  4376  0592  1283               	bcf	3,5	;RP0=0, select bank0
  4377  0593  1303               	bcf	3,6	;RP1=0, select bank0
  4378  0594  00BC               	movwf	lg_right_most@matrix4x4+1
  4379  0595  30CD               	movlw	(low (_g_matrix8x8| 0))& (0+255)
  4380  0596  00CD               	movwf	??_lg_find_best_solution
  4381  0597  084D               	movf	??_lg_find_best_solution,w
  4382  0598  00BD               	movwf	lg_right_most@matrix8x8
  4383  0599  086F               	movf	_cur_x,w
  4384  059A  160A  118A  219B  120A  118A  	fcall	_lg_right_most
  4385  059F  1283               	bcf	3,5	;RP0=0, select bank0
  4386  05A0  1303               	bcf	3,6	;RP1=0, select bank0
  4387  05A1  00CE               	movwf	??_lg_find_best_solution+1
  4388  05A2  084E               	movf	??_lg_find_best_solution+1,w
  4389  05A3  00E0               	movwf	lg_find_best_solution@right_most_index
  4390                           
  4391                           ;logic.h: 494: for(int8_t temp_x = left_most_index; temp_x <= right_most_index; temp_x++
      +                          )
  4392  05A4  085F               	movf	lg_find_best_solution@left_most_index,w
  4393  05A5  00CD               	movwf	??_lg_find_best_solution
  4394  05A6  084D               	movf	??_lg_find_best_solution,w
  4395  05A7  00EC               	movwf	lg_find_best_solution@temp_x
  4396  05A8                     l4396:	
  4397  05A8  0860               	movf	lg_find_best_solution@right_most_index,w
  4398  05A9  3A80               	xorlw	128
  4399  05AA  00CD               	movwf	??_lg_find_best_solution
  4400  05AB  086C               	movf	lg_find_best_solution@temp_x,w
  4401  05AC  3A80               	xorlw	128
  4402  05AD  02CD               	subwf	??_lg_find_best_solution,f
  4403  05AE  1C03               	btfss	3,0
  4404  05AF  2FA6               	goto	l4398
  4405                           
  4406                           ;logic.h: 495: {
  4407                           ;logic.h: 496: temp_y = lg_fall_off(temp_x, cur_y, temp_cur_matrix4x4, &g_matrix8x8);
  4408  05B0  1683               	bsf	3,5	;RP0=1, select bank1
  4409  05B1  1303               	bcf	3,6	;RP1=0, select bank1
  4410  05B2  082B               	movf	_cur_y^(0+128),w
  4411  05B3  1283               	bcf	3,5	;RP0=0, select bank0
  4412  05B4  1303               	bcf	3,6	;RP1=0, select bank0
  4413  05B5  00CD               	movwf	??_lg_find_best_solution
  4414  05B6  084D               	movf	??_lg_find_best_solution,w
  4415  05B7  00B3               	movwf	lg_fall_off@y
  4416  05B8  1683               	bsf	3,5	;RP0=1, select bank1
  4417  05B9  1303               	bcf	3,6	;RP1=0, select bank1
  4418  05BA  0829               	movf	_temp_cur_matrix4x4^(0+128),w
  4419  05BB  1283               	bcf	3,5	;RP0=0, select bank0
  4420  05BC  1303               	bcf	3,6	;RP1=0, select bank0
  4421  05BD  00B4               	movwf	lg_fall_off@matrix4x4
  4422  05BE  1683               	bsf	3,5	;RP0=1, select bank1
  4423  05BF  1303               	bcf	3,6	;RP1=0, select bank1
  4424  05C0  082A               	movf	(_temp_cur_matrix4x4+1)^(0+128),w
  4425  05C1  1283               	bcf	3,5	;RP0=0, select bank0
  4426  05C2  1303               	bcf	3,6	;RP1=0, select bank0
  4427  05C3  00B5               	movwf	lg_fall_off@matrix4x4+1
  4428  05C4  30CD               	movlw	(low (_g_matrix8x8| 0))& (0+255)
  4429  05C5  00CE               	movwf	??_lg_find_best_solution+1
  4430  05C6  084E               	movf	??_lg_find_best_solution+1,w
  4431  05C7  00B6               	movwf	lg_fall_off@matrix8x8
  4432  05C8  086C               	movf	lg_find_best_solution@temp_x,w
  4433  05C9  120A  158A  2531  120A  118A  	fcall	_lg_fall_off
  4434  05CE  1283               	bcf	3,5	;RP0=0, select bank0
  4435  05CF  1303               	bcf	3,6	;RP1=0, select bank0
  4436  05D0  00CF               	movwf	??_lg_find_best_solution+2
  4437  05D1  084F               	movf	??_lg_find_best_solution+2,w
  4438  05D2  00EB               	movwf	lg_find_best_solution@temp_y
  4439                           
  4440                           ;logic.h: 498: dbg_print_MATRIX4x4(0, "After fall off", temp_x, temp_y, temp_cur_matrix4
      +                          x4);
  4441  05D3  300B               	movlw	low (STR_65| (0+32768))
  4442  05D4  00B3               	movwf	dbg_print_MATRIX4x4@lable
  4443  05D5  308C               	movlw	high (STR_65| (0+32768))
  4444  05D6  00B4               	movwf	dbg_print_MATRIX4x4@lable+1
  4445  05D7  086C               	movf	lg_find_best_solution@temp_x,w
  4446  05D8  00CD               	movwf	??_lg_find_best_solution
  4447  05D9  084D               	movf	??_lg_find_best_solution,w
  4448  05DA  00B5               	movwf	dbg_print_MATRIX4x4@x
  4449  05DB  086B               	movf	lg_find_best_solution@temp_y,w
  4450  05DC  00CE               	movwf	??_lg_find_best_solution+1
  4451  05DD  084E               	movf	??_lg_find_best_solution+1,w
  4452  05DE  00B6               	movwf	dbg_print_MATRIX4x4@y
  4453  05DF  1683               	bsf	3,5	;RP0=1, select bank1
  4454  05E0  1303               	bcf	3,6	;RP1=0, select bank1
  4455  05E1  0829               	movf	_temp_cur_matrix4x4^(0+128),w
  4456  05E2  1283               	bcf	3,5	;RP0=0, select bank0
  4457  05E3  1303               	bcf	3,6	;RP1=0, select bank0
  4458  05E4  00B7               	movwf	dbg_print_MATRIX4x4@matrix
  4459  05E5  1683               	bsf	3,5	;RP0=1, select bank1
  4460  05E6  1303               	bcf	3,6	;RP1=0, select bank1
  4461  05E7  082A               	movf	(_temp_cur_matrix4x4+1)^(0+128),w
  4462  05E8  1283               	bcf	3,5	;RP0=0, select bank0
  4463  05E9  1303               	bcf	3,6	;RP1=0, select bank0
  4464  05EA  00B8               	movwf	dbg_print_MATRIX4x4@matrix+1
  4465  05EB  3000               	movlw	0
  4466  05EC  120A  118A  2125  120A  118A  	fcall	_dbg_print_MATRIX4x4
  4467                           
  4468                           ;logic.h: 499: dbg_print_Screen(0, "After fall off");
  4469  05F1  300B               	movlw	low (STR_65| (0+32768))
  4470  05F2  1283               	bcf	3,5	;RP0=0, select bank0
  4471  05F3  1303               	bcf	3,6	;RP1=0, select bank0
  4472  05F4  00BB               	movwf	dbg_print_Screen@lable
  4473  05F5  308C               	movlw	high (STR_65| (0+32768))
  4474  05F6  00BC               	movwf	dbg_print_Screen@lable+1
  4475  05F7  3000               	movlw	0
  4476  05F8  160A  118A  225A  120A  118A  	fcall	_dbg_print_Screen
  4477                           
  4478                           ;logic.h: 501: if(lg_is_valid(temp_x, temp_y, temp_cur_matrix4x4, &g_matrix8x8) == 0)
  4479  05FD  1283               	bcf	3,5	;RP0=0, select bank0
  4480  05FE  1303               	bcf	3,6	;RP1=0, select bank0
  4481  05FF  086B               	movf	lg_find_best_solution@temp_y,w
  4482  0600  00CD               	movwf	??_lg_find_best_solution
  4483  0601  084D               	movf	??_lg_find_best_solution,w
  4484  0602  00B3               	movwf	lg_is_valid@y
  4485  0603  1683               	bsf	3,5	;RP0=1, select bank1
  4486  0604  1303               	bcf	3,6	;RP1=0, select bank1
  4487  0605  0829               	movf	_temp_cur_matrix4x4^(0+128),w
  4488  0606  1283               	bcf	3,5	;RP0=0, select bank0
  4489  0607  1303               	bcf	3,6	;RP1=0, select bank0
  4490  0608  00B4               	movwf	lg_is_valid@matrix4x4
  4491  0609  1683               	bsf	3,5	;RP0=1, select bank1
  4492  060A  1303               	bcf	3,6	;RP1=0, select bank1
  4493  060B  082A               	movf	(_temp_cur_matrix4x4+1)^(0+128),w
  4494  060C  1283               	bcf	3,5	;RP0=0, select bank0
  4495  060D  1303               	bcf	3,6	;RP1=0, select bank0
  4496  060E  00B5               	movwf	lg_is_valid@matrix4x4+1
  4497  060F  30CD               	movlw	(low (_g_matrix8x8| 0))& (0+255)
  4498  0610  00CE               	movwf	??_lg_find_best_solution+1
  4499  0611  084E               	movf	??_lg_find_best_solution+1,w
  4500  0612  00B6               	movwf	lg_is_valid@matrix8x8
  4501  0613  086C               	movf	lg_find_best_solution@temp_x,w
  4502  0614  120A  158A  26C2  120A  118A  	fcall	_lg_is_valid
  4503  0619  3A00               	xorlw	0
  4504  061A  1903               	btfsc	3,2
  4505  061B  2F9F               	goto	l4394
  4506                           
  4507                           ;logic.h: 504: }
  4508                           ;logic.h: 505: res = 1;
  4509                           
  4510                           ;logic.h: 502: {
  4511                           ;logic.h: 503: continue;
  4512  061C  1283               	bcf	3,5	;RP0=0, select bank0
  4513  061D  1303               	bcf	3,6	;RP1=0, select bank0
  4514  061E  01E1               	clrf	lg_find_best_solution@res
  4515  061F  0AE1               	incf	lg_find_best_solution@res,f
  4516                           
  4517                           ;logic.h: 506: lg_merge1(temp_x, temp_y, temp_cur_matrix4x4, &g_matrix8x8, &temp_matrix8
      +                          x8);
  4518  0620  086B               	movf	lg_find_best_solution@temp_y,w
  4519  0621  00CD               	movwf	??_lg_find_best_solution
  4520  0622  084D               	movf	??_lg_find_best_solution,w
  4521  0623  00A0               	movwf	lg_merge1@y
  4522  0624  1683               	bsf	3,5	;RP0=1, select bank1
  4523  0625  1303               	bcf	3,6	;RP1=0, select bank1
  4524  0626  0829               	movf	_temp_cur_matrix4x4^(0+128),w
  4525  0627  1283               	bcf	3,5	;RP0=0, select bank0
  4526  0628  1303               	bcf	3,6	;RP1=0, select bank0
  4527  0629  00A1               	movwf	lg_merge1@matrix4x4
  4528  062A  1683               	bsf	3,5	;RP0=1, select bank1
  4529  062B  1303               	bcf	3,6	;RP1=0, select bank1
  4530  062C  082A               	movf	(_temp_cur_matrix4x4+1)^(0+128),w
  4531  062D  1283               	bcf	3,5	;RP0=0, select bank0
  4532  062E  1303               	bcf	3,6	;RP1=0, select bank0
  4533  062F  00A2               	movwf	lg_merge1@matrix4x4+1
  4534  0630  30CD               	movlw	(low (_g_matrix8x8| 0))& (0+255)
  4535  0631  00CE               	movwf	??_lg_find_best_solution+1
  4536  0632  084E               	movf	??_lg_find_best_solution+1,w
  4537  0633  00A3               	movwf	lg_merge1@matrix8x8_in
  4538  0634  30D5               	movlw	(low (_temp_matrix8x8| 0))& (0+255)
  4539  0635  00CF               	movwf	??_lg_find_best_solution+2
  4540  0636  084F               	movf	??_lg_find_best_solution+2,w
  4541  0637  00A4               	movwf	lg_merge1@matrix8x8_out
  4542  0638  086C               	movf	lg_find_best_solution@temp_x,w
  4543  0639  160A  118A  259A  120A  118A  	fcall	_lg_merge1
  4544                           
  4545                           ;logic.h: 507: temp_high = lg_get_height_after_merge(temp_y, temp_cur_matrix4x4);
  4546  063E  1683               	bsf	3,5	;RP0=1, select bank1
  4547  063F  1303               	bcf	3,6	;RP1=0, select bank1
  4548  0640  0829               	movf	_temp_cur_matrix4x4^(0+128),w
  4549  0641  1283               	bcf	3,5	;RP0=0, select bank0
  4550  0642  1303               	bcf	3,6	;RP1=0, select bank0
  4551  0643  00B3               	movwf	lg_get_height_after_merge@matrix
  4552  0644  1683               	bsf	3,5	;RP0=1, select bank1
  4553  0645  1303               	bcf	3,6	;RP1=0, select bank1
  4554  0646  082A               	movf	(_temp_cur_matrix4x4+1)^(0+128),w
  4555  0647  1283               	bcf	3,5	;RP0=0, select bank0
  4556  0648  1303               	bcf	3,6	;RP1=0, select bank0
  4557  0649  00B4               	movwf	lg_get_height_after_merge@matrix+1
  4558  064A  086B               	movf	lg_find_best_solution@temp_y,w
  4559  064B  160A  118A  230A  120A  118A  	fcall	_lg_get_height_after_merge
  4560  0650  1283               	bcf	3,5	;RP0=0, select bank0
  4561  0651  1303               	bcf	3,6	;RP1=0, select bank0
  4562  0652  00CD               	movwf	??_lg_find_best_solution
  4563  0653  01CE               	clrf	??_lg_find_best_solution+1
  4564  0654  084D               	movf	??_lg_find_best_solution,w
  4565  0655  00E2               	movwf	lg_find_best_solution@temp_high
  4566  0656  084E               	movf	??_lg_find_best_solution+1,w
  4567  0657  00E3               	movwf	lg_find_best_solution@temp_high+1
  4568                           
  4569                           ;logic.h: 508: if((lg_get_height(&g_matrix8x8) <= 8/2 + 1)
  4570                           ;logic.h: 509: && (temp_high <= 8/2 + 1))
  4571  0658  30CD               	movlw	(low (_g_matrix8x8| 0))& (0+255)
  4572  0659  160A  118A  20F7  120A  118A  	fcall	_lg_get_height
  4573  065E  1283               	bcf	3,5	;RP0=0, select bank0
  4574  065F  1303               	bcf	3,6	;RP1=0, select bank0
  4575  0660  00CD               	movwf	??_lg_find_best_solution
  4576  0661  3006               	movlw	6
  4577  0662  024D               	subwf	??_lg_find_best_solution,w
  4578  0663  1803               	skipnc
  4579  0664  2EEB               	goto	l4368
  4580  0665  3000               	movlw	0
  4581  0666  0263               	subwf	lg_find_best_solution@temp_high+1,w
  4582  0667  3006               	movlw	6
  4583  0668  1903               	skipnz
  4584  0669  0262               	subwf	lg_find_best_solution@temp_high,w
  4585  066A  1803               	skipnc
  4586  066B  2EEB               	goto	l4368
  4587                           
  4588                           ;logic.h: 510: {
  4589                           ;logic.h: 511: temp_risk = (((int16_t)lg_get_num_removed_rows(&temp_matrix8x8)) << 10)
  4590                           ;logic.h: 512: - lg_get_num_of_orphan(&temp_matrix8x8)*4
  4591                           ;logic.h: 513: - temp_high*3
  4592                           ;logic.h: 514: - lg_get_holes_after_merge(&temp_matrix8x8)*2
  4593                           ;logic.h: 515: - lg_get_weight(&temp_matrix8x8);
  4594  066C  30D5               	movlw	(low (_temp_matrix8x8| 0))& (0+255)
  4595  066D  120A  158A  25AE  120A  118A  	fcall	_lg_get_weight
  4596  0672  1283               	bcf	3,5	;RP0=0, select bank0
  4597  0673  1303               	bcf	3,6	;RP1=0, select bank0
  4598  0674  0933               	comf	?_lg_get_weight,w
  4599  0675  00CD               	movwf	??_lg_find_best_solution
  4600  0676  0934               	comf	?_lg_get_weight+1,w
  4601  0677  00CE               	movwf	??_lg_find_best_solution+1
  4602  0678  0ACD               	incf	??_lg_find_best_solution,f
  4603  0679  1903               	skipnz
  4604  067A  0ACE               	incf	??_lg_find_best_solution+1,f
  4605  067B  30D5               	movlw	(low (_temp_matrix8x8| 0))& (0+255)
  4606  067C  120A  118A  2019  120A  118A  	fcall	_lg_get_holes_after_merge
  4607  0681  1283               	bcf	3,5	;RP0=0, select bank0
  4608  0682  1303               	bcf	3,6	;RP1=0, select bank0
  4609  0683  00CF               	movwf	??_lg_find_best_solution+2
  4610  0684  01D0               	clrf	??_lg_find_best_solution+3
  4611  0685  1003               	clrc
  4612  0686  0DCF               	rlf	??_lg_find_best_solution+2,f
  4613  0687  0DD0               	rlf	??_lg_find_best_solution+3,f
  4614  0688  09CF               	comf	??_lg_find_best_solution+2,f
  4615  0689  09D0               	comf	??_lg_find_best_solution+3,f
  4616  068A  0ACF               	incf	??_lg_find_best_solution+2,f
  4617  068B  1903               	skipnz
  4618  068C  0AD0               	incf	??_lg_find_best_solution+3,f
  4619  068D  0863               	movf	lg_find_best_solution@temp_high+1,w
  4620  068E  00C0               	movwf	___wmul@multiplier+1
  4621  068F  0862               	movf	lg_find_best_solution@temp_high,w
  4622  0690  00BF               	movwf	___wmul@multiplier
  4623  0691  3003               	movlw	3
  4624  0692  00C1               	movwf	___wmul@multiplicand
  4625  0693  3000               	movlw	0
  4626  0694  00C2               	movwf	___wmul@multiplicand+1
  4627  0695  160A  118A  2064  120A  118A  	fcall	___wmul
  4628  069A  1283               	bcf	3,5	;RP0=0, select bank0
  4629  069B  1303               	bcf	3,6	;RP1=0, select bank0
  4630  069C  093F               	comf	?___wmul,w
  4631  069D  00D1               	movwf	??_lg_find_best_solution+4
  4632  069E  0940               	comf	?___wmul+1,w
  4633  069F  00D2               	movwf	??_lg_find_best_solution+5
  4634  06A0  0AD1               	incf	??_lg_find_best_solution+4,f
  4635  06A1  1903               	skipnz
  4636  06A2  0AD2               	incf	??_lg_find_best_solution+5,f
  4637  06A3  30D5               	movlw	(low (_temp_matrix8x8| 0))& (0+255)
  4638  06A4  120A  158A  24CD  120A  118A  	fcall	_lg_get_num_of_orphan
  4639  06A9  1283               	bcf	3,5	;RP0=0, select bank0
  4640  06AA  1303               	bcf	3,6	;RP1=0, select bank0
  4641  06AB  0833               	movf	?_lg_get_num_of_orphan,w
  4642  06AC  00D3               	movwf	??_lg_find_best_solution+6
  4643  06AD  0834               	movf	?_lg_get_num_of_orphan+1,w
  4644  06AE  00D4               	movwf	??_lg_find_best_solution+7
  4645  06AF  1003               	clrc
  4646  06B0  0DD3               	rlf	??_lg_find_best_solution+6,f
  4647  06B1  0DD4               	rlf	??_lg_find_best_solution+7,f
  4648  06B2  1003               	clrc
  4649  06B3  0DD3               	rlf	??_lg_find_best_solution+6,f
  4650  06B4  0DD4               	rlf	??_lg_find_best_solution+7,f
  4651  06B5  09D3               	comf	??_lg_find_best_solution+6,f
  4652  06B6  09D4               	comf	??_lg_find_best_solution+7,f
  4653  06B7  0AD3               	incf	??_lg_find_best_solution+6,f
  4654  06B8  1903               	skipnz
  4655  06B9  0AD4               	incf	??_lg_find_best_solution+7,f
  4656  06BA  30D5               	movlw	(low (_temp_matrix8x8| 0))& (0+255)
  4657  06BB  160A  118A  211F  120A  118A  	fcall	_lg_get_num_removed_rows
  4658  06C0  1283               	bcf	3,5	;RP0=0, select bank0
  4659  06C1  1303               	bcf	3,6	;RP1=0, select bank0
  4660  06C2  00D5               	movwf	??_lg_find_best_solution+8
  4661  06C3  01D6               	clrf	??_lg_find_best_solution+9
  4662  06C4  300A               	movlw	10
  4663  06C5  00FF               	movwf	127
  4664  06C6                     u4485:	
  4665  06C6  1003               	clrc
  4666  06C7  0DD5               	rlf	??_lg_find_best_solution+8,f
  4667  06C8  0DD6               	rlf	??_lg_find_best_solution+9,f
  4668  06C9  0BFF               	decfsz	127,f
  4669  06CA  2EC6               	goto	u4485
  4670  06CB  0853               	movf	??_lg_find_best_solution+6,w
  4671  06CC  0755               	addwf	??_lg_find_best_solution+8,w
  4672  06CD  00D7               	movwf	??_lg_find_best_solution+10
  4673  06CE  0854               	movf	??_lg_find_best_solution+7,w
  4674  06CF  1803               	skipnc
  4675  06D0  0A54               	incf	??_lg_find_best_solution+7,w
  4676  06D1  0756               	addwf	??_lg_find_best_solution+9,w
  4677  06D2  00D8               	movwf	??_lg_find_best_solution+11
  4678  06D3  0851               	movf	??_lg_find_best_solution+4,w
  4679  06D4  0757               	addwf	??_lg_find_best_solution+10,w
  4680  06D5  00D9               	movwf	??_lg_find_best_solution+12
  4681  06D6  0852               	movf	??_lg_find_best_solution+5,w
  4682  06D7  1803               	skipnc
  4683  06D8  0A52               	incf	??_lg_find_best_solution+5,w
  4684  06D9  0758               	addwf	??_lg_find_best_solution+11,w
  4685  06DA  00DA               	movwf	??_lg_find_best_solution+13
  4686  06DB  084F               	movf	??_lg_find_best_solution+2,w
  4687  06DC  0759               	addwf	??_lg_find_best_solution+12,w
  4688  06DD  00DB               	movwf	??_lg_find_best_solution+14
  4689  06DE  0850               	movf	??_lg_find_best_solution+3,w
  4690  06DF  1803               	skipnc
  4691  06E0  0A50               	incf	??_lg_find_best_solution+3,w
  4692  06E1  075A               	addwf	??_lg_find_best_solution+13,w
  4693  06E2  00DC               	movwf	??_lg_find_best_solution+15
  4694  06E3  084D               	movf	??_lg_find_best_solution,w
  4695  06E4  075B               	addwf	??_lg_find_best_solution+14,w
  4696  06E5  00E9               	movwf	lg_find_best_solution@temp_risk
  4697  06E6  084E               	movf	??_lg_find_best_solution+1,w
  4698  06E7  1803               	skipnc
  4699  06E8  0A4E               	incf	??_lg_find_best_solution+1,w
  4700  06E9  075C               	addwf	??_lg_find_best_solution+15,w
  4701  06EA  2F74               	goto	L5
  4702  06EB                     l4368:	
  4703                           ;logic.h: 516: }
  4704                           
  4705                           
  4706                           ;logic.h: 517: else
  4707                           ;logic.h: 518: {
  4708                           ;logic.h: 519: temp_risk = (((int16_t)lg_get_num_removed_rows(&temp_matrix8x8)) << 10)
  4709                           ;logic.h: 520: - lg_get_num_of_orphan(&temp_matrix8x8)*2
  4710                           ;logic.h: 521: - temp_high*5
  4711                           ;logic.h: 522: - lg_get_holes_after_merge(&temp_matrix8x8)*3
  4712                           ;logic.h: 523: - lg_get_weight(&temp_matrix8x8);
  4713  06EB  30D5               	movlw	(low (_temp_matrix8x8| 0))& (0+255)
  4714  06EC  120A  158A  25AE  120A  118A  	fcall	_lg_get_weight
  4715  06F1  1283               	bcf	3,5	;RP0=0, select bank0
  4716  06F2  1303               	bcf	3,6	;RP1=0, select bank0
  4717  06F3  0933               	comf	?_lg_get_weight,w
  4718  06F4  00CD               	movwf	??_lg_find_best_solution
  4719  06F5  0934               	comf	?_lg_get_weight+1,w
  4720  06F6  00CE               	movwf	??_lg_find_best_solution+1
  4721  06F7  0ACD               	incf	??_lg_find_best_solution,f
  4722  06F8  1903               	skipnz
  4723  06F9  0ACE               	incf	??_lg_find_best_solution+1,f
  4724  06FA  30D5               	movlw	(low (_temp_matrix8x8| 0))& (0+255)
  4725  06FB  120A  118A  2019  120A  118A  	fcall	_lg_get_holes_after_merge
  4726  0700  1283               	bcf	3,5	;RP0=0, select bank0
  4727  0701  1303               	bcf	3,6	;RP1=0, select bank0
  4728  0702  00CF               	movwf	??_lg_find_best_solution+2
  4729  0703  01D0               	clrf	??_lg_find_best_solution+3
  4730  0704  084F               	movf	??_lg_find_best_solution+2,w
  4731  0705  00BF               	movwf	___wmul@multiplier
  4732  0706  0850               	movf	??_lg_find_best_solution+3,w
  4733  0707  00C0               	movwf	___wmul@multiplier+1
  4734  0708  3003               	movlw	3
  4735  0709  00C1               	movwf	___wmul@multiplicand
  4736  070A  3000               	movlw	0
  4737  070B  00C2               	movwf	___wmul@multiplicand+1
  4738  070C  160A  118A  2064  120A  118A  	fcall	___wmul
  4739  0711  1283               	bcf	3,5	;RP0=0, select bank0
  4740  0712  1303               	bcf	3,6	;RP1=0, select bank0
  4741  0713  093F               	comf	?___wmul,w
  4742  0714  00D1               	movwf	??_lg_find_best_solution+4
  4743  0715  0940               	comf	?___wmul+1,w
  4744  0716  00D2               	movwf	??_lg_find_best_solution+5
  4745  0717  0AD1               	incf	??_lg_find_best_solution+4,f
  4746  0718  1903               	skipnz
  4747  0719  0AD2               	incf	??_lg_find_best_solution+5,f
  4748  071A  0863               	movf	lg_find_best_solution@temp_high+1,w
  4749  071B  00C0               	movwf	___wmul@multiplier+1
  4750  071C  0862               	movf	lg_find_best_solution@temp_high,w
  4751  071D  00BF               	movwf	___wmul@multiplier
  4752  071E  3005               	movlw	5
  4753  071F  00C1               	movwf	___wmul@multiplicand
  4754  0720  3000               	movlw	0
  4755  0721  00C2               	movwf	___wmul@multiplicand+1
  4756  0722  160A  118A  2064  120A  118A  	fcall	___wmul
  4757  0727  1283               	bcf	3,5	;RP0=0, select bank0
  4758  0728  1303               	bcf	3,6	;RP1=0, select bank0
  4759  0729  093F               	comf	?___wmul,w
  4760  072A  00D3               	movwf	??_lg_find_best_solution+6
  4761  072B  0940               	comf	?___wmul+1,w
  4762  072C  00D4               	movwf	??_lg_find_best_solution+7
  4763  072D  0AD3               	incf	??_lg_find_best_solution+6,f
  4764  072E  1903               	skipnz
  4765  072F  0AD4               	incf	??_lg_find_best_solution+7,f
  4766  0730  30D5               	movlw	(low (_temp_matrix8x8| 0))& (0+255)
  4767  0731  120A  158A  24CD  120A  118A  	fcall	_lg_get_num_of_orphan
  4768  0736  1283               	bcf	3,5	;RP0=0, select bank0
  4769  0737  1303               	bcf	3,6	;RP1=0, select bank0
  4770  0738  0833               	movf	?_lg_get_num_of_orphan,w
  4771  0739  00D5               	movwf	??_lg_find_best_solution+8
  4772  073A  0834               	movf	?_lg_get_num_of_orphan+1,w
  4773  073B  00D6               	movwf	??_lg_find_best_solution+9
  4774  073C  1003               	clrc
  4775  073D  0DD5               	rlf	??_lg_find_best_solution+8,f
  4776  073E  0DD6               	rlf	??_lg_find_best_solution+9,f
  4777  073F  09D5               	comf	??_lg_find_best_solution+8,f
  4778  0740  09D6               	comf	??_lg_find_best_solution+9,f
  4779  0741  0AD5               	incf	??_lg_find_best_solution+8,f
  4780  0742  1903               	skipnz
  4781  0743  0AD6               	incf	??_lg_find_best_solution+9,f
  4782  0744  30D5               	movlw	(low (_temp_matrix8x8| 0))& (0+255)
  4783  0745  160A  118A  211F  120A  118A  	fcall	_lg_get_num_removed_rows
  4784  074A  1283               	bcf	3,5	;RP0=0, select bank0
  4785  074B  1303               	bcf	3,6	;RP1=0, select bank0
  4786  074C  00D7               	movwf	??_lg_find_best_solution+10
  4787  074D  01D8               	clrf	??_lg_find_best_solution+11
  4788  074E  300A               	movlw	10
  4789  074F  00FF               	movwf	127
  4790  0750                     u4495:	
  4791  0750  1003               	clrc
  4792  0751  0DD7               	rlf	??_lg_find_best_solution+10,f
  4793  0752  0DD8               	rlf	??_lg_find_best_solution+11,f
  4794  0753  0BFF               	decfsz	127,f
  4795  0754  2F50               	goto	u4495
  4796  0755  0855               	movf	??_lg_find_best_solution+8,w
  4797  0756  0757               	addwf	??_lg_find_best_solution+10,w
  4798  0757  00D9               	movwf	??_lg_find_best_solution+12
  4799  0758  0856               	movf	??_lg_find_best_solution+9,w
  4800  0759  1803               	skipnc
  4801  075A  0A56               	incf	??_lg_find_best_solution+9,w
  4802  075B  0758               	addwf	??_lg_find_best_solution+11,w
  4803  075C  00DA               	movwf	??_lg_find_best_solution+13
  4804  075D  0853               	movf	??_lg_find_best_solution+6,w
  4805  075E  0759               	addwf	??_lg_find_best_solution+12,w
  4806  075F  00DB               	movwf	??_lg_find_best_solution+14
  4807  0760  0854               	movf	??_lg_find_best_solution+7,w
  4808  0761  1803               	skipnc
  4809  0762  0A54               	incf	??_lg_find_best_solution+7,w
  4810  0763  075A               	addwf	??_lg_find_best_solution+13,w
  4811  0764  00DC               	movwf	??_lg_find_best_solution+15
  4812  0765  0851               	movf	??_lg_find_best_solution+4,w
  4813  0766  075B               	addwf	??_lg_find_best_solution+14,w
  4814  0767  00DD               	movwf	??_lg_find_best_solution+16
  4815  0768  0852               	movf	??_lg_find_best_solution+5,w
  4816  0769  1803               	skipnc
  4817  076A  0A52               	incf	??_lg_find_best_solution+5,w
  4818  076B  075C               	addwf	??_lg_find_best_solution+15,w
  4819  076C  00DE               	movwf	??_lg_find_best_solution+17
  4820  076D  084D               	movf	??_lg_find_best_solution,w
  4821  076E  075D               	addwf	??_lg_find_best_solution+16,w
  4822  076F  00E9               	movwf	lg_find_best_solution@temp_risk
  4823  0770  084E               	movf	??_lg_find_best_solution+1,w
  4824  0771  1803               	skipnc
  4825  0772  0A4E               	incf	??_lg_find_best_solution+1,w
  4826  0773  075E               	addwf	??_lg_find_best_solution+17,w
  4827  0774                     L5:	
  4828  0774  00EA               	movwf	lg_find_best_solution@temp_risk+1
  4829                           
  4830                           ;logic.h: 524: }
  4831                           ;logic.h: 525: dbg_print_MATRIX8x8(0, "Valid instance", &temp_matrix8x8);
  4832  0775  30FC               	movlw	low (STR_67| (0+32768))
  4833  0776  00B3               	movwf	dbg_print_MATRIX8x8@lable
  4834  0777  308B               	movlw	high (STR_67| (0+32768))
  4835  0778  00B4               	movwf	dbg_print_MATRIX8x8@lable+1
  4836  0779  30D5               	movlw	(low (_temp_matrix8x8| 0))& (0+255)
  4837  077A  00CD               	movwf	??_lg_find_best_solution
  4838  077B  084D               	movf	??_lg_find_best_solution,w
  4839  077C  00B5               	movwf	dbg_print_MATRIX8x8@matrix
  4840  077D  3000               	movlw	0
  4841  077E  120A  158A  2757  120A  118A  	fcall	_dbg_print_MATRIX8x8
  4842                           
  4843                           ;logic.h: 528: if(temp_risk > temp_pre_risk)
  4844                           
  4845                           ;logic.h: 527: do { if(0) { sprintf(g_debug, "temp_risk = %d""\r\n", temp_risk); USARTWr
      +                          iteString(g_debug); } } while (0);;
  4846                           
  4847                           ;logic.h: 526: do { if(0) { sprintf(g_debug, "Start evaluation""\r\n"); USARTWriteString
      +                          (g_debug); } } while (0);;
  4848  0783  1283               	bcf	3,5	;RP0=0, select bank0
  4849  0784  1303               	bcf	3,6	;RP1=0, select bank0
  4850  0785  0868               	movf	lg_find_best_solution@temp_pre_risk+1,w
  4851  0786  3A80               	xorlw	128
  4852  0787  00CD               	movwf	??_lg_find_best_solution
  4853  0788  086A               	movf	lg_find_best_solution@temp_risk+1,w
  4854  0789  3A80               	xorlw	128
  4855  078A  024D               	subwf	??_lg_find_best_solution,w
  4856  078B  1D03               	skipz
  4857  078C  2F8F               	goto	u4505
  4858  078D  0869               	movf	lg_find_best_solution@temp_risk,w
  4859  078E  0267               	subwf	lg_find_best_solution@temp_pre_risk,w
  4860  078F                     u4505:	
  4861  078F  1803               	skipnc
  4862  0790  2F9F               	goto	l4394
  4863                           
  4864                           ;logic.h: 531: temp_pre_risk = temp_risk;
  4865                           
  4866                           ;logic.h: 529: {
  4867                           ;logic.h: 530: do { if(0) { sprintf(g_debug, "risk: (%d) > (%d)""\r\n", temp_risk, temp_
      +                          pre_risk); USARTWriteString(g_debug); } } while (0);;
  4868  0791  1283               	bcf	3,5	;RP0=0, select bank0
  4869  0792  1303               	bcf	3,6	;RP1=0, select bank0
  4870  0793  086A               	movf	lg_find_best_solution@temp_risk+1,w
  4871  0794  00E8               	movwf	lg_find_best_solution@temp_pre_risk+1
  4872  0795  0869               	movf	lg_find_best_solution@temp_risk,w
  4873  0796  00E7               	movwf	lg_find_best_solution@temp_pre_risk
  4874                           
  4875                           ;logic.h: 532: tem_pre_sub_index = tem_sub_index;
  4876  0797  0866               	movf	lg_find_best_solution@tem_sub_index,w
  4877  0798  00CD               	movwf	??_lg_find_best_solution
  4878  0799  084D               	movf	??_lg_find_best_solution,w
  4879  079A  00E5               	movwf	lg_find_best_solution@tem_pre_sub_index
  4880                           
  4881                           ;logic.h: 533: temp_pre_x = temp_x;
  4882  079B  086C               	movf	lg_find_best_solution@temp_x,w
  4883  079C  00CD               	movwf	??_lg_find_best_solution
  4884  079D  084D               	movf	??_lg_find_best_solution,w
  4885  079E  00E4               	movwf	lg_find_best_solution@temp_pre_x
  4886  079F                     l4394:	
  4887                           ;logic.h: 534: }
  4888                           ;logic.h: 537: do { if(0) { sprintf(g_debug, "sub_index = %d, temp_pre_x = %d, temp_pre_
      +                          risk = %d""\r\n", tem_pre_sub_index, temp_pre_x, temp_pre_risk); USARTWriteString(g_debu
      +                          g); } } while (0);;
  4889                           
  4890  079F  3001               	movlw	1
  4891  07A0  1283               	bcf	3,5	;RP0=0, select bank0
  4892  07A1  1303               	bcf	3,6	;RP1=0, select bank0
  4893  07A2  00CD               	movwf	??_lg_find_best_solution
  4894  07A3  084D               	movf	??_lg_find_best_solution,w
  4895  07A4  07EC               	addwf	lg_find_best_solution@temp_x,f
  4896  07A5  2DA8               	goto	l4396
  4897  07A6                     l4398:	
  4898  07A6  3001               	movlw	1
  4899  07A7  00CD               	movwf	??_lg_find_best_solution
  4900  07A8  084D               	movf	??_lg_find_best_solution,w
  4901  07A9  07E6               	addwf	lg_find_best_solution@tem_sub_index,f
  4902  07AA  2D46               	goto	l4400
  4903  07AB                     l4402:	
  4904                           
  4905                           ;logic.h: 546: }
  4906                           ;logic.h: 547: }
  4907                           ;logic.h: 548: if(res == 1)
  4908  07AB  0361               	decf	lg_find_best_solution@res,w
  4909  07AC  1D03               	btfss	3,2
  4910  07AD  2FCE               	goto	l4416
  4911                           
  4912                           ;logic.h: 549: {
  4913                           ;logic.h: 550: g_char_info_sub_index = tem_pre_sub_index;
  4914  07AE  0865               	movf	lg_find_best_solution@tem_pre_sub_index,w
  4915  07AF  00CD               	movwf	??_lg_find_best_solution
  4916  07B0  084D               	movf	??_lg_find_best_solution,w
  4917  07B1  1683               	bsf	3,5	;RP0=1, select bank1
  4918  07B2  1303               	bcf	3,6	;RP1=0, select bank1
  4919  07B3  00AC               	movwf	_g_char_info_sub_index^(0+128)
  4920                           
  4921                           ;logic.h: 551: cur_x = temp_pre_x;
  4922  07B4  1283               	bcf	3,5	;RP0=0, select bank0
  4923  07B5  1303               	bcf	3,6	;RP1=0, select bank0
  4924  07B6  0864               	movf	lg_find_best_solution@temp_pre_x,w
  4925  07B7  00CD               	movwf	??_lg_find_best_solution
  4926  07B8  084D               	movf	??_lg_find_best_solution,w
  4927  07B9  00EF               	movwf	_cur_x
  4928                           
  4929                           ;logic.h: 552: dbg_print_cur_MATRIX4x4(0, "Chosen", cur_x, cur_y);
  4930  07BA  30BE               	movlw	low (STR_72| (0+32768))
  4931  07BB  00C2               	movwf	dbg_print_cur_MATRIX4x4@lable
  4932  07BC  308C               	movlw	high (STR_72| (0+32768))
  4933  07BD  00C3               	movwf	dbg_print_cur_MATRIX4x4@lable+1
  4934  07BE  086F               	movf	_cur_x,w
  4935  07BF  00CD               	movwf	??_lg_find_best_solution
  4936  07C0  084D               	movf	??_lg_find_best_solution,w
  4937  07C1  00C4               	movwf	dbg_print_cur_MATRIX4x4@x
  4938  07C2  1683               	bsf	3,5	;RP0=1, select bank1
  4939  07C3  1303               	bcf	3,6	;RP1=0, select bank1
  4940  07C4  082B               	movf	_cur_y^(0+128),w
  4941  07C5  1283               	bcf	3,5	;RP0=0, select bank0
  4942  07C6  1303               	bcf	3,6	;RP1=0, select bank0
  4943  07C7  00CE               	movwf	??_lg_find_best_solution+1
  4944  07C8  084E               	movf	??_lg_find_best_solution+1,w
  4945  07C9  00C5               	movwf	dbg_print_cur_MATRIX4x4@y
  4946  07CA  3000               	movlw	0
  4947  07CB  160A  118A  264D   	fcall	_dbg_print_cur_MATRIX4x4
  4948  07CE                     l4416:	
  4949                           ;logic.h: 563: else
  4950                           ;logic.h: 564: {
  4951                           ;logic.h: 565: do { if(0) { sprintf(g_debug, "GAME OVER!!!""\r\n"); USARTWriteString(g_d
      +                          ebug); } } while (0);;
  4952                           
  4953                           ;logic.h: 562: }
  4954                           
  4955                           ;logic.h: 554: do { if(0) { sprintf(g_debug, "chosen sub_index = %d, temp_pre_x = %d, te
      +                          mp_pre_risk = %d""\r\n", tem_pre_sub_index, temp_pre_x, temp_pre_risk); USARTWriteString
      +                          (g_debug); } } while (0);;
  4956                           
  4957                           
  4958                           ;logic.h: 566: }
  4959                           ;logic.h: 567: return res;
  4960  07CE  1283               	bcf	3,5	;RP0=0, select bank0
  4961  07CF  1303               	bcf	3,6	;RP1=0, select bank0
  4962  07D0  0861               	movf	lg_find_best_solution@res,w
  4963  07D1  0008               	return
  4964  07D2                     __end_of_lg_find_best_solution:	
  4965                           
  4966                           	psect	text11
  4967  119B                     __ptext11:	
  4968 ;; *************** function _lg_right_most *****************
  4969 ;; Defined at:
  4970 ;;		line 359 in file "../logic.h"
  4971 ;; Parameters:    Size  Location     Type
  4972 ;;  x               1    wreg     char 
  4973 ;;  matrix4x4       2   27[BANK0 ] PTR const struct .
  4974 ;;		 -> NULL(0), g_matrix4x4(96), 
  4975 ;;  matrix8x8       1   29[BANK0 ] PTR const struct .
  4976 ;;		 -> g_matrix8x8(8), 
  4977 ;; Auto vars:     Size  Location     Type
  4978 ;;  x               1   32[BANK0 ] char 
  4979 ;; Return value:  Size  Location     Type
  4980 ;;                  1    wreg      char 
  4981 ;; Registers used:
  4982 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  4983 ;; Tracked objects:
  4984 ;;		On entry : 0/0
  4985 ;;		On exit  : 0/0
  4986 ;;		Unchanged: 0/0
  4987 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4988 ;;      Params:         0       3       0       0       0
  4989 ;;      Locals:         0       1       0       0       0
  4990 ;;      Temps:          0       2       0       0       0
  4991 ;;      Totals:         0       6       0       0       0
  4992 ;;Total ram usage:        6 bytes
  4993 ;; Hardware stack levels used:    1
  4994 ;; Hardware stack levels required when called:    4
  4995 ;; This function calls:
  4996 ;;		_USARTWriteString
  4997 ;;		_lg_is_right_boundary
  4998 ;;		_sprintf
  4999 ;; This function is called by:
  5000 ;;		_lg_find_best_solution
  5001 ;; This function uses a non-reentrant model
  5002 ;;
  5003                           
  5004                           
  5005                           ;psect for function _lg_right_most
  5006  119B                     _lg_right_most:	
  5007                           
  5008                           ;incstack = 0
  5009                           ; Regs used in _lg_right_most: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  5010                           ;lg_right_most@x stored from wreg
  5011  119B  1283               	bcf	3,5	;RP0=0, select bank0
  5012  119C  1303               	bcf	3,6	;RP1=0, select bank0
  5013  119D  00C0               	movwf	lg_right_most@x
  5014  119E                     l476:	
  5015                           ;logic.h: 361: while(1)
  5016                           
  5017                           
  5018                           ;logic.h: 362: {
  5019                           ;logic.h: 364: Seed++;
  5020  119E  3001               	movlw	1
  5021  119F  1683               	bsf	3,5	;RP0=1, select bank1
  5022  11A0  1303               	bcf	3,6	;RP1=0, select bank1
  5023  11A1  07A5               	addwf	_Seed^(0+128),f
  5024  11A2  1803               	skipnc
  5025  11A3  0AA6               	incf	(_Seed+1)^(0+128),f
  5026  11A4  3000               	movlw	0
  5027  11A5  07A6               	addwf	(_Seed+1)^(0+128),f
  5028                           
  5029                           ;logic.h: 366: if(lg_is_right_boundary(x, matrix4x4, matrix8x8) == ALIGN_RIGHT_OVER_BOUN
      +                          DARY)
  5030  11A6  1283               	bcf	3,5	;RP0=0, select bank0
  5031  11A7  1303               	bcf	3,6	;RP1=0, select bank0
  5032  11A8  083B               	movf	lg_right_most@matrix4x4,w
  5033  11A9  00B3               	movwf	lg_is_right_boundary@matrix4x4
  5034  11AA  083C               	movf	lg_right_most@matrix4x4+1,w
  5035  11AB  00B4               	movwf	lg_is_right_boundary@matrix4x4+1
  5036  11AC  083D               	movf	lg_right_most@matrix8x8,w
  5037  11AD  00BE               	movwf	??_lg_right_most
  5038  11AE  083E               	movf	??_lg_right_most,w
  5039  11AF  00B5               	movwf	lg_is_right_boundary@matrix8x8
  5040  11B0  0840               	movf	lg_right_most@x,w
  5041  11B1  160A  118A  24F4  160A  118A  	fcall	_lg_is_right_boundary
  5042  11B6  3A02               	xorlw	2
  5043  11B7  1D03               	skipz
  5044  11B8  29BE               	goto	l3966
  5045                           
  5046                           ;logic.h: 369: return x - 1;
  5047                           
  5048                           ;logic.h: 367: {
  5049                           ;logic.h: 368: do { if(0) { sprintf(g_debug, "right_most = %d""\r\n", x - 1); USARTWrite
      +                          String(g_debug); } } while (0);;
  5050  11B9  1283               	bcf	3,5	;RP0=0, select bank0
  5051  11BA  1303               	bcf	3,6	;RP1=0, select bank0
  5052  11BB  0840               	movf	lg_right_most@x,w
  5053  11BC  3EFF               	addlw	-1
  5054  11BD  0008               	return
  5055  11BE                     l3966:	
  5056                           
  5057                           ;logic.h: 370: }
  5058                           ;logic.h: 371: x++;
  5059  11BE  3001               	movlw	1
  5060  11BF  1283               	bcf	3,5	;RP0=0, select bank0
  5061  11C0  1303               	bcf	3,6	;RP1=0, select bank0
  5062  11C1  00BE               	movwf	??_lg_right_most
  5063  11C2  083E               	movf	??_lg_right_most,w
  5064  11C3  07C0               	addwf	lg_right_most@x,f
  5065  11C4  299E               	goto	l476
  5066  11C5                     __end_of_lg_right_most:	
  5067                           
  5068                           	psect	text12
  5069  14F4                     __ptext12:	
  5070 ;; *************** function _lg_is_right_boundary *****************
  5071 ;; Defined at:
  5072 ;;		line 169 in file "../logic.h"
  5073 ;; Parameters:    Size  Location     Type
  5074 ;;  x               1    wreg     char 
  5075 ;;  matrix4x4       2   19[BANK0 ] PTR const struct .
  5076 ;;		 -> NULL(0), g_matrix4x4(96), 
  5077 ;;  matrix8x8       1   21[BANK0 ] PTR const struct .
  5078 ;;		 -> g_matrix8x8(8), 
  5079 ;; Auto vars:     Size  Location     Type
  5080 ;;  x               1   24[BANK0 ] char 
  5081 ;;  col             1   26[BANK0 ] char 
  5082 ;;  row             1   25[BANK0 ] char 
  5083 ;; Return value:  Size  Location     Type
  5084 ;;                  1    wreg      unsigned char 
  5085 ;; Registers used:
  5086 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  5087 ;; Tracked objects:
  5088 ;;		On entry : 0/0
  5089 ;;		On exit  : 0/0
  5090 ;;		Unchanged: 0/0
  5091 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5092 ;;      Params:         0       3       0       0       0
  5093 ;;      Locals:         0       3       0       0       0
  5094 ;;      Temps:          0       2       0       0       0
  5095 ;;      Totals:         0       8       0       0       0
  5096 ;;Total ram usage:        8 bytes
  5097 ;; Hardware stack levels used:    1
  5098 ;; Hardware stack levels required when called:    3
  5099 ;; This function calls:
  5100 ;;		_USARTWriteString
  5101 ;;		_get_matrix_bit
  5102 ;;		_sprintf
  5103 ;; This function is called by:
  5104 ;;		_lg_right_most
  5105 ;; This function uses a non-reentrant model
  5106 ;;
  5107                           
  5108                           
  5109                           ;psect for function _lg_is_right_boundary
  5110  14F4                     _lg_is_right_boundary:	
  5111                           
  5112                           ;incstack = 0
  5113                           ; Regs used in _lg_is_right_boundary: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstac
      +                          k]
  5114                           ;lg_is_right_boundary@x stored from wreg
  5115  14F4  1283               	bcf	3,5	;RP0=0, select bank0
  5116  14F5  1303               	bcf	3,6	;RP1=0, select bank0
  5117  14F6  00B8               	movwf	lg_is_right_boundary@x
  5118                           
  5119                           ;logic.h: 171: for(int8_t row = 4 - 1; row >= 0; row--)
  5120  14F7  3003               	movlw	3
  5121  14F8  00B6               	movwf	??_lg_is_right_boundary
  5122  14F9  0836               	movf	??_lg_is_right_boundary,w
  5123  14FA  00B9               	movwf	lg_is_right_boundary@row
  5124  14FB  1BB9               	btfsc	lg_is_right_boundary@row,7
  5125  14FC  2D43               	goto	l3538
  5126  14FD                     l3512:	
  5127                           
  5128                           ;logic.h: 172: {
  5129                           ;logic.h: 173: for(int8_t col = 0; col < 4; col++)
  5130  14FD  01BA               	clrf	lg_is_right_boundary@col
  5131  14FE  083A               	movf	lg_is_right_boundary@col,w
  5132  14FF  3A80               	xorlw	128
  5133  1500  3E7C               	addlw	-132
  5134  1501  1803               	btfsc	3,0
  5135  1502  2D3D               	goto	l3534
  5136  1503                     l3518:	
  5137                           
  5138                           ;logic.h: 174: {
  5139                           ;logic.h: 175: if(get_matrix_bit((uint8_t*)matrix4x4->row, row, col) == 1)
  5140  1503  0833               	movf	lg_is_right_boundary@matrix4x4,w
  5141  1504  00F7               	movwf	get_matrix_bit@byte
  5142  1505  0834               	movf	lg_is_right_boundary@matrix4x4+1,w
  5143  1506  00F8               	movwf	get_matrix_bit@byte+1
  5144  1507  0839               	movf	lg_is_right_boundary@row,w
  5145  1508  00B6               	movwf	??_lg_is_right_boundary
  5146  1509  0836               	movf	??_lg_is_right_boundary,w
  5147  150A  00F9               	movwf	get_matrix_bit@row
  5148  150B  083A               	movf	lg_is_right_boundary@col,w
  5149  150C  00B7               	movwf	??_lg_is_right_boundary+1
  5150  150D  0837               	movf	??_lg_is_right_boundary+1,w
  5151  150E  00FA               	movwf	get_matrix_bit@col
  5152  150F  160A  158A  273B  160A  118A  	fcall	_get_matrix_bit
  5153  1514  3A01               	xorlw	1
  5154  1515  1D03               	skipz
  5155  1516  2D32               	goto	l3530
  5156                           
  5157                           ;logic.h: 176: {
  5158                           ;logic.h: 177: if(x + col > 8 - 1)
  5159  1517  1283               	bcf	3,5	;RP0=0, select bank0
  5160  1518  1303               	bcf	3,6	;RP1=0, select bank0
  5161  1519  0838               	movf	lg_is_right_boundary@x,w
  5162  151A  073A               	addwf	lg_is_right_boundary@col,w
  5163  151B  00B6               	movwf	??_lg_is_right_boundary
  5164  151C  01B7               	clrf	??_lg_is_right_boundary+1
  5165  151D  1803               	skipnc
  5166  151E  0AB7               	incf	??_lg_is_right_boundary+1,f
  5167  151F  1BB8               	btfsc	lg_is_right_boundary@x,7
  5168  1520  03B7               	decf	??_lg_is_right_boundary+1,f
  5169  1521  1BBA               	btfsc	lg_is_right_boundary@col,7
  5170  1522  03B7               	decf	??_lg_is_right_boundary+1,f
  5171  1523  1283               	bcf	3,5	;RP0=0, select bank0
  5172  1524  1303               	bcf	3,6	;RP1=0, select bank0
  5173  1525  0837               	movf	??_lg_is_right_boundary+1,w
  5174  1526  3A80               	xorlw	128
  5175  1527  00FF               	movwf	127
  5176  1528  3080               	movlw	128
  5177  1529  027F               	subwf	127,w
  5178  152A  1D03               	skipz
  5179  152B  2D2E               	goto	u3075
  5180  152C  3008               	movlw	8
  5181  152D  0236               	subwf	??_lg_is_right_boundary,w
  5182  152E                     u3075:	
  5183  152E  1C03               	skipc
  5184  152F  2D32               	goto	l3530
  5185                           
  5186                           ;logic.h: 180: return ALIGN_RIGHT_OVER_BOUNDARY;
  5187                           
  5188                           ;logic.h: 178: {
  5189                           ;logic.h: 179: do { if(0) { sprintf(g_debug, "ALIGN_RIGHT_OVER_BOUNDARY""\r\n"); USARTWr
      +                          iteString(g_debug); } } while (0);;
  5190  1530  3002               	movlw	2
  5191  1531  0008               	return
  5192  1532                     l3530:	
  5193  1532  3001               	movlw	1
  5194  1533  1283               	bcf	3,5	;RP0=0, select bank0
  5195  1534  1303               	bcf	3,6	;RP1=0, select bank0
  5196  1535  00B6               	movwf	??_lg_is_right_boundary
  5197  1536  0836               	movf	??_lg_is_right_boundary,w
  5198  1537  07BA               	addwf	lg_is_right_boundary@col,f
  5199  1538  083A               	movf	lg_is_right_boundary@col,w
  5200  1539  3A80               	xorlw	128
  5201  153A  3E7C               	addlw	-132
  5202  153B  1C03               	skipc
  5203  153C  2D03               	goto	l3518
  5204  153D                     l3534:	
  5205  153D  30FF               	movlw	255
  5206  153E  00B6               	movwf	??_lg_is_right_boundary
  5207  153F  0836               	movf	??_lg_is_right_boundary,w
  5208  1540  07B9               	addwf	lg_is_right_boundary@row,f
  5209  1541  1FB9               	btfss	lg_is_right_boundary@row,7
  5210  1542  2CFD               	goto	l3512
  5211  1543                     l3538:	
  5212                           
  5213                           ;logic.h: 181: }
  5214                           ;logic.h: 182: }
  5215                           ;logic.h: 183: }
  5216                           ;logic.h: 184: }
  5217                           ;logic.h: 185: return ALIGN_OK;
  5218  1543  3000               	movlw	0
  5219  1544  0008               	return
  5220  1545                     __end_of_lg_is_right_boundary:	
  5221                           
  5222                           	psect	text13
  5223  159A                     __ptext13:	
  5224 ;; *************** function _lg_merge1 *****************
  5225 ;; Defined at:
  5226 ;;		line 248 in file "../logic.h"
  5227 ;; Parameters:    Size  Location     Type
  5228 ;;  x               1    wreg     char 
  5229 ;;  y               1    0[BANK0 ] char 
  5230 ;;  matrix4x4       2    1[BANK0 ] PTR const struct .
  5231 ;;		 -> NULL(0), g_matrix4x4(96), 
  5232 ;;  matrix8x8_in    1    3[BANK0 ] PTR const struct .
  5233 ;;		 -> g_matrix8x8(8), 
  5234 ;;  matrix8x8_ou    1    4[BANK0 ] PTR struct .
  5235 ;;		 -> temp_matrix8x8(8), 
  5236 ;; Auto vars:     Size  Location     Type
  5237 ;;  x               1    7[BANK0 ] char 
  5238 ;;  col             1    9[BANK0 ] unsigned char 
  5239 ;;  row             1    8[BANK0 ] unsigned char 
  5240 ;;  len             2    5[BANK0 ] unsigned int 
  5241 ;; Return value:  Size  Location     Type
  5242 ;;                  1    wreg      void 
  5243 ;; Registers used:
  5244 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  5245 ;; Tracked objects:
  5246 ;;		On entry : 0/0
  5247 ;;		On exit  : 0/0
  5248 ;;		Unchanged: 0/0
  5249 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5250 ;;      Params:         0       5       0       0       0
  5251 ;;      Locals:         0       5       0       0       0
  5252 ;;      Temps:          2       0       0       0       0
  5253 ;;      Totals:         2      10       0       0       0
  5254 ;;Total ram usage:       12 bytes
  5255 ;; Hardware stack levels used:    1
  5256 ;; Hardware stack levels required when called:    3
  5257 ;; This function calls:
  5258 ;;		_get_matrix_bit
  5259 ;;		_memcpy
  5260 ;;		_set_matrix_bit
  5261 ;; This function is called by:
  5262 ;;		_lg_find_best_solution
  5263 ;; This function uses a non-reentrant model
  5264 ;;
  5265                           
  5266                           
  5267                           ;psect for function _lg_merge1
  5268  159A                     _lg_merge1:	
  5269                           
  5270                           ;incstack = 0
  5271                           ; Regs used in _lg_merge1: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  5272                           ;lg_merge1@x stored from wreg
  5273  159A  1283               	bcf	3,5	;RP0=0, select bank0
  5274  159B  1303               	bcf	3,6	;RP1=0, select bank0
  5275  159C  00A7               	movwf	lg_merge1@x
  5276                           
  5277                           ;logic.h: 251: size_t len;
  5278                           ;logic.h: 255: len = sizeof(MATRIX8x8);
  5279  159D  3008               	movlw	8
  5280  159E  00A5               	movwf	lg_merge1@len
  5281  159F  3000               	movlw	0
  5282  15A0  00A6               	movwf	lg_merge1@len+1
  5283                           
  5284                           ;logic.h: 256: memcpy(matrix8x8_out, matrix8x8_in, len);
  5285  15A1  0823               	movf	lg_merge1@matrix8x8_in,w
  5286  15A2  00FC               	movwf	??_lg_merge1
  5287  15A3  087C               	movf	??_lg_merge1,w
  5288  15A4  00F0               	movwf	memcpy@s1
  5289  15A5  0826               	movf	lg_merge1@len+1,w
  5290  15A6  00F2               	movwf	memcpy@n+1
  5291  15A7  0825               	movf	lg_merge1@len,w
  5292  15A8  00F1               	movwf	memcpy@n
  5293  15A9  0824               	movf	lg_merge1@matrix8x8_out,w
  5294  15AA  160A  118A  20D1  160A  118A  	fcall	_memcpy
  5295                           
  5296                           ;logic.h: 258: for(uint8_t row = 0; row < 4; row++)
  5297  15AF  1283               	bcf	3,5	;RP0=0, select bank0
  5298  15B0  1303               	bcf	3,6	;RP1=0, select bank0
  5299  15B1  01A8               	clrf	lg_merge1@row
  5300  15B2                     L6:	
  5301  15B2  3004               	movlw	4
  5302  15B3  0228               	subwf	lg_merge1@row,w
  5303  15B4  1803               	btfsc	3,0
  5304  15B5  0008               	return
  5305                           
  5306                           ;logic.h: 259: {
  5307                           ;logic.h: 260: for(uint8_t col = 0; col < 4; col++)
  5308  15B6  01A9               	clrf	lg_merge1@col
  5309  15B7  3004               	movlw	4
  5310  15B8  0229               	subwf	lg_merge1@col,w
  5311  15B9  1803               	btfsc	3,0
  5312  15BA  2DED               	goto	l3836
  5313  15BB                     l3828:	
  5314                           
  5315                           ;logic.h: 261: {
  5316                           ;logic.h: 262: if(get_matrix_bit((uint8_t*)matrix4x4->row, row, col) == 1)
  5317  15BB  0821               	movf	lg_merge1@matrix4x4,w
  5318  15BC  00F7               	movwf	get_matrix_bit@byte
  5319  15BD  0822               	movf	lg_merge1@matrix4x4+1,w
  5320  15BE  00F8               	movwf	get_matrix_bit@byte+1
  5321  15BF  0828               	movf	lg_merge1@row,w
  5322  15C0  00FC               	movwf	??_lg_merge1
  5323  15C1  087C               	movf	??_lg_merge1,w
  5324  15C2  00F9               	movwf	get_matrix_bit@row
  5325  15C3  0829               	movf	lg_merge1@col,w
  5326  15C4  00FD               	movwf	??_lg_merge1+1
  5327  15C5  087D               	movf	??_lg_merge1+1,w
  5328  15C6  00FA               	movwf	get_matrix_bit@col
  5329  15C7  160A  158A  273B  160A  118A  	fcall	_get_matrix_bit
  5330  15CC  3A01               	xorlw	1
  5331  15CD  1D03               	skipz
  5332  15CE  2DE3               	goto	l3832
  5333                           
  5334                           ;logic.h: 263: {
  5335                           ;logic.h: 264: set_matrix_bit((uint8_t*)matrix8x8_out->row, y + row, x + col, 1);
  5336  15CF  1283               	bcf	3,5	;RP0=0, select bank0
  5337  15D0  1303               	bcf	3,6	;RP1=0, select bank0
  5338  15D1  0828               	movf	lg_merge1@row,w
  5339  15D2  0720               	addwf	lg_merge1@y,w
  5340  15D3  00FC               	movwf	??_lg_merge1
  5341  15D4  087C               	movf	??_lg_merge1,w
  5342  15D5  00F5               	movwf	set_matrix_bit@row
  5343  15D6  0829               	movf	lg_merge1@col,w
  5344  15D7  0727               	addwf	lg_merge1@x,w
  5345  15D8  00FD               	movwf	??_lg_merge1+1
  5346  15D9  087D               	movf	??_lg_merge1+1,w
  5347  15DA  00F6               	movwf	set_matrix_bit@col
  5348  15DB  01F7               	clrf	set_matrix_bit@value
  5349  15DC  0AF7               	incf	set_matrix_bit@value,f
  5350  15DD  0824               	movf	lg_merge1@matrix8x8_out,w
  5351  15DE  160A  158A  274A  160A  118A  	fcall	_set_matrix_bit
  5352  15E3                     l3832:	
  5353  15E3  3001               	movlw	1
  5354  15E4  00FC               	movwf	??_lg_merge1
  5355  15E5  087C               	movf	??_lg_merge1,w
  5356  15E6  1283               	bcf	3,5	;RP0=0, select bank0
  5357  15E7  1303               	bcf	3,6	;RP1=0, select bank0
  5358  15E8  07A9               	addwf	lg_merge1@col,f
  5359  15E9  3004               	movlw	4
  5360  15EA  0229               	subwf	lg_merge1@col,w
  5361  15EB  1C03               	skipc
  5362  15EC  2DBB               	goto	l3828
  5363  15ED                     l3836:	
  5364  15ED  3001               	movlw	1
  5365  15EE  00FC               	movwf	??_lg_merge1
  5366  15EF  087C               	movf	??_lg_merge1,w
  5367  15F0  07A8               	addwf	lg_merge1@row,f
  5368  15F1  2DB2               	goto	L6
  5369  15F2                     __end_of_lg_merge1:	
  5370                           
  5371                           	psect	text14
  5372  10D1                     __ptext14:	
  5373 ;; *************** function _memcpy *****************
  5374 ;; Defined at:
  5375 ;;		line 11 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\memcpy.c"
  5376 ;; Parameters:    Size  Location     Type
  5377 ;;  d1              1    wreg     PTR void 
  5378 ;;		 -> temp_matrix8x8(8), 
  5379 ;;  s1              1    0[COMMON] PTR const void 
  5380 ;;		 -> g_matrix8x8(8), 
  5381 ;;  n               2    1[COMMON] unsigned int 
  5382 ;; Auto vars:     Size  Location     Type
  5383 ;;  d1              1    4[COMMON] PTR void 
  5384 ;;		 -> temp_matrix8x8(8), 
  5385 ;;  s               1    6[COMMON] PTR const unsigned char 
  5386 ;;		 -> g_matrix8x8(8), 
  5387 ;;  d               1    5[COMMON] PTR unsigned char 
  5388 ;;		 -> temp_matrix8x8(8), 
  5389 ;; Return value:  Size  Location     Type
  5390 ;;                  1    wreg      PTR void 
  5391 ;; Registers used:
  5392 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  5393 ;; Tracked objects:
  5394 ;;		On entry : 0/0
  5395 ;;		On exit  : 0/0
  5396 ;;		Unchanged: 0/0
  5397 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5398 ;;      Params:         3       0       0       0       0
  5399 ;;      Locals:         3       0       0       0       0
  5400 ;;      Temps:          1       0       0       0       0
  5401 ;;      Totals:         7       0       0       0       0
  5402 ;;Total ram usage:        7 bytes
  5403 ;; Hardware stack levels used:    1
  5404 ;; This function calls:
  5405 ;;		Nothing
  5406 ;; This function is called by:
  5407 ;;		_lg_merge1
  5408 ;; This function uses a non-reentrant model
  5409 ;;
  5410                           
  5411                           
  5412                           ;psect for function _memcpy
  5413  10D1                     _memcpy:	
  5414                           
  5415                           ;incstack = 0
  5416                           ; Regs used in _memcpy: [wreg-fsr0h+status,2+status,0]
  5417                           ;memcpy@d1 stored from wreg
  5418  10D1  00F4               	movwf	memcpy@d1
  5419  10D2  0870               	movf	memcpy@s1,w
  5420  10D3  00F3               	movwf	??_memcpy
  5421  10D4  0873               	movf	??_memcpy,w
  5422  10D5  00F6               	movwf	memcpy@s
  5423  10D6  0874               	movf	memcpy@d1,w
  5424  10D7  00F3               	movwf	??_memcpy
  5425  10D8  0873               	movf	??_memcpy,w
  5426  10D9  00F5               	movwf	memcpy@d
  5427  10DA                     l3550:	
  5428  10DA  3001               	movlw	1
  5429  10DB  02F1               	subwf	memcpy@n,f
  5430  10DC  3000               	movlw	0
  5431  10DD  1C03               	skipc
  5432  10DE  03F2               	decf	memcpy@n+1,f
  5433  10DF  02F2               	subwf	memcpy@n+1,f
  5434  10E0  0A71               	incf	memcpy@n,w
  5435  10E1  1903               	btfsc	3,2
  5436  10E2  0A72               	incf	memcpy@n+1,w
  5437  10E3  1903               	btfsc	3,2
  5438  10E4  0008               	return
  5439  10E5  0876               	movf	memcpy@s,w
  5440  10E6  0084               	movwf	4
  5441  10E7  1383               	bcf	3,7	;select IRP bank0
  5442  10E8  0800               	movf	0,w
  5443  10E9  00F3               	movwf	??_memcpy
  5444  10EA  0875               	movf	memcpy@d,w
  5445  10EB  0084               	movwf	4
  5446  10EC  0873               	movf	??_memcpy,w
  5447  10ED  0080               	movwf	0
  5448  10EE  3001               	movlw	1
  5449  10EF  00F3               	movwf	??_memcpy
  5450  10F0  0873               	movf	??_memcpy,w
  5451  10F1  07F6               	addwf	memcpy@s,f
  5452  10F2  3001               	movlw	1
  5453  10F3  00F3               	movwf	??_memcpy
  5454  10F4  0873               	movf	??_memcpy,w
  5455  10F5  07F5               	addwf	memcpy@d,f
  5456  10F6  28DA               	goto	l3550
  5457  10F7                     __end_of_memcpy:	
  5458                           ;	Return value of _memcpy is never used
  5459                           
  5460                           
  5461                           	psect	text15
  5462  1171                     __ptext15:	
  5463 ;; *************** function _lg_left_most *****************
  5464 ;; Defined at:
  5465 ;;		line 344 in file "../logic.h"
  5466 ;; Parameters:    Size  Location     Type
  5467 ;;  x               1    wreg     char 
  5468 ;;  matrix4x4       2   30[BANK0 ] PTR const struct .
  5469 ;;		 -> NULL(0), g_matrix4x4(96), 
  5470 ;;  matrix8x8       1   32[BANK0 ] PTR const struct .
  5471 ;;		 -> g_matrix8x8(8), 
  5472 ;; Auto vars:     Size  Location     Type
  5473 ;;  x               1   34[BANK0 ] char 
  5474 ;; Return value:  Size  Location     Type
  5475 ;;                  1    wreg      char 
  5476 ;; Registers used:
  5477 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  5478 ;; Tracked objects:
  5479 ;;		On entry : 0/0
  5480 ;;		On exit  : 0/0
  5481 ;;		Unchanged: 0/0
  5482 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5483 ;;      Params:         0       3       0       0       0
  5484 ;;      Locals:         0       1       0       0       0
  5485 ;;      Temps:          0       1       0       0       0
  5486 ;;      Totals:         0       5       0       0       0
  5487 ;;Total ram usage:        5 bytes
  5488 ;; Hardware stack levels used:    1
  5489 ;; Hardware stack levels required when called:    4
  5490 ;; This function calls:
  5491 ;;		_USARTWriteString
  5492 ;;		_lg_is_left_boundary
  5493 ;;		_sprintf
  5494 ;; This function is called by:
  5495 ;;		_lg_find_best_solution
  5496 ;; This function uses a non-reentrant model
  5497 ;;
  5498                           
  5499                           
  5500                           ;psect for function _lg_left_most
  5501  1171                     _lg_left_most:	
  5502                           
  5503                           ;incstack = 0
  5504                           ; Regs used in _lg_left_most: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  5505                           ;lg_left_most@x stored from wreg
  5506  1171  1283               	bcf	3,5	;RP0=0, select bank0
  5507  1172  1303               	bcf	3,6	;RP1=0, select bank0
  5508  1173  00C2               	movwf	lg_left_most@x
  5509  1174                     l466:	
  5510                           ;logic.h: 346: while(1)
  5511                           
  5512                           
  5513                           ;logic.h: 347: {
  5514                           ;logic.h: 349: Seed++;
  5515  1174  3001               	movlw	1
  5516  1175  1683               	bsf	3,5	;RP0=1, select bank1
  5517  1176  1303               	bcf	3,6	;RP1=0, select bank1
  5518  1177  07A5               	addwf	_Seed^(0+128),f
  5519  1178  1803               	skipnc
  5520  1179  0AA6               	incf	(_Seed+1)^(0+128),f
  5521  117A  3000               	movlw	0
  5522  117B  07A6               	addwf	(_Seed+1)^(0+128),f
  5523                           
  5524                           ;logic.h: 351: if(lg_is_left_boundary(x, matrix4x4, matrix8x8) == ALIGN_LEFT_OVER_BOUNDA
      +                          RY)
  5525  117C  1283               	bcf	3,5	;RP0=0, select bank0
  5526  117D  1303               	bcf	3,6	;RP1=0, select bank0
  5527  117E  083E               	movf	lg_left_most@matrix4x4,w
  5528  117F  00B3               	movwf	lg_is_left_boundary@matrix4x4
  5529  1180  083F               	movf	lg_left_most@matrix4x4+1,w
  5530  1181  00B4               	movwf	lg_is_left_boundary@matrix4x4+1
  5531  1182  0840               	movf	lg_left_most@matrix8x8,w
  5532  1183  00C1               	movwf	??_lg_left_most
  5533  1184  0841               	movf	??_lg_left_most,w
  5534  1185  00B5               	movwf	lg_is_left_boundary@matrix8x8
  5535  1186  0842               	movf	lg_left_most@x,w
  5536  1187  160A  118A  2456  160A  118A  	fcall	_lg_is_left_boundary
  5537  118C  3A01               	xorlw	1
  5538  118D  1D03               	skipz
  5539  118E  2994               	goto	l3952
  5540                           
  5541                           ;logic.h: 354: return x + 1;
  5542                           
  5543                           ;logic.h: 352: {
  5544                           ;logic.h: 353: do { if(0) { sprintf(g_debug, "left_most = %d""\r\n", x + 1); USARTWriteS
      +                          tring(g_debug); } } while (0);;
  5545  118F  1283               	bcf	3,5	;RP0=0, select bank0
  5546  1190  1303               	bcf	3,6	;RP1=0, select bank0
  5547  1191  0842               	movf	lg_left_most@x,w
  5548  1192  3E01               	addlw	1
  5549  1193  0008               	return
  5550  1194                     l3952:	
  5551                           
  5552                           ;logic.h: 355: }
  5553                           ;logic.h: 356: x--;
  5554  1194  30FF               	movlw	255
  5555  1195  1283               	bcf	3,5	;RP0=0, select bank0
  5556  1196  1303               	bcf	3,6	;RP1=0, select bank0
  5557  1197  00C1               	movwf	??_lg_left_most
  5558  1198  0841               	movf	??_lg_left_most,w
  5559  1199  07C2               	addwf	lg_left_most@x,f
  5560  119A  2974               	goto	l466
  5561  119B                     __end_of_lg_left_most:	
  5562                           
  5563                           	psect	text16
  5564  1456                     __ptext16:	
  5565 ;; *************** function _lg_is_left_boundary *****************
  5566 ;; Defined at:
  5567 ;;		line 151 in file "../logic.h"
  5568 ;; Parameters:    Size  Location     Type
  5569 ;;  x               1    wreg     char 
  5570 ;;  matrix4x4       2   19[BANK0 ] PTR const struct .
  5571 ;;		 -> NULL(0), g_matrix4x4(96), 
  5572 ;;  matrix8x8       1   21[BANK0 ] PTR const struct .
  5573 ;;		 -> g_matrix8x8(8), 
  5574 ;; Auto vars:     Size  Location     Type
  5575 ;;  x               1   27[BANK0 ] char 
  5576 ;;  col             1   29[BANK0 ] char 
  5577 ;;  row             1   28[BANK0 ] char 
  5578 ;; Return value:  Size  Location     Type
  5579 ;;                  1    wreg      unsigned char 
  5580 ;; Registers used:
  5581 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  5582 ;; Tracked objects:
  5583 ;;		On entry : 0/0
  5584 ;;		On exit  : 0/0
  5585 ;;		Unchanged: 0/0
  5586 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5587 ;;      Params:         0       3       0       0       0
  5588 ;;      Locals:         0       3       0       0       0
  5589 ;;      Temps:          0       5       0       0       0
  5590 ;;      Totals:         0      11       0       0       0
  5591 ;;Total ram usage:       11 bytes
  5592 ;; Hardware stack levels used:    1
  5593 ;; Hardware stack levels required when called:    3
  5594 ;; This function calls:
  5595 ;;		_USARTWriteString
  5596 ;;		_get_matrix_bit
  5597 ;;		_sprintf
  5598 ;; This function is called by:
  5599 ;;		_lg_left_most
  5600 ;; This function uses a non-reentrant model
  5601 ;;
  5602                           
  5603                           
  5604                           ;psect for function _lg_is_left_boundary
  5605  1456                     _lg_is_left_boundary:	
  5606                           
  5607                           ;incstack = 0
  5608                           ; Regs used in _lg_is_left_boundary: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack
      +                          ]
  5609                           ;lg_is_left_boundary@x stored from wreg
  5610  1456  1283               	bcf	3,5	;RP0=0, select bank0
  5611  1457  1303               	bcf	3,6	;RP1=0, select bank0
  5612  1458  00BB               	movwf	lg_is_left_boundary@x
  5613                           
  5614                           ;logic.h: 153: for(int8_t row = 4 - 1; row >= 0; row--)
  5615  1459  3003               	movlw	3
  5616  145A  00B6               	movwf	??_lg_is_left_boundary
  5617  145B  0836               	movf	??_lg_is_left_boundary,w
  5618  145C  00BC               	movwf	lg_is_left_boundary@row
  5619  145D  1BBC               	btfsc	lg_is_left_boundary@row,7
  5620  145E  2CA1               	goto	l3502
  5621  145F                     l3476:	
  5622                           
  5623                           ;logic.h: 154: {
  5624                           ;logic.h: 155: for(int8_t col = 0; col < 4; col++)
  5625  145F  01BD               	clrf	lg_is_left_boundary@col
  5626  1460  083D               	movf	lg_is_left_boundary@col,w
  5627  1461  3A80               	xorlw	128
  5628  1462  3E7C               	addlw	-132
  5629  1463  1803               	btfsc	3,0
  5630  1464  2C9B               	goto	l3498
  5631  1465                     l3482:	
  5632                           
  5633                           ;logic.h: 156: {
  5634                           ;logic.h: 157: if(get_matrix_bit((uint8_t*)matrix4x4->row, row, col) == 1)
  5635  1465  0833               	movf	lg_is_left_boundary@matrix4x4,w
  5636  1466  00F7               	movwf	get_matrix_bit@byte
  5637  1467  0834               	movf	lg_is_left_boundary@matrix4x4+1,w
  5638  1468  00F8               	movwf	get_matrix_bit@byte+1
  5639  1469  083C               	movf	lg_is_left_boundary@row,w
  5640  146A  00B6               	movwf	??_lg_is_left_boundary
  5641  146B  0836               	movf	??_lg_is_left_boundary,w
  5642  146C  00F9               	movwf	get_matrix_bit@row
  5643  146D  083D               	movf	lg_is_left_boundary@col,w
  5644  146E  00B7               	movwf	??_lg_is_left_boundary+1
  5645  146F  0837               	movf	??_lg_is_left_boundary+1,w
  5646  1470  00FA               	movwf	get_matrix_bit@col
  5647  1471  160A  158A  273B  160A  118A  	fcall	_get_matrix_bit
  5648  1476  3A01               	xorlw	1
  5649  1477  1D03               	skipz
  5650  1478  2C90               	goto	l3494
  5651                           
  5652                           ;logic.h: 158: {
  5653                           ;logic.h: 159: if( x + col < 0)
  5654  1479  1283               	bcf	3,5	;RP0=0, select bank0
  5655  147A  1303               	bcf	3,6	;RP1=0, select bank0
  5656  147B  083D               	movf	lg_is_left_boundary@col,w
  5657  147C  00B6               	movwf	??_lg_is_left_boundary
  5658  147D  01B7               	clrf	??_lg_is_left_boundary+1
  5659  147E  1BB6               	btfsc	??_lg_is_left_boundary,7
  5660  147F  03B7               	decf	??_lg_is_left_boundary+1,f
  5661  1480  083B               	movf	lg_is_left_boundary@x,w
  5662  1481  00B8               	movwf	??_lg_is_left_boundary+2
  5663  1482  01B9               	clrf	??_lg_is_left_boundary+3
  5664  1483  1BB8               	btfsc	??_lg_is_left_boundary+2,7
  5665  1484  03B9               	decf	??_lg_is_left_boundary+3,f
  5666  1485  0836               	movf	??_lg_is_left_boundary,w
  5667  1486  0738               	addwf	??_lg_is_left_boundary+2,w
  5668  1487  0839               	movf	??_lg_is_left_boundary+3,w
  5669  1488  1803               	skipnc
  5670  1489  0A39               	incf	??_lg_is_left_boundary+3,w
  5671  148A  0737               	addwf	??_lg_is_left_boundary+1,w
  5672  148B  00BA               	movwf	??_lg_is_left_boundary+4
  5673  148C  1FBA               	btfss	??_lg_is_left_boundary+4,7
  5674  148D  2C90               	goto	l3494
  5675                           
  5676                           ;logic.h: 162: return ALIGN_LEFT_OVER_BOUNDARY;
  5677                           
  5678                           ;logic.h: 160: {
  5679                           ;logic.h: 161: do { if(0) { sprintf(g_debug, "ALIGN_LEFT_OVER_BOUNDARY""\r\n"); USARTWri
      +                          teString(g_debug); } } while (0);;
  5680  148E  3001               	movlw	1
  5681  148F  0008               	return
  5682  1490                     l3494:	
  5683  1490  3001               	movlw	1
  5684  1491  1283               	bcf	3,5	;RP0=0, select bank0
  5685  1492  1303               	bcf	3,6	;RP1=0, select bank0
  5686  1493  00B6               	movwf	??_lg_is_left_boundary
  5687  1494  0836               	movf	??_lg_is_left_boundary,w
  5688  1495  07BD               	addwf	lg_is_left_boundary@col,f
  5689  1496  083D               	movf	lg_is_left_boundary@col,w
  5690  1497  3A80               	xorlw	128
  5691  1498  3E7C               	addlw	-132
  5692  1499  1C03               	skipc
  5693  149A  2C65               	goto	l3482
  5694  149B                     l3498:	
  5695  149B  30FF               	movlw	255
  5696  149C  00B6               	movwf	??_lg_is_left_boundary
  5697  149D  0836               	movf	??_lg_is_left_boundary,w
  5698  149E  07BC               	addwf	lg_is_left_boundary@row,f
  5699  149F  1FBC               	btfss	lg_is_left_boundary@row,7
  5700  14A0  2C5F               	goto	l3476
  5701  14A1                     l3502:	
  5702                           
  5703                           ;logic.h: 163: }
  5704                           ;logic.h: 164: }
  5705                           ;logic.h: 165: }
  5706                           ;logic.h: 166: }
  5707                           ;logic.h: 167: return ALIGN_OK;
  5708  14A1  3000               	movlw	0
  5709  14A2  0008               	return
  5710  14A3                     __end_of_lg_is_left_boundary:	
  5711                           
  5712                           	psect	text17
  5713  0EC2                     __ptext17:	
  5714 ;; *************** function _lg_is_valid *****************
  5715 ;; Defined at:
  5716 ;;		line 117 in file "../logic.h"
  5717 ;; Parameters:    Size  Location     Type
  5718 ;;  x               1    wreg     char 
  5719 ;;  y               1   19[BANK0 ] char 
  5720 ;;  matrix4x4       2   20[BANK0 ] PTR const struct .
  5721 ;;		 -> NULL(0), g_matrix4x4(96), 
  5722 ;;  matrix8x8       1   22[BANK0 ] PTR const struct .
  5723 ;;		 -> g_matrix8x8(8), 
  5724 ;; Auto vars:     Size  Location     Type
  5725 ;;  x               1   25[BANK0 ] char 
  5726 ;;  col             1   27[BANK0 ] char 
  5727 ;;  row             1   26[BANK0 ] char 
  5728 ;; Return value:  Size  Location     Type
  5729 ;;                  1    wreg      unsigned char 
  5730 ;; Registers used:
  5731 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  5732 ;; Tracked objects:
  5733 ;;		On entry : 0/0
  5734 ;;		On exit  : 0/0
  5735 ;;		Unchanged: 0/0
  5736 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5737 ;;      Params:         0       4       0       0       0
  5738 ;;      Locals:         0       3       0       0       0
  5739 ;;      Temps:          0       2       0       0       0
  5740 ;;      Totals:         0       9       0       0       0
  5741 ;;Total ram usage:        9 bytes
  5742 ;; Hardware stack levels used:    1
  5743 ;; Hardware stack levels required when called:    3
  5744 ;; This function calls:
  5745 ;;		_USARTWriteString
  5746 ;;		_get_matrix_bit
  5747 ;;		_sprintf
  5748 ;; This function is called by:
  5749 ;;		_lg_find_best_solution
  5750 ;; This function uses a non-reentrant model
  5751 ;;
  5752                           
  5753                           
  5754                           ;psect for function _lg_is_valid
  5755  0EC2                     _lg_is_valid:	
  5756                           
  5757                           ;incstack = 0
  5758                           ; Regs used in _lg_is_valid: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  5759                           ;lg_is_valid@x stored from wreg
  5760  0EC2  1283               	bcf	3,5	;RP0=0, select bank0
  5761  0EC3  1303               	bcf	3,6	;RP1=0, select bank0
  5762  0EC4  00B9               	movwf	lg_is_valid@x
  5763                           
  5764                           ;logic.h: 120: for(int8_t row = 4 - 1; row >= 0; row--)
  5765                           
  5766                           ;logic.h: 119: do { if(0) { sprintf(g_debug, "==============is_valid============""\r\n")
      +                          ; USARTWriteString(g_debug); } } while (0);;
  5767  0EC5  3003               	movlw	3
  5768  0EC6  1283               	bcf	3,5	;RP0=0, select bank0
  5769  0EC7  1303               	bcf	3,6	;RP1=0, select bank0
  5770  0EC8  00B7               	movwf	??_lg_is_valid
  5771  0EC9  0837               	movf	??_lg_is_valid,w
  5772  0ECA  00BA               	movwf	lg_is_valid@row
  5773  0ECB                     L7:	
  5774  0ECB  1BBA               	btfsc	lg_is_valid@row,7
  5775  0ECC  2F55               	goto	l3754
  5776                           
  5777                           ;logic.h: 121: {
  5778                           ;logic.h: 122: for(int8_t col = 0; col < 4; col++)
  5779  0ECD  01BB               	clrf	lg_is_valid@col
  5780  0ECE  083B               	movf	lg_is_valid@col,w
  5781  0ECF  3A80               	xorlw	128
  5782  0ED0  3E7C               	addlw	-132
  5783  0ED1  1803               	btfsc	3,0
  5784  0ED2  2F50               	goto	l3746
  5785  0ED3                     l3696:	
  5786                           
  5787                           ;logic.h: 123: {
  5788                           ;logic.h: 124: if(get_matrix_bit((uint8_t*)matrix4x4->row, row, col) == 1)
  5789  0ED3  0834               	movf	lg_is_valid@matrix4x4,w
  5790  0ED4  00F7               	movwf	get_matrix_bit@byte
  5791  0ED5  0835               	movf	lg_is_valid@matrix4x4+1,w
  5792  0ED6  00F8               	movwf	get_matrix_bit@byte+1
  5793  0ED7  083A               	movf	lg_is_valid@row,w
  5794  0ED8  00B7               	movwf	??_lg_is_valid
  5795  0ED9  0837               	movf	??_lg_is_valid,w
  5796  0EDA  00F9               	movwf	get_matrix_bit@row
  5797  0EDB  083B               	movf	lg_is_valid@col,w
  5798  0EDC  00B8               	movwf	??_lg_is_valid+1
  5799  0EDD  0838               	movf	??_lg_is_valid+1,w
  5800  0EDE  00FA               	movwf	get_matrix_bit@col
  5801  0EDF  160A  158A  273B  120A  158A  	fcall	_get_matrix_bit
  5802  0EE4  3A01               	xorlw	1
  5803  0EE5  1D03               	skipz
  5804  0EE6  2F45               	goto	l3742
  5805                           
  5806                           ;logic.h: 125: {
  5807                           ;logic.h: 126: if(get_matrix_bit((uint8_t*)matrix8x8->row, y + row, x + col) == 1)
  5808  0EE7  1283               	bcf	3,5	;RP0=0, select bank0
  5809  0EE8  1303               	bcf	3,6	;RP1=0, select bank0
  5810  0EE9  0836               	movf	lg_is_valid@matrix8x8,w
  5811  0EEA  00F7               	movwf	get_matrix_bit@byte
  5812  0EEB  3000               	movlw	0
  5813  0EEC  00F8               	movwf	get_matrix_bit@byte+1
  5814  0EED  083A               	movf	lg_is_valid@row,w
  5815  0EEE  0733               	addwf	lg_is_valid@y,w
  5816  0EEF  00B7               	movwf	??_lg_is_valid
  5817  0EF0  0837               	movf	??_lg_is_valid,w
  5818  0EF1  00F9               	movwf	get_matrix_bit@row
  5819  0EF2  083B               	movf	lg_is_valid@col,w
  5820  0EF3  0739               	addwf	lg_is_valid@x,w
  5821  0EF4  00B8               	movwf	??_lg_is_valid+1
  5822  0EF5  0838               	movf	??_lg_is_valid+1,w
  5823  0EF6  00FA               	movwf	get_matrix_bit@col
  5824  0EF7  160A  158A  273B  120A  158A  	fcall	_get_matrix_bit
  5825  0EFC  3A01               	xorlw	1
  5826  0EFD  1D03               	skipz
  5827  0EFE  2F01               	goto	l3712
  5828                           
  5829                           ;logic.h: 130: return 0;
  5830                           
  5831                           ;logic.h: 129: do { if(0) { sprintf(g_debug, "row = %d, col = %d""\r\n", row, col); USAR
      +                          TWriteString(g_debug); } } while (0);;
  5832                           
  5833                           ;logic.h: 127: {
  5834                           ;logic.h: 128: do { if(0) { sprintf(g_debug, "not valid1""\r\n"); USARTWriteString(g_deb
      +                          ug); } } while (0);;
  5835  0EFF  3000               	movlw	0
  5836  0F00  0008               	return
  5837  0F01                     l3712:	
  5838                           
  5839                           ;logic.h: 131: }
  5840                           ;logic.h: 133: if(( x + col < 0) || (x + col >= 8))
  5841  0F01  1283               	bcf	3,5	;RP0=0, select bank0
  5842  0F02  1303               	bcf	3,6	;RP1=0, select bank0
  5843  0F03  0839               	movf	lg_is_valid@x,w
  5844  0F04  073B               	addwf	lg_is_valid@col,w
  5845  0F05  00B7               	movwf	??_lg_is_valid
  5846  0F06  01B8               	clrf	??_lg_is_valid+1
  5847  0F07  1803               	skipnc
  5848  0F08  0AB8               	incf	??_lg_is_valid+1,f
  5849  0F09  1BB9               	btfsc	lg_is_valid@x,7
  5850  0F0A  03B8               	decf	??_lg_is_valid+1,f
  5851  0F0B  1BBB               	btfsc	lg_is_valid@col,7
  5852  0F0C  03B8               	decf	??_lg_is_valid+1,f
  5853  0F0D  1283               	bcf	3,5	;RP0=0, select bank0
  5854  0F0E  1303               	bcf	3,6	;RP1=0, select bank0
  5855  0F0F  1BB8               	btfsc	??_lg_is_valid+1,7
  5856  0F10  2F28               	goto	l3724
  5857  0F11  0839               	movf	lg_is_valid@x,w
  5858  0F12  073B               	addwf	lg_is_valid@col,w
  5859  0F13  00B7               	movwf	??_lg_is_valid
  5860  0F14  01B8               	clrf	??_lg_is_valid+1
  5861  0F15  1803               	skipnc
  5862  0F16  0AB8               	incf	??_lg_is_valid+1,f
  5863  0F17  1BB9               	btfsc	lg_is_valid@x,7
  5864  0F18  03B8               	decf	??_lg_is_valid+1,f
  5865  0F19  1BBB               	btfsc	lg_is_valid@col,7
  5866  0F1A  03B8               	decf	??_lg_is_valid+1,f
  5867  0F1B  1283               	bcf	3,5	;RP0=0, select bank0
  5868  0F1C  1303               	bcf	3,6	;RP1=0, select bank0
  5869  0F1D  0838               	movf	??_lg_is_valid+1,w
  5870  0F1E  3A80               	xorlw	128
  5871  0F1F  00FF               	movwf	127
  5872  0F20  3080               	movlw	128
  5873  0F21  027F               	subwf	127,w
  5874  0F22  1D03               	skipz
  5875  0F23  2F26               	goto	u3395
  5876  0F24  3008               	movlw	8
  5877  0F25  0237               	subwf	??_lg_is_valid,w
  5878  0F26                     u3395:	
  5879  0F26  1C03               	skipc
  5880  0F27  2F2A               	goto	l3728
  5881  0F28                     l3724:	
  5882                           ;logic.h: 136: do { if(0) { sprintf(g_debug, "row = %d, col = %d""\r\n", row, col); USAR
      +                          TWriteString(g_debug); } } while (0);;
  5883                           
  5884                           ;logic.h: 134: {
  5885                           ;logic.h: 135: do { if(0) { sprintf(g_debug, "not valid2""\r\n"); USARTWriteString(g_deb
      +                          ug); } } while (0);;
  5886                           
  5887                           
  5888                           ;logic.h: 137: return 0;
  5889  0F28  3000               	movlw	0
  5890  0F29  0008               	return
  5891  0F2A                     l3728:	
  5892                           
  5893                           ;logic.h: 138: }
  5894                           ;logic.h: 139: if((y + row) > (8 - 1))
  5895  0F2A  1283               	bcf	3,5	;RP0=0, select bank0
  5896  0F2B  1303               	bcf	3,6	;RP1=0, select bank0
  5897  0F2C  0833               	movf	lg_is_valid@y,w
  5898  0F2D  073A               	addwf	lg_is_valid@row,w
  5899  0F2E  00B7               	movwf	??_lg_is_valid
  5900  0F2F  01B8               	clrf	??_lg_is_valid+1
  5901  0F30  1803               	skipnc
  5902  0F31  0AB8               	incf	??_lg_is_valid+1,f
  5903  0F32  1BB3               	btfsc	lg_is_valid@y,7
  5904  0F33  03B8               	decf	??_lg_is_valid+1,f
  5905  0F34  1BBA               	btfsc	lg_is_valid@row,7
  5906  0F35  03B8               	decf	??_lg_is_valid+1,f
  5907  0F36  1283               	bcf	3,5	;RP0=0, select bank0
  5908  0F37  1303               	bcf	3,6	;RP1=0, select bank0
  5909  0F38  0838               	movf	??_lg_is_valid+1,w
  5910  0F39  3A80               	xorlw	128
  5911  0F3A  00FF               	movwf	127
  5912  0F3B  3080               	movlw	128
  5913  0F3C  027F               	subwf	127,w
  5914  0F3D  1D03               	skipz
  5915  0F3E  2F41               	goto	u3415
  5916  0F3F  3008               	movlw	8
  5917  0F40  0237               	subwf	??_lg_is_valid,w
  5918  0F41                     u3415:	
  5919  0F41  1C03               	skipc
  5920  0F42  2F45               	goto	l3742
  5921                           
  5922                           ;logic.h: 143: return 0;
  5923                           
  5924                           ;logic.h: 142: do { if(0) { sprintf(g_debug, "row = %d, col = %d""\r\n", row, col); USAR
      +                          TWriteString(g_debug); } } while (0);;
  5925                           
  5926                           ;logic.h: 140: {
  5927                           ;logic.h: 141: do { if(0) { sprintf(g_debug, "not valid3""\r\n"); USARTWriteString(g_deb
      +                          ug); } } while (0);;
  5928  0F43  3000               	movlw	0
  5929  0F44  0008               	return
  5930  0F45                     l3742:	
  5931  0F45  3001               	movlw	1
  5932  0F46  1283               	bcf	3,5	;RP0=0, select bank0
  5933  0F47  1303               	bcf	3,6	;RP1=0, select bank0
  5934  0F48  00B7               	movwf	??_lg_is_valid
  5935  0F49  0837               	movf	??_lg_is_valid,w
  5936  0F4A  07BB               	addwf	lg_is_valid@col,f
  5937  0F4B  083B               	movf	lg_is_valid@col,w
  5938  0F4C  3A80               	xorlw	128
  5939  0F4D  3E7C               	addlw	-132
  5940  0F4E  1C03               	skipc
  5941  0F4F  2ED3               	goto	l3696
  5942  0F50                     l3746:	
  5943  0F50  30FF               	movlw	255
  5944  0F51  00B7               	movwf	??_lg_is_valid
  5945  0F52  0837               	movf	??_lg_is_valid,w
  5946  0F53  07BA               	addwf	lg_is_valid@row,f
  5947  0F54  2ECB               	goto	L7
  5948  0F55                     l3754:	
  5949                           ;logic.h: 144: }
  5950                           ;logic.h: 145: }
  5951                           ;logic.h: 146: }
  5952                           ;logic.h: 147: }
  5953                           ;logic.h: 148: do { if(0) { sprintf(g_debug, "valid""\r\n"); USARTWriteString(g_debug); 
      +                          } } while (0);;
  5954                           
  5955                           
  5956                           ;logic.h: 149: return 1;
  5957  0F55  3001               	movlw	1
  5958  0F56  0008               	return
  5959  0F57                     __end_of_lg_is_valid:	
  5960                           
  5961                           	psect	text18
  5962  0DAE                     __ptext18:	
  5963 ;; *************** function _lg_get_weight *****************
  5964 ;; Defined at:
  5965 ;;		line 299 in file "../logic.h"
  5966 ;; Parameters:    Size  Location     Type
  5967 ;;  matrix          1    wreg     PTR const struct .
  5968 ;;		 -> temp_matrix8x8(8), 
  5969 ;; Auto vars:     Size  Location     Type
  5970 ;;  matrix          1   27[BANK0 ] PTR const struct .
  5971 ;;		 -> temp_matrix8x8(8), 
  5972 ;;  row             1   30[BANK0 ] char 
  5973 ;;  col             1   29[BANK0 ] unsigned char 
  5974 ;;  risk            2   25[BANK0 ] unsigned int 
  5975 ;;  pre             1   28[BANK0 ] unsigned char 
  5976 ;;  start           1   24[BANK0 ] unsigned char 
  5977 ;; Return value:  Size  Location     Type
  5978 ;;                  2   19[BANK0 ] unsigned int 
  5979 ;; Registers used:
  5980 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  5981 ;; Tracked objects:
  5982 ;;		On entry : 0/0
  5983 ;;		On exit  : 0/0
  5984 ;;		Unchanged: 0/0
  5985 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5986 ;;      Params:         0       2       0       0       0
  5987 ;;      Locals:         0       7       0       0       0
  5988 ;;      Temps:          0       3       0       0       0
  5989 ;;      Totals:         0      12       0       0       0
  5990 ;;Total ram usage:       12 bytes
  5991 ;; Hardware stack levels used:    1
  5992 ;; Hardware stack levels required when called:    3
  5993 ;; This function calls:
  5994 ;;		_USARTWriteString
  5995 ;;		_get_matrix_bit
  5996 ;;		_sprintf
  5997 ;; This function is called by:
  5998 ;;		_lg_find_best_solution
  5999 ;; This function uses a non-reentrant model
  6000 ;;
  6001                           
  6002                           
  6003                           ;psect for function _lg_get_weight
  6004  0DAE                     _lg_get_weight:	
  6005                           
  6006                           ;incstack = 0
  6007                           ; Regs used in _lg_get_weight: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  6008                           ;lg_get_weight@matrix stored from wreg
  6009  0DAE  1283               	bcf	3,5	;RP0=0, select bank0
  6010  0DAF  1303               	bcf	3,6	;RP1=0, select bank0
  6011  0DB0  00BB               	movwf	lg_get_weight@matrix
  6012                           
  6013                           ;logic.h: 301: uint8_t start;
  6014                           ;logic.h: 302: uint16_t risk = 0;
  6015  0DB1  01B9               	clrf	lg_get_weight@risk
  6016  0DB2  01BA               	clrf	lg_get_weight@risk+1
  6017                           
  6018                           ;logic.h: 303: uint8_t pre = 0xFF;
  6019  0DB3  30FF               	movlw	255
  6020  0DB4  00B5               	movwf	??_lg_get_weight
  6021  0DB5  0835               	movf	??_lg_get_weight,w
  6022  0DB6  00BC               	movwf	lg_get_weight@pre
  6023                           
  6024                           ;logic.h: 304: for(uint8_t col = 0; col < 8; col++)
  6025  0DB7  01BD               	clrf	lg_get_weight@col
  6026  0DB8                     L8:	
  6027  0DB8  3008               	movlw	8
  6028  0DB9  023D               	subwf	lg_get_weight@col,w
  6029  0DBA  1803               	btfsc	3,0
  6030  0DBB  2E28               	goto	l3928
  6031                           
  6032                           ;logic.h: 305: {
  6033                           ;logic.h: 306: pre = 0xFF;
  6034  0DBC  30FF               	movlw	255
  6035  0DBD  00B5               	movwf	??_lg_get_weight
  6036  0DBE  0835               	movf	??_lg_get_weight,w
  6037  0DBF  00BC               	movwf	lg_get_weight@pre
  6038                           
  6039                           ;logic.h: 307: start = 0;
  6040  0DC0  01B8               	clrf	lg_get_weight@start
  6041                           
  6042                           ;logic.h: 308: for(int8_t row = 8 - 1; row >= 0; row--)
  6043  0DC1  3007               	movlw	7
  6044  0DC2  00B5               	movwf	??_lg_get_weight
  6045  0DC3  0835               	movf	??_lg_get_weight,w
  6046  0DC4  00BE               	movwf	lg_get_weight@row
  6047  0DC5  1BBE               	btfsc	lg_get_weight@row,7
  6048  0DC6  2E23               	goto	l3920
  6049  0DC7                     l3900:	
  6050                           
  6051                           ;logic.h: 309: {
  6052                           ;logic.h: 310: if(pre == 0xFF)
  6053  0DC7  0A3C               	incf	lg_get_weight@pre,w
  6054  0DC8  1D03               	btfss	3,2
  6055  0DC9  2DE1               	goto	l3904
  6056                           
  6057                           ;logic.h: 311: {
  6058                           ;logic.h: 312: pre = get_matrix_bit((uint8_t*)matrix->row, row, col);
  6059  0DCA  083B               	movf	lg_get_weight@matrix,w
  6060  0DCB  00F7               	movwf	get_matrix_bit@byte
  6061  0DCC  3000               	movlw	0
  6062  0DCD  00F8               	movwf	get_matrix_bit@byte+1
  6063  0DCE  083E               	movf	lg_get_weight@row,w
  6064  0DCF  00B5               	movwf	??_lg_get_weight
  6065  0DD0  0835               	movf	??_lg_get_weight,w
  6066  0DD1  00F9               	movwf	get_matrix_bit@row
  6067  0DD2  083D               	movf	lg_get_weight@col,w
  6068  0DD3  00B6               	movwf	??_lg_get_weight+1
  6069  0DD4  0836               	movf	??_lg_get_weight+1,w
  6070  0DD5  00FA               	movwf	get_matrix_bit@col
  6071  0DD6  160A  158A  273B  120A  158A  	fcall	_get_matrix_bit
  6072  0DDB  1283               	bcf	3,5	;RP0=0, select bank0
  6073  0DDC  1303               	bcf	3,6	;RP1=0, select bank0
  6074  0DDD  00B7               	movwf	??_lg_get_weight+2
  6075  0DDE  0837               	movf	??_lg_get_weight+2,w
  6076  0DDF  00BC               	movwf	lg_get_weight@pre
  6077                           
  6078                           ;logic.h: 313: }
  6079  0DE0  2E1D               	goto	l3916
  6080  0DE1                     l3904:	
  6081                           
  6082                           ;logic.h: 314: else
  6083                           ;logic.h: 315: {
  6084                           ;logic.h: 316: if(pre != get_matrix_bit((uint8_t*)matrix->row, row, col))
  6085  0DE1  083B               	movf	lg_get_weight@matrix,w
  6086  0DE2  00F7               	movwf	get_matrix_bit@byte
  6087  0DE3  3000               	movlw	0
  6088  0DE4  00F8               	movwf	get_matrix_bit@byte+1
  6089  0DE5  083E               	movf	lg_get_weight@row,w
  6090  0DE6  00B5               	movwf	??_lg_get_weight
  6091  0DE7  0835               	movf	??_lg_get_weight,w
  6092  0DE8  00F9               	movwf	get_matrix_bit@row
  6093  0DE9  083D               	movf	lg_get_weight@col,w
  6094  0DEA  00B6               	movwf	??_lg_get_weight+1
  6095  0DEB  0836               	movf	??_lg_get_weight+1,w
  6096  0DEC  00FA               	movwf	get_matrix_bit@col
  6097  0DED  160A  158A  273B  120A  158A  	fcall	_get_matrix_bit
  6098  0DF2  1283               	bcf	3,5	;RP0=0, select bank0
  6099  0DF3  1303               	bcf	3,6	;RP1=0, select bank0
  6100  0DF4  063C               	xorwf	lg_get_weight@pre,w
  6101  0DF5  1903               	skipnz
  6102  0DF6  2E14               	goto	l3912
  6103                           
  6104                           ;logic.h: 317: {
  6105                           ;logic.h: 318: pre = get_matrix_bit((uint8_t*)matrix->row, row, col);
  6106  0DF7  083B               	movf	lg_get_weight@matrix,w
  6107  0DF8  00F7               	movwf	get_matrix_bit@byte
  6108  0DF9  3000               	movlw	0
  6109  0DFA  00F8               	movwf	get_matrix_bit@byte+1
  6110  0DFB  083E               	movf	lg_get_weight@row,w
  6111  0DFC  00B5               	movwf	??_lg_get_weight
  6112  0DFD  0835               	movf	??_lg_get_weight,w
  6113  0DFE  00F9               	movwf	get_matrix_bit@row
  6114  0DFF  083D               	movf	lg_get_weight@col,w
  6115  0E00  00B6               	movwf	??_lg_get_weight+1
  6116  0E01  0836               	movf	??_lg_get_weight+1,w
  6117  0E02  00FA               	movwf	get_matrix_bit@col
  6118  0E03  160A  158A  273B  120A  158A  	fcall	_get_matrix_bit
  6119  0E08  1283               	bcf	3,5	;RP0=0, select bank0
  6120  0E09  1303               	bcf	3,6	;RP1=0, select bank0
  6121  0E0A  00B7               	movwf	??_lg_get_weight+2
  6122  0E0B  0837               	movf	??_lg_get_weight+2,w
  6123  0E0C  00BC               	movwf	lg_get_weight@pre
  6124                           
  6125                           ;logic.h: 319: if(pre == 0)
  6126  0E0D  083C               	movf	lg_get_weight@pre,w
  6127  0E0E  1D03               	btfss	3,2
  6128  0E0F  2E12               	goto	l454
  6129                           
  6130                           ;logic.h: 320: {
  6131                           ;logic.h: 321: start = 0;
  6132  0E10  01B8               	clrf	lg_get_weight@start
  6133                           
  6134                           ;logic.h: 322: }
  6135  0E11  2E14               	goto	l3912
  6136  0E12                     l454:	
  6137                           
  6138                           ;logic.h: 323: else
  6139                           ;logic.h: 324: {
  6140                           ;logic.h: 325: start = 1;
  6141  0E12  01B8               	clrf	lg_get_weight@start
  6142  0E13  0AB8               	incf	lg_get_weight@start,f
  6143  0E14                     l3912:	
  6144                           
  6145                           ;logic.h: 326: }
  6146                           ;logic.h: 327: }
  6147                           ;logic.h: 328: if(start == 1)
  6148  0E14  0338               	decf	lg_get_weight@start,w
  6149  0E15  1D03               	btfss	3,2
  6150  0E16  2E1D               	goto	l3916
  6151                           
  6152                           ;logic.h: 329: {
  6153                           ;logic.h: 330: risk++;
  6154  0E17  3001               	movlw	1
  6155  0E18  07B9               	addwf	lg_get_weight@risk,f
  6156  0E19  1803               	skipnc
  6157  0E1A  0ABA               	incf	lg_get_weight@risk+1,f
  6158  0E1B  3000               	movlw	0
  6159  0E1C  07BA               	addwf	lg_get_weight@risk+1,f
  6160  0E1D                     l3916:	
  6161  0E1D  30FF               	movlw	255
  6162  0E1E  00B5               	movwf	??_lg_get_weight
  6163  0E1F  0835               	movf	??_lg_get_weight,w
  6164  0E20  07BE               	addwf	lg_get_weight@row,f
  6165  0E21  1FBE               	btfss	lg_get_weight@row,7
  6166  0E22  2DC7               	goto	l3900
  6167  0E23                     l3920:	
  6168  0E23  3001               	movlw	1
  6169  0E24  00B5               	movwf	??_lg_get_weight
  6170  0E25  0835               	movf	??_lg_get_weight,w
  6171  0E26  07BD               	addwf	lg_get_weight@col,f
  6172  0E27  2DB8               	goto	L8
  6173  0E28                     l3928:	
  6174                           ;logic.h: 331: }
  6175                           ;logic.h: 332: }
  6176                           ;logic.h: 333: }
  6177                           ;logic.h: 334: }
  6178                           ;logic.h: 335: do { if(0) { sprintf(g_debug, "risk = %d""\r\n", risk); USARTWriteString(
      +                          g_debug); } } while (0);;
  6179                           
  6180                           
  6181                           ;logic.h: 337: return risk;
  6182  0E28  1283               	bcf	3,5	;RP0=0, select bank0
  6183  0E29  1303               	bcf	3,6	;RP1=0, select bank0
  6184  0E2A  083A               	movf	lg_get_weight@risk+1,w
  6185  0E2B  00B4               	movwf	?_lg_get_weight+1
  6186  0E2C  0839               	movf	lg_get_weight@risk,w
  6187  0E2D  00B3               	movwf	?_lg_get_weight
  6188  0E2E  0008               	return
  6189  0E2F                     __end_of_lg_get_weight:	
  6190                           
  6191                           	psect	text19
  6192  111F                     __ptext19:	
  6193 ;; *************** function _lg_get_num_removed_rows *****************
  6194 ;; Defined at:
  6195 ;;		line 68 in file "../logic.h"
  6196 ;; Parameters:    Size  Location     Type
  6197 ;;  matrix          1    wreg     PTR struct .
  6198 ;;		 -> temp_matrix8x8(8), 
  6199 ;; Auto vars:     Size  Location     Type
  6200 ;;  matrix          1   34[BANK0 ] PTR struct .
  6201 ;;		 -> temp_matrix8x8(8), 
  6202 ;;  row             1   36[BANK0 ] char 
  6203 ;;  count           1   35[BANK0 ] unsigned char 
  6204 ;; Return value:  Size  Location     Type
  6205 ;;                  1    wreg      unsigned char 
  6206 ;; Registers used:
  6207 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  6208 ;; Tracked objects:
  6209 ;;		On entry : 0/0
  6210 ;;		On exit  : 0/0
  6211 ;;		Unchanged: 0/0
  6212 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6213 ;;      Params:         0       0       0       0       0
  6214 ;;      Locals:         0       3       0       0       0
  6215 ;;      Temps:          0       2       0       0       0
  6216 ;;      Totals:         0       5       0       0       0
  6217 ;;Total ram usage:        5 bytes
  6218 ;; Hardware stack levels used:    1
  6219 ;; Hardware stack levels required when called:    5
  6220 ;; This function calls:
  6221 ;;		_USARTWriteString
  6222 ;;		_lg_is_row_full
  6223 ;;		_sprintf
  6224 ;; This function is called by:
  6225 ;;		_lg_find_best_solution
  6226 ;; This function uses a non-reentrant model
  6227 ;;
  6228                           
  6229                           
  6230                           ;psect for function _lg_get_num_removed_rows
  6231  111F                     _lg_get_num_removed_rows:	
  6232                           
  6233                           ;incstack = 0
  6234                           ; Regs used in _lg_get_num_removed_rows: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cs
      +                          tack]
  6235                           ;lg_get_num_removed_rows@matrix stored from wreg
  6236  111F  1283               	bcf	3,5	;RP0=0, select bank0
  6237  1120  1303               	bcf	3,6	;RP1=0, select bank0
  6238  1121  00C2               	movwf	lg_get_num_removed_rows@matrix
  6239                           
  6240                           ;logic.h: 70: uint8_t count = 0;
  6241  1122  01C3               	clrf	lg_get_num_removed_rows@count
  6242                           
  6243                           ;logic.h: 71: for(int8_t row = 0; row < 8; row++)
  6244  1123  01C4               	clrf	lg_get_num_removed_rows@row
  6245  1124                     L9:	
  6246  1124  0844               	movf	lg_get_num_removed_rows@row,w
  6247  1125  3A80               	xorlw	128
  6248  1126  3E78               	addlw	-136
  6249  1127  1803               	btfsc	3,0
  6250  1128  2943               	goto	l3676
  6251                           
  6252                           ;logic.h: 72: {
  6253                           ;logic.h: 73: if(lg_is_row_full(matrix, row) == 1)
  6254  1129  0844               	movf	lg_get_num_removed_rows@row,w
  6255  112A  00C0               	movwf	??_lg_get_num_removed_rows
  6256  112B  0840               	movf	??_lg_get_num_removed_rows,w
  6257  112C  00BB               	movwf	lg_is_row_full@row
  6258  112D  0842               	movf	lg_get_num_removed_rows@matrix,w
  6259  112E  160A  118A  2025  160A  118A  	fcall	_lg_is_row_full
  6260  1133  3A01               	xorlw	1
  6261  1134  1D03               	skipz
  6262  1135  293C               	goto	l290
  6263                           
  6264                           ;logic.h: 74: {
  6265                           ;logic.h: 75: count++;
  6266  1136  3001               	movlw	1
  6267  1137  1283               	bcf	3,5	;RP0=0, select bank0
  6268  1138  1303               	bcf	3,6	;RP1=0, select bank0
  6269  1139  00C0               	movwf	??_lg_get_num_removed_rows
  6270  113A  0840               	movf	??_lg_get_num_removed_rows,w
  6271  113B  07C3               	addwf	lg_get_num_removed_rows@count,f
  6272  113C                     l290:	
  6273  113C  3001               	movlw	1
  6274  113D  1283               	bcf	3,5	;RP0=0, select bank0
  6275  113E  1303               	bcf	3,6	;RP1=0, select bank0
  6276  113F  00C0               	movwf	??_lg_get_num_removed_rows
  6277  1140  0840               	movf	??_lg_get_num_removed_rows,w
  6278  1141  07C4               	addwf	lg_get_num_removed_rows@row,f
  6279  1142  2924               	goto	L9
  6280  1143                     l3676:	
  6281                           ;logic.h: 76: }
  6282                           ;logic.h: 77: }
  6283                           ;logic.h: 78: do { if(0) { sprintf(g_debug, "num full rows = %d""\r\n", count); USARTWri
      +                          teString(g_debug); } } while (0);;
  6284                           
  6285                           
  6286                           ;logic.h: 79: return count;
  6287  1143  1283               	bcf	3,5	;RP0=0, select bank0
  6288  1144  1303               	bcf	3,6	;RP1=0, select bank0
  6289  1145  0843               	movf	lg_get_num_removed_rows@count,w
  6290  1146  0008               	return
  6291  1147                     __end_of_lg_get_num_removed_rows:	
  6292                           
  6293                           	psect	text20
  6294  0CCD                     __ptext20:	
  6295 ;; *************** function _lg_get_num_of_orphan *****************
  6296 ;; Defined at:
  6297 ;;		line 269 in file "../logic.h"
  6298 ;; Parameters:    Size  Location     Type
  6299 ;;  matrix          1    wreg     PTR const struct .
  6300 ;;		 -> temp_matrix8x8(8), 
  6301 ;; Auto vars:     Size  Location     Type
  6302 ;;  matrix          1   27[BANK0 ] PTR const struct .
  6303 ;;		 -> temp_matrix8x8(8), 
  6304 ;;  row             1   29[BANK0 ] char 
  6305 ;;  col             1   28[BANK0 ] unsigned char 
  6306 ;;  risk            2   24[BANK0 ] unsigned int 
  6307 ;;  full            1   26[BANK0 ] unsigned char 
  6308 ;; Return value:  Size  Location     Type
  6309 ;;                  2   19[BANK0 ] unsigned int 
  6310 ;; Registers used:
  6311 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  6312 ;; Tracked objects:
  6313 ;;		On entry : 0/0
  6314 ;;		On exit  : 0/0
  6315 ;;		Unchanged: 0/0
  6316 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6317 ;;      Params:         0       2       0       0       0
  6318 ;;      Locals:         0       6       0       0       0
  6319 ;;      Temps:          0       3       0       0       0
  6320 ;;      Totals:         0      11       0       0       0
  6321 ;;Total ram usage:       11 bytes
  6322 ;; Hardware stack levels used:    1
  6323 ;; Hardware stack levels required when called:    3
  6324 ;; This function calls:
  6325 ;;		_USARTWriteString
  6326 ;;		_get_matrix_bit
  6327 ;;		_sprintf
  6328 ;; This function is called by:
  6329 ;;		_lg_find_best_solution
  6330 ;; This function uses a non-reentrant model
  6331 ;;
  6332                           
  6333                           
  6334                           ;psect for function _lg_get_num_of_orphan
  6335  0CCD                     _lg_get_num_of_orphan:	
  6336                           
  6337                           ;incstack = 0
  6338                           ; Regs used in _lg_get_num_of_orphan: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstac
      +                          k]
  6339                           ;lg_get_num_of_orphan@matrix stored from wreg
  6340  0CCD  1283               	bcf	3,5	;RP0=0, select bank0
  6341  0CCE  1303               	bcf	3,6	;RP1=0, select bank0
  6342  0CCF  00BB               	movwf	lg_get_num_of_orphan@matrix
  6343                           
  6344                           ;logic.h: 271: uint16_t risk = 0;
  6345  0CD0  01B8               	clrf	lg_get_num_of_orphan@risk
  6346  0CD1  01B9               	clrf	lg_get_num_of_orphan@risk+1
  6347                           
  6348                           ;logic.h: 272: uint8_t full = 0xFF;
  6349  0CD2  30FF               	movlw	255
  6350  0CD3  00B5               	movwf	??_lg_get_num_of_orphan
  6351  0CD4  0835               	movf	??_lg_get_num_of_orphan,w
  6352  0CD5  00BA               	movwf	lg_get_num_of_orphan@full
  6353                           
  6354                           ;logic.h: 273: for(uint8_t col = 0; col < 8; col++)
  6355  0CD6  01BC               	clrf	lg_get_num_of_orphan@col
  6356  0CD7                     L12:	
  6357  0CD7  3008               	movlw	8
  6358  0CD8  023C               	subwf	lg_get_num_of_orphan@col,w
  6359  0CD9  1803               	btfsc	3,0
  6360  0CDA  2D2A               	goto	l3878
  6361                           
  6362                           ;logic.h: 274: {
  6363                           ;logic.h: 275: full = 0xFF;
  6364  0CDB  30FF               	movlw	255
  6365  0CDC  00B5               	movwf	??_lg_get_num_of_orphan
  6366  0CDD  0835               	movf	??_lg_get_num_of_orphan,w
  6367  0CDE  00BA               	movwf	lg_get_num_of_orphan@full
  6368                           
  6369                           ;logic.h: 276: for(int8_t row = 8 - 1; row >= 0; row--)
  6370  0CDF  3007               	movlw	7
  6371  0CE0  00B5               	movwf	??_lg_get_num_of_orphan
  6372  0CE1  0835               	movf	??_lg_get_num_of_orphan,w
  6373  0CE2  00BD               	movwf	lg_get_num_of_orphan@row
  6374  0CE3  1BBD               	btfsc	lg_get_num_of_orphan@row,7
  6375  0CE4  2D25               	goto	l3870
  6376  0CE5                     l3854:	
  6377                           
  6378                           ;logic.h: 277: {
  6379                           ;logic.h: 278: if(full == 0xFF)
  6380  0CE5  0A3A               	incf	lg_get_num_of_orphan@full,w
  6381  0CE6  1903               	btfsc	3,2
  6382  0CE7  2D09               	goto	L11
  6383                           
  6384                           ;logic.h: 282: else
  6385                           ;logic.h: 283: {
  6386                           ;logic.h: 284: if(get_matrix_bit((uint8_t*)matrix->row, row, col) == 1)
  6387                           
  6388                           ;logic.h: 281: }
  6389                           
  6390                           ;logic.h: 279: {
  6391                           ;logic.h: 280: full = get_matrix_bit((uint8_t*)matrix->row, row, col);
  6392  0CE8  083B               	movf	lg_get_num_of_orphan@matrix,w
  6393  0CE9  00F7               	movwf	get_matrix_bit@byte
  6394  0CEA  3000               	movlw	0
  6395  0CEB  00F8               	movwf	get_matrix_bit@byte+1
  6396  0CEC  083D               	movf	lg_get_num_of_orphan@row,w
  6397  0CED  00B5               	movwf	??_lg_get_num_of_orphan
  6398  0CEE  0835               	movf	??_lg_get_num_of_orphan,w
  6399  0CEF  00F9               	movwf	get_matrix_bit@row
  6400  0CF0  083C               	movf	lg_get_num_of_orphan@col,w
  6401  0CF1  00B6               	movwf	??_lg_get_num_of_orphan+1
  6402  0CF2  0836               	movf	??_lg_get_num_of_orphan+1,w
  6403  0CF3  00FA               	movwf	get_matrix_bit@col
  6404  0CF4  160A  158A  273B  120A  158A  	fcall	_get_matrix_bit
  6405  0CF9  3A01               	xorlw	1
  6406  0CFA  1D03               	skipz
  6407  0CFB  2D07               	goto	l3864
  6408                           
  6409                           ;logic.h: 285: {
  6410                           ;logic.h: 286: if(full == 0)
  6411  0CFC  1283               	bcf	3,5	;RP0=0, select bank0
  6412  0CFD  1303               	bcf	3,6	;RP1=0, select bank0
  6413  0CFE  083A               	movf	lg_get_num_of_orphan@full,w
  6414  0CFF  1D03               	btfss	3,2
  6415  0D00  2D07               	goto	l3864
  6416                           
  6417                           ;logic.h: 287: {
  6418                           ;logic.h: 288: risk++;
  6419  0D01  3001               	movlw	1
  6420  0D02  07B8               	addwf	lg_get_num_of_orphan@risk,f
  6421  0D03  1803               	skipnc
  6422  0D04  0AB9               	incf	lg_get_num_of_orphan@risk+1,f
  6423  0D05  3000               	movlw	0
  6424  0D06  07B9               	addwf	lg_get_num_of_orphan@risk+1,f
  6425  0D07                     l3864:	
  6426                           
  6427                           ;logic.h: 289: }
  6428                           ;logic.h: 290: }
  6429                           ;logic.h: 291: full = get_matrix_bit((uint8_t*)matrix->row, row, col);
  6430  0D07  1283               	bcf	3,5	;RP0=0, select bank0
  6431  0D08  1303               	bcf	3,6	;RP1=0, select bank0
  6432  0D09                     L11:	
  6433  0D09  083B               	movf	lg_get_num_of_orphan@matrix,w
  6434  0D0A  00F7               	movwf	get_matrix_bit@byte
  6435  0D0B  3000               	movlw	0
  6436  0D0C  00F8               	movwf	get_matrix_bit@byte+1
  6437  0D0D  083D               	movf	lg_get_num_of_orphan@row,w
  6438  0D0E  00B5               	movwf	??_lg_get_num_of_orphan
  6439  0D0F  0835               	movf	??_lg_get_num_of_orphan,w
  6440  0D10  00F9               	movwf	get_matrix_bit@row
  6441  0D11  083C               	movf	lg_get_num_of_orphan@col,w
  6442  0D12  00B6               	movwf	??_lg_get_num_of_orphan+1
  6443  0D13  0836               	movf	??_lg_get_num_of_orphan+1,w
  6444  0D14  00FA               	movwf	get_matrix_bit@col
  6445  0D15  160A  158A  273B  120A  158A  	fcall	_get_matrix_bit
  6446  0D1A  1283               	bcf	3,5	;RP0=0, select bank0
  6447  0D1B  1303               	bcf	3,6	;RP1=0, select bank0
  6448  0D1C  00B7               	movwf	??_lg_get_num_of_orphan+2
  6449  0D1D  0837               	movf	??_lg_get_num_of_orphan+2,w
  6450  0D1E  00BA               	movwf	lg_get_num_of_orphan@full
  6451  0D1F  30FF               	movlw	255
  6452  0D20  00B5               	movwf	??_lg_get_num_of_orphan
  6453  0D21  0835               	movf	??_lg_get_num_of_orphan,w
  6454  0D22  07BD               	addwf	lg_get_num_of_orphan@row,f
  6455  0D23  1FBD               	btfss	lg_get_num_of_orphan@row,7
  6456  0D24  2CE5               	goto	l3854
  6457  0D25                     l3870:	
  6458  0D25  3001               	movlw	1
  6459  0D26  00B5               	movwf	??_lg_get_num_of_orphan
  6460  0D27  0835               	movf	??_lg_get_num_of_orphan,w
  6461  0D28  07BC               	addwf	lg_get_num_of_orphan@col,f
  6462  0D29  2CD7               	goto	L12
  6463  0D2A                     l3878:	
  6464                           ;logic.h: 292: }
  6465                           ;logic.h: 293: }
  6466                           ;logic.h: 294: }
  6467                           ;logic.h: 295: do { if(0) { sprintf(g_debug, "risk = %d""\r\n", risk); USARTWriteString(
      +                          g_debug); } } while (0);;
  6468                           
  6469                           
  6470                           ;logic.h: 297: return risk;
  6471  0D2A  1283               	bcf	3,5	;RP0=0, select bank0
  6472  0D2B  1303               	bcf	3,6	;RP1=0, select bank0
  6473  0D2C  0839               	movf	lg_get_num_of_orphan@risk+1,w
  6474  0D2D  00B4               	movwf	?_lg_get_num_of_orphan+1
  6475  0D2E  0838               	movf	lg_get_num_of_orphan@risk,w
  6476  0D2F  00B3               	movwf	?_lg_get_num_of_orphan
  6477  0D30  0008               	return
  6478  0D31                     __end_of_lg_get_num_of_orphan:	
  6479                           
  6480                           	psect	text21
  6481  0019                     __ptext21:	
  6482 ;; *************** function _lg_get_holes_after_merge *****************
  6483 ;; Defined at:
  6484 ;;		line 403 in file "../logic.h"
  6485 ;; Parameters:    Size  Location     Type
  6486 ;;  matrix          1    wreg     PTR struct .
  6487 ;;		 -> temp_matrix8x8(8), 
  6488 ;; Auto vars:     Size  Location     Type
  6489 ;;  matrix          1   28[BANK0 ] PTR struct .
  6490 ;;		 -> temp_matrix8x8(8), 
  6491 ;;  row             1   30[BANK0 ] char 
  6492 ;;  col             1   29[BANK0 ] char 
  6493 ;;  start           1   27[BANK0 ] char 
  6494 ;;  stop            1   26[BANK0 ] char 
  6495 ;;  num_hole        1   25[BANK0 ] unsigned char 
  6496 ;; Return value:  Size  Location     Type
  6497 ;;                  1    wreg      unsigned char 
  6498 ;; Registers used:
  6499 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  6500 ;; Tracked objects:
  6501 ;;		On entry : 0/0
  6502 ;;		On exit  : 0/0
  6503 ;;		Unchanged: 0/0
  6504 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6505 ;;      Params:         0       0       0       0       0
  6506 ;;      Locals:         0       6       0       0       0
  6507 ;;      Temps:          0       6       0       0       0
  6508 ;;      Totals:         0      12       0       0       0
  6509 ;;Total ram usage:       12 bytes
  6510 ;; Hardware stack levels used:    1
  6511 ;; Hardware stack levels required when called:    3
  6512 ;; This function calls:
  6513 ;;		_USARTWriteString
  6514 ;;		_get_matrix_bit
  6515 ;;		_sprintf
  6516 ;; This function is called by:
  6517 ;;		_lg_find_best_solution
  6518 ;; This function uses a non-reentrant model
  6519 ;;
  6520                           
  6521                           
  6522                           ;psect for function _lg_get_holes_after_merge
  6523  0019                     _lg_get_holes_after_merge:	
  6524                           
  6525                           ;incstack = 0
  6526                           ; Regs used in _lg_get_holes_after_merge: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+c
      +                          stack]
  6527                           ;lg_get_holes_after_merge@matrix stored from wreg
  6528  0019  1283               	bcf	3,5	;RP0=0, select bank0
  6529  001A  1303               	bcf	3,6	;RP1=0, select bank0
  6530  001B  00BC               	movwf	lg_get_holes_after_merge@matrix
  6531                           
  6532                           ;logic.h: 405: int8_t start = -1;
  6533  001C  01BB               	clrf	lg_get_holes_after_merge@start
  6534  001D  03BB               	decf	lg_get_holes_after_merge@start,f
  6535                           
  6536                           ;logic.h: 406: int8_t stop = -1;
  6537  001E  01BA               	clrf	lg_get_holes_after_merge@stop
  6538  001F  03BA               	decf	lg_get_holes_after_merge@stop,f
  6539                           
  6540                           ;logic.h: 407: uint8_t num_hole = 0;
  6541  0020  01B9               	clrf	lg_get_holes_after_merge@num_hole
  6542                           
  6543                           ;logic.h: 408: for(int8_t col = 0; col < 8; col++)
  6544  0021  01BD               	clrf	lg_get_holes_after_merge@col
  6545  0022                     L14:	
  6546  0022  083D               	movf	lg_get_holes_after_merge@col,w
  6547  0023  3A80               	xorlw	128
  6548  0024  3E78               	addlw	-136
  6549  0025  1803               	btfsc	3,0
  6550  0026  2921               	goto	l4122
  6551                           
  6552                           ;logic.h: 409: {
  6553                           ;logic.h: 410: start = stop = -1;
  6554  0027  30FF               	movlw	255
  6555  0028  00BA               	movwf	lg_get_holes_after_merge@stop
  6556  0029  00B3               	movwf	??_lg_get_holes_after_merge
  6557  002A  0833               	movf	??_lg_get_holes_after_merge,w
  6558  002B  00BB               	movwf	lg_get_holes_after_merge@start
  6559                           
  6560                           ;logic.h: 411: for(int8_t row = 0; row < 8; row++)
  6561  002C  01BE               	clrf	lg_get_holes_after_merge@row
  6562  002D  083E               	movf	lg_get_holes_after_merge@row,w
  6563  002E  3A80               	xorlw	128
  6564  002F  3E78               	addlw	-136
  6565  0030  1803               	btfsc	3,0
  6566  0031  28EF               	goto	l518
  6567  0032                     l4050:	
  6568                           
  6569                           ;logic.h: 412: {
  6570                           ;logic.h: 413: if(col == 0)
  6571  0032  083D               	movf	lg_get_holes_after_merge@col,w
  6572  0033  1D03               	btfss	3,2
  6573  0034  2848               	goto	l4060
  6574                           
  6575                           ;logic.h: 414: {
  6576                           ;logic.h: 415: if((get_matrix_bit((uint8_t*)matrix->row, row, col) == 0) && (get_matrix_
      +                          bit((uint8_t*)matrix->row, row, col + 1) == 1))
  6577  0035  083C               	movf	lg_get_holes_after_merge@matrix,w
  6578  0036  00F7               	movwf	get_matrix_bit@byte
  6579  0037  3000               	movlw	0
  6580  0038  00F8               	movwf	get_matrix_bit@byte+1
  6581  0039  083E               	movf	lg_get_holes_after_merge@row,w
  6582  003A  00B3               	movwf	??_lg_get_holes_after_merge
  6583  003B  0833               	movf	??_lg_get_holes_after_merge,w
  6584  003C  00F9               	movwf	get_matrix_bit@row
  6585  003D  083D               	movf	lg_get_holes_after_merge@col,w
  6586  003E  00B4               	movwf	??_lg_get_holes_after_merge+1
  6587  003F  0834               	movf	??_lg_get_holes_after_merge+1,w
  6588  0040  00FA               	movwf	get_matrix_bit@col
  6589  0041  160A  158A  273B  120A  118A  	fcall	_get_matrix_bit
  6590  0046  3A00               	xorlw	0
  6591  0047  2896               	goto	L15
  6592  0048                     l4060:	
  6593                           ;logic.h: 420: }
  6594                           ;logic.h: 421: }
  6595                           ;logic.h: 422: }
  6596                           
  6597                           ;logic.h: 418: {
  6598                           ;logic.h: 419: start = row;
  6599                           
  6600                           ;logic.h: 416: {
  6601                           ;logic.h: 417: if(start == -1)
  6602                           
  6603                           
  6604                           ;logic.h: 423: else if(col == 8 - 1)
  6605  0048  3007               	movlw	7
  6606  0049  063D               	xorwf	lg_get_holes_after_merge@col,w
  6607  004A  1D03               	btfss	3,2
  6608  004B  286D               	goto	l4070
  6609                           
  6610                           ;logic.h: 424: {
  6611                           ;logic.h: 425: if((get_matrix_bit((uint8_t*)matrix->row, row, col) == 0) && (get_matrix_
      +                          bit((uint8_t*)matrix->row, row, col - 1) == 1))
  6612  004C  083C               	movf	lg_get_holes_after_merge@matrix,w
  6613  004D  00F7               	movwf	get_matrix_bit@byte
  6614  004E  3000               	movlw	0
  6615  004F  00F8               	movwf	get_matrix_bit@byte+1
  6616  0050  083E               	movf	lg_get_holes_after_merge@row,w
  6617  0051  00B3               	movwf	??_lg_get_holes_after_merge
  6618  0052  0833               	movf	??_lg_get_holes_after_merge,w
  6619  0053  00F9               	movwf	get_matrix_bit@row
  6620  0054  083D               	movf	lg_get_holes_after_merge@col,w
  6621  0055  00B4               	movwf	??_lg_get_holes_after_merge+1
  6622  0056  0834               	movf	??_lg_get_holes_after_merge+1,w
  6623  0057  00FA               	movwf	get_matrix_bit@col
  6624  0058  160A  158A  273B  120A  118A  	fcall	_get_matrix_bit
  6625  005D  3A00               	xorlw	0
  6626  005E  1D03               	skipz
  6627  005F  28B8               	goto	l4080
  6628  0060  1283               	bcf	3,5	;RP0=0, select bank0
  6629  0061  1303               	bcf	3,6	;RP1=0, select bank0
  6630  0062  083C               	movf	lg_get_holes_after_merge@matrix,w
  6631  0063  00F7               	movwf	get_matrix_bit@byte
  6632  0064  3000               	movlw	0
  6633  0065  00F8               	movwf	get_matrix_bit@byte+1
  6634  0066  083E               	movf	lg_get_holes_after_merge@row,w
  6635  0067  00B3               	movwf	??_lg_get_holes_after_merge
  6636  0068  0833               	movf	??_lg_get_holes_after_merge,w
  6637  0069  00F9               	movwf	get_matrix_bit@row
  6638  006A  083D               	movf	lg_get_holes_after_merge@col,w
  6639  006B  3EFF               	addlw	255
  6640  006C  28A4               	goto	L16
  6641  006D                     l4070:	
  6642                           ;logic.h: 430: }
  6643                           ;logic.h: 431: }
  6644                           ;logic.h: 432: }
  6645                           
  6646                           ;logic.h: 428: {
  6647                           ;logic.h: 429: start = row;
  6648                           
  6649                           ;logic.h: 426: {
  6650                           ;logic.h: 427: if(start == -1)
  6651                           
  6652                           
  6653                           ;logic.h: 433: else
  6654                           ;logic.h: 434: {
  6655                           ;logic.h: 435: if((get_matrix_bit((uint8_t*)matrix->row, row, col) == 0) && (get_matrix_
      +                          bit((uint8_t*)matrix->row, row, col - 1) == 1) && (get_matrix_bit((uint8_t*)matrix->row,
      +                           row, col + 1) == 1))
  6656  006D  083C               	movf	lg_get_holes_after_merge@matrix,w
  6657  006E  00F7               	movwf	get_matrix_bit@byte
  6658  006F  3000               	movlw	0
  6659  0070  00F8               	movwf	get_matrix_bit@byte+1
  6660  0071  083E               	movf	lg_get_holes_after_merge@row,w
  6661  0072  00B3               	movwf	??_lg_get_holes_after_merge
  6662  0073  0833               	movf	??_lg_get_holes_after_merge,w
  6663  0074  00F9               	movwf	get_matrix_bit@row
  6664  0075  083D               	movf	lg_get_holes_after_merge@col,w
  6665  0076  00B4               	movwf	??_lg_get_holes_after_merge+1
  6666  0077  0834               	movf	??_lg_get_holes_after_merge+1,w
  6667  0078  00FA               	movwf	get_matrix_bit@col
  6668  0079  160A  158A  273B  120A  118A  	fcall	_get_matrix_bit
  6669  007E  3A00               	xorlw	0
  6670  007F  1D03               	skipz
  6671  0080  28B8               	goto	l4080
  6672  0081  1283               	bcf	3,5	;RP0=0, select bank0
  6673  0082  1303               	bcf	3,6	;RP1=0, select bank0
  6674  0083  083C               	movf	lg_get_holes_after_merge@matrix,w
  6675  0084  00F7               	movwf	get_matrix_bit@byte
  6676  0085  3000               	movlw	0
  6677  0086  00F8               	movwf	get_matrix_bit@byte+1
  6678  0087  083E               	movf	lg_get_holes_after_merge@row,w
  6679  0088  00B3               	movwf	??_lg_get_holes_after_merge
  6680  0089  0833               	movf	??_lg_get_holes_after_merge,w
  6681  008A  00F9               	movwf	get_matrix_bit@row
  6682  008B  083D               	movf	lg_get_holes_after_merge@col,w
  6683  008C  3EFF               	addlw	255
  6684  008D  00B4               	movwf	??_lg_get_holes_after_merge+1
  6685  008E  0834               	movf	??_lg_get_holes_after_merge+1,w
  6686  008F  00FA               	movwf	get_matrix_bit@col
  6687  0090  160A  158A  273B  120A  118A  	fcall	_get_matrix_bit
  6688  0095  3A01               	xorlw	1
  6689  0096                     L15:	
  6690  0096  1D03               	skipz
  6691  0097  28B8               	goto	l4080
  6692  0098  1283               	bcf	3,5	;RP0=0, select bank0
  6693  0099  1303               	bcf	3,6	;RP1=0, select bank0
  6694  009A  083C               	movf	lg_get_holes_after_merge@matrix,w
  6695  009B  00F7               	movwf	get_matrix_bit@byte
  6696  009C  3000               	movlw	0
  6697  009D  00F8               	movwf	get_matrix_bit@byte+1
  6698  009E  083E               	movf	lg_get_holes_after_merge@row,w
  6699  009F  00B3               	movwf	??_lg_get_holes_after_merge
  6700  00A0  0833               	movf	??_lg_get_holes_after_merge,w
  6701  00A1  00F9               	movwf	get_matrix_bit@row
  6702  00A2  083D               	movf	lg_get_holes_after_merge@col,w
  6703  00A3  3E01               	addlw	1
  6704  00A4                     L16:	
  6705  00A4  00B4               	movwf	??_lg_get_holes_after_merge+1
  6706  00A5  0834               	movf	??_lg_get_holes_after_merge+1,w
  6707  00A6  00FA               	movwf	get_matrix_bit@col
  6708  00A7  160A  158A  273B  120A  118A  	fcall	_get_matrix_bit
  6709  00AC  3A01               	xorlw	1
  6710  00AD  1D03               	skipz
  6711  00AE  28B8               	goto	l4080
  6712                           
  6713                           ;logic.h: 436: {
  6714                           ;logic.h: 437: if(start == -1)
  6715  00AF  1283               	bcf	3,5	;RP0=0, select bank0
  6716  00B0  1303               	bcf	3,6	;RP1=0, select bank0
  6717  00B1  0A3B               	incf	lg_get_holes_after_merge@start,w
  6718  00B2  1D03               	btfss	3,2
  6719  00B3  28B8               	goto	l4080
  6720                           
  6721                           ;logic.h: 438: {
  6722                           ;logic.h: 439: start = row;
  6723  00B4  083E               	movf	lg_get_holes_after_merge@row,w
  6724  00B5  00B3               	movwf	??_lg_get_holes_after_merge
  6725  00B6  0833               	movf	??_lg_get_holes_after_merge,w
  6726  00B7  00BB               	movwf	lg_get_holes_after_merge@start
  6727  00B8                     l4080:	
  6728                           
  6729                           ;logic.h: 440: }
  6730                           ;logic.h: 441: }
  6731                           ;logic.h: 442: }
  6732                           ;logic.h: 443: if(start >= 0)
  6733  00B8  1283               	bcf	3,5	;RP0=0, select bank0
  6734  00B9  1303               	bcf	3,6	;RP1=0, select bank0
  6735  00BA  1BBB               	btfsc	lg_get_holes_after_merge@start,7
  6736  00BB  28E4               	goto	l529
  6737                           
  6738                           ;logic.h: 444: {
  6739                           ;logic.h: 445: if(row == 8 - 1)
  6740  00BC  3007               	movlw	7
  6741  00BD  063E               	xorwf	lg_get_holes_after_merge@row,w
  6742  00BE  1D03               	btfss	3,2
  6743  00BF  28C5               	goto	l4088
  6744                           
  6745                           ;logic.h: 446: {
  6746                           ;logic.h: 447: if(stop == -1)
  6747  00C0  0A3A               	incf	lg_get_holes_after_merge@stop,w
  6748  00C1  1D03               	btfss	3,2
  6749  00C2  28E4               	goto	l529
  6750                           
  6751                           ;logic.h: 448: {
  6752                           ;logic.h: 449: stop = 8;
  6753  00C3  3008               	movlw	8
  6754  00C4  28E1               	goto	L13
  6755  00C5                     l4088:	
  6756                           ;logic.h: 450: }
  6757                           ;logic.h: 451: }
  6758                           
  6759                           
  6760                           ;logic.h: 452: else if(get_matrix_bit((uint8_t*)matrix->row, row + 1, col) == 1)
  6761  00C5  083C               	movf	lg_get_holes_after_merge@matrix,w
  6762  00C6  00F7               	movwf	get_matrix_bit@byte
  6763  00C7  3000               	movlw	0
  6764  00C8  00F8               	movwf	get_matrix_bit@byte+1
  6765  00C9  083E               	movf	lg_get_holes_after_merge@row,w
  6766  00CA  3E01               	addlw	1
  6767  00CB  00B3               	movwf	??_lg_get_holes_after_merge
  6768  00CC  0833               	movf	??_lg_get_holes_after_merge,w
  6769  00CD  00F9               	movwf	get_matrix_bit@row
  6770  00CE  083D               	movf	lg_get_holes_after_merge@col,w
  6771  00CF  00B4               	movwf	??_lg_get_holes_after_merge+1
  6772  00D0  0834               	movf	??_lg_get_holes_after_merge+1,w
  6773  00D1  00FA               	movwf	get_matrix_bit@col
  6774  00D2  160A  158A  273B  120A  118A  	fcall	_get_matrix_bit
  6775  00D7  3A01               	xorlw	1
  6776  00D8  1D03               	skipz
  6777  00D9  28E4               	goto	l529
  6778                           
  6779                           ;logic.h: 453: {
  6780                           ;logic.h: 454: if(stop == -1)
  6781  00DA  1283               	bcf	3,5	;RP0=0, select bank0
  6782  00DB  1303               	bcf	3,6	;RP1=0, select bank0
  6783  00DC  0A3A               	incf	lg_get_holes_after_merge@stop,w
  6784  00DD  1D03               	btfss	3,2
  6785  00DE  28E4               	goto	l529
  6786                           
  6787                           ;logic.h: 455: {
  6788                           ;logic.h: 456: stop = row + 1;
  6789  00DF  083E               	movf	lg_get_holes_after_merge@row,w
  6790  00E0  3E01               	addlw	1
  6791  00E1                     L13:	
  6792  00E1  00B3               	movwf	??_lg_get_holes_after_merge
  6793  00E2  0833               	movf	??_lg_get_holes_after_merge,w
  6794  00E3  00BA               	movwf	lg_get_holes_after_merge@stop
  6795  00E4                     l529:	
  6796  00E4  3001               	movlw	1
  6797  00E5  1283               	bcf	3,5	;RP0=0, select bank0
  6798  00E6  1303               	bcf	3,6	;RP1=0, select bank0
  6799  00E7  00B3               	movwf	??_lg_get_holes_after_merge
  6800  00E8  0833               	movf	??_lg_get_holes_after_merge,w
  6801  00E9  07BE               	addwf	lg_get_holes_after_merge@row,f
  6802  00EA  083E               	movf	lg_get_holes_after_merge@row,w
  6803  00EB  3A80               	xorlw	128
  6804  00EC  3E78               	addlw	-136
  6805  00ED  1C03               	skipc
  6806  00EE  2832               	goto	l4050
  6807  00EF                     l518:	
  6808                           
  6809                           ;logic.h: 457: }
  6810                           ;logic.h: 458: }
  6811                           ;logic.h: 459: }
  6812                           ;logic.h: 461: }
  6813                           ;logic.h: 462: if((start >= 0) && (stop >= 0) && (stop - start >= 3))
  6814  00EF  1FBB               	btfss	lg_get_holes_after_merge@start,7
  6815  00F0  1BBA               	btfsc	lg_get_holes_after_merge@stop,7
  6816  00F1  291A               	goto	l4114
  6817  00F2  083B               	movf	lg_get_holes_after_merge@start,w
  6818  00F3  00B3               	movwf	??_lg_get_holes_after_merge
  6819  00F4  01B4               	clrf	??_lg_get_holes_after_merge+1
  6820  00F5  1BB3               	btfsc	??_lg_get_holes_after_merge,7
  6821  00F6  03B4               	decf	??_lg_get_holes_after_merge+1,f
  6822  00F7  09B3               	comf	??_lg_get_holes_after_merge,f
  6823  00F8  09B4               	comf	??_lg_get_holes_after_merge+1,f
  6824  00F9  0AB3               	incf	??_lg_get_holes_after_merge,f
  6825  00FA  1903               	skipnz
  6826  00FB  0AB4               	incf	??_lg_get_holes_after_merge+1,f
  6827  00FC  083A               	movf	lg_get_holes_after_merge@stop,w
  6828  00FD  00B5               	movwf	??_lg_get_holes_after_merge+2
  6829  00FE  01B6               	clrf	??_lg_get_holes_after_merge+3
  6830  00FF  1BB5               	btfsc	??_lg_get_holes_after_merge+2,7
  6831  0100  03B6               	decf	??_lg_get_holes_after_merge+3,f
  6832  0101  0833               	movf	??_lg_get_holes_after_merge,w
  6833  0102  0735               	addwf	??_lg_get_holes_after_merge+2,w
  6834  0103  00B7               	movwf	??_lg_get_holes_after_merge+4
  6835  0104  0834               	movf	??_lg_get_holes_after_merge+1,w
  6836  0105  1803               	skipnc
  6837  0106  0A34               	incf	??_lg_get_holes_after_merge+1,w
  6838  0107  0736               	addwf	??_lg_get_holes_after_merge+3,w
  6839  0108  00B8               	movwf	??_lg_get_holes_after_merge+5
  6840  0109  0838               	movf	??_lg_get_holes_after_merge+5,w
  6841  010A  3A80               	xorlw	128
  6842  010B  00FF               	movwf	127
  6843  010C  3080               	movlw	128
  6844  010D  027F               	subwf	127,w
  6845  010E  1D03               	skipz
  6846  010F  2912               	goto	u4085
  6847  0110  3003               	movlw	3
  6848  0111  0237               	subwf	??_lg_get_holes_after_merge+4,w
  6849  0112                     u4085:	
  6850  0112  1C03               	skipc
  6851  0113  291A               	goto	l4114
  6852                           
  6853                           ;logic.h: 467: num_hole++;
  6854                           
  6855                           ;logic.h: 466: do { if(0) { sprintf(g_debug, "stop = %d""\r\n", stop); USARTWriteString(
      +                          g_debug); } } while (0);;
  6856                           
  6857                           ;logic.h: 465: do { if(0) { sprintf(g_debug, "start = %d""\r\n", start); USARTWriteStrin
      +                          g(g_debug); } } while (0);;
  6858                           
  6859                           ;logic.h: 463: {
  6860                           ;logic.h: 464: do { if(0) { sprintf(g_debug, "col = %d""\r\n", col); USARTWriteString(g_
      +                          debug); } } while (0);;
  6861  0114  3001               	movlw	1
  6862  0115  1283               	bcf	3,5	;RP0=0, select bank0
  6863  0116  1303               	bcf	3,6	;RP1=0, select bank0
  6864  0117  00B3               	movwf	??_lg_get_holes_after_merge
  6865  0118  0833               	movf	??_lg_get_holes_after_merge,w
  6866  0119  07B9               	addwf	lg_get_holes_after_merge@num_hole,f
  6867  011A                     l4114:	
  6868  011A  3001               	movlw	1
  6869  011B  1283               	bcf	3,5	;RP0=0, select bank0
  6870  011C  1303               	bcf	3,6	;RP1=0, select bank0
  6871  011D  00B3               	movwf	??_lg_get_holes_after_merge
  6872  011E  0833               	movf	??_lg_get_holes_after_merge,w
  6873  011F  07BD               	addwf	lg_get_holes_after_merge@col,f
  6874  0120  2822               	goto	L14
  6875  0121                     l4122:	
  6876                           ;logic.h: 468: }
  6877                           ;logic.h: 469: }
  6878                           ;logic.h: 470: do { if(0) { sprintf(g_debug, "num_hole = %d""\r\n", num_hole); USARTWrit
      +                          eString(g_debug); } } while (0);;
  6879                           
  6880                           
  6881                           ;logic.h: 471: return num_hole;
  6882  0121  1283               	bcf	3,5	;RP0=0, select bank0
  6883  0122  1303               	bcf	3,6	;RP1=0, select bank0
  6884  0123  0839               	movf	lg_get_holes_after_merge@num_hole,w
  6885  0124  0008               	return
  6886  0125                     __end_of_lg_get_holes_after_merge:	
  6887                           
  6888                           	psect	text22
  6889  130A                     __ptext22:	
  6890 ;; *************** function _lg_get_height_after_merge *****************
  6891 ;; Defined at:
  6892 ;;		line 386 in file "../logic.h"
  6893 ;; Parameters:    Size  Location     Type
  6894 ;;  y               1    wreg     char 
  6895 ;;  matrix          2   19[BANK0 ] PTR struct .
  6896 ;;		 -> NULL(0), g_matrix4x4(96), 
  6897 ;; Auto vars:     Size  Location     Type
  6898 ;;  y               1   23[BANK0 ] char 
  6899 ;;  col             1   24[BANK0 ] char 
  6900 ;;  row             1   25[BANK0 ] char 
  6901 ;; Return value:  Size  Location     Type
  6902 ;;                  1    wreg      unsigned char 
  6903 ;; Registers used:
  6904 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  6905 ;; Tracked objects:
  6906 ;;		On entry : 0/0
  6907 ;;		On exit  : 0/0
  6908 ;;		Unchanged: 0/0
  6909 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6910 ;;      Params:         0       2       0       0       0
  6911 ;;      Locals:         0       3       0       0       0
  6912 ;;      Temps:          0       2       0       0       0
  6913 ;;      Totals:         0       7       0       0       0
  6914 ;;Total ram usage:        7 bytes
  6915 ;; Hardware stack levels used:    1
  6916 ;; Hardware stack levels required when called:    3
  6917 ;; This function calls:
  6918 ;;		_USARTWriteString
  6919 ;;		_get_matrix_bit
  6920 ;;		_sprintf
  6921 ;; This function is called by:
  6922 ;;		_lg_find_best_solution
  6923 ;; This function uses a non-reentrant model
  6924 ;;
  6925                           
  6926                           
  6927                           ;psect for function _lg_get_height_after_merge
  6928  130A                     _lg_get_height_after_merge:	
  6929                           
  6930                           ;incstack = 0
  6931                           ; Regs used in _lg_get_height_after_merge: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+
      +                          cstack]
  6932                           ;lg_get_height_after_merge@y stored from wreg
  6933  130A  1283               	bcf	3,5	;RP0=0, select bank0
  6934  130B  1303               	bcf	3,6	;RP1=0, select bank0
  6935  130C  00B7               	movwf	lg_get_height_after_merge@y
  6936                           
  6937                           ;logic.h: 389: for(int8_t row = 0; row < 4; row++)
  6938                           
  6939                           ;logic.h: 388: do { if(0) { sprintf(g_debug, "lg_get_height_after_merge""\r\n"); USARTWr
      +                          iteString(g_debug); } } while (0);;
  6940  130D  1283               	bcf	3,5	;RP0=0, select bank0
  6941  130E  1303               	bcf	3,6	;RP1=0, select bank0
  6942  130F  01B9               	clrf	lg_get_height_after_merge@row
  6943  1310                     L17:	
  6944  1310  0839               	movf	lg_get_height_after_merge@row,w
  6945  1311  3A80               	xorlw	128
  6946  1312  3E7C               	addlw	-132
  6947  1313  1803               	btfsc	3,0
  6948  1314  0008               	return
  6949                           
  6950                           ;logic.h: 390: {
  6951                           ;logic.h: 391: for(int8_t col = 0; col < 4; col++)
  6952  1315  01B8               	clrf	lg_get_height_after_merge@col
  6953  1316  0838               	movf	lg_get_height_after_merge@col,w
  6954  1317  3A80               	xorlw	128
  6955  1318  3E7C               	addlw	-132
  6956  1319  1803               	btfsc	3,0
  6957  131A  2B42               	goto	l4030
  6958  131B                     l4008:	
  6959                           
  6960                           ;logic.h: 392: {
  6961                           ;logic.h: 393: if(get_matrix_bit((uint8_t*)matrix->row, row, col) == 1)
  6962  131B  0833               	movf	lg_get_height_after_merge@matrix,w
  6963  131C  00F7               	movwf	get_matrix_bit@byte
  6964  131D  0834               	movf	lg_get_height_after_merge@matrix+1,w
  6965  131E  00F8               	movwf	get_matrix_bit@byte+1
  6966  131F  0839               	movf	lg_get_height_after_merge@row,w
  6967  1320  00B5               	movwf	??_lg_get_height_after_merge
  6968  1321  0835               	movf	??_lg_get_height_after_merge,w
  6969  1322  00F9               	movwf	get_matrix_bit@row
  6970  1323  0838               	movf	lg_get_height_after_merge@col,w
  6971  1324  00B6               	movwf	??_lg_get_height_after_merge+1
  6972  1325  0836               	movf	??_lg_get_height_after_merge+1,w
  6973  1326  00FA               	movwf	get_matrix_bit@col
  6974  1327  160A  158A  273B  160A  118A  	fcall	_get_matrix_bit
  6975  132C  3A01               	xorlw	1
  6976  132D  1D03               	skipz
  6977  132E  2B37               	goto	l4026
  6978                           
  6979                           ;logic.h: 398: return (uint8_t)(8 - y - row);
  6980                           
  6981                           ;logic.h: 397: do { if(0) { sprintf(g_debug, "height = %d""\r\n", 8 - y - row); USARTWri
      +                          teString(g_debug); } } while (0);;
  6982                           
  6983                           ;logic.h: 396: do { if(0) { sprintf(g_debug, "row = %d""\r\n", row); USARTWriteString(g_
      +                          debug); } } while (0);;
  6984                           
  6985                           ;logic.h: 394: {
  6986                           ;logic.h: 395: do { if(0) { sprintf(g_debug, "y = %d""\r\n", y); USARTWriteString(g_debu
      +                          g); } } while (0);;
  6987  132F  1283               	bcf	3,5	;RP0=0, select bank0
  6988  1330  1303               	bcf	3,6	;RP1=0, select bank0
  6989  1331  0839               	movf	lg_get_height_after_merge@row,w
  6990  1332  0737               	addwf	lg_get_height_after_merge@y,w
  6991  1333  3AFF               	xorlw	255
  6992  1334  3E01               	addlw	1
  6993  1335  3E08               	addlw	8
  6994  1336  0008               	return
  6995  1337                     l4026:	
  6996  1337  3001               	movlw	1
  6997  1338  1283               	bcf	3,5	;RP0=0, select bank0
  6998  1339  1303               	bcf	3,6	;RP1=0, select bank0
  6999  133A  00B5               	movwf	??_lg_get_height_after_merge
  7000  133B  0835               	movf	??_lg_get_height_after_merge,w
  7001  133C  07B8               	addwf	lg_get_height_after_merge@col,f
  7002  133D  0838               	movf	lg_get_height_after_merge@col,w
  7003  133E  3A80               	xorlw	128
  7004  133F  3E7C               	addlw	-132
  7005  1340  1C03               	skipc
  7006  1341  2B1B               	goto	l4008
  7007  1342                     l4030:	
  7008  1342  3001               	movlw	1
  7009  1343  00B5               	movwf	??_lg_get_height_after_merge
  7010  1344  0835               	movf	??_lg_get_height_after_merge,w
  7011  1345  07B9               	addwf	lg_get_height_after_merge@row,f
  7012  1346  2B10               	goto	L17
  7013  1347                     __end_of_lg_get_height_after_merge:	
  7014                           
  7015                           	psect	text23
  7016  10F7                     __ptext23:	
  7017 ;; *************** function _lg_get_height *****************
  7018 ;; Defined at:
  7019 ;;		line 374 in file "../logic.h"
  7020 ;; Parameters:    Size  Location     Type
  7021 ;;  matrix          1    wreg     PTR struct .
  7022 ;;		 -> g_matrix8x8(8), 
  7023 ;; Auto vars:     Size  Location     Type
  7024 ;;  matrix          1   21[BANK0 ] PTR struct .
  7025 ;;		 -> g_matrix8x8(8), 
  7026 ;;  row             1   22[BANK0 ] char 
  7027 ;; Return value:  Size  Location     Type
  7028 ;;                  1    wreg      unsigned char 
  7029 ;; Registers used:
  7030 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  7031 ;; Tracked objects:
  7032 ;;		On entry : 0/0
  7033 ;;		On exit  : 0/0
  7034 ;;		Unchanged: 0/0
  7035 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7036 ;;      Params:         0       0       0       0       0
  7037 ;;      Locals:         0       2       0       0       0
  7038 ;;      Temps:          0       2       0       0       0
  7039 ;;      Totals:         0       4       0       0       0
  7040 ;;Total ram usage:        4 bytes
  7041 ;; Hardware stack levels used:    1
  7042 ;; Hardware stack levels required when called:    2
  7043 ;; This function calls:
  7044 ;;		_USARTWriteString
  7045 ;;		_lg_is_row_empty
  7046 ;;		_sprintf
  7047 ;; This function is called by:
  7048 ;;		_lg_find_best_solution
  7049 ;; This function uses a non-reentrant model
  7050 ;;
  7051                           
  7052                           
  7053                           ;psect for function _lg_get_height
  7054  10F7                     _lg_get_height:	
  7055                           
  7056                           ;incstack = 0
  7057                           ; Regs used in _lg_get_height: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  7058                           ;lg_get_height@matrix stored from wreg
  7059  10F7  1283               	bcf	3,5	;RP0=0, select bank0
  7060  10F8  1303               	bcf	3,6	;RP1=0, select bank0
  7061  10F9  00B5               	movwf	lg_get_height@matrix
  7062                           
  7063                           ;logic.h: 376: for(int8_t row = 8 - 1; row >= 0; row--)
  7064  10FA  3007               	movlw	7
  7065  10FB  00B3               	movwf	??_lg_get_height
  7066  10FC  0833               	movf	??_lg_get_height,w
  7067  10FD  00B6               	movwf	lg_get_height@row
  7068  10FE  1BB6               	btfsc	lg_get_height@row,7
  7069  10FF  291D               	goto	l3988
  7070  1100                     l3974:	
  7071                           
  7072                           ;logic.h: 377: {
  7073                           ;logic.h: 378: if(lg_is_row_empty(matrix, row) == 1)
  7074  1100  0836               	movf	lg_get_height@row,w
  7075  1101  00B3               	movwf	??_lg_get_height
  7076  1102  0833               	movf	??_lg_get_height,w
  7077  1103  00F0               	movwf	lg_is_row_empty@row
  7078  1104  0835               	movf	lg_get_height@matrix,w
  7079  1105  160A  158A  2723  160A  118A  	fcall	_lg_is_row_empty
  7080  110A  3A01               	xorlw	1
  7081  110B  1D03               	skipz
  7082  110C  2915               	goto	l3984
  7083                           
  7084                           ;logic.h: 381: return (uint8_t)(8 - row - 1);
  7085                           
  7086                           ;logic.h: 379: {
  7087                           ;logic.h: 380: do { if(0) { sprintf(g_debug, "lg_get_height height = %d""\r\n", 8 - row 
      +                          - 1); USARTWriteString(g_debug); } } while (0);;
  7088  110D  1283               	bcf	3,5	;RP0=0, select bank0
  7089  110E  1303               	bcf	3,6	;RP1=0, select bank0
  7090  110F  0836               	movf	lg_get_height@row,w
  7091  1110  3E01               	addlw	1
  7092  1111  3AFF               	xorlw	255
  7093  1112  3E01               	addlw	1
  7094  1113  3E08               	addlw	8
  7095  1114  0008               	return
  7096  1115                     l3984:	
  7097  1115  30FF               	movlw	255
  7098  1116  1283               	bcf	3,5	;RP0=0, select bank0
  7099  1117  1303               	bcf	3,6	;RP1=0, select bank0
  7100  1118  00B3               	movwf	??_lg_get_height
  7101  1119  0833               	movf	??_lg_get_height,w
  7102  111A  07B6               	addwf	lg_get_height@row,f
  7103  111B  1FB6               	btfss	lg_get_height@row,7
  7104  111C  2900               	goto	l3974
  7105  111D                     l3988:	
  7106                           
  7107                           ;logic.h: 382: }
  7108                           ;logic.h: 383: }
  7109                           ;logic.h: 384: return 8;
  7110  111D  3008               	movlw	8
  7111  111E  0008               	return
  7112  111F                     __end_of_lg_get_height:	
  7113                           
  7114                           	psect	text24
  7115  1F23                     __ptext24:	
  7116 ;; *************** function _lg_is_row_empty *****************
  7117 ;; Defined at:
  7118 ;;		line 82 in file "../logic.h"
  7119 ;; Parameters:    Size  Location     Type
  7120 ;;  matrix          1    wreg     PTR const struct .
  7121 ;;		 -> g_matrix8x8(8), 
  7122 ;;  row             1    0[COMMON] unsigned char 
  7123 ;; Auto vars:     Size  Location     Type
  7124 ;;  matrix          1    1[COMMON] PTR const struct .
  7125 ;;		 -> g_matrix8x8(8), 
  7126 ;; Return value:  Size  Location     Type
  7127 ;;                  1    wreg      unsigned char 
  7128 ;; Registers used:
  7129 ;;		wreg, status,2, status,0
  7130 ;; Tracked objects:
  7131 ;;		On entry : 0/0
  7132 ;;		On exit  : 0/0
  7133 ;;		Unchanged: 0/0
  7134 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7135 ;;      Params:         1       0       0       0       0
  7136 ;;      Locals:         1       0       0       0       0
  7137 ;;      Temps:          0       0       0       0       0
  7138 ;;      Totals:         2       0       0       0       0
  7139 ;;Total ram usage:        2 bytes
  7140 ;; Hardware stack levels used:    1
  7141 ;; This function calls:
  7142 ;;		Nothing
  7143 ;; This function is called by:
  7144 ;;		_lg_get_height
  7145 ;; This function uses a non-reentrant model
  7146 ;;
  7147                           
  7148                           
  7149                           ;psect for function _lg_is_row_empty
  7150  1F23                     _lg_is_row_empty:	
  7151                           
  7152                           ;incstack = 0
  7153                           ; Regs used in _lg_is_row_empty: [wreg+status,2+status,0]
  7154                           ;lg_is_row_empty@matrix stored from wreg
  7155  1F23  00F1               	movwf	lg_is_row_empty@matrix
  7156                           
  7157                           ;logic.h: 84: if(matrix->row == 0x0)
  7158  1F24  0871               	movf	lg_is_row_empty@matrix,w
  7159  1F25  1D03               	btfss	3,2
  7160  1F26  2F29               	goto	l3466
  7161                           
  7162                           ;logic.h: 85: {
  7163                           ;logic.h: 86: return 1;
  7164  1F27  3001               	movlw	1
  7165  1F28  0008               	return
  7166  1F29                     l3466:	
  7167                           
  7168                           ;logic.h: 87: }
  7169                           ;logic.h: 88: return 0;
  7170  1F29  3000               	movlw	0
  7171  1F2A  0008               	return
  7172  1F2B                     __end_of_lg_is_row_empty:	
  7173                           
  7174                           	psect	text25
  7175  0D31                     __ptext25:	
  7176 ;; *************** function _lg_fall_off *****************
  7177 ;; Defined at:
  7178 ;;		line 187 in file "../logic.h"
  7179 ;; Parameters:    Size  Location     Type
  7180 ;;  x               1    wreg     char 
  7181 ;;  y               1   19[BANK0 ] char 
  7182 ;;  matrix4x4       2   20[BANK0 ] PTR const struct .
  7183 ;;		 -> NULL(0), g_matrix4x4(96), 
  7184 ;;  matrix8x8       1   22[BANK0 ] PTR const struct .
  7185 ;;		 -> g_matrix8x8(8), 
  7186 ;; Auto vars:     Size  Location     Type
  7187 ;;  x               1   25[BANK0 ] char 
  7188 ;;  col             1   26[BANK0 ] char 
  7189 ;;  row             1   27[BANK0 ] char 
  7190 ;; Return value:  Size  Location     Type
  7191 ;;                  1    wreg      unsigned char 
  7192 ;; Registers used:
  7193 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  7194 ;; Tracked objects:
  7195 ;;		On entry : 0/0
  7196 ;;		On exit  : 0/0
  7197 ;;		Unchanged: 0/0
  7198 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7199 ;;      Params:         0       4       0       0       0
  7200 ;;      Locals:         0       3       0       0       0
  7201 ;;      Temps:          0       2       0       0       0
  7202 ;;      Totals:         0       9       0       0       0
  7203 ;;Total ram usage:        9 bytes
  7204 ;; Hardware stack levels used:    1
  7205 ;; Hardware stack levels required when called:    3
  7206 ;; This function calls:
  7207 ;;		_USARTWriteString
  7208 ;;		_get_matrix_bit
  7209 ;;		_sprintf
  7210 ;; This function is called by:
  7211 ;;		_lg_find_best_solution
  7212 ;; This function uses a non-reentrant model
  7213 ;;
  7214                           
  7215                           
  7216                           ;psect for function _lg_fall_off
  7217  0D31                     _lg_fall_off:	
  7218                           
  7219                           ;incstack = 0
  7220                           ; Regs used in _lg_fall_off: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  7221                           ;lg_fall_off@x stored from wreg
  7222  0D31  1283               	bcf	3,5	;RP0=0, select bank0
  7223  0D32  1303               	bcf	3,6	;RP1=0, select bank0
  7224  0D33  00B9               	movwf	lg_fall_off@x
  7225  0D34                     l384:	
  7226                           ;logic.h: 189: while(1)
  7227                           
  7228                           
  7229                           ;logic.h: 190: {
  7230                           ;logic.h: 191: for(int8_t row = 4 - 1; row >= 0; row--)
  7231  0D34  3003               	movlw	3
  7232  0D35  00B7               	movwf	??_lg_fall_off
  7233  0D36  0837               	movf	??_lg_fall_off,w
  7234  0D37  00BB               	movwf	lg_fall_off@row
  7235  0D38  1BBB               	btfsc	lg_fall_off@row,7
  7236  0D39  2DA9               	goto	l3810
  7237  0D3A                     l3764:	
  7238                           
  7239                           ;logic.h: 192: {
  7240                           ;logic.h: 193: for(int8_t col = 0; col < 4; col++)
  7241  0D3A  01BA               	clrf	lg_fall_off@col
  7242  0D3B  083A               	movf	lg_fall_off@col,w
  7243  0D3C  3A80               	xorlw	128
  7244  0D3D  3E7C               	addlw	-132
  7245  0D3E  1803               	btfsc	3,0
  7246  0D3F  2DA3               	goto	l3806
  7247  0D40                     l3770:	
  7248                           
  7249                           ;logic.h: 194: {
  7250                           ;logic.h: 196: Seed++;
  7251  0D40  3001               	movlw	1
  7252  0D41  1683               	bsf	3,5	;RP0=1, select bank1
  7253  0D42  1303               	bcf	3,6	;RP1=0, select bank1
  7254  0D43  07A5               	addwf	_Seed^(0+128),f
  7255  0D44  1803               	skipnc
  7256  0D45  0AA6               	incf	(_Seed+1)^(0+128),f
  7257  0D46  3000               	movlw	0
  7258  0D47  07A6               	addwf	(_Seed+1)^(0+128),f
  7259                           
  7260                           ;logic.h: 198: if(get_matrix_bit((uint8_t*)matrix4x4->row, row, col) == 1)
  7261  0D48  1283               	bcf	3,5	;RP0=0, select bank0
  7262  0D49  1303               	bcf	3,6	;RP1=0, select bank0
  7263  0D4A  0834               	movf	lg_fall_off@matrix4x4,w
  7264  0D4B  00F7               	movwf	get_matrix_bit@byte
  7265  0D4C  0835               	movf	lg_fall_off@matrix4x4+1,w
  7266  0D4D  00F8               	movwf	get_matrix_bit@byte+1
  7267  0D4E  083B               	movf	lg_fall_off@row,w
  7268  0D4F  00B7               	movwf	??_lg_fall_off
  7269  0D50  0837               	movf	??_lg_fall_off,w
  7270  0D51  00F9               	movwf	get_matrix_bit@row
  7271  0D52  083A               	movf	lg_fall_off@col,w
  7272  0D53  00B8               	movwf	??_lg_fall_off+1
  7273  0D54  0838               	movf	??_lg_fall_off+1,w
  7274  0D55  00FA               	movwf	get_matrix_bit@col
  7275  0D56  160A  158A  273B  120A  158A  	fcall	_get_matrix_bit
  7276  0D5B  3A01               	xorlw	1
  7277  0D5C  1D03               	skipz
  7278  0D5D  2D98               	goto	l3802
  7279                           
  7280                           ;logic.h: 199: {
  7281                           ;logic.h: 200: if(get_matrix_bit((uint8_t*)matrix8x8->row, y + row + 1, x + col) == 1)
  7282  0D5E  1283               	bcf	3,5	;RP0=0, select bank0
  7283  0D5F  1303               	bcf	3,6	;RP1=0, select bank0
  7284  0D60  0836               	movf	lg_fall_off@matrix8x8,w
  7285  0D61  00F7               	movwf	get_matrix_bit@byte
  7286  0D62  3000               	movlw	0
  7287  0D63  00F8               	movwf	get_matrix_bit@byte+1
  7288  0D64  083B               	movf	lg_fall_off@row,w
  7289  0D65  0733               	addwf	lg_fall_off@y,w
  7290  0D66  3E01               	addlw	1
  7291  0D67  00B7               	movwf	??_lg_fall_off
  7292  0D68  0837               	movf	??_lg_fall_off,w
  7293  0D69  00F9               	movwf	get_matrix_bit@row
  7294  0D6A  083A               	movf	lg_fall_off@col,w
  7295  0D6B  0739               	addwf	lg_fall_off@x,w
  7296  0D6C  00B8               	movwf	??_lg_fall_off+1
  7297  0D6D  0838               	movf	??_lg_fall_off+1,w
  7298  0D6E  00FA               	movwf	get_matrix_bit@col
  7299  0D6F  160A  158A  273B  120A  158A  	fcall	_get_matrix_bit
  7300  0D74  3A01               	xorlw	1
  7301  0D75  1D03               	skipz
  7302  0D76  2D7B               	goto	l3788
  7303                           
  7304                           ;logic.h: 204: return y;
  7305                           
  7306                           ;logic.h: 203: do { if(0) { sprintf(g_debug, "x = %d, y = %d""\r\n", x, y); USARTWriteSt
      +                          ring(g_debug); } } while (0);;
  7307                           
  7308                           ;logic.h: 201: {
  7309                           ;logic.h: 202: do { if(0) { sprintf(g_debug, "fall_off1""\r\n"); USARTWriteString(g_debu
      +                          g); } } while (0);;
  7310  0D77  1283               	bcf	3,5	;RP0=0, select bank0
  7311  0D78  1303               	bcf	3,6	;RP1=0, select bank0
  7312  0D79  0833               	movf	lg_fall_off@y,w
  7313  0D7A  0008               	return
  7314  0D7B                     l3788:	
  7315                           
  7316                           ;logic.h: 205: }
  7317                           ;logic.h: 206: if((y + row) >= (8 - 1))
  7318  0D7B  1283               	bcf	3,5	;RP0=0, select bank0
  7319  0D7C  1303               	bcf	3,6	;RP1=0, select bank0
  7320  0D7D  0833               	movf	lg_fall_off@y,w
  7321  0D7E  073B               	addwf	lg_fall_off@row,w
  7322  0D7F  00B7               	movwf	??_lg_fall_off
  7323  0D80  01B8               	clrf	??_lg_fall_off+1
  7324  0D81  1803               	skipnc
  7325  0D82  0AB8               	incf	??_lg_fall_off+1,f
  7326  0D83  1BB3               	btfsc	lg_fall_off@y,7
  7327  0D84  03B8               	decf	??_lg_fall_off+1,f
  7328  0D85  1BBB               	btfsc	lg_fall_off@row,7
  7329  0D86  03B8               	decf	??_lg_fall_off+1,f
  7330  0D87  1283               	bcf	3,5	;RP0=0, select bank0
  7331  0D88  1303               	bcf	3,6	;RP1=0, select bank0
  7332  0D89  0838               	movf	??_lg_fall_off+1,w
  7333  0D8A  3A80               	xorlw	128
  7334  0D8B  00FF               	movwf	127
  7335  0D8C  3080               	movlw	128
  7336  0D8D  027F               	subwf	127,w
  7337  0D8E  1D03               	skipz
  7338  0D8F  2D92               	goto	u3495
  7339  0D90  3007               	movlw	7
  7340  0D91  0237               	subwf	??_lg_fall_off,w
  7341  0D92                     u3495:	
  7342  0D92  1C03               	skipc
  7343  0D93  2D98               	goto	l3802
  7344                           
  7345                           ;logic.h: 210: return y;
  7346                           
  7347                           ;logic.h: 209: do { if(0) { sprintf(g_debug, "x = %d, y = %d""\r\n", x, y); USARTWriteSt
      +                          ring(g_debug); } } while (0);;
  7348                           
  7349                           ;logic.h: 207: {
  7350                           ;logic.h: 208: do { if(0) { sprintf(g_debug, "fall_off2""\r\n"); USARTWriteString(g_debu
      +                          g); } } while (0);;
  7351  0D94  1283               	bcf	3,5	;RP0=0, select bank0
  7352  0D95  1303               	bcf	3,6	;RP1=0, select bank0
  7353  0D96  0833               	movf	lg_fall_off@y,w
  7354  0D97  0008               	return
  7355  0D98                     l3802:	
  7356  0D98  3001               	movlw	1
  7357  0D99  1283               	bcf	3,5	;RP0=0, select bank0
  7358  0D9A  1303               	bcf	3,6	;RP1=0, select bank0
  7359  0D9B  00B7               	movwf	??_lg_fall_off
  7360  0D9C  0837               	movf	??_lg_fall_off,w
  7361  0D9D  07BA               	addwf	lg_fall_off@col,f
  7362  0D9E  083A               	movf	lg_fall_off@col,w
  7363  0D9F  3A80               	xorlw	128
  7364  0DA0  3E7C               	addlw	-132
  7365  0DA1  1C03               	skipc
  7366  0DA2  2D40               	goto	l3770
  7367  0DA3                     l3806:	
  7368  0DA3  30FF               	movlw	255
  7369  0DA4  00B7               	movwf	??_lg_fall_off
  7370  0DA5  0837               	movf	??_lg_fall_off,w
  7371  0DA6  07BB               	addwf	lg_fall_off@row,f
  7372  0DA7  1FBB               	btfss	lg_fall_off@row,7
  7373  0DA8  2D3A               	goto	l3764
  7374  0DA9                     l3810:	
  7375                           
  7376                           ;logic.h: 211: }
  7377                           ;logic.h: 212: }
  7378                           ;logic.h: 213: }
  7379                           ;logic.h: 214: }
  7380                           ;logic.h: 215: y++;
  7381  0DA9  3001               	movlw	1
  7382  0DAA  00B7               	movwf	??_lg_fall_off
  7383  0DAB  0837               	movf	??_lg_fall_off,w
  7384  0DAC  07B3               	addwf	lg_fall_off@y,f
  7385  0DAD  2D34               	goto	l384
  7386  0DAE                     __end_of_lg_fall_off:	
  7387                           
  7388                           	psect	text26
  7389  164D                     __ptext26:	
  7390 ;; *************** function _dbg_print_cur_MATRIX4x4 *****************
  7391 ;; Defined at:
  7392 ;;		line 138 in file "../debug.h"
  7393 ;; Parameters:    Size  Location     Type
  7394 ;;  enable          1    wreg     unsigned char 
  7395 ;;  lable           2   34[BANK0 ] PTR const unsigned char 
  7396 ;;		 -> STR_72(7), 
  7397 ;;  x               1   36[BANK0 ] char 
  7398 ;;  y               1   37[BANK0 ] char 
  7399 ;; Auto vars:     Size  Location     Type
  7400 ;;  enable          1   44[BANK0 ] unsigned char 
  7401 ;;  matrix          2   42[BANK0 ] PTR struct .
  7402 ;;		 -> g_matrix4x4(96), 
  7403 ;; Return value:  Size  Location     Type
  7404 ;;                  1    wreg      void 
  7405 ;; Registers used:
  7406 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  7407 ;; Tracked objects:
  7408 ;;		On entry : 0/0
  7409 ;;		On exit  : 0/0
  7410 ;;		Unchanged: 0/0
  7411 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7412 ;;      Params:         0       4       0       0       0
  7413 ;;      Locals:         0       3       0       0       0
  7414 ;;      Temps:          0       4       0       0       0
  7415 ;;      Totals:         0      11       0       0       0
  7416 ;;Total ram usage:       11 bytes
  7417 ;; Hardware stack levels used:    1
  7418 ;; Hardware stack levels required when called:    4
  7419 ;; This function calls:
  7420 ;;		_USARTWriteString
  7421 ;;		_dbg_print_MATRIX4x4
  7422 ;;		_sprintf
  7423 ;; This function is called by:
  7424 ;;		_lg_find_best_solution
  7425 ;; This function uses a non-reentrant model
  7426 ;;
  7427                           
  7428                           
  7429                           ;psect for function _dbg_print_cur_MATRIX4x4
  7430  164D                     _dbg_print_cur_MATRIX4x4:	
  7431                           
  7432                           ;incstack = 0
  7433                           ; Regs used in _dbg_print_cur_MATRIX4x4: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cs
      +                          tack]
  7434                           ;dbg_print_cur_MATRIX4x4@enable stored from wreg
  7435  164D  1283               	bcf	3,5	;RP0=0, select bank0
  7436  164E  1303               	bcf	3,6	;RP1=0, select bank0
  7437  164F  00CC               	movwf	dbg_print_cur_MATRIX4x4@enable
  7438  1650  084C               	movf	dbg_print_cur_MATRIX4x4@enable,w
  7439  1651  1903               	btfsc	3,2
  7440  1652  0008               	return
  7441                           
  7442                           ;debug.h: 141: {
  7443                           ;debug.h: 142: if(lable != (0))
  7444  1653  0842               	movf	dbg_print_cur_MATRIX4x4@lable,w
  7445  1654  0443               	iorwf	dbg_print_cur_MATRIX4x4@lable+1,w
  7446  1655  1903               	btfsc	3,2
  7447  1656  2E79               	goto	l3594
  7448                           
  7449                           ;debug.h: 143: {
  7450                           ;debug.h: 144: do { if(1) { sprintf(g_debug, lable); USARTWriteString(g_debug); } } whil
      +                          e (0);;
  7451  1657  0842               	movf	dbg_print_cur_MATRIX4x4@lable,w
  7452  1658  00A0               	movwf	sprintf@f
  7453  1659  0843               	movf	dbg_print_cur_MATRIX4x4@lable+1,w
  7454  165A  00A1               	movwf	sprintf@f+1
  7455  165B  30AD               	movlw	(low (_g_debug| 0))& (0+255)
  7456  165C  120A  118A  2250  160A  118A  	fcall	_sprintf
  7457  1661  30AD               	movlw	(low (_g_debug| 0))& (0+255)
  7458  1662  120A  118A  2004  160A  118A  	fcall	_USARTWriteString
  7459                           
  7460                           ;debug.h: 145: do { if(1) { sprintf(g_debug, ":""\r\n"); USARTWriteString(g_debug); } } 
      +                          while (0);;
  7461  1667  30C5               	movlw	low (STR_1| (0+32768))
  7462  1668  1283               	bcf	3,5	;RP0=0, select bank0
  7463  1669  1303               	bcf	3,6	;RP1=0, select bank0
  7464  166A  00A0               	movwf	sprintf@f
  7465  166B  308C               	movlw	high (STR_1| (0+32768))
  7466  166C  00A1               	movwf	sprintf@f+1
  7467  166D  30AD               	movlw	(low (_g_debug| 0))& (0+255)
  7468  166E  120A  118A  2250  160A  118A  	fcall	_sprintf
  7469  1673  30AD               	movlw	(low (_g_debug| 0))& (0+255)
  7470  1674  120A  118A  2004  160A  118A  	fcall	_USARTWriteString
  7471  1679                     l3594:	
  7472                           
  7473                           ;debug.h: 146: }
  7474                           ;debug.h: 147: MATRIX4x4* matrix = &g_matrix4x4[g_char_info[g_char_info_index].start_ind
      +                          ex + g_char_info_sub_index];
  7475  1679  1283               	bcf	3,5	;RP0=0, select bank0
  7476  167A  1303               	bcf	3,6	;RP1=0, select bank0
  7477  167B  086E               	movf	_g_char_info_index,w
  7478  167C  00C6               	movwf	??_dbg_print_cur_MATRIX4x4
  7479  167D  0746               	addwf	??_dbg_print_cur_MATRIX4x4,w
  7480  167E  3E90               	addlw	(low (_g_char_info| (0+256)))& (0+255)
  7481  167F  0084               	movwf	4
  7482  1680  1683               	bsf	3,5	;RP0=1, select bank1
  7483  1681  1303               	bcf	3,6	;RP1=0, select bank1
  7484  1682  082C               	movf	_g_char_info_sub_index^(0+128),w
  7485  1683  1783               	bsf	3,7	;select IRP bank3
  7486  1684  0700               	addwf	0,w
  7487  1685  1283               	bcf	3,5	;RP0=0, select bank0
  7488  1686  1303               	bcf	3,6	;RP1=0, select bank0
  7489  1687  00C7               	movwf	??_dbg_print_cur_MATRIX4x4+1
  7490  1688  3001               	movlw	1
  7491  1689                     u3205:	
  7492  1689  1003               	clrc
  7493  168A  0DC7               	rlf	??_dbg_print_cur_MATRIX4x4+1,f
  7494  168B  3EFF               	addlw	-1
  7495  168C  1D03               	skipz
  7496  168D  2E89               	goto	u3205
  7497  168E  1003               	clrc
  7498  168F  0D47               	rlf	??_dbg_print_cur_MATRIX4x4+1,w
  7499  1690  3E24               	addlw	low (_g_matrix4x4| (0+32768))
  7500  1691  00C8               	movwf	??_dbg_print_cur_MATRIX4x4+2
  7501  1692  3088               	movlw	high (_g_matrix4x4| (0+32768))
  7502  1693  1803               	skipnc
  7503  1694  3E01               	addlw	1
  7504  1695  00C9               	movwf	??_dbg_print_cur_MATRIX4x4+3
  7505  1696  0848               	movf	??_dbg_print_cur_MATRIX4x4+2,w
  7506  1697  00CA               	movwf	dbg_print_cur_MATRIX4x4@matrix
  7507  1698  0849               	movf	??_dbg_print_cur_MATRIX4x4+3,w
  7508  1699  00CB               	movwf	dbg_print_cur_MATRIX4x4@matrix+1
  7509                           
  7510                           ;debug.h: 148: dbg_print_MATRIX4x4(1, (0), x, y, matrix);
  7511  169A  3000               	movlw	0
  7512  169B  00B3               	movwf	dbg_print_MATRIX4x4@lable
  7513  169C  00B4               	movwf	dbg_print_MATRIX4x4@lable+1
  7514  169D  0844               	movf	dbg_print_cur_MATRIX4x4@x,w
  7515  169E  00C6               	movwf	??_dbg_print_cur_MATRIX4x4
  7516  169F  0846               	movf	??_dbg_print_cur_MATRIX4x4,w
  7517  16A0  00B5               	movwf	dbg_print_MATRIX4x4@x
  7518  16A1  0845               	movf	dbg_print_cur_MATRIX4x4@y,w
  7519  16A2  00C7               	movwf	??_dbg_print_cur_MATRIX4x4+1
  7520  16A3  0847               	movf	??_dbg_print_cur_MATRIX4x4+1,w
  7521  16A4  00B6               	movwf	dbg_print_MATRIX4x4@y
  7522  16A5  084A               	movf	dbg_print_cur_MATRIX4x4@matrix,w
  7523  16A6  00B7               	movwf	dbg_print_MATRIX4x4@matrix
  7524  16A7  084B               	movf	dbg_print_cur_MATRIX4x4@matrix+1,w
  7525  16A8  00B8               	movwf	dbg_print_MATRIX4x4@matrix+1
  7526  16A9  3001               	movlw	1
  7527  16AA  120A  118A  2125   	fcall	_dbg_print_MATRIX4x4
  7528  16AD  0008               	return
  7529  16AE                     __end_of_dbg_print_cur_MATRIX4x4:	
  7530                           
  7531                           	psect	text27
  7532  0125                     __ptext27:	
  7533 ;; *************** function _dbg_print_MATRIX4x4 *****************
  7534 ;; Defined at:
  7535 ;;		line 8 in file "../debug.h"
  7536 ;; Parameters:    Size  Location     Type
  7537 ;;  enable          1    wreg     unsigned char 
  7538 ;;  lable           2   19[BANK0 ] PTR const unsigned char 
  7539 ;;		 -> STR_65(15), STR_48(23), ROM(8192), 
  7540 ;;  x               1   21[BANK0 ] char 
  7541 ;;  y               1   22[BANK0 ] char 
  7542 ;;  matrix          2   23[BANK0 ] PTR const struct .
  7543 ;;		 -> NULL(0), g_matrix4x4(96), 
  7544 ;; Auto vars:     Size  Location     Type
  7545 ;;  enable          1   31[BANK0 ] unsigned char 
  7546 ;;  col             1   33[BANK0 ] char 
  7547 ;;  row             1   32[BANK0 ] char 
  7548 ;; Return value:  Size  Location     Type
  7549 ;;                  1    wreg      void 
  7550 ;; Registers used:
  7551 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  7552 ;; Tracked objects:
  7553 ;;		On entry : 0/0
  7554 ;;		On exit  : 0/0
  7555 ;;		Unchanged: 0/0
  7556 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7557 ;;      Params:         0       6       0       0       0
  7558 ;;      Locals:         0       3       0       0       0
  7559 ;;      Temps:          0       6       0       0       0
  7560 ;;      Totals:         0      15       0       0       0
  7561 ;;Total ram usage:       15 bytes
  7562 ;; Hardware stack levels used:    1
  7563 ;; Hardware stack levels required when called:    3
  7564 ;; This function calls:
  7565 ;;		_USARTWriteString
  7566 ;;		_get_matrix_bit
  7567 ;;		_sprintf
  7568 ;; This function is called by:
  7569 ;;		_dbg_print_cur_MATRIX4x4
  7570 ;;		_lg_merge
  7571 ;;		_lg_find_best_solution
  7572 ;;		_dbg_print_all_MATRIX4x4
  7573 ;; This function uses a non-reentrant model
  7574 ;;
  7575                           
  7576                           
  7577                           ;psect for function _dbg_print_MATRIX4x4
  7578  0125                     _dbg_print_MATRIX4x4:	
  7579                           
  7580                           ;incstack = 0
  7581                           ; Regs used in _dbg_print_MATRIX4x4: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack
      +                          ]
  7582                           ;dbg_print_MATRIX4x4@enable stored from wreg
  7583  0125  1283               	bcf	3,5	;RP0=0, select bank0
  7584  0126  1303               	bcf	3,6	;RP1=0, select bank0
  7585  0127  00BF               	movwf	dbg_print_MATRIX4x4@enable
  7586  0128  083F               	movf	dbg_print_MATRIX4x4@enable,w
  7587  0129  1903               	btfsc	3,2
  7588  012A  0008               	return
  7589                           
  7590                           ;debug.h: 11: {
  7591                           ;debug.h: 12: if(lable != (0))
  7592  012B  0833               	movf	dbg_print_MATRIX4x4@lable,w
  7593  012C  0434               	iorwf	dbg_print_MATRIX4x4@lable+1,w
  7594  012D  1903               	btfsc	3,2
  7595  012E  2951               	goto	l3382
  7596                           
  7597                           ;debug.h: 13: {
  7598                           ;debug.h: 14: do { if(1) { sprintf(g_debug, lable); USARTWriteString(g_debug); } } while
      +                           (0);;
  7599  012F  0833               	movf	dbg_print_MATRIX4x4@lable,w
  7600  0130  00A0               	movwf	sprintf@f
  7601  0131  0834               	movf	dbg_print_MATRIX4x4@lable+1,w
  7602  0132  00A1               	movwf	sprintf@f+1
  7603  0133  30AD               	movlw	(low (_g_debug| 0))& (0+255)
  7604  0134  120A  118A  2250  120A  118A  	fcall	_sprintf
  7605  0139  30AD               	movlw	(low (_g_debug| 0))& (0+255)
  7606  013A  120A  118A  2004  120A  118A  	fcall	_USARTWriteString
  7607                           
  7608                           ;debug.h: 15: do { if(1) { sprintf(g_debug, ":""\r\n"); USARTWriteString(g_debug); } } w
      +                          hile (0);;
  7609  013F  30C5               	movlw	low (STR_1| (0+32768))
  7610  0140  1283               	bcf	3,5	;RP0=0, select bank0
  7611  0141  1303               	bcf	3,6	;RP1=0, select bank0
  7612  0142  00A0               	movwf	sprintf@f
  7613  0143  308C               	movlw	high (STR_1| (0+32768))
  7614  0144  00A1               	movwf	sprintf@f+1
  7615  0145  30AD               	movlw	(low (_g_debug| 0))& (0+255)
  7616  0146  120A  118A  2250  120A  118A  	fcall	_sprintf
  7617  014B  30AD               	movlw	(low (_g_debug| 0))& (0+255)
  7618  014C  120A  118A  2004  120A  118A  	fcall	_USARTWriteString
  7619  0151                     l3382:	
  7620                           ;debug.h: 16: }
  7621                           ;debug.h: 17: do { if(1) { sprintf(g_debug, "<<<<<<<<<<<<<<<<<<<<MATRIX4x4""\r\n"); USAR
      +                          TWriteString(g_debug); } } while (0);;
  7622                           
  7623  0151  300B               	movlw	low (STR_2| (0+32768))
  7624  0152  1283               	bcf	3,5	;RP0=0, select bank0
  7625  0153  1303               	bcf	3,6	;RP1=0, select bank0
  7626  0154  00A0               	movwf	sprintf@f
  7627  0155  3089               	movlw	high (STR_2| (0+32768))
  7628  0156  00A1               	movwf	sprintf@f+1
  7629  0157  30AD               	movlw	(low (_g_debug| 0))& (0+255)
  7630  0158  120A  118A  2250  120A  118A  	fcall	_sprintf
  7631  015D  30AD               	movlw	(low (_g_debug| 0))& (0+255)
  7632  015E  120A  118A  2004  120A  118A  	fcall	_USARTWriteString
  7633                           
  7634                           ;debug.h: 18: for(int8_t row = 0; row < 8; row++)
  7635  0163  1283               	bcf	3,5	;RP0=0, select bank0
  7636  0164  1303               	bcf	3,6	;RP1=0, select bank0
  7637  0165  01C0               	clrf	dbg_print_MATRIX4x4@row
  7638  0166  0840               	movf	dbg_print_MATRIX4x4@row,w
  7639  0167  3A80               	xorlw	128
  7640  0168  3E78               	addlw	-136
  7641  0169  1803               	btfsc	3,0
  7642  016A  2A41               	goto	l3428
  7643  016B                     l3392:	
  7644                           
  7645                           ;debug.h: 19: {
  7646                           ;debug.h: 20: for(int8_t col = 0; col < 8; col++)
  7647  016B  01C1               	clrf	dbg_print_MATRIX4x4@col
  7648  016C  0841               	movf	dbg_print_MATRIX4x4@col,w
  7649  016D  3A80               	xorlw	128
  7650  016E  3E78               	addlw	-136
  7651  016F  1803               	btfsc	3,0
  7652  0170  2A26               	goto	l3420
  7653  0171                     l3398:	
  7654                           
  7655                           ;debug.h: 21: {
  7656                           ;debug.h: 22: if((row - y >= 0) && (row - y < 4)
  7657                           ;debug.h: 23: && (col - x >= 0) && (col - x < 4)
  7658                           ;debug.h: 24: && (get_matrix_bit(matrix->row, row - y, col - x) == 1))
  7659  0171  0836               	movf	dbg_print_MATRIX4x4@y,w
  7660  0172  00B9               	movwf	??_dbg_print_MATRIX4x4
  7661  0173  01BA               	clrf	??_dbg_print_MATRIX4x4+1
  7662  0174  1BB9               	btfsc	??_dbg_print_MATRIX4x4,7
  7663  0175  03BA               	decf	??_dbg_print_MATRIX4x4+1,f
  7664  0176  09B9               	comf	??_dbg_print_MATRIX4x4,f
  7665  0177  09BA               	comf	??_dbg_print_MATRIX4x4+1,f
  7666  0178  0AB9               	incf	??_dbg_print_MATRIX4x4,f
  7667  0179  1903               	skipnz
  7668  017A  0ABA               	incf	??_dbg_print_MATRIX4x4+1,f
  7669  017B  0840               	movf	dbg_print_MATRIX4x4@row,w
  7670  017C  00BB               	movwf	??_dbg_print_MATRIX4x4+2
  7671  017D  01BC               	clrf	??_dbg_print_MATRIX4x4+3
  7672  017E  1BBB               	btfsc	??_dbg_print_MATRIX4x4+2,7
  7673  017F  03BC               	decf	??_dbg_print_MATRIX4x4+3,f
  7674  0180  0839               	movf	??_dbg_print_MATRIX4x4,w
  7675  0181  073B               	addwf	??_dbg_print_MATRIX4x4+2,w
  7676  0182  00BD               	movwf	??_dbg_print_MATRIX4x4+4
  7677  0183  083A               	movf	??_dbg_print_MATRIX4x4+1,w
  7678  0184  1803               	skipnc
  7679  0185  0A3A               	incf	??_dbg_print_MATRIX4x4+1,w
  7680  0186  073C               	addwf	??_dbg_print_MATRIX4x4+3,w
  7681  0187  00BE               	movwf	??_dbg_print_MATRIX4x4+5
  7682  0188  1BBE               	btfsc	??_dbg_print_MATRIX4x4+5,7
  7683  0189  2A09               	goto	l3412
  7684  018A  0836               	movf	dbg_print_MATRIX4x4@y,w
  7685  018B  00B9               	movwf	??_dbg_print_MATRIX4x4
  7686  018C  01BA               	clrf	??_dbg_print_MATRIX4x4+1
  7687  018D  1BB9               	btfsc	??_dbg_print_MATRIX4x4,7
  7688  018E  03BA               	decf	??_dbg_print_MATRIX4x4+1,f
  7689  018F  09B9               	comf	??_dbg_print_MATRIX4x4,f
  7690  0190  09BA               	comf	??_dbg_print_MATRIX4x4+1,f
  7691  0191  0AB9               	incf	??_dbg_print_MATRIX4x4,f
  7692  0192  1903               	skipnz
  7693  0193  0ABA               	incf	??_dbg_print_MATRIX4x4+1,f
  7694  0194  0840               	movf	dbg_print_MATRIX4x4@row,w
  7695  0195  00BB               	movwf	??_dbg_print_MATRIX4x4+2
  7696  0196  01BC               	clrf	??_dbg_print_MATRIX4x4+3
  7697  0197  1BBB               	btfsc	??_dbg_print_MATRIX4x4+2,7
  7698  0198  03BC               	decf	??_dbg_print_MATRIX4x4+3,f
  7699  0199  0839               	movf	??_dbg_print_MATRIX4x4,w
  7700  019A  073B               	addwf	??_dbg_print_MATRIX4x4+2,w
  7701  019B  00BD               	movwf	??_dbg_print_MATRIX4x4+4
  7702  019C  083A               	movf	??_dbg_print_MATRIX4x4+1,w
  7703  019D  1803               	skipnc
  7704  019E  0A3A               	incf	??_dbg_print_MATRIX4x4+1,w
  7705  019F  073C               	addwf	??_dbg_print_MATRIX4x4+3,w
  7706  01A0  00BE               	movwf	??_dbg_print_MATRIX4x4+5
  7707  01A1  083E               	movf	??_dbg_print_MATRIX4x4+5,w
  7708  01A2  3A80               	xorlw	128
  7709  01A3  00FF               	movwf	127
  7710  01A4  3080               	movlw	128
  7711  01A5  027F               	subwf	127,w
  7712  01A6  1D03               	skipz
  7713  01A7  29AA               	goto	u2885
  7714  01A8  3004               	movlw	4
  7715  01A9  023D               	subwf	??_dbg_print_MATRIX4x4+4,w
  7716  01AA                     u2885:	
  7717  01AA  1803               	skipnc
  7718  01AB  2A09               	goto	l3412
  7719  01AC  1283               	bcf	3,5	;RP0=0, select bank0
  7720  01AD  1303               	bcf	3,6	;RP1=0, select bank0
  7721  01AE  0835               	movf	dbg_print_MATRIX4x4@x,w
  7722  01AF  00B9               	movwf	??_dbg_print_MATRIX4x4
  7723  01B0  01BA               	clrf	??_dbg_print_MATRIX4x4+1
  7724  01B1  1BB9               	btfsc	??_dbg_print_MATRIX4x4,7
  7725  01B2  03BA               	decf	??_dbg_print_MATRIX4x4+1,f
  7726  01B3  09B9               	comf	??_dbg_print_MATRIX4x4,f
  7727  01B4  09BA               	comf	??_dbg_print_MATRIX4x4+1,f
  7728  01B5  0AB9               	incf	??_dbg_print_MATRIX4x4,f
  7729  01B6  1903               	skipnz
  7730  01B7  0ABA               	incf	??_dbg_print_MATRIX4x4+1,f
  7731  01B8  0841               	movf	dbg_print_MATRIX4x4@col,w
  7732  01B9  00BB               	movwf	??_dbg_print_MATRIX4x4+2
  7733  01BA  01BC               	clrf	??_dbg_print_MATRIX4x4+3
  7734  01BB  1BBB               	btfsc	??_dbg_print_MATRIX4x4+2,7
  7735  01BC  03BC               	decf	??_dbg_print_MATRIX4x4+3,f
  7736  01BD  0839               	movf	??_dbg_print_MATRIX4x4,w
  7737  01BE  073B               	addwf	??_dbg_print_MATRIX4x4+2,w
  7738  01BF  00BD               	movwf	??_dbg_print_MATRIX4x4+4
  7739  01C0  083A               	movf	??_dbg_print_MATRIX4x4+1,w
  7740  01C1  1803               	skipnc
  7741  01C2  0A3A               	incf	??_dbg_print_MATRIX4x4+1,w
  7742  01C3  073C               	addwf	??_dbg_print_MATRIX4x4+3,w
  7743  01C4  00BE               	movwf	??_dbg_print_MATRIX4x4+5
  7744  01C5  1BBE               	btfsc	??_dbg_print_MATRIX4x4+5,7
  7745  01C6  2A09               	goto	l3412
  7746  01C7  0835               	movf	dbg_print_MATRIX4x4@x,w
  7747  01C8  00B9               	movwf	??_dbg_print_MATRIX4x4
  7748  01C9  01BA               	clrf	??_dbg_print_MATRIX4x4+1
  7749  01CA  1BB9               	btfsc	??_dbg_print_MATRIX4x4,7
  7750  01CB  03BA               	decf	??_dbg_print_MATRIX4x4+1,f
  7751  01CC  09B9               	comf	??_dbg_print_MATRIX4x4,f
  7752  01CD  09BA               	comf	??_dbg_print_MATRIX4x4+1,f
  7753  01CE  0AB9               	incf	??_dbg_print_MATRIX4x4,f
  7754  01CF  1903               	skipnz
  7755  01D0  0ABA               	incf	??_dbg_print_MATRIX4x4+1,f
  7756  01D1  0841               	movf	dbg_print_MATRIX4x4@col,w
  7757  01D2  00BB               	movwf	??_dbg_print_MATRIX4x4+2
  7758  01D3  01BC               	clrf	??_dbg_print_MATRIX4x4+3
  7759  01D4  1BBB               	btfsc	??_dbg_print_MATRIX4x4+2,7
  7760  01D5  03BC               	decf	??_dbg_print_MATRIX4x4+3,f
  7761  01D6  0839               	movf	??_dbg_print_MATRIX4x4,w
  7762  01D7  073B               	addwf	??_dbg_print_MATRIX4x4+2,w
  7763  01D8  00BD               	movwf	??_dbg_print_MATRIX4x4+4
  7764  01D9  083A               	movf	??_dbg_print_MATRIX4x4+1,w
  7765  01DA  1803               	skipnc
  7766  01DB  0A3A               	incf	??_dbg_print_MATRIX4x4+1,w
  7767  01DC  073C               	addwf	??_dbg_print_MATRIX4x4+3,w
  7768  01DD  00BE               	movwf	??_dbg_print_MATRIX4x4+5
  7769  01DE  083E               	movf	??_dbg_print_MATRIX4x4+5,w
  7770  01DF  3A80               	xorlw	128
  7771  01E0  00FF               	movwf	127
  7772  01E1  3080               	movlw	128
  7773  01E2  027F               	subwf	127,w
  7774  01E3  1D03               	skipz
  7775  01E4  29E7               	goto	u2905
  7776  01E5  3004               	movlw	4
  7777  01E6  023D               	subwf	??_dbg_print_MATRIX4x4+4,w
  7778  01E7                     u2905:	
  7779  01E7  1803               	skipnc
  7780  01E8  2A09               	goto	l3412
  7781  01E9  1283               	bcf	3,5	;RP0=0, select bank0
  7782  01EA  1303               	bcf	3,6	;RP1=0, select bank0
  7783  01EB  0837               	movf	dbg_print_MATRIX4x4@matrix,w
  7784  01EC  00F7               	movwf	get_matrix_bit@byte
  7785  01ED  0838               	movf	dbg_print_MATRIX4x4@matrix+1,w
  7786  01EE  00F8               	movwf	get_matrix_bit@byte+1
  7787  01EF  0336               	decf	dbg_print_MATRIX4x4@y,w
  7788  01F0  3AFF               	xorlw	255
  7789  01F1  0740               	addwf	dbg_print_MATRIX4x4@row,w
  7790  01F2  00B9               	movwf	??_dbg_print_MATRIX4x4
  7791  01F3  0839               	movf	??_dbg_print_MATRIX4x4,w
  7792  01F4  00F9               	movwf	get_matrix_bit@row
  7793  01F5  0335               	decf	dbg_print_MATRIX4x4@x,w
  7794  01F6  3AFF               	xorlw	255
  7795  01F7  0741               	addwf	dbg_print_MATRIX4x4@col,w
  7796  01F8  00BA               	movwf	??_dbg_print_MATRIX4x4+1
  7797  01F9  083A               	movf	??_dbg_print_MATRIX4x4+1,w
  7798  01FA  00FA               	movwf	get_matrix_bit@col
  7799  01FB  160A  158A  273B  120A  118A  	fcall	_get_matrix_bit
  7800  0200  3A01               	xorlw	1
  7801  0201  1D03               	skipz
  7802  0202  2A09               	goto	l3412
  7803                           
  7804                           ;debug.h: 25: {
  7805                           ;debug.h: 26: do { if(1) { sprintf(g_debug, "*"); USARTWriteString(g_debug); } } while (
      +                          0);;
  7806  0203  30C9               	movlw	low (STR_3| (0+32768))
  7807  0204  1283               	bcf	3,5	;RP0=0, select bank0
  7808  0205  1303               	bcf	3,6	;RP1=0, select bank0
  7809  0206  00A0               	movwf	sprintf@f
  7810  0207  308C               	movlw	high (STR_3| (0+32768))
  7811  0208  2A0E               	goto	L18
  7812  0209                     l3412:	
  7813                           ;debug.h: 28: else
  7814                           ;debug.h: 29: {
  7815                           ;debug.h: 30: do { if(1) { sprintf(g_debug, "_"); USARTWriteString(g_debug); } } while (
      +                          0);;
  7816                           
  7817                           ;debug.h: 27: }
  7818                           
  7819  0209  30CB               	movlw	low (STR_4| (0+32768))
  7820  020A  1283               	bcf	3,5	;RP0=0, select bank0
  7821  020B  1303               	bcf	3,6	;RP1=0, select bank0
  7822  020C  00A0               	movwf	sprintf@f
  7823  020D  308C               	movlw	high (STR_4| (0+32768))
  7824  020E                     L18:	
  7825  020E  00A1               	movwf	sprintf@f+1
  7826  020F  30AD               	movlw	(low (_g_debug| 0))& (0+255)
  7827  0210  120A  118A  2250  120A  118A  	fcall	_sprintf
  7828  0215  30AD               	movlw	(low (_g_debug| 0))& (0+255)
  7829  0216  120A  118A  2004  120A  118A  	fcall	_USARTWriteString
  7830  021B  3001               	movlw	1
  7831  021C  1283               	bcf	3,5	;RP0=0, select bank0
  7832  021D  1303               	bcf	3,6	;RP1=0, select bank0
  7833  021E  00B9               	movwf	??_dbg_print_MATRIX4x4
  7834  021F  0839               	movf	??_dbg_print_MATRIX4x4,w
  7835  0220  07C1               	addwf	dbg_print_MATRIX4x4@col,f
  7836  0221  0841               	movf	dbg_print_MATRIX4x4@col,w
  7837  0222  3A80               	xorlw	128
  7838  0223  3E78               	addlw	-136
  7839  0224  1C03               	skipc
  7840  0225  2971               	goto	l3398
  7841  0226                     l3420:	
  7842                           ;debug.h: 31: }
  7843                           ;debug.h: 32: }
  7844                           ;debug.h: 33: do { if(1) { sprintf(g_debug, """\r\n"); USARTWriteString(g_debug); } } wh
      +                          ile (0);;
  7845                           
  7846  0226  30EA               	movlw	low ((STR_74+12)| (0+32768))
  7847  0227  00A0               	movwf	sprintf@f
  7848  0228  308B               	movlw	high ((STR_74+12)| (0+32768))
  7849  0229  00A1               	movwf	sprintf@f+1
  7850  022A  30AD               	movlw	(low (_g_debug| 0))& (0+255)
  7851  022B  120A  118A  2250  120A  118A  	fcall	_sprintf
  7852  0230  30AD               	movlw	(low (_g_debug| 0))& (0+255)
  7853  0231  120A  118A  2004  120A  118A  	fcall	_USARTWriteString
  7854  0236  3001               	movlw	1
  7855  0237  1283               	bcf	3,5	;RP0=0, select bank0
  7856  0238  1303               	bcf	3,6	;RP1=0, select bank0
  7857  0239  00B9               	movwf	??_dbg_print_MATRIX4x4
  7858  023A  0839               	movf	??_dbg_print_MATRIX4x4,w
  7859  023B  07C0               	addwf	dbg_print_MATRIX4x4@row,f
  7860  023C  0840               	movf	dbg_print_MATRIX4x4@row,w
  7861  023D  3A80               	xorlw	128
  7862  023E  3E78               	addlw	-136
  7863  023F  1C03               	skipc
  7864  0240  296B               	goto	l3392
  7865  0241                     l3428:	
  7866                           ;debug.h: 34: }
  7867                           ;debug.h: 35: do { if(1) { sprintf(g_debug, ">>>>>>>>>>>>>>>>>>>>""\r\n"); USARTWriteStr
      +                          ing(g_debug); } } while (0);;
  7868                           
  7869  0241  30B8               	movlw	low (STR_6| (0+32768))
  7870  0242  00A0               	movwf	sprintf@f
  7871  0243  308A               	movlw	high (STR_6| (0+32768))
  7872  0244  00A1               	movwf	sprintf@f+1
  7873  0245  30AD               	movlw	(low (_g_debug| 0))& (0+255)
  7874  0246  120A  118A  2250  120A  118A  	fcall	_sprintf
  7875  024B  30AD               	movlw	(low (_g_debug| 0))& (0+255)
  7876  024C  120A  118A  2004   	fcall	_USARTWriteString
  7877  024F  0008               	return
  7878  0250                     __end_of_dbg_print_MATRIX4x4:	
  7879                           
  7880                           	psect	text28
  7881  125A                     __ptext28:	
  7882 ;; *************** function _dbg_print_Screen *****************
  7883 ;; Defined at:
  7884 ;;		line 119 in file "../debug.h"
  7885 ;; Parameters:    Size  Location     Type
  7886 ;;  enable          1    wreg     unsigned char 
  7887 ;;  lable           2   27[BANK0 ] PTR const unsigned char 
  7888 ;;		 -> STR_66(15), 
  7889 ;; Auto vars:     Size  Location     Type
  7890 ;;  enable          1   30[BANK0 ] unsigned char 
  7891 ;; Return value:  Size  Location     Type
  7892 ;;                  1    wreg      void 
  7893 ;; Registers used:
  7894 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  7895 ;; Tracked objects:
  7896 ;;		On entry : 0/0
  7897 ;;		On exit  : 0/0
  7898 ;;		Unchanged: 0/0
  7899 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7900 ;;      Params:         0       2       0       0       0
  7901 ;;      Locals:         0       1       0       0       0
  7902 ;;      Temps:          0       1       0       0       0
  7903 ;;      Totals:         0       4       0       0       0
  7904 ;;Total ram usage:        4 bytes
  7905 ;; Hardware stack levels used:    1
  7906 ;; Hardware stack levels required when called:    4
  7907 ;; This function calls:
  7908 ;;		_USARTWriteString
  7909 ;;		_dbg_print_MATRIX8x8
  7910 ;;		_sprintf
  7911 ;; This function is called by:
  7912 ;;		_lg_find_best_solution
  7913 ;; This function uses a non-reentrant model
  7914 ;;
  7915                           
  7916                           
  7917                           ;psect for function _dbg_print_Screen
  7918  125A                     _dbg_print_Screen:	
  7919                           
  7920                           ;incstack = 0
  7921                           ; Regs used in _dbg_print_Screen: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  7922                           ;dbg_print_Screen@enable stored from wreg
  7923  125A  1283               	bcf	3,5	;RP0=0, select bank0
  7924  125B  1303               	bcf	3,6	;RP1=0, select bank0
  7925  125C  00BE               	movwf	dbg_print_Screen@enable
  7926  125D  083E               	movf	dbg_print_Screen@enable,w
  7927  125E  1903               	btfsc	3,2
  7928  125F  0008               	return
  7929                           
  7930                           ;debug.h: 122: {
  7931                           ;debug.h: 123: if(lable != (0))
  7932  1260  083B               	movf	dbg_print_Screen@lable,w
  7933  1261  043C               	iorwf	dbg_print_Screen@lable+1,w
  7934  1262  1903               	btfsc	3,2
  7935  1263  2A86               	goto	l3582
  7936                           
  7937                           ;debug.h: 124: {
  7938                           ;debug.h: 125: do { if(1) { sprintf(g_debug, lable); USARTWriteString(g_debug); } } whil
      +                          e (0);;
  7939  1264  083B               	movf	dbg_print_Screen@lable,w
  7940  1265  00A0               	movwf	sprintf@f
  7941  1266  083C               	movf	dbg_print_Screen@lable+1,w
  7942  1267  00A1               	movwf	sprintf@f+1
  7943  1268  30AD               	movlw	(low (_g_debug| 0))& (0+255)
  7944  1269  120A  118A  2250  160A  118A  	fcall	_sprintf
  7945  126E  30AD               	movlw	(low (_g_debug| 0))& (0+255)
  7946  126F  120A  118A  2004  160A  118A  	fcall	_USARTWriteString
  7947                           
  7948                           ;debug.h: 126: do { if(1) { sprintf(g_debug, ":""\r\n"); USARTWriteString(g_debug); } } 
      +                          while (0);;
  7949  1274  30C5               	movlw	low (STR_1| (0+32768))
  7950  1275  1283               	bcf	3,5	;RP0=0, select bank0
  7951  1276  1303               	bcf	3,6	;RP1=0, select bank0
  7952  1277  00A0               	movwf	sprintf@f
  7953  1278  308C               	movlw	high (STR_1| (0+32768))
  7954  1279  00A1               	movwf	sprintf@f+1
  7955  127A  30AD               	movlw	(low (_g_debug| 0))& (0+255)
  7956  127B  120A  118A  2250  160A  118A  	fcall	_sprintf
  7957  1280  30AD               	movlw	(low (_g_debug| 0))& (0+255)
  7958  1281  120A  118A  2004  160A  118A  	fcall	_USARTWriteString
  7959  1286                     l3582:	
  7960                           
  7961                           ;debug.h: 127: }
  7962                           ;debug.h: 128: dbg_print_MATRIX8x8(1, (0), &g_matrix8x8);
  7963  1286  3000               	movlw	0
  7964  1287  1283               	bcf	3,5	;RP0=0, select bank0
  7965  1288  1303               	bcf	3,6	;RP1=0, select bank0
  7966  1289  00B3               	movwf	dbg_print_MATRIX8x8@lable
  7967  128A  00B4               	movwf	dbg_print_MATRIX8x8@lable+1
  7968  128B  30CD               	movlw	(low (_g_matrix8x8| 0))& (0+255)
  7969  128C  00BD               	movwf	??_dbg_print_Screen
  7970  128D  083D               	movf	??_dbg_print_Screen,w
  7971  128E  00B5               	movwf	dbg_print_MATRIX8x8@matrix
  7972  128F  3001               	movlw	1
  7973  1290  120A  158A  2757   	fcall	_dbg_print_MATRIX8x8
  7974  1293  0008               	return
  7975  1294                     __end_of_dbg_print_Screen:	
  7976                           
  7977                           	psect	text29
  7978  1064                     __ptext29:	
  7979 ;; *************** function ___wmul *****************
  7980 ;; Defined at:
  7981 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\Umul16.c"
  7982 ;; Parameters:    Size  Location     Type
  7983 ;;  multiplier      2   31[BANK0 ] unsigned int 
  7984 ;;  multiplicand    2   33[BANK0 ] unsigned int 
  7985 ;; Auto vars:     Size  Location     Type
  7986 ;;  product         2   35[BANK0 ] unsigned int 
  7987 ;; Return value:  Size  Location     Type
  7988 ;;                  2   31[BANK0 ] unsigned int 
  7989 ;; Registers used:
  7990 ;;		wreg, status,2, status,0
  7991 ;; Tracked objects:
  7992 ;;		On entry : 0/0
  7993 ;;		On exit  : 0/0
  7994 ;;		Unchanged: 0/0
  7995 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7996 ;;      Params:         0       4       0       0       0
  7997 ;;      Locals:         0       2       0       0       0
  7998 ;;      Temps:          0       0       0       0       0
  7999 ;;      Totals:         0       6       0       0       0
  8000 ;;Total ram usage:        6 bytes
  8001 ;; Hardware stack levels used:    1
  8002 ;; This function calls:
  8003 ;;		Nothing
  8004 ;; This function is called by:
  8005 ;;		_lg_find_best_solution
  8006 ;; This function uses a non-reentrant model
  8007 ;;
  8008                           
  8009                           
  8010                           ;psect for function ___wmul
  8011  1064                     ___wmul:	
  8012                           
  8013                           ;incstack = 0
  8014                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  8015  1064  1283               	bcf	3,5	;RP0=0, select bank0
  8016  1065  1303               	bcf	3,6	;RP1=0, select bank0
  8017  1066  01C3               	clrf	___wmul@product
  8018  1067  01C4               	clrf	___wmul@product+1
  8019  1068                     l4130:	
  8020  1068  1C3F               	btfss	___wmul@multiplier,0
  8021  1069  2870               	goto	l868
  8022  106A  0841               	movf	___wmul@multiplicand,w
  8023  106B  07C3               	addwf	___wmul@product,f
  8024  106C  1803               	skipnc
  8025  106D  0AC4               	incf	___wmul@product+1,f
  8026  106E  0842               	movf	___wmul@multiplicand+1,w
  8027  106F  07C4               	addwf	___wmul@product+1,f
  8028  1070                     l868:	
  8029  1070  3001               	movlw	1
  8030  1071                     u4115:	
  8031  1071  1003               	clrc
  8032  1072  0DC1               	rlf	___wmul@multiplicand,f
  8033  1073  0DC2               	rlf	___wmul@multiplicand+1,f
  8034  1074  3EFF               	addlw	-1
  8035  1075  1D03               	skipz
  8036  1076  2871               	goto	u4115
  8037  1077  3001               	movlw	1
  8038  1078                     u4125:	
  8039  1078  1003               	clrc
  8040  1079  0CC0               	rrf	___wmul@multiplier+1,f
  8041  107A  0CBF               	rrf	___wmul@multiplier,f
  8042  107B  3EFF               	addlw	-1
  8043  107C  1D03               	skipz
  8044  107D  2878               	goto	u4125
  8045  107E  083F               	movf	___wmul@multiplier,w
  8046  107F  0440               	iorwf	___wmul@multiplier+1,w
  8047  1080  1D03               	btfss	3,2
  8048  1081  2868               	goto	l4130
  8049  1082  0844               	movf	___wmul@product+1,w
  8050  1083  00C0               	movwf	?___wmul+1
  8051  1084  0843               	movf	___wmul@product,w
  8052  1085  00BF               	movwf	?___wmul
  8053  1086  0008               	return
  8054  1087                     __end_of___wmul:	
  8055                           
  8056                           	psect	text30
  8057  15F2                     __ptext30:	
  8058 ;; *************** function _lg_delete_matrix *****************
  8059 ;; Defined at:
  8060 ;;		line 44 in file "../logic.h"
  8061 ;; Parameters:    Size  Location     Type
  8062 ;;  matrix          1    wreg     PTR struct .
  8063 ;;		 -> g_matrix8x8(8), 
  8064 ;; Auto vars:     Size  Location     Type
  8065 ;;  matrix          1   35[BANK0 ] PTR struct .
  8066 ;;		 -> g_matrix8x8(8), 
  8067 ;;  row             1   36[BANK0 ] char 
  8068 ;;  count           1   34[BANK0 ] unsigned char 
  8069 ;; Return value:  Size  Location     Type
  8070 ;;                  1    wreg      unsigned char 
  8071 ;; Registers used:
  8072 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  8073 ;; Tracked objects:
  8074 ;;		On entry : 0/0
  8075 ;;		On exit  : 0/0
  8076 ;;		Unchanged: 0/0
  8077 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8078 ;;      Params:         0       0       0       0       0
  8079 ;;      Locals:         0       3       0       0       0
  8080 ;;      Temps:          0       2       0       0       0
  8081 ;;      Totals:         0       5       0       0       0
  8082 ;;Total ram usage:        5 bytes
  8083 ;; Hardware stack levels used:    1
  8084 ;; Hardware stack levels required when called:    5
  8085 ;; This function calls:
  8086 ;;		_USARTWriteString
  8087 ;;		_dbg_print_MATRIX8x8
  8088 ;;		_lg_delete_matrix_row
  8089 ;;		_lg_is_row_full
  8090 ;;		_sprintf
  8091 ;; This function is called by:
  8092 ;;		_main
  8093 ;; This function uses a non-reentrant model
  8094 ;;
  8095                           
  8096                           
  8097                           ;psect for function _lg_delete_matrix
  8098  15F2                     _lg_delete_matrix:	
  8099                           
  8100                           ;incstack = 0
  8101                           ; Regs used in _lg_delete_matrix: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  8102                           ;lg_delete_matrix@matrix stored from wreg
  8103  15F2  1283               	bcf	3,5	;RP0=0, select bank0
  8104  15F3  1303               	bcf	3,6	;RP1=0, select bank0
  8105  15F4  00C3               	movwf	lg_delete_matrix@matrix
  8106                           
  8107                           ;logic.h: 46: uint8_t count = 0;
  8108  15F5  01C2               	clrf	lg_delete_matrix@count
  8109                           
  8110                           ;logic.h: 47: int8_t row = 8 - 1;
  8111  15F6  3007               	movlw	7
  8112  15F7  00C0               	movwf	??_lg_delete_matrix
  8113  15F8  0840               	movf	??_lg_delete_matrix,w
  8114  15F9  00C4               	movwf	lg_delete_matrix@row
  8115  15FA                     l4218:	
  8116                           ;logic.h: 48: while(row >= 0)
  8117                           
  8118  15FA  1BC4               	btfsc	lg_delete_matrix@row,7
  8119  15FB  0008               	return
  8120                           
  8121                           ;logic.h: 49: {
  8122                           ;logic.h: 51: Seed++;
  8123  15FC  3001               	movlw	1
  8124  15FD  1683               	bsf	3,5	;RP0=1, select bank1
  8125  15FE  1303               	bcf	3,6	;RP1=0, select bank1
  8126  15FF  07A5               	addwf	_Seed^(0+128),f
  8127  1600  1803               	skipnc
  8128  1601  0AA6               	incf	(_Seed+1)^(0+128),f
  8129  1602  3000               	movlw	0
  8130  1603  07A6               	addwf	(_Seed+1)^(0+128),f
  8131                           
  8132                           ;logic.h: 53: if(lg_is_row_full(matrix, row) == 1)
  8133  1604  1283               	bcf	3,5	;RP0=0, select bank0
  8134  1605  1303               	bcf	3,6	;RP1=0, select bank0
  8135  1606  0844               	movf	lg_delete_matrix@row,w
  8136  1607  00C0               	movwf	??_lg_delete_matrix
  8137  1608  0840               	movf	??_lg_delete_matrix,w
  8138  1609  00BB               	movwf	lg_is_row_full@row
  8139  160A  0843               	movf	lg_delete_matrix@matrix,w
  8140  160B  160A  118A  2025  160A  118A  	fcall	_lg_is_row_full
  8141  1610  3A01               	xorlw	1
  8142  1611  1D03               	skipz
  8143  1612  2E46               	goto	l4216
  8144                           
  8145                           ;logic.h: 54: {
  8146                           ;logic.h: 55: dbg_print_MATRIX8x8(0, "Before delete MATRIX8x8", &g_matrix8x8);
  8147  1613  3072               	movlw	low (STR_26| (0+32768))
  8148  1614  1283               	bcf	3,5	;RP0=0, select bank0
  8149  1615  1303               	bcf	3,6	;RP1=0, select bank0
  8150  1616  00B3               	movwf	dbg_print_MATRIX8x8@lable
  8151  1617  308A               	movlw	high (STR_26| (0+32768))
  8152  1618  00B4               	movwf	dbg_print_MATRIX8x8@lable+1
  8153  1619  30CD               	movlw	(low (_g_matrix8x8| 0))& (0+255)
  8154  161A  00C0               	movwf	??_lg_delete_matrix
  8155  161B  0840               	movf	??_lg_delete_matrix,w
  8156  161C  00B5               	movwf	dbg_print_MATRIX8x8@matrix
  8157  161D  3000               	movlw	0
  8158  161E  120A  158A  2757  160A  118A  	fcall	_dbg_print_MATRIX8x8
  8159                           
  8160                           ;logic.h: 56: lg_delete_matrix_row(matrix, row);
  8161  1623  1283               	bcf	3,5	;RP0=0, select bank0
  8162  1624  1303               	bcf	3,6	;RP1=0, select bank0
  8163  1625  0844               	movf	lg_delete_matrix@row,w
  8164  1626  00C0               	movwf	??_lg_delete_matrix
  8165  1627  0840               	movf	??_lg_delete_matrix,w
  8166  1628  00F0               	movwf	lg_delete_matrix_row@row
  8167  1629  0843               	movf	lg_delete_matrix@matrix,w
  8168  162A  160A  118A  2223  160A  118A  	fcall	_lg_delete_matrix_row
  8169                           
  8170                           ;logic.h: 57: dbg_print_MATRIX8x8(0, "After delete MATRIX8x8", &g_matrix8x8);
  8171  162F  30FD               	movlw	low (STR_27| (0+32768))
  8172  1630  1283               	bcf	3,5	;RP0=0, select bank0
  8173  1631  1303               	bcf	3,6	;RP1=0, select bank0
  8174  1632  00B3               	movwf	dbg_print_MATRIX8x8@lable
  8175  1633  308A               	movlw	high (STR_27| (0+32768))
  8176  1634  00B4               	movwf	dbg_print_MATRIX8x8@lable+1
  8177  1635  30CD               	movlw	(low (_g_matrix8x8| 0))& (0+255)
  8178  1636  00C0               	movwf	??_lg_delete_matrix
  8179  1637  0840               	movf	??_lg_delete_matrix,w
  8180  1638  00B5               	movwf	dbg_print_MATRIX8x8@matrix
  8181  1639  3000               	movlw	0
  8182  163A  120A  158A  2757  160A  118A  	fcall	_dbg_print_MATRIX8x8
  8183                           
  8184                           ;logic.h: 58: count++;
  8185  163F  3001               	movlw	1
  8186  1640  1283               	bcf	3,5	;RP0=0, select bank0
  8187  1641  1303               	bcf	3,6	;RP1=0, select bank0
  8188  1642  00C0               	movwf	??_lg_delete_matrix
  8189  1643  0840               	movf	??_lg_delete_matrix,w
  8190  1644  07C2               	addwf	lg_delete_matrix@count,f
  8191                           
  8192                           ;logic.h: 59: }
  8193  1645  2DFA               	goto	l4218
  8194  1646                     l4216:	
  8195                           
  8196                           ;logic.h: 60: else
  8197                           ;logic.h: 61: {
  8198                           ;logic.h: 62: row--;
  8199  1646  30FF               	movlw	255
  8200  1647  1283               	bcf	3,5	;RP0=0, select bank0
  8201  1648  1303               	bcf	3,6	;RP1=0, select bank0
  8202  1649  00C0               	movwf	??_lg_delete_matrix
  8203  164A  0840               	movf	??_lg_delete_matrix,w
  8204  164B  07C4               	addwf	lg_delete_matrix@row,f
  8205  164C  2DFA               	goto	l4218
  8206  164D                     __end_of_lg_delete_matrix:	
  8207                           ;logic.h: 66: return count;
  8208                           ;	Return value of _lg_delete_matrix is never used
  8209                           
  8210                           ;logic.h: 63: }
  8211                           ;logic.h: 64: }
  8212                           ;logic.h: 65: do { if(0) { sprintf(g_debug, "delete_matrix count = %d""\r\n", count); US
      +                          ARTWriteString(g_debug); } } while (0);;
  8213                           
  8214                           
  8215                           	psect	text31
  8216  1025                     __ptext31:	
  8217 ;; *************** function _lg_is_row_full *****************
  8218 ;; Defined at:
  8219 ;;		line 16 in file "../logic.h"
  8220 ;; Parameters:    Size  Location     Type
  8221 ;;  matrix          1    wreg     PTR const struct .
  8222 ;;		 -> temp_matrix8x8(8), g_matrix8x8(8), 
  8223 ;;  row             1   27[BANK0 ] unsigned char 
  8224 ;; Auto vars:     Size  Location     Type
  8225 ;;  matrix          1   31[BANK0 ] PTR const struct .
  8226 ;;		 -> temp_matrix8x8(8), g_matrix8x8(8), 
  8227 ;; Return value:  Size  Location     Type
  8228 ;;                  1    wreg      unsigned char 
  8229 ;; Registers used:
  8230 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  8231 ;; Tracked objects:
  8232 ;;		On entry : 0/0
  8233 ;;		On exit  : 0/0
  8234 ;;		Unchanged: 0/0
  8235 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8236 ;;      Params:         0       1       0       0       0
  8237 ;;      Locals:         0       1       0       0       0
  8238 ;;      Temps:          0       3       0       0       0
  8239 ;;      Totals:         0       5       0       0       0
  8240 ;;Total ram usage:        5 bytes
  8241 ;; Hardware stack levels used:    1
  8242 ;; Hardware stack levels required when called:    4
  8243 ;; This function calls:
  8244 ;;		_USARTWriteString
  8245 ;;		_dbg_print_MATRIX8x8
  8246 ;;		_sprintf
  8247 ;; This function is called by:
  8248 ;;		_lg_delete_matrix
  8249 ;;		_lg_get_num_removed_rows
  8250 ;; This function uses a non-reentrant model
  8251 ;;
  8252                           
  8253                           
  8254                           ;psect for function _lg_is_row_full
  8255  1025                     _lg_is_row_full:	
  8256                           
  8257                           ;incstack = 0
  8258                           ; Regs used in _lg_is_row_full: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  8259                           ;lg_is_row_full@matrix stored from wreg
  8260  1025  1283               	bcf	3,5	;RP0=0, select bank0
  8261  1026  1303               	bcf	3,6	;RP1=0, select bank0
  8262  1027  00BF               	movwf	lg_is_row_full@matrix
  8263                           
  8264                           ;logic.h: 18: if(matrix->row[row] == (uint8_t)0xFF)
  8265  1028  083B               	movf	lg_is_row_full@row,w
  8266  1029  073F               	addwf	lg_is_row_full@matrix,w
  8267  102A  00BC               	movwf	??_lg_is_row_full
  8268  102B  083C               	movf	??_lg_is_row_full,w
  8269  102C  0084               	movwf	4
  8270  102D  1383               	bcf	3,7	;select IRP bank0
  8271  102E  0A00               	incf	0,w
  8272  102F  1D03               	btfss	3,2
  8273  1030  2841               	goto	l3456
  8274                           
  8275                           ;logic.h: 22: dbg_print_MATRIX8x8(0, "Row is full", matrix);
  8276                           
  8277                           ;logic.h: 21: do { if(0) { sprintf(g_debug, "row(%d) is full""\r\n", row); USARTWriteStr
      +                          ing(g_debug); } } while (0);;
  8278                           
  8279                           ;logic.h: 19: {
  8280                           ;logic.h: 20: do { if(0) { sprintf(g_debug, "row = %X""\r\n", matrix->row[row]); USARTWr
      +                          iteString(g_debug); } } while (0);;
  8281  1031  307E               	movlw	low (STR_25| (0+32768))
  8282  1032  1283               	bcf	3,5	;RP0=0, select bank0
  8283  1033  1303               	bcf	3,6	;RP1=0, select bank0
  8284  1034  00B3               	movwf	dbg_print_MATRIX8x8@lable
  8285  1035  308C               	movlw	high (STR_25| (0+32768))
  8286  1036  00B4               	movwf	dbg_print_MATRIX8x8@lable+1
  8287  1037  083F               	movf	lg_is_row_full@matrix,w
  8288  1038  00BC               	movwf	??_lg_is_row_full
  8289  1039  083C               	movf	??_lg_is_row_full,w
  8290  103A  00B5               	movwf	dbg_print_MATRIX8x8@matrix
  8291  103B  3000               	movlw	0
  8292  103C  120A  158A  2757   	fcall	_dbg_print_MATRIX8x8
  8293                           
  8294                           ;logic.h: 23: return 1;
  8295  103F  3001               	movlw	1
  8296  1040  0008               	return
  8297  1041                     l3456:	
  8298                           
  8299                           ;logic.h: 24: }
  8300                           ;logic.h: 25: return 0;
  8301  1041  3000               	movlw	0
  8302  1042  0008               	return
  8303  1043                     __end_of_lg_is_row_full:	
  8304                           
  8305                           	psect	text32
  8306  0F57                     __ptext32:	
  8307 ;; *************** function _dbg_print_MATRIX8x8 *****************
  8308 ;; Defined at:
  8309 ;;		line 45 in file "../debug.h"
  8310 ;; Parameters:    Size  Location     Type
  8311 ;;  enable          1    wreg     unsigned char 
  8312 ;;  lable           2   19[BANK0 ] PTR const unsigned char 
  8313 ;;		 -> STR_81(12), STR_67(15), STR_50(22), STR_49(23), 
  8314 ;;		 -> STR_27(23), STR_26(24), STR_25(12), ROM(8192), 
  8315 ;;  matrix          1   21[BANK0 ] PTR const struct .
  8316 ;;		 -> temp_matrix8x8(8), g_matrix8x8(8), 
  8317 ;; Auto vars:     Size  Location     Type
  8318 ;;  enable          1   24[BANK0 ] unsigned char 
  8319 ;;  col             1   26[BANK0 ] unsigned char 
  8320 ;;  row             1   25[BANK0 ] unsigned char 
  8321 ;; Return value:  Size  Location     Type
  8322 ;;                  1    wreg      void 
  8323 ;; Registers used:
  8324 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  8325 ;; Tracked objects:
  8326 ;;		On entry : 0/0
  8327 ;;		On exit  : 0/0
  8328 ;;		Unchanged: 0/0
  8329 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8330 ;;      Params:         0       3       0       0       0
  8331 ;;      Locals:         0       3       0       0       0
  8332 ;;      Temps:          0       2       0       0       0
  8333 ;;      Totals:         0       8       0       0       0
  8334 ;;Total ram usage:        8 bytes
  8335 ;; Hardware stack levels used:    1
  8336 ;; Hardware stack levels required when called:    3
  8337 ;; This function calls:
  8338 ;;		_USARTWriteString
  8339 ;;		_get_matrix_bit
  8340 ;;		_sprintf
  8341 ;; This function is called by:
  8342 ;;		_dbg_print_Screen
  8343 ;;		_lg_is_row_full
  8344 ;;		_lg_delete_matrix
  8345 ;;		_lg_merge
  8346 ;;		_lg_find_best_solution
  8347 ;;		_main
  8348 ;; This function uses a non-reentrant model
  8349 ;;
  8350                           
  8351                           
  8352                           ;psect for function _dbg_print_MATRIX8x8
  8353  0F57                     _dbg_print_MATRIX8x8:	
  8354                           
  8355                           ;incstack = 0
  8356                           ; Regs used in _dbg_print_MATRIX8x8: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack
      +                          ]
  8357                           ;dbg_print_MATRIX8x8@enable stored from wreg
  8358  0F57  1283               	bcf	3,5	;RP0=0, select bank0
  8359  0F58  1303               	bcf	3,6	;RP1=0, select bank0
  8360  0F59  00B8               	movwf	dbg_print_MATRIX8x8@enable
  8361  0F5A  0838               	movf	dbg_print_MATRIX8x8@enable,w
  8362  0F5B  1903               	btfsc	3,2
  8363  0F5C  0008               	return
  8364                           
  8365                           ;debug.h: 48: {
  8366                           ;debug.h: 49: if(lable != (0))
  8367  0F5D  0833               	movf	dbg_print_MATRIX8x8@lable,w
  8368  0F5E  0434               	iorwf	dbg_print_MATRIX8x8@lable+1,w
  8369  0F5F  1903               	btfsc	3,2
  8370  0F60  2F83               	goto	l3252
  8371                           
  8372                           ;debug.h: 50: {
  8373                           ;debug.h: 51: do { if(1) { sprintf(g_debug, lable); USARTWriteString(g_debug); } } while
      +                           (0);;
  8374  0F61  0833               	movf	dbg_print_MATRIX8x8@lable,w
  8375  0F62  00A0               	movwf	sprintf@f
  8376  0F63  0834               	movf	dbg_print_MATRIX8x8@lable+1,w
  8377  0F64  00A1               	movwf	sprintf@f+1
  8378  0F65  30AD               	movlw	(low (_g_debug| 0))& (0+255)
  8379  0F66  120A  118A  2250  120A  158A  	fcall	_sprintf
  8380  0F6B  30AD               	movlw	(low (_g_debug| 0))& (0+255)
  8381  0F6C  120A  118A  2004  120A  158A  	fcall	_USARTWriteString
  8382                           
  8383                           ;debug.h: 52: do { if(1) { sprintf(g_debug, ":""\r\n"); USARTWriteString(g_debug); } } w
      +                          hile (0);;
  8384  0F71  30C5               	movlw	low (STR_1| (0+32768))
  8385  0F72  1283               	bcf	3,5	;RP0=0, select bank0
  8386  0F73  1303               	bcf	3,6	;RP1=0, select bank0
  8387  0F74  00A0               	movwf	sprintf@f
  8388  0F75  308C               	movlw	high (STR_1| (0+32768))
  8389  0F76  00A1               	movwf	sprintf@f+1
  8390  0F77  30AD               	movlw	(low (_g_debug| 0))& (0+255)
  8391  0F78  120A  118A  2250  120A  158A  	fcall	_sprintf
  8392  0F7D  30AD               	movlw	(low (_g_debug| 0))& (0+255)
  8393  0F7E  120A  118A  2004  120A  158A  	fcall	_USARTWriteString
  8394  0F83                     l3252:	
  8395                           ;debug.h: 53: }
  8396                           ;debug.h: 54: do { if(1) { sprintf(g_debug, "<<<<<<<<<<<<<<<<<<<<MATRIX8x8""\r\n"); USAR
      +                          TWriteString(g_debug); } } while (0);;
  8397                           
  8398  0F83  302B               	movlw	low (STR_8| (0+32768))
  8399  0F84  1283               	bcf	3,5	;RP0=0, select bank0
  8400  0F85  1303               	bcf	3,6	;RP1=0, select bank0
  8401  0F86  00A0               	movwf	sprintf@f
  8402  0F87  3089               	movlw	high (STR_8| (0+32768))
  8403  0F88  00A1               	movwf	sprintf@f+1
  8404  0F89  30AD               	movlw	(low (_g_debug| 0))& (0+255)
  8405  0F8A  120A  118A  2250  120A  158A  	fcall	_sprintf
  8406  0F8F  30AD               	movlw	(low (_g_debug| 0))& (0+255)
  8407  0F90  120A  118A  2004  120A  158A  	fcall	_USARTWriteString
  8408                           
  8409                           ;debug.h: 55: for(uint8_t row = 0; row < 8; row++)
  8410  0F95  1283               	bcf	3,5	;RP0=0, select bank0
  8411  0F96  1303               	bcf	3,6	;RP1=0, select bank0
  8412  0F97  01B9               	clrf	dbg_print_MATRIX8x8@row
  8413  0F98  3008               	movlw	8
  8414  0F99  0239               	subwf	dbg_print_MATRIX8x8@row,w
  8415  0F9A  1803               	btfsc	3,0
  8416  0F9B  2FF1               	goto	l3290
  8417  0F9C                     l3262:	
  8418                           
  8419                           ;debug.h: 56: {
  8420                           ;debug.h: 57: for(uint8_t col = 0; col < 8; col++)
  8421  0F9C  01BA               	clrf	dbg_print_MATRIX8x8@col
  8422  0F9D  3008               	movlw	8
  8423  0F9E  023A               	subwf	dbg_print_MATRIX8x8@col,w
  8424  0F9F  1803               	btfsc	3,0
  8425  0FA0  2FD7               	goto	l3282
  8426  0FA1                     l3268:	
  8427                           
  8428                           ;debug.h: 58: {
  8429                           ;debug.h: 59: if(get_matrix_bit((uint8_t*)matrix->row, row, col) == 1)
  8430  0FA1  0835               	movf	dbg_print_MATRIX8x8@matrix,w
  8431  0FA2  00F7               	movwf	get_matrix_bit@byte
  8432  0FA3  3000               	movlw	0
  8433  0FA4  00F8               	movwf	get_matrix_bit@byte+1
  8434  0FA5  0839               	movf	dbg_print_MATRIX8x8@row,w
  8435  0FA6  00B6               	movwf	??_dbg_print_MATRIX8x8
  8436  0FA7  0836               	movf	??_dbg_print_MATRIX8x8,w
  8437  0FA8  00F9               	movwf	get_matrix_bit@row
  8438  0FA9  083A               	movf	dbg_print_MATRIX8x8@col,w
  8439  0FAA  00B7               	movwf	??_dbg_print_MATRIX8x8+1
  8440  0FAB  0837               	movf	??_dbg_print_MATRIX8x8+1,w
  8441  0FAC  00FA               	movwf	get_matrix_bit@col
  8442  0FAD  160A  158A  273B  120A  158A  	fcall	_get_matrix_bit
  8443  0FB2  3A01               	xorlw	1
  8444  0FB3  1D03               	skipz
  8445  0FB4  2FBB               	goto	l3274
  8446                           
  8447                           ;debug.h: 60: {
  8448                           ;debug.h: 61: do { if(1) { sprintf(g_debug, "*"); USARTWriteString(g_debug); } } while (
      +                          0);;
  8449  0FB5  30C9               	movlw	low (STR_3| (0+32768))
  8450  0FB6  1283               	bcf	3,5	;RP0=0, select bank0
  8451  0FB7  1303               	bcf	3,6	;RP1=0, select bank0
  8452  0FB8  00A0               	movwf	sprintf@f
  8453  0FB9  308C               	movlw	high (STR_3| (0+32768))
  8454  0FBA  2FC0               	goto	L19
  8455  0FBB                     l3274:	
  8456                           ;debug.h: 63: else
  8457                           ;debug.h: 64: {
  8458                           ;debug.h: 65: do { if(1) { sprintf(g_debug, "_"); USARTWriteString(g_debug); } } while (
      +                          0);;
  8459                           
  8460                           ;debug.h: 62: }
  8461                           
  8462  0FBB  30CB               	movlw	low (STR_4| (0+32768))
  8463  0FBC  1283               	bcf	3,5	;RP0=0, select bank0
  8464  0FBD  1303               	bcf	3,6	;RP1=0, select bank0
  8465  0FBE  00A0               	movwf	sprintf@f
  8466  0FBF  308C               	movlw	high (STR_4| (0+32768))
  8467  0FC0                     L19:	
  8468  0FC0  00A1               	movwf	sprintf@f+1
  8469  0FC1  30AD               	movlw	(low (_g_debug| 0))& (0+255)
  8470  0FC2  120A  118A  2250  120A  158A  	fcall	_sprintf
  8471  0FC7  30AD               	movlw	(low (_g_debug| 0))& (0+255)
  8472  0FC8  120A  118A  2004  120A  158A  	fcall	_USARTWriteString
  8473  0FCD  3001               	movlw	1
  8474  0FCE  1283               	bcf	3,5	;RP0=0, select bank0
  8475  0FCF  1303               	bcf	3,6	;RP1=0, select bank0
  8476  0FD0  00B6               	movwf	??_dbg_print_MATRIX8x8
  8477  0FD1  0836               	movf	??_dbg_print_MATRIX8x8,w
  8478  0FD2  07BA               	addwf	dbg_print_MATRIX8x8@col,f
  8479  0FD3  3008               	movlw	8
  8480  0FD4  023A               	subwf	dbg_print_MATRIX8x8@col,w
  8481  0FD5  1C03               	skipc
  8482  0FD6  2FA1               	goto	l3268
  8483  0FD7                     l3282:	
  8484                           ;debug.h: 66: }
  8485                           ;debug.h: 67: }
  8486                           ;debug.h: 68: do { if(1) { sprintf(g_debug, """\r\n"); USARTWriteString(g_debug); } } wh
      +                          ile (0);;
  8487                           
  8488  0FD7  30EA               	movlw	low ((STR_74+12)| (0+32768))
  8489  0FD8  00A0               	movwf	sprintf@f
  8490  0FD9  308B               	movlw	high ((STR_74+12)| (0+32768))
  8491  0FDA  00A1               	movwf	sprintf@f+1
  8492  0FDB  30AD               	movlw	(low (_g_debug| 0))& (0+255)
  8493  0FDC  120A  118A  2250  120A  158A  	fcall	_sprintf
  8494  0FE1  30AD               	movlw	(low (_g_debug| 0))& (0+255)
  8495  0FE2  120A  118A  2004  120A  158A  	fcall	_USARTWriteString
  8496  0FE7  3001               	movlw	1
  8497  0FE8  1283               	bcf	3,5	;RP0=0, select bank0
  8498  0FE9  1303               	bcf	3,6	;RP1=0, select bank0
  8499  0FEA  00B6               	movwf	??_dbg_print_MATRIX8x8
  8500  0FEB  0836               	movf	??_dbg_print_MATRIX8x8,w
  8501  0FEC  07B9               	addwf	dbg_print_MATRIX8x8@row,f
  8502  0FED  3008               	movlw	8
  8503  0FEE  0239               	subwf	dbg_print_MATRIX8x8@row,w
  8504  0FEF  1C03               	skipc
  8505  0FF0  2F9C               	goto	l3262
  8506  0FF1                     l3290:	
  8507                           ;debug.h: 69: }
  8508                           ;debug.h: 70: do { if(1) { sprintf(g_debug, ">>>>>>>>>>>>>>>>>>>>""\r\n"); USARTWriteStr
      +                          ing(g_debug); } } while (0);;
  8509                           
  8510  0FF1  30B8               	movlw	low (STR_6| (0+32768))
  8511  0FF2  00A0               	movwf	sprintf@f
  8512  0FF3  308A               	movlw	high (STR_6| (0+32768))
  8513  0FF4  00A1               	movwf	sprintf@f+1
  8514  0FF5  30AD               	movlw	(low (_g_debug| 0))& (0+255)
  8515  0FF6  120A  118A  2250  120A  158A  	fcall	_sprintf
  8516  0FFB  30AD               	movlw	(low (_g_debug| 0))& (0+255)
  8517  0FFC  120A  118A  2004   	fcall	_USARTWriteString
  8518  0FFF  0008               	return
  8519  1000                     __end_of_dbg_print_MATRIX8x8:	
  8520                           
  8521                           	psect	text33
  8522  1223                     __ptext33:	
  8523 ;; *************** function _lg_delete_matrix_row *****************
  8524 ;; Defined at:
  8525 ;;		line 27 in file "../logic.h"
  8526 ;; Parameters:    Size  Location     Type
  8527 ;;  matrix          1    wreg     PTR struct .
  8528 ;;		 -> g_matrix8x8(8), 
  8529 ;;  row             1    0[COMMON] unsigned char 
  8530 ;; Auto vars:     Size  Location     Type
  8531 ;;  matrix          1    4[COMMON] PTR struct .
  8532 ;;		 -> g_matrix8x8(8), 
  8533 ;;  i               1    5[COMMON] char 
  8534 ;; Return value:  Size  Location     Type
  8535 ;;                  1    wreg      void 
  8536 ;; Registers used:
  8537 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  8538 ;; Tracked objects:
  8539 ;;		On entry : 0/0
  8540 ;;		On exit  : 0/0
  8541 ;;		Unchanged: 0/0
  8542 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8543 ;;      Params:         1       0       0       0       0
  8544 ;;      Locals:         2       0       0       0       0
  8545 ;;      Temps:          3       0       0       0       0
  8546 ;;      Totals:         6       0       0       0       0
  8547 ;;Total ram usage:        6 bytes
  8548 ;; Hardware stack levels used:    1
  8549 ;; This function calls:
  8550 ;;		Nothing
  8551 ;; This function is called by:
  8552 ;;		_lg_delete_matrix
  8553 ;; This function uses a non-reentrant model
  8554 ;;
  8555                           
  8556                           
  8557                           ;psect for function _lg_delete_matrix_row
  8558  1223                     _lg_delete_matrix_row:	
  8559                           
  8560                           ;incstack = 0
  8561                           ; Regs used in _lg_delete_matrix_row: [wreg-fsr0h+status,2+status,0]
  8562                           ;lg_delete_matrix_row@matrix stored from wreg
  8563  1223  00F4               	movwf	lg_delete_matrix_row@matrix
  8564                           
  8565                           ;logic.h: 29: for(int8_t i = 8 - 1; i >= 0; i--)
  8566  1224  3007               	movlw	7
  8567  1225  00F1               	movwf	??_lg_delete_matrix_row
  8568  1226  0871               	movf	??_lg_delete_matrix_row,w
  8569  1227  00F5               	movwf	lg_delete_matrix_row@i
  8570  1228                     L20:	
  8571  1228  1BF5               	btfsc	lg_delete_matrix_row@i,7
  8572  1229  0008               	return
  8573                           
  8574                           ;logic.h: 30: {
  8575                           ;logic.h: 31: if(i <= row)
  8576  122A  0875               	movf	lg_delete_matrix_row@i,w
  8577  122B  00F1               	movwf	??_lg_delete_matrix_row
  8578  122C  01F2               	clrf	??_lg_delete_matrix_row+1
  8579  122D  1BF1               	btfsc	??_lg_delete_matrix_row,7
  8580  122E  03F2               	decf	??_lg_delete_matrix_row+1,f
  8581  122F  0872               	movf	??_lg_delete_matrix_row+1,w
  8582  1230  3A80               	xorlw	128
  8583  1231  3C80               	sublw	128
  8584  1232  1D03               	skipz
  8585  1233  2A36               	goto	u3265
  8586  1234  0871               	movf	??_lg_delete_matrix_row,w
  8587  1235  0270               	subwf	lg_delete_matrix_row@row,w
  8588  1236                     u3265:	
  8589  1236  1C03               	skipc
  8590  1237  2A55               	goto	l3656
  8591                           
  8592                           ;logic.h: 32: {
  8593                           ;logic.h: 33: if(i > 0)
  8594  1238  0875               	movf	lg_delete_matrix_row@i,w
  8595  1239  3A80               	xorlw	128
  8596  123A  3E7F               	addlw	-129
  8597  123B  1C03               	skipc
  8598  123C  2A4E               	goto	l3654
  8599                           
  8600                           ;logic.h: 34: {
  8601                           ;logic.h: 35: matrix->row[i] = matrix->row[i - 1];
  8602  123D  0875               	movf	lg_delete_matrix_row@i,w
  8603  123E  3EFF               	addlw	255
  8604  123F  0774               	addwf	lg_delete_matrix_row@matrix,w
  8605  1240  00F1               	movwf	??_lg_delete_matrix_row
  8606  1241  0871               	movf	??_lg_delete_matrix_row,w
  8607  1242  0084               	movwf	4
  8608  1243  1383               	bcf	3,7	;select IRP bank0
  8609  1244  0800               	movf	0,w
  8610  1245  00F2               	movwf	??_lg_delete_matrix_row+1
  8611  1246  0875               	movf	lg_delete_matrix_row@i,w
  8612  1247  0774               	addwf	lg_delete_matrix_row@matrix,w
  8613  1248  00F3               	movwf	??_lg_delete_matrix_row+2
  8614  1249  0873               	movf	??_lg_delete_matrix_row+2,w
  8615  124A  0084               	movwf	4
  8616  124B  0872               	movf	??_lg_delete_matrix_row+1,w
  8617  124C  0080               	movwf	0
  8618                           
  8619                           ;logic.h: 36: }
  8620  124D  2A55               	goto	l3656
  8621  124E                     l3654:	
  8622                           
  8623                           ;logic.h: 37: else
  8624                           ;logic.h: 38: {
  8625                           ;logic.h: 39: matrix->row[i] = (uint8_t)0x0;
  8626  124E  0875               	movf	lg_delete_matrix_row@i,w
  8627  124F  0774               	addwf	lg_delete_matrix_row@matrix,w
  8628  1250  00F1               	movwf	??_lg_delete_matrix_row
  8629  1251  0871               	movf	??_lg_delete_matrix_row,w
  8630  1252  0084               	movwf	4
  8631  1253  1383               	bcf	3,7	;select IRP bank0
  8632  1254  0180               	clrf	0
  8633  1255                     l3656:	
  8634  1255  30FF               	movlw	255
  8635  1256  00F1               	movwf	??_lg_delete_matrix_row
  8636  1257  0871               	movf	??_lg_delete_matrix_row,w
  8637  1258  07F5               	addwf	lg_delete_matrix_row@i,f
  8638  1259  2A28               	goto	L20
  8639  125A                     __end_of_lg_delete_matrix_row:	
  8640                           
  8641                           	psect	text34
  8642  1F59                     __ptext34:	
  8643 ;; *************** function _lg_clear_matrix *****************
  8644 ;; Defined at:
  8645 ;;		line 11 in file "../logic.h"
  8646 ;; Parameters:    Size  Location     Type
  8647 ;;		None
  8648 ;; Auto vars:     Size  Location     Type
  8649 ;;		None
  8650 ;; Return value:  Size  Location     Type
  8651 ;;                  1    wreg      void 
  8652 ;; Registers used:
  8653 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  8654 ;; Tracked objects:
  8655 ;;		On entry : 0/0
  8656 ;;		On exit  : 0/0
  8657 ;;		Unchanged: 0/0
  8658 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8659 ;;      Params:         0       0       0       0       0
  8660 ;;      Locals:         0       0       0       0       0
  8661 ;;      Temps:          0       0       0       0       0
  8662 ;;      Totals:         0       0       0       0       0
  8663 ;;Total ram usage:        0 bytes
  8664 ;; Hardware stack levels used:    1
  8665 ;; Hardware stack levels required when called:    6
  8666 ;; This function calls:
  8667 ;;		_hal_print_Screen
  8668 ;;		_memset
  8669 ;; This function is called by:
  8670 ;;		_main
  8671 ;; This function uses a non-reentrant model
  8672 ;;
  8673                           
  8674                           
  8675                           ;psect for function _lg_clear_matrix
  8676  1F59                     _lg_clear_matrix:	
  8677                           
  8678                           ;logic.h: 13: memset(&g_matrix8x8, 0, sizeof(MATRIX8x8));
  8679                           
  8680                           ;incstack = 0
  8681                           ; Regs used in _lg_clear_matrix: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  8682  1F59  3000               	movlw	0
  8683  1F5A  00F0               	movwf	memset@c
  8684  1F5B  00F1               	movwf	memset@c+1
  8685  1F5C  3008               	movlw	8
  8686  1F5D  00F2               	movwf	memset@n
  8687  1F5E  3000               	movlw	0
  8688  1F5F  00F3               	movwf	memset@n+1
  8689  1F60  30CD               	movlw	(low (_g_matrix8x8| 0))& (0+255)
  8690  1F61  160A  118A  2009  160A  158A  	fcall	_memset
  8691                           
  8692                           ;logic.h: 14: hal_print_Screen();
  8693  1F66  160A  158A  2716   	fcall	_hal_print_Screen
  8694  1F69  0008               	return
  8695  1F6A                     __end_of_lg_clear_matrix:	
  8696                           
  8697                           	psect	text35
  8698  1009                     __ptext35:	
  8699 ;; *************** function _memset *****************
  8700 ;; Defined at:
  8701 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\memset.c"
  8702 ;; Parameters:    Size  Location     Type
  8703 ;;  p1              1    wreg     PTR void 
  8704 ;;		 -> g_matrix8x8(8), 
  8705 ;;  c               2    0[COMMON] int 
  8706 ;;  n               2    2[COMMON] unsigned int 
  8707 ;; Auto vars:     Size  Location     Type
  8708 ;;  p1              1    5[COMMON] PTR void 
  8709 ;;		 -> g_matrix8x8(8), 
  8710 ;;  p               1    6[COMMON] PTR unsigned char 
  8711 ;;		 -> g_matrix8x8(8), 
  8712 ;; Return value:  Size  Location     Type
  8713 ;;                  1    wreg      PTR void 
  8714 ;; Registers used:
  8715 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  8716 ;; Tracked objects:
  8717 ;;		On entry : 0/0
  8718 ;;		On exit  : 0/0
  8719 ;;		Unchanged: 0/0
  8720 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8721 ;;      Params:         4       0       0       0       0
  8722 ;;      Locals:         2       0       0       0       0
  8723 ;;      Temps:          1       0       0       0       0
  8724 ;;      Totals:         7       0       0       0       0
  8725 ;;Total ram usage:        7 bytes
  8726 ;; Hardware stack levels used:    1
  8727 ;; This function calls:
  8728 ;;		Nothing
  8729 ;; This function is called by:
  8730 ;;		_lg_clear_matrix
  8731 ;; This function uses a non-reentrant model
  8732 ;;
  8733                           
  8734                           
  8735                           ;psect for function _memset
  8736  1009                     _memset:	
  8737                           
  8738                           ;incstack = 0
  8739                           ; Regs used in _memset: [wreg-fsr0h+status,2+status,0]
  8740                           ;memset@p1 stored from wreg
  8741  1009  00F5               	movwf	memset@p1
  8742  100A  0875               	movf	memset@p1,w
  8743  100B  00F4               	movwf	??_memset
  8744  100C  0874               	movf	??_memset,w
  8745  100D  00F6               	movwf	memset@p
  8746  100E                     l3640:	
  8747  100E  3001               	movlw	1
  8748  100F  02F2               	subwf	memset@n,f
  8749  1010  3000               	movlw	0
  8750  1011  1C03               	skipc
  8751  1012  03F3               	decf	memset@n+1,f
  8752  1013  02F3               	subwf	memset@n+1,f
  8753  1014  0A72               	incf	memset@n,w
  8754  1015  1903               	btfsc	3,2
  8755  1016  0A73               	incf	memset@n+1,w
  8756  1017  1903               	btfsc	3,2
  8757  1018  0008               	return
  8758  1019  0870               	movf	memset@c,w
  8759  101A  00F4               	movwf	??_memset
  8760  101B  0876               	movf	memset@p,w
  8761  101C  0084               	movwf	4
  8762  101D  0874               	movf	??_memset,w
  8763  101E  1383               	bcf	3,7	;select IRP bank0
  8764  101F  0080               	movwf	0
  8765  1020  3001               	movlw	1
  8766  1021  00F4               	movwf	??_memset
  8767  1022  0874               	movf	??_memset,w
  8768  1023  07F6               	addwf	memset@p,f
  8769  1024  280E               	goto	l3640
  8770  1025                     __end_of_memset:	
  8771                           ;	Return value of _memset is never used
  8772                           
  8773                           
  8774                           	psect	text36
  8775  1F16                     __ptext36:	
  8776 ;; *************** function _hal_print_Screen *****************
  8777 ;; Defined at:
  8778 ;;		line 7 in file "../hal.h"
  8779 ;; Parameters:    Size  Location     Type
  8780 ;;		None
  8781 ;; Auto vars:     Size  Location     Type
  8782 ;;		None
  8783 ;; Return value:  Size  Location     Type
  8784 ;;                  1    wreg      void 
  8785 ;; Registers used:
  8786 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  8787 ;; Tracked objects:
  8788 ;;		On entry : 0/0
  8789 ;;		On exit  : 0/0
  8790 ;;		Unchanged: 0/0
  8791 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8792 ;;      Params:         0       0       0       0       0
  8793 ;;      Locals:         0       0       0       0       0
  8794 ;;      Temps:          0       0       0       0       0
  8795 ;;      Totals:         0       0       0       0       0
  8796 ;;Total ram usage:        0 bytes
  8797 ;; Hardware stack levels used:    1
  8798 ;; Hardware stack levels required when called:    5
  8799 ;; This function calls:
  8800 ;;		_hal_print_MATRIX8x8
  8801 ;; This function is called by:
  8802 ;;		_lg_clear_matrix
  8803 ;;		_main
  8804 ;; This function uses a non-reentrant model
  8805 ;;
  8806                           
  8807                           
  8808                           ;psect for function _hal_print_Screen
  8809  1F16                     _hal_print_Screen:	
  8810                           
  8811                           ;hal.h: 9: hal_print_MATRIX8x8(&g_matrix8x8);
  8812                           
  8813                           ;incstack = 0
  8814                           ; Regs used in _hal_print_Screen: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  8815  1F16  30CD               	movlw	(low (_g_matrix8x8| 0))& (0+255)
  8816  1F17  160A  158A  278D   	fcall	_hal_print_MATRIX8x8
  8817  1F1A  0008               	return
  8818  1F1B                     __end_of_hal_print_Screen:	
  8819                           
  8820                           	psect	text37
  8821  1F8D                     __ptext37:	
  8822 ;; *************** function _hal_print_MATRIX8x8 *****************
  8823 ;; Defined at:
  8824 ;;		line 35 in file "../hal_max7219.h"
  8825 ;; Parameters:    Size  Location     Type
  8826 ;;  matrix88        1    wreg     PTR const struct .
  8827 ;;		 -> g_matrix8x8(8), 
  8828 ;; Auto vars:     Size  Location     Type
  8829 ;;  matrix88        1    6[BANK0 ] PTR const struct .
  8830 ;;		 -> g_matrix8x8(8), 
  8831 ;;  matrix7219      8    7[BANK0 ] struct .
  8832 ;; Return value:  Size  Location     Type
  8833 ;;                  1    wreg      void 
  8834 ;; Registers used:
  8835 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  8836 ;; Tracked objects:
  8837 ;;		On entry : 0/0
  8838 ;;		On exit  : 0/0
  8839 ;;		Unchanged: 0/0
  8840 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8841 ;;      Params:         0       0       0       0       0
  8842 ;;      Locals:         0       9       0       0       0
  8843 ;;      Temps:          1       0       0       0       0
  8844 ;;      Totals:         1       9       0       0       0
  8845 ;;Total ram usage:       10 bytes
  8846 ;; Hardware stack levels used:    1
  8847 ;; Hardware stack levels required when called:    4
  8848 ;; This function calls:
  8849 ;;		_hal_MATRIX8x8_to_MATRIX7219
  8850 ;;		_hal_print_MATRIX7219
  8851 ;; This function is called by:
  8852 ;;		_hal_print_Screen
  8853 ;; This function uses a non-reentrant model
  8854 ;;
  8855                           
  8856                           
  8857                           ;psect for function _hal_print_MATRIX8x8
  8858  1F8D                     _hal_print_MATRIX8x8:	
  8859                           
  8860                           ;incstack = 0
  8861                           ; Regs used in _hal_print_MATRIX8x8: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack
      +                          ]
  8862                           ;hal_print_MATRIX8x8@matrix88 stored from wreg
  8863  1F8D  1283               	bcf	3,5	;RP0=0, select bank0
  8864  1F8E  1303               	bcf	3,6	;RP1=0, select bank0
  8865  1F8F  00A6               	movwf	hal_print_MATRIX8x8@matrix88
  8866                           
  8867                           ;hal_max7219.h: 37: MATRIX7219 matrix7219;
  8868                           ;hal_max7219.h: 38: hal_MATRIX8x8_to_MATRIX7219(matrix88, &matrix7219);
  8869  1F90  3027               	movlw	(low (hal_print_MATRIX8x8@matrix7219| 0))& (0+255)
  8870  1F91  00FD               	movwf	??_hal_print_MATRIX8x8
  8871  1F92  087D               	movf	??_hal_print_MATRIX8x8,w
  8872  1F93  00FC               	movwf	hal_MATRIX8x8_to_MATRIX7219@matrix7219
  8873  1F94  0826               	movf	hal_print_MATRIX8x8@matrix88,w
  8874  1F95  160A  118A  24A3  160A  158A  	fcall	_hal_MATRIX8x8_to_MATRIX7219
  8875                           
  8876                           ;hal_max7219.h: 39: hal_print_MATRIX7219(&matrix7219);
  8877  1F9A  3027               	movlw	(low (hal_print_MATRIX8x8@matrix7219| 0))& (0+255)
  8878  1F9B  160A  158A  27E4   	fcall	_hal_print_MATRIX7219
  8879  1F9E  0008               	return
  8880  1F9F                     __end_of_hal_print_MATRIX8x8:	
  8881                           
  8882                           	psect	text38
  8883  1FE4                     __ptext38:	
  8884 ;; *************** function _hal_print_MATRIX7219 *****************
  8885 ;; Defined at:
  8886 ;;		line 26 in file "../hal_max7219.h"
  8887 ;; Parameters:    Size  Location     Type
  8888 ;;  matrix7219      1    wreg     PTR const struct .
  8889 ;;		 -> hal_print_MATRIX8x8@matrix7219(8), 
  8890 ;; Auto vars:     Size  Location     Type
  8891 ;;  matrix7219      1    8[COMMON] PTR const struct .
  8892 ;;		 -> hal_print_MATRIX8x8@matrix7219(8), 
  8893 ;;  col             1    9[COMMON] unsigned char 
  8894 ;; Return value:  Size  Location     Type
  8895 ;;                  1    wreg      void 
  8896 ;; Registers used:
  8897 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8898 ;; Tracked objects:
  8899 ;;		On entry : 0/0
  8900 ;;		On exit  : 0/0
  8901 ;;		Unchanged: 0/0
  8902 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8903 ;;      Params:         0       0       0       0       0
  8904 ;;      Locals:         2       0       0       0       0
  8905 ;;      Temps:          2       0       0       0       0
  8906 ;;      Totals:         4       0       0       0       0
  8907 ;;Total ram usage:        4 bytes
  8908 ;; Hardware stack levels used:    1
  8909 ;; Hardware stack levels required when called:    2
  8910 ;; This function calls:
  8911 ;;		_Write_Byte
  8912 ;; This function is called by:
  8913 ;;		_hal_print_MATRIX8x8
  8914 ;; This function uses a non-reentrant model
  8915 ;;
  8916                           
  8917                           
  8918                           ;psect for function _hal_print_MATRIX7219
  8919  1FE4                     _hal_print_MATRIX7219:	
  8920                           
  8921                           ;incstack = 0
  8922                           ; Regs used in _hal_print_MATRIX7219: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8923                           ;hal_print_MATRIX7219@matrix7219 stored from wreg
  8924  1FE4  00F8               	movwf	hal_print_MATRIX7219@matrix7219
  8925                           
  8926                           ;hal_max7219.h: 28: uint8_t col;
  8927                           ;hal_max7219.h: 30: for (col = 0; col < 8; col++)
  8928  1FE5  01F9               	clrf	hal_print_MATRIX7219@col
  8929  1FE6                     L21:	
  8930  1FE6  3008               	movlw	8
  8931  1FE7  0279               	subwf	hal_print_MATRIX7219@col,w
  8932  1FE8  1803               	btfsc	3,0
  8933  1FE9  0008               	return
  8934                           
  8935                           ;hal_max7219.h: 31: {
  8936                           ;hal_max7219.h: 32: Write_Byte(col + 1, matrix7219->col[col]);
  8937  1FEA  0879               	movf	hal_print_MATRIX7219@col,w
  8938  1FEB  0778               	addwf	hal_print_MATRIX7219@matrix7219,w
  8939  1FEC  00F6               	movwf	??_hal_print_MATRIX7219
  8940  1FED  0876               	movf	??_hal_print_MATRIX7219,w
  8941  1FEE  0084               	movwf	4
  8942  1FEF  1383               	bcf	3,7	;select IRP bank0
  8943  1FF0  0800               	movf	0,w
  8944  1FF1  00F7               	movwf	??_hal_print_MATRIX7219+1
  8945  1FF2  0877               	movf	??_hal_print_MATRIX7219+1,w
  8946  1FF3  00F4               	movwf	Write_Byte@myValue
  8947  1FF4  0879               	movf	hal_print_MATRIX7219@col,w
  8948  1FF5  3E01               	addlw	1
  8949  1FF6  160A  158A  277B  160A  158A  	fcall	_Write_Byte
  8950  1FFB  3001               	movlw	1
  8951  1FFC  00F6               	movwf	??_hal_print_MATRIX7219
  8952  1FFD  0876               	movf	??_hal_print_MATRIX7219,w
  8953  1FFE  07F9               	addwf	hal_print_MATRIX7219@col,f
  8954  1FFF  2FE6               	goto	L21
  8955  2000                     __end_of_hal_print_MATRIX7219:	
  8956                           
  8957                           	psect	text39
  8958  1F7B                     __ptext39:	
  8959 ;; *************** function _Write_Byte *****************
  8960 ;; Defined at:
  8961 ;;		line 41 in file "../max7219.h"
  8962 ;; Parameters:    Size  Location     Type
  8963 ;;  myColumn        1    wreg     unsigned char 
  8964 ;;  myValue         1    4[COMMON] unsigned char 
  8965 ;; Auto vars:     Size  Location     Type
  8966 ;;  myColumn        1    5[COMMON] unsigned char 
  8967 ;; Return value:  Size  Location     Type
  8968 ;;                  1    wreg      void 
  8969 ;; Registers used:
  8970 ;;		wreg, status,2, status,0, pclath, cstack
  8971 ;; Tracked objects:
  8972 ;;		On entry : 0/0
  8973 ;;		On exit  : 0/0
  8974 ;;		Unchanged: 0/0
  8975 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8976 ;;      Params:         1       0       0       0       0
  8977 ;;      Locals:         1       0       0       0       0
  8978 ;;      Temps:          0       0       0       0       0
  8979 ;;      Totals:         2       0       0       0       0
  8980 ;;Total ram usage:        2 bytes
  8981 ;; Hardware stack levels used:    1
  8982 ;; Hardware stack levels required when called:    1
  8983 ;; This function calls:
  8984 ;;		_SPI1_write
  8985 ;; This function is called by:
  8986 ;;		_max7219_init1
  8987 ;;		_hal_print_MATRIX7219
  8988 ;; This function uses a non-reentrant model
  8989 ;;
  8990                           
  8991                           
  8992                           ;psect for function _Write_Byte
  8993  1F7B                     _Write_Byte:	
  8994                           
  8995                           ;incstack = 0
  8996                           ; Regs used in _Write_Byte: [wreg+status,2+status,0+pclath+cstack]
  8997                           ;Write_Byte@myColumn stored from wreg
  8998  1F7B  00F5               	movwf	Write_Byte@myColumn
  8999                           
  9000                           ;max7219.h: 43: RA2 = 0;
  9001  1F7C  1283               	bcf	3,5	;RP0=0, select bank0
  9002  1F7D  1303               	bcf	3,6	;RP1=0, select bank0
  9003  1F7E  1105               	bcf	5,2	;volatile
  9004                           
  9005                           ;max7219.h: 44: SPI1_write(myColumn);
  9006  1F7F  0875               	movf	Write_Byte@myColumn,w
  9007  1F80  160A  118A  2147  160A  158A  	fcall	_SPI1_write
  9008                           
  9009                           ;max7219.h: 45: SPI1_write(myValue);
  9010  1F85  0874               	movf	Write_Byte@myValue,w
  9011  1F86  160A  118A  2147   	fcall	_SPI1_write
  9012                           
  9013                           ;max7219.h: 46: RA2 = 1;
  9014  1F89  1283               	bcf	3,5	;RP0=0, select bank0
  9015  1F8A  1303               	bcf	3,6	;RP1=0, select bank0
  9016  1F8B  1505               	bsf	5,2	;volatile
  9017  1F8C  0008               	return
  9018  1F8D                     __end_of_Write_Byte:	
  9019                           
  9020                           	psect	text40
  9021  1147                     __ptext40:	
  9022 ;; *************** function _SPI1_write *****************
  9023 ;; Defined at:
  9024 ;;		line 16 in file "../max7219.h"
  9025 ;; Parameters:    Size  Location     Type
  9026 ;;  data            1    wreg     unsigned char 
  9027 ;; Auto vars:     Size  Location     Type
  9028 ;;  data            1    1[COMMON] unsigned char 
  9029 ;;  i               1    3[COMMON] unsigned char 
  9030 ;;  mask            1    2[COMMON] unsigned char 
  9031 ;; Return value:  Size  Location     Type
  9032 ;;                  1    wreg      void 
  9033 ;; Registers used:
  9034 ;;		wreg, status,2, status,0
  9035 ;; Tracked objects:
  9036 ;;		On entry : 0/0
  9037 ;;		On exit  : 0/0
  9038 ;;		Unchanged: 0/0
  9039 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  9040 ;;      Params:         0       0       0       0       0
  9041 ;;      Locals:         3       0       0       0       0
  9042 ;;      Temps:          1       0       0       0       0
  9043 ;;      Totals:         4       0       0       0       0
  9044 ;;Total ram usage:        4 bytes
  9045 ;; Hardware stack levels used:    1
  9046 ;; This function calls:
  9047 ;;		Nothing
  9048 ;; This function is called by:
  9049 ;;		_Write_Byte
  9050 ;; This function uses a non-reentrant model
  9051 ;;
  9052                           
  9053                           
  9054                           ;psect for function _SPI1_write
  9055  1147                     _SPI1_write:	
  9056                           
  9057                           ;incstack = 0
  9058                           ; Regs used in _SPI1_write: [wreg+status,2+status,0]
  9059                           ;SPI1_write@data stored from wreg
  9060  1147  00F1               	movwf	SPI1_write@data
  9061                           
  9062                           ;max7219.h: 18: uint8_t mask = 0b10000000;
  9063  1148  3080               	movlw	128
  9064  1149  00F0               	movwf	??_SPI1_write
  9065  114A  0870               	movf	??_SPI1_write,w
  9066  114B  00F2               	movwf	SPI1_write@mask
  9067                           
  9068                           ;max7219.h: 19: for(uint8_t i = 0; i < 8; i++)
  9069  114C  01F3               	clrf	SPI1_write@i
  9070  114D                     L22:	
  9071  114D  3008               	movlw	8
  9072  114E  0273               	subwf	SPI1_write@i,w
  9073  114F  1803               	btfsc	3,0
  9074  1150  0008               	return
  9075                           
  9076                           ;max7219.h: 20: {
  9077                           ;max7219.h: 21: if((data & mask) > 0)
  9078  1151  0871               	movf	SPI1_write@data,w
  9079  1152  0572               	andwf	SPI1_write@mask,w
  9080  1153  1903               	btfsc	3,2
  9081  1154  2959               	goto	l85
  9082                           
  9083                           ;max7219.h: 22: {
  9084                           ;max7219.h: 23: RA3 = 1;
  9085  1155  1283               	bcf	3,5	;RP0=0, select bank0
  9086  1156  1303               	bcf	3,6	;RP1=0, select bank0
  9087  1157  1585               	bsf	5,3	;volatile
  9088                           
  9089                           ;max7219.h: 25: }
  9090  1158  295C               	goto	l3054
  9091  1159                     l85:	
  9092                           
  9093                           ;max7219.h: 26: else
  9094                           ;max7219.h: 27: {
  9095                           ;max7219.h: 28: RA3 = 0;
  9096  1159  1283               	bcf	3,5	;RP0=0, select bank0
  9097  115A  1303               	bcf	3,6	;RP1=0, select bank0
  9098  115B  1185               	bcf	5,3	;volatile
  9099  115C                     l3054:	
  9100                           
  9101                           ;max7219.h: 30: }
  9102                           ;max7219.h: 31: mask >>= 1;
  9103  115C  1003               	clrc
  9104  115D  0CF2               	rrf	SPI1_write@mask,f
  9105                           
  9106                           ;max7219.h: 32: RA1 = 1;
  9107  115E  1485               	bsf	5,1	;volatile
  9108                           
  9109                           ;max7219.h: 33: _delay((unsigned long)((10)*(20000000/4000000.0)));
  9110  115F  3010               	movlw	16
  9111  1160  00F0               	movwf	??_SPI1_write
  9112  1161                     u4897:	
  9113  1161  0BF0               	decfsz	??_SPI1_write,f
  9114  1162  2961               	goto	u4897
  9115  1163  0000               	nop
  9116                           
  9117                           ;max7219.h: 34: RA1 = 0;
  9118  1164  1283               	bcf	3,5	;RP0=0, select bank0
  9119  1165  1303               	bcf	3,6	;RP1=0, select bank0
  9120  1166  1085               	bcf	5,1	;volatile
  9121                           
  9122                           ;max7219.h: 35: _delay((unsigned long)((10)*(20000000/4000000.0)));
  9123  1167  3010               	movlw	16
  9124  1168  00F0               	movwf	??_SPI1_write
  9125  1169                     u4907:	
  9126  1169  0BF0               	decfsz	??_SPI1_write,f
  9127  116A  2969               	goto	u4907
  9128  116B  0000               	nop
  9129  116C  3001               	movlw	1
  9130  116D  00F0               	movwf	??_SPI1_write
  9131  116E  0870               	movf	??_SPI1_write,w
  9132  116F  07F3               	addwf	SPI1_write@i,f
  9133  1170  294D               	goto	L22
  9134  1171                     __end_of_SPI1_write:	
  9135                           
  9136                           	psect	text41
  9137  14A3                     __ptext41:	
  9138 ;; *************** function _hal_MATRIX8x8_to_MATRIX7219 *****************
  9139 ;; Defined at:
  9140 ;;		line 6 in file "../hal_max7219.h"
  9141 ;; Parameters:    Size  Location     Type
  9142 ;;  matrix8x8       1    wreg     PTR const struct .
  9143 ;;		 -> g_matrix8x8(8), 
  9144 ;;  matrix7219      1   12[COMMON] PTR struct .
  9145 ;;		 -> hal_print_MATRIX8x8@matrix7219(8), 
  9146 ;; Auto vars:     Size  Location     Type
  9147 ;;  matrix8x8       1    2[BANK0 ] PTR const struct .
  9148 ;;		 -> g_matrix8x8(8), 
  9149 ;;  col             1    5[BANK0 ] unsigned char 
  9150 ;;  row             1    4[BANK0 ] unsigned char 
  9151 ;;  mask            1    3[BANK0 ] unsigned char 
  9152 ;; Return value:  Size  Location     Type
  9153 ;;                  1    wreg      void 
  9154 ;; Registers used:
  9155 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  9156 ;; Tracked objects:
  9157 ;;		On entry : 0/0
  9158 ;;		On exit  : 0/0
  9159 ;;		Unchanged: 0/0
  9160 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  9161 ;;      Params:         1       0       0       0       0
  9162 ;;      Locals:         0       4       0       0       0
  9163 ;;      Temps:          0       2       0       0       0
  9164 ;;      Totals:         1       6       0       0       0
  9165 ;;Total ram usage:        7 bytes
  9166 ;; Hardware stack levels used:    1
  9167 ;; Hardware stack levels required when called:    3
  9168 ;; This function calls:
  9169 ;;		_get_matrix_bit
  9170 ;; This function is called by:
  9171 ;;		_hal_print_MATRIX8x8
  9172 ;; This function uses a non-reentrant model
  9173 ;;
  9174                           
  9175                           
  9176                           ;psect for function _hal_MATRIX8x8_to_MATRIX7219
  9177  14A3                     _hal_MATRIX8x8_to_MATRIX7219:	
  9178                           
  9179                           ;incstack = 0
  9180                           ; Regs used in _hal_MATRIX8x8_to_MATRIX7219: [wreg-fsr0h+status,2+status,0+btemp+1+pclat
      +                          h+cstack]
  9181                           ;hal_MATRIX8x8_to_MATRIX7219@matrix8x8 stored from wreg
  9182  14A3  1283               	bcf	3,5	;RP0=0, select bank0
  9183  14A4  1303               	bcf	3,6	;RP1=0, select bank0
  9184  14A5  00A2               	movwf	hal_MATRIX8x8_to_MATRIX7219@matrix8x8
  9185                           
  9186                           ;hal_max7219.h: 8: uint8_t mask = 0x80;
  9187  14A6  3080               	movlw	128
  9188  14A7  00A0               	movwf	??_hal_MATRIX8x8_to_MATRIX7219
  9189  14A8  0820               	movf	??_hal_MATRIX8x8_to_MATRIX7219,w
  9190  14A9  00A3               	movwf	hal_MATRIX8x8_to_MATRIX7219@mask
  9191                           
  9192                           ;hal_max7219.h: 9: uint8_t row;
  9193                           ;hal_max7219.h: 11: for(uint8_t col = 0; col < 8; col++)
  9194  14AA  01A5               	clrf	hal_MATRIX8x8_to_MATRIX7219@col
  9195  14AB                     L23:	
  9196  14AB  3008               	movlw	8
  9197  14AC  0225               	subwf	hal_MATRIX8x8_to_MATRIX7219@col,w
  9198  14AD  1803               	btfsc	3,0
  9199  14AE  0008               	return
  9200                           
  9201                           ;hal_max7219.h: 12: {
  9202                           ;hal_max7219.h: 13: mask = 0x80;
  9203  14AF  3080               	movlw	128
  9204  14B0  00A0               	movwf	??_hal_MATRIX8x8_to_MATRIX7219
  9205  14B1  0820               	movf	??_hal_MATRIX8x8_to_MATRIX7219,w
  9206  14B2  00A3               	movwf	hal_MATRIX8x8_to_MATRIX7219@mask
  9207                           
  9208                           ;hal_max7219.h: 14: matrix7219->col[col] = 0;
  9209  14B3  0825               	movf	hal_MATRIX8x8_to_MATRIX7219@col,w
  9210  14B4  077C               	addwf	hal_MATRIX8x8_to_MATRIX7219@matrix7219,w
  9211  14B5  00A0               	movwf	??_hal_MATRIX8x8_to_MATRIX7219
  9212  14B6  0820               	movf	??_hal_MATRIX8x8_to_MATRIX7219,w
  9213  14B7  0084               	movwf	4
  9214  14B8  1383               	bcf	3,7	;select IRP bank0
  9215  14B9  0180               	clrf	0
  9216                           
  9217                           ;hal_max7219.h: 15: for(row = 0; row < 8; row++)
  9218  14BA  01A4               	clrf	hal_MATRIX8x8_to_MATRIX7219@row
  9219  14BB  3008               	movlw	8
  9220  14BC  0224               	subwf	hal_MATRIX8x8_to_MATRIX7219@row,w
  9221  14BD  1803               	btfsc	3,0
  9222  14BE  2CEB               	goto	l3322
  9223  14BF                     l3312:	
  9224                           
  9225                           ;hal_max7219.h: 16: {
  9226                           ;hal_max7219.h: 17: if(get_matrix_bit(matrix8x8->row, row, col) == 1)
  9227  14BF  0822               	movf	hal_MATRIX8x8_to_MATRIX7219@matrix8x8,w
  9228  14C0  00F7               	movwf	get_matrix_bit@byte
  9229  14C1  3000               	movlw	0
  9230  14C2  00F8               	movwf	get_matrix_bit@byte+1
  9231  14C3  0824               	movf	hal_MATRIX8x8_to_MATRIX7219@row,w
  9232  14C4  00A0               	movwf	??_hal_MATRIX8x8_to_MATRIX7219
  9233  14C5  0820               	movf	??_hal_MATRIX8x8_to_MATRIX7219,w
  9234  14C6  00F9               	movwf	get_matrix_bit@row
  9235  14C7  0825               	movf	hal_MATRIX8x8_to_MATRIX7219@col,w
  9236  14C8  00A1               	movwf	??_hal_MATRIX8x8_to_MATRIX7219+1
  9237  14C9  0821               	movf	??_hal_MATRIX8x8_to_MATRIX7219+1,w
  9238  14CA  00FA               	movwf	get_matrix_bit@col
  9239  14CB  160A  158A  273B  160A  118A  	fcall	_get_matrix_bit
  9240  14D0  3A01               	xorlw	1
  9241  14D1  1D03               	skipz
  9242  14D2  2CDF               	goto	l3316
  9243                           
  9244                           ;hal_max7219.h: 18: {
  9245                           ;hal_max7219.h: 19: matrix7219->col[col] |= mask;
  9246  14D3  1283               	bcf	3,5	;RP0=0, select bank0
  9247  14D4  1303               	bcf	3,6	;RP1=0, select bank0
  9248  14D5  0823               	movf	hal_MATRIX8x8_to_MATRIX7219@mask,w
  9249  14D6  00A0               	movwf	??_hal_MATRIX8x8_to_MATRIX7219
  9250  14D7  0825               	movf	hal_MATRIX8x8_to_MATRIX7219@col,w
  9251  14D8  077C               	addwf	hal_MATRIX8x8_to_MATRIX7219@matrix7219,w
  9252  14D9  00A1               	movwf	??_hal_MATRIX8x8_to_MATRIX7219+1
  9253  14DA  0821               	movf	??_hal_MATRIX8x8_to_MATRIX7219+1,w
  9254  14DB  0084               	movwf	4
  9255  14DC  0820               	movf	??_hal_MATRIX8x8_to_MATRIX7219,w
  9256  14DD  1383               	bcf	3,7	;select IRP bank0
  9257  14DE  0480               	iorwf	0,f
  9258  14DF                     l3316:	
  9259                           
  9260                           ;hal_max7219.h: 20: }
  9261                           ;hal_max7219.h: 21: mask >>= 1;
  9262  14DF  1003               	clrc
  9263  14E0  1283               	bcf	3,5	;RP0=0, select bank0
  9264  14E1  1303               	bcf	3,6	;RP1=0, select bank0
  9265  14E2  0CA3               	rrf	hal_MATRIX8x8_to_MATRIX7219@mask,f
  9266  14E3  3001               	movlw	1
  9267  14E4  00A0               	movwf	??_hal_MATRIX8x8_to_MATRIX7219
  9268  14E5  0820               	movf	??_hal_MATRIX8x8_to_MATRIX7219,w
  9269  14E6  07A4               	addwf	hal_MATRIX8x8_to_MATRIX7219@row,f
  9270  14E7  3008               	movlw	8
  9271  14E8  0224               	subwf	hal_MATRIX8x8_to_MATRIX7219@row,w
  9272  14E9  1C03               	skipc
  9273  14EA  2CBF               	goto	l3312
  9274  14EB                     l3322:	
  9275                           
  9276                           ;hal_max7219.h: 22: }
  9277                           ;hal_max7219.h: 23: mask = 0x80;
  9278  14EB  3080               	movlw	128
  9279  14EC  00A0               	movwf	??_hal_MATRIX8x8_to_MATRIX7219
  9280  14ED  0820               	movf	??_hal_MATRIX8x8_to_MATRIX7219,w
  9281  14EE  00A3               	movwf	hal_MATRIX8x8_to_MATRIX7219@mask
  9282  14EF  3001               	movlw	1
  9283  14F0  00A0               	movwf	??_hal_MATRIX8x8_to_MATRIX7219
  9284  14F1  0820               	movf	??_hal_MATRIX8x8_to_MATRIX7219,w
  9285  14F2  07A5               	addwf	hal_MATRIX8x8_to_MATRIX7219@col,f
  9286  14F3  2CAB               	goto	L23
  9287  14F4                     __end_of_hal_MATRIX8x8_to_MATRIX7219:	
  9288                           
  9289                           	psect	text42
  9290  13C6                     __ptext42:	
  9291 ;; *************** function _lg_clear *****************
  9292 ;; Defined at:
  9293 ;;		line 218 in file "../logic.h"
  9294 ;; Parameters:    Size  Location     Type
  9295 ;;  x               1    wreg     char 
  9296 ;;  y               1    0[BANK0 ] char 
  9297 ;;  matrix4x4       2    1[BANK0 ] PTR const struct .
  9298 ;;		 -> NULL(0), g_matrix4x4(96), 
  9299 ;;  matrix8x8       1    3[BANK0 ] PTR struct .
  9300 ;;		 -> g_matrix8x8(8), 
  9301 ;; Auto vars:     Size  Location     Type
  9302 ;;  x               1    4[BANK0 ] char 
  9303 ;;  col             1    6[BANK0 ] unsigned char 
  9304 ;;  row             1    5[BANK0 ] unsigned char 
  9305 ;; Return value:  Size  Location     Type
  9306 ;;                  1    wreg      void 
  9307 ;; Registers used:
  9308 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  9309 ;; Tracked objects:
  9310 ;;		On entry : 0/0
  9311 ;;		On exit  : 0/0
  9312 ;;		Unchanged: 0/0
  9313 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  9314 ;;      Params:         0       4       0       0       0
  9315 ;;      Locals:         0       3       0       0       0
  9316 ;;      Temps:          2       0       0       0       0
  9317 ;;      Totals:         2       7       0       0       0
  9318 ;;Total ram usage:        9 bytes
  9319 ;; Hardware stack levels used:    1
  9320 ;; Hardware stack levels required when called:    3
  9321 ;; This function calls:
  9322 ;;		_get_matrix_bit
  9323 ;;		_set_matrix_bit
  9324 ;; This function is called by:
  9325 ;;		_main
  9326 ;; This function uses a non-reentrant model
  9327 ;;
  9328                           
  9329                           
  9330                           ;psect for function _lg_clear
  9331  13C6                     _lg_clear:	
  9332                           
  9333                           ;incstack = 0
  9334                           ; Regs used in _lg_clear: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  9335                           ;lg_clear@x stored from wreg
  9336  13C6  1283               	bcf	3,5	;RP0=0, select bank0
  9337  13C7  1303               	bcf	3,6	;RP1=0, select bank0
  9338  13C8  00A4               	movwf	lg_clear@x
  9339                           
  9340                           ;logic.h: 220: for(uint8_t row = 0; row < 4; row++)
  9341  13C9  01A5               	clrf	lg_clear@row
  9342  13CA                     L24:	
  9343  13CA  3004               	movlw	4
  9344  13CB  0225               	subwf	lg_clear@row,w
  9345  13CC  1803               	btfsc	3,0
  9346  13CD  0008               	return
  9347                           
  9348                           ;logic.h: 221: {
  9349                           ;logic.h: 222: for(uint8_t col = 0; col < 4; col++)
  9350  13CE  01A6               	clrf	lg_clear@col
  9351  13CF  3004               	movlw	4
  9352  13D0  0226               	subwf	lg_clear@col,w
  9353  13D1  1803               	btfsc	3,0
  9354  13D2  2C04               	goto	l4300
  9355  13D3                     l4292:	
  9356                           
  9357                           ;logic.h: 223: {
  9358                           ;logic.h: 224: if(get_matrix_bit((uint8_t*)matrix4x4->row, row, col) == 1)
  9359  13D3  0821               	movf	lg_clear@matrix4x4,w
  9360  13D4  00F7               	movwf	get_matrix_bit@byte
  9361  13D5  0822               	movf	lg_clear@matrix4x4+1,w
  9362  13D6  00F8               	movwf	get_matrix_bit@byte+1
  9363  13D7  0825               	movf	lg_clear@row,w
  9364  13D8  00FC               	movwf	??_lg_clear
  9365  13D9  087C               	movf	??_lg_clear,w
  9366  13DA  00F9               	movwf	get_matrix_bit@row
  9367  13DB  0826               	movf	lg_clear@col,w
  9368  13DC  00FD               	movwf	??_lg_clear+1
  9369  13DD  087D               	movf	??_lg_clear+1,w
  9370  13DE  00FA               	movwf	get_matrix_bit@col
  9371  13DF  160A  158A  273B  160A  118A  	fcall	_get_matrix_bit
  9372  13E4  3A01               	xorlw	1
  9373  13E5  1D03               	skipz
  9374  13E6  2BFA               	goto	l4296
  9375                           
  9376                           ;logic.h: 225: {
  9377                           ;logic.h: 226: set_matrix_bit((uint8_t*)matrix8x8->row, y + row, x + col, 0);
  9378  13E7  1283               	bcf	3,5	;RP0=0, select bank0
  9379  13E8  1303               	bcf	3,6	;RP1=0, select bank0
  9380  13E9  0825               	movf	lg_clear@row,w
  9381  13EA  0720               	addwf	lg_clear@y,w
  9382  13EB  00FC               	movwf	??_lg_clear
  9383  13EC  087C               	movf	??_lg_clear,w
  9384  13ED  00F5               	movwf	set_matrix_bit@row
  9385  13EE  0826               	movf	lg_clear@col,w
  9386  13EF  0724               	addwf	lg_clear@x,w
  9387  13F0  00FD               	movwf	??_lg_clear+1
  9388  13F1  087D               	movf	??_lg_clear+1,w
  9389  13F2  00F6               	movwf	set_matrix_bit@col
  9390  13F3  01F7               	clrf	set_matrix_bit@value
  9391  13F4  0823               	movf	lg_clear@matrix8x8,w
  9392  13F5  160A  158A  274A  160A  118A  	fcall	_set_matrix_bit
  9393  13FA                     l4296:	
  9394  13FA  3001               	movlw	1
  9395  13FB  00FC               	movwf	??_lg_clear
  9396  13FC  087C               	movf	??_lg_clear,w
  9397  13FD  1283               	bcf	3,5	;RP0=0, select bank0
  9398  13FE  1303               	bcf	3,6	;RP1=0, select bank0
  9399  13FF  07A6               	addwf	lg_clear@col,f
  9400  1400  3004               	movlw	4
  9401  1401  0226               	subwf	lg_clear@col,w
  9402  1402  1C03               	skipc
  9403  1403  2BD3               	goto	l4292
  9404  1404                     l4300:	
  9405  1404  3001               	movlw	1
  9406  1405  00FC               	movwf	??_lg_clear
  9407  1406  087C               	movf	??_lg_clear,w
  9408  1407  07A5               	addwf	lg_clear@row,f
  9409  1408  2BCA               	goto	L24
  9410  1409                     __end_of_lg_clear:	
  9411                           
  9412                           	psect	text43
  9413  1F4A                     __ptext43:	
  9414 ;; *************** function _set_matrix_bit *****************
  9415 ;; Defined at:
  9416 ;;		line 1 in file "../bit_matrix.h"
  9417 ;; Parameters:    Size  Location     Type
  9418 ;;  byte            1    wreg     PTR unsigned char 
  9419 ;;		 -> temp_matrix8x8(8), g_matrix8x8(8), 
  9420 ;;  row             1    5[COMMON] unsigned char 
  9421 ;;  col             1    6[COMMON] unsigned char 
  9422 ;;  value           1    7[COMMON] unsigned char 
  9423 ;; Auto vars:     Size  Location     Type
  9424 ;;  byte            1   10[COMMON] PTR unsigned char 
  9425 ;;		 -> temp_matrix8x8(8), g_matrix8x8(8), 
  9426 ;; Return value:  Size  Location     Type
  9427 ;;                  1    wreg      void 
  9428 ;; Registers used:
  9429 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  9430 ;; Tracked objects:
  9431 ;;		On entry : 0/0
  9432 ;;		On exit  : 0/0
  9433 ;;		Unchanged: 0/0
  9434 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  9435 ;;      Params:         3       0       0       0       0
  9436 ;;      Locals:         1       0       0       0       0
  9437 ;;      Temps:          2       0       0       0       0
  9438 ;;      Totals:         6       0       0       0       0
  9439 ;;Total ram usage:        6 bytes
  9440 ;; Hardware stack levels used:    1
  9441 ;; Hardware stack levels required when called:    1
  9442 ;; This function calls:
  9443 ;;		_setbit
  9444 ;; This function is called by:
  9445 ;;		_lg_clear
  9446 ;;		_lg_merge
  9447 ;;		_lg_merge1
  9448 ;; This function uses a non-reentrant model
  9449 ;;
  9450                           
  9451                           
  9452                           ;psect for function _set_matrix_bit
  9453  1F4A                     _set_matrix_bit:	
  9454                           
  9455                           ;incstack = 0
  9456                           ; Regs used in _set_matrix_bit: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  9457                           ;set_matrix_bit@byte stored from wreg
  9458  1F4A  00FA               	movwf	set_matrix_bit@byte
  9459                           
  9460                           ;bit_matrix.h: 3: setbit(&byte[row], col, value);
  9461  1F4B  0876               	movf	set_matrix_bit@col,w
  9462  1F4C  00F8               	movwf	??_set_matrix_bit
  9463  1F4D  0878               	movf	??_set_matrix_bit,w
  9464  1F4E  00F0               	movwf	setbit@at
  9465  1F4F  0877               	movf	set_matrix_bit@value,w
  9466  1F50  00F9               	movwf	??_set_matrix_bit+1
  9467  1F51  0879               	movf	??_set_matrix_bit+1,w
  9468  1F52  00F1               	movwf	setbit@value
  9469  1F53  0875               	movf	set_matrix_bit@row,w
  9470  1F54  077A               	addwf	set_matrix_bit@byte,w
  9471  1F55  160A  118A  26AE   	fcall	_setbit
  9472  1F58  0008               	return
  9473  1F59                     __end_of_set_matrix_bit:	
  9474                           
  9475                           	psect	text44
  9476  16AE                     __ptext44:	
  9477 ;; *************** function _setbit *****************
  9478 ;; Defined at:
  9479 ;;		line 5 in file "../bit_operator.h"
  9480 ;; Parameters:    Size  Location     Type
  9481 ;;  byte            1    wreg     PTR unsigned char 
  9482 ;;		 -> temp_matrix8x8(8), g_matrix8x8(8), 
  9483 ;;  at              1    0[COMMON] unsigned char 
  9484 ;;  value           1    1[COMMON] unsigned char 
  9485 ;; Auto vars:     Size  Location     Type
  9486 ;;  byte            1    3[COMMON] PTR unsigned char 
  9487 ;;		 -> temp_matrix8x8(8), g_matrix8x8(8), 
  9488 ;;  temp            1    4[COMMON] PTR struct .
  9489 ;;		 -> temp_matrix8x8(8), g_matrix8x8(8), 
  9490 ;; Return value:  Size  Location     Type
  9491 ;;                  1    wreg      void 
  9492 ;; Registers used:
  9493 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  9494 ;; Tracked objects:
  9495 ;;		On entry : 0/0
  9496 ;;		On exit  : 0/0
  9497 ;;		Unchanged: 0/0
  9498 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  9499 ;;      Params:         2       0       0       0       0
  9500 ;;      Locals:         2       0       0       0       0
  9501 ;;      Temps:          1       0       0       0       0
  9502 ;;      Totals:         5       0       0       0       0
  9503 ;;Total ram usage:        5 bytes
  9504 ;; Hardware stack levels used:    1
  9505 ;; This function calls:
  9506 ;;		Nothing
  9507 ;; This function is called by:
  9508 ;;		_set_matrix_bit
  9509 ;; This function uses a non-reentrant model
  9510 ;;
  9511                           
  9512                           
  9513                           ;psect for function _setbit
  9514  16AE                     _setbit:	
  9515                           
  9516                           ;incstack = 0
  9517                           ; Regs used in _setbit: [wreg-fsr0h+status,2+status,0]
  9518                           ;setbit@byte stored from wreg
  9519  16AE  00F3               	movwf	setbit@byte
  9520                           
  9521                           ;bit_operator.h: 7: t_byte *temp = (t_byte *)byte;
  9522  16AF  0873               	movf	setbit@byte,w
  9523  16B0  00F2               	movwf	??_setbit
  9524  16B1  0872               	movf	??_setbit,w
  9525  16B2  00F4               	movwf	setbit@temp
  9526                           
  9527                           ;bit_operator.h: 8: switch(at)
  9528  16B3  2EFC               	goto	l3240
  9529  16B4                     l3222:	
  9530                           ;bit_operator.h: 9: {
  9531                           ;bit_operator.h: 10: case 0:
  9532                           
  9533                           
  9534                           ;bit_operator.h: 11: temp->b0 = value;
  9535  16B4  0874               	movf	setbit@temp,w
  9536  16B5  0084               	movwf	4
  9537  16B6  0871               	movf	setbit@value,w
  9538  16B7  3901               	andlw	1
  9539  16B8  1383               	bcf	3,7	;select IRP bank0
  9540  16B9  1000               	bcf	0,0
  9541  16BA  1D03               	skipz
  9542  16BB  1400               	bsf	0,0
  9543                           
  9544                           ;bit_operator.h: 12: break;
  9545  16BC  0008               	return
  9546  16BD                     l3224:	
  9547                           ;bit_operator.h: 13: case 1:
  9548                           
  9549                           
  9550                           ;bit_operator.h: 14: temp->b1 = value;
  9551  16BD  0874               	movf	setbit@temp,w
  9552  16BE  0084               	movwf	4
  9553  16BF  0871               	movf	setbit@value,w
  9554  16C0  3901               	andlw	1
  9555  16C1  1383               	bcf	3,7	;select IRP bank0
  9556  16C2  1080               	bcf	0,1
  9557  16C3  1D03               	skipz
  9558  16C4  1480               	bsf	0,1
  9559                           
  9560                           ;bit_operator.h: 15: break;
  9561  16C5  0008               	return
  9562  16C6                     l3226:	
  9563                           ;bit_operator.h: 16: case 2:
  9564                           
  9565                           
  9566                           ;bit_operator.h: 17: temp->b2 = value;
  9567  16C6  0874               	movf	setbit@temp,w
  9568  16C7  0084               	movwf	4
  9569  16C8  0871               	movf	setbit@value,w
  9570  16C9  3901               	andlw	1
  9571  16CA  1383               	bcf	3,7	;select IRP bank0
  9572  16CB  1100               	bcf	0,2
  9573  16CC  1D03               	skipz
  9574  16CD  1500               	bsf	0,2
  9575                           
  9576                           ;bit_operator.h: 18: break;
  9577  16CE  0008               	return
  9578  16CF                     l3228:	
  9579                           ;bit_operator.h: 19: case 3:
  9580                           
  9581                           
  9582                           ;bit_operator.h: 20: temp->b3 = value;
  9583  16CF  0874               	movf	setbit@temp,w
  9584  16D0  0084               	movwf	4
  9585  16D1  0871               	movf	setbit@value,w
  9586  16D2  3901               	andlw	1
  9587  16D3  1383               	bcf	3,7	;select IRP bank0
  9588  16D4  1180               	bcf	0,3
  9589  16D5  1D03               	skipz
  9590  16D6  1580               	bsf	0,3
  9591                           
  9592                           ;bit_operator.h: 21: break;
  9593  16D7  0008               	return
  9594  16D8                     l3230:	
  9595                           ;bit_operator.h: 22: case 4:
  9596                           
  9597                           
  9598                           ;bit_operator.h: 23: temp->b4 = value;
  9599  16D8  0874               	movf	setbit@temp,w
  9600  16D9  0084               	movwf	4
  9601  16DA  0871               	movf	setbit@value,w
  9602  16DB  3901               	andlw	1
  9603  16DC  1383               	bcf	3,7	;select IRP bank0
  9604  16DD  1200               	bcf	0,4
  9605  16DE  1D03               	skipz
  9606  16DF  1600               	bsf	0,4
  9607                           
  9608                           ;bit_operator.h: 24: break;
  9609  16E0  0008               	return
  9610  16E1                     l3232:	
  9611                           ;bit_operator.h: 25: case 5:
  9612                           
  9613                           
  9614                           ;bit_operator.h: 26: temp->b5 = value;
  9615  16E1  0874               	movf	setbit@temp,w
  9616  16E2  0084               	movwf	4
  9617  16E3  0871               	movf	setbit@value,w
  9618  16E4  3901               	andlw	1
  9619  16E5  1383               	bcf	3,7	;select IRP bank0
  9620  16E6  1280               	bcf	0,5
  9621  16E7  1D03               	skipz
  9622  16E8  1680               	bsf	0,5
  9623                           
  9624                           ;bit_operator.h: 27: break;
  9625  16E9  0008               	return
  9626  16EA                     l3234:	
  9627                           ;bit_operator.h: 28: case 6:
  9628                           
  9629                           
  9630                           ;bit_operator.h: 29: temp->b6 = value;
  9631  16EA  0874               	movf	setbit@temp,w
  9632  16EB  0084               	movwf	4
  9633  16EC  0871               	movf	setbit@value,w
  9634  16ED  3901               	andlw	1
  9635  16EE  1383               	bcf	3,7	;select IRP bank0
  9636  16EF  1300               	bcf	0,6
  9637  16F0  1D03               	skipz
  9638  16F1  1700               	bsf	0,6
  9639                           
  9640                           ;bit_operator.h: 30: break;
  9641  16F2  0008               	return
  9642  16F3                     l3236:	
  9643                           ;bit_operator.h: 31: case 7:
  9644                           
  9645                           
  9646                           ;bit_operator.h: 32: temp->b7 = value;
  9647  16F3  0874               	movf	setbit@temp,w
  9648  16F4  0084               	movwf	4
  9649  16F5  0871               	movf	setbit@value,w
  9650  16F6  3901               	andlw	1
  9651  16F7  1383               	bcf	3,7	;select IRP bank0
  9652  16F8  1380               	bcf	0,7
  9653  16F9  1D03               	skipz
  9654  16FA  1780               	bsf	0,7
  9655                           
  9656                           ;bit_operator.h: 34: }
  9657                           
  9658                           ;bit_operator.h: 33: break;
  9659  16FB  0008               	return
  9660  16FC                     l3240:	
  9661  16FC  0870               	movf	setbit@at,w
  9662                           
  9663                           ; Switch size 1, requested type "space"
  9664                           ; Number of cases is 8, Range of values is 0 to 7
  9665                           ; switch strategies available:
  9666                           ; Name         Instructions Cycles
  9667                           ; simple_byte           25    13 (average)
  9668                           ; direct_byte           32     8 (fixed)
  9669                           ; jumptable            260     6 (fixed)
  9670                           ;	Chosen strategy is simple_byte
  9671  16FD  3A00               	xorlw	0	; case 0
  9672  16FE  1903               	skipnz
  9673  16FF  2EB4               	goto	l3222
  9674  1700  3A01               	xorlw	1	; case 1
  9675  1701  1903               	skipnz
  9676  1702  2EBD               	goto	l3224
  9677  1703  3A03               	xorlw	3	; case 2
  9678  1704  1903               	skipnz
  9679  1705  2EC6               	goto	l3226
  9680  1706  3A01               	xorlw	1	; case 3
  9681  1707  1903               	skipnz
  9682  1708  2ECF               	goto	l3228
  9683  1709  3A07               	xorlw	7	; case 4
  9684  170A  1903               	skipnz
  9685  170B  2ED8               	goto	l3230
  9686  170C  3A01               	xorlw	1	; case 5
  9687  170D  1903               	skipnz
  9688  170E  2EE1               	goto	l3232
  9689  170F  3A03               	xorlw	3	; case 6
  9690  1710  1903               	skipnz
  9691  1711  2EEA               	goto	l3234
  9692  1712  3A01               	xorlw	1	; case 7
  9693  1713  1903               	skipnz
  9694  1714  2EF3               	goto	l3236
  9695  1715  2F16               	goto	l61
  9696  1716                     l61:	
  9697  1716  0008               	return
  9698  1717                     __end_of_setbit:	
  9699                           
  9700                           	psect	text45
  9701  1F3B                     __ptext45:	
  9702 ;; *************** function _get_matrix_bit *****************
  9703 ;; Defined at:
  9704 ;;		line 5 in file "../bit_matrix.h"
  9705 ;; Parameters:    Size  Location     Type
  9706 ;;  byte            2    7[COMMON] PTR const unsigned char 
  9707 ;;		 -> temp_matrix8x8.row(8), NULL(0), temp_matrix8x8(8), g_matrix8x8.row(8), 
  9708 ;;		 -> g_matrix8x8(8), g_matrix4x4.row(4), g_matrix4x4(96), 
  9709 ;;  row             1    9[COMMON] unsigned char 
  9710 ;;  col             1   10[COMMON] unsigned char 
  9711 ;; Auto vars:     Size  Location     Type
  9712 ;;		None
  9713 ;; Return value:  Size  Location     Type
  9714 ;;                  1    wreg      unsigned char 
  9715 ;; Registers used:
  9716 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  9717 ;; Tracked objects:
  9718 ;;		On entry : 0/0
  9719 ;;		On exit  : 0/0
  9720 ;;		Unchanged: 0/0
  9721 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  9722 ;;      Params:         4       0       0       0       0
  9723 ;;      Locals:         0       0       0       0       0
  9724 ;;      Temps:          1       0       0       0       0
  9725 ;;      Totals:         5       0       0       0       0
  9726 ;;Total ram usage:        5 bytes
  9727 ;; Hardware stack levels used:    1
  9728 ;; Hardware stack levels required when called:    2
  9729 ;; This function calls:
  9730 ;;		_getbit
  9731 ;; This function is called by:
  9732 ;;		_dbg_print_MATRIX4x4
  9733 ;;		_dbg_print_MATRIX8x8
  9734 ;;		_hal_MATRIX8x8_to_MATRIX7219
  9735 ;;		_lg_hit_land
  9736 ;;		_lg_is_valid
  9737 ;;		_lg_is_left_boundary
  9738 ;;		_lg_is_right_boundary
  9739 ;;		_lg_fall_off
  9740 ;;		_lg_clear
  9741 ;;		_lg_merge
  9742 ;;		_lg_merge1
  9743 ;;		_lg_get_num_of_orphan
  9744 ;;		_lg_get_weight
  9745 ;;		_lg_get_height_after_merge
  9746 ;;		_lg_get_holes_after_merge
  9747 ;; This function uses a non-reentrant model
  9748 ;;
  9749                           
  9750                           
  9751                           ;psect for function _get_matrix_bit
  9752  1F3B                     _get_matrix_bit:	
  9753                           
  9754                           ;bit_matrix.h: 7: return getbit(&byte[row], col);
  9755                           
  9756                           ;incstack = 0
  9757                           ; Regs used in _get_matrix_bit: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  9758  1F3B  0879               	movf	get_matrix_bit@row,w
  9759  1F3C  0777               	addwf	get_matrix_bit@byte,w
  9760  1F3D  00F0               	movwf	getbit@byte
  9761  1F3E  0878               	movf	get_matrix_bit@byte+1,w
  9762  1F3F  1803               	skipnc
  9763  1F40  3E01               	addlw	1
  9764  1F41  00F1               	movwf	getbit@byte+1
  9765  1F42  087A               	movf	get_matrix_bit@col,w
  9766  1F43  00FB               	movwf	??_get_matrix_bit
  9767  1F44  087B               	movf	??_get_matrix_bit,w
  9768  1F45  00F2               	movwf	getbit@at
  9769  1F46  120A  158A  262F   	fcall	_getbit
  9770  1F49  0008               	return
  9771  1F4A                     __end_of_get_matrix_bit:	
  9772                           
  9773                           	psect	text46
  9774  0E2F                     __ptext46:	
  9775 ;; *************** function _getbit *****************
  9776 ;; Defined at:
  9777 ;;		line 36 in file "../bit_operator.h"
  9778 ;; Parameters:    Size  Location     Type
  9779 ;;  byte            2    0[COMMON] PTR const unsigned char 
  9780 ;;		 -> temp_matrix8x8.row(8), NULL(0), temp_matrix8x8(8), g_matrix8x8.row(8), 
  9781 ;;		 -> g_matrix8x8(8), g_matrix4x4.row(4), g_matrix4x4(96), 
  9782 ;;  at              1    2[COMMON] unsigned char 
  9783 ;; Auto vars:     Size  Location     Type
  9784 ;;  temp            2    5[COMMON] PTR struct .
  9785 ;;		 -> temp_matrix8x8.row(8), NULL(0), temp_matrix8x8(8), g_matrix8x8.row(8), 
  9786 ;;		 -> g_matrix8x8(8), g_matrix4x4.row(4), g_matrix4x4(96), 
  9787 ;; Return value:  Size  Location     Type
  9788 ;;                  1    wreg      unsigned char 
  9789 ;; Registers used:
  9790 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath
  9791 ;; Tracked objects:
  9792 ;;		On entry : 0/0
  9793 ;;		On exit  : 0/0
  9794 ;;		Unchanged: 0/0
  9795 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  9796 ;;      Params:         3       0       0       0       0
  9797 ;;      Locals:         2       0       0       0       0
  9798 ;;      Temps:          2       0       0       0       0
  9799 ;;      Totals:         7       0       0       0       0
  9800 ;;Total ram usage:        7 bytes
  9801 ;; Hardware stack levels used:    2
  9802 ;; This function calls:
  9803 ;;		Nothing
  9804 ;; This function is called by:
  9805 ;;		_get_matrix_bit
  9806 ;; This function uses a non-reentrant model
  9807 ;;
  9808                           
  9809                           
  9810                           ;psect for function _getbit
  9811  0E2F                     _getbit:	
  9812                           
  9813                           ;bit_operator.h: 38: t_byte *temp = (t_byte *)byte;
  9814                           
  9815                           ;incstack = 0
  9816                           ; Regs used in _getbit: [wreg-fsr0h+status,2+status,0+btemp+1+pclath]
  9817  0E2F  0870               	movf	getbit@byte,w
  9818  0E30  00F5               	movwf	getbit@temp
  9819  0E31  0871               	movf	getbit@byte+1,w
  9820  0E32  00F6               	movwf	getbit@temp+1
  9821                           
  9822                           ;bit_operator.h: 39: switch(at)
  9823  0E33  2EA7               	goto	l3040
  9824  0E34                     l2990:	
  9825                           ;bit_operator.h: 40: {
  9826                           ;bit_operator.h: 41: case 0:
  9827                           
  9828                           
  9829                           ;bit_operator.h: 42: return (uint8_t)temp->b0;
  9830  0E34  0876               	movf	getbit@temp+1,w
  9831  0E35  1283               	bcf	3,5	;RP0=0, select bank0
  9832  0E36  1303               	bcf	3,6	;RP1=0, select bank0
  9833  0E37  00FF               	movwf	127
  9834  0E38  0875               	movf	getbit@temp,w
  9835  0E39  0084               	movwf	4
  9836  0E3A  120A  158A  2000   	fcall	stringtab
  9837  0E3D  00F3               	movwf	??_getbit
  9838  0E3E  0873               	movf	??_getbit,w
  9839  0E3F  3901               	andlw	1
  9840                           
  9841                           ;bit_operator.h: 43: break;
  9842  0E40  0008               	return
  9843  0E41                     l2996:	
  9844                           ;bit_operator.h: 44: case 1:
  9845                           
  9846                           
  9847                           ;bit_operator.h: 45: return (uint8_t)temp->b1;
  9848  0E41  0876               	movf	getbit@temp+1,w
  9849  0E42  1283               	bcf	3,5	;RP0=0, select bank0
  9850  0E43  1303               	bcf	3,6	;RP1=0, select bank0
  9851  0E44  00FF               	movwf	127
  9852  0E45  0875               	movf	getbit@temp,w
  9853  0E46  0084               	movwf	4
  9854  0E47  120A  158A  2000   	fcall	stringtab
  9855  0E4A  00F3               	movwf	??_getbit
  9856  0E4B  0C73               	rrf	??_getbit,w
  9857  0E4C  3901               	andlw	1
  9858                           
  9859                           ;bit_operator.h: 46: break;
  9860  0E4D  0008               	return
  9861  0E4E                     l3002:	
  9862                           ;bit_operator.h: 47: case 2:
  9863                           
  9864                           
  9865                           ;bit_operator.h: 48: return (uint8_t)temp->b2;
  9866  0E4E  0876               	movf	getbit@temp+1,w
  9867  0E4F  1283               	bcf	3,5	;RP0=0, select bank0
  9868  0E50  1303               	bcf	3,6	;RP1=0, select bank0
  9869  0E51  00FF               	movwf	127
  9870  0E52  0875               	movf	getbit@temp,w
  9871  0E53  0084               	movwf	4
  9872  0E54  120A  158A  2000   	fcall	stringtab
  9873  0E57  00F3               	movwf	??_getbit
  9874  0E58  0C73               	rrf	??_getbit,w
  9875  0E59  00F4               	movwf	??_getbit+1
  9876  0E5A  0C74               	rrf	??_getbit+1,w
  9877  0E5B  3901               	andlw	1
  9878                           
  9879                           ;bit_operator.h: 49: break;
  9880  0E5C  0008               	return
  9881  0E5D                     l3008:	
  9882                           ;bit_operator.h: 50: case 3:
  9883                           
  9884                           
  9885                           ;bit_operator.h: 51: return (uint8_t)temp->b3;
  9886  0E5D  0876               	movf	getbit@temp+1,w
  9887  0E5E  1283               	bcf	3,5	;RP0=0, select bank0
  9888  0E5F  1303               	bcf	3,6	;RP1=0, select bank0
  9889  0E60  00FF               	movwf	127
  9890  0E61  0875               	movf	getbit@temp,w
  9891  0E62  0084               	movwf	4
  9892  0E63  120A  158A  2000   	fcall	stringtab
  9893  0E66  00F3               	movwf	??_getbit
  9894  0E67  0C73               	rrf	??_getbit,w
  9895  0E68  00F4               	movwf	??_getbit+1
  9896  0E69  0CF4               	rrf	??_getbit+1,f
  9897  0E6A  0C74               	rrf	??_getbit+1,w
  9898  0E6B  3901               	andlw	1
  9899                           
  9900                           ;bit_operator.h: 52: break;
  9901  0E6C  0008               	return
  9902  0E6D                     l3014:	
  9903                           ;bit_operator.h: 53: case 4:
  9904                           
  9905                           
  9906                           ;bit_operator.h: 54: return (uint8_t)temp->b4;
  9907  0E6D  0876               	movf	getbit@temp+1,w
  9908  0E6E  1283               	bcf	3,5	;RP0=0, select bank0
  9909  0E6F  1303               	bcf	3,6	;RP1=0, select bank0
  9910  0E70  00FF               	movwf	127
  9911  0E71  0875               	movf	getbit@temp,w
  9912  0E72  0084               	movwf	4
  9913  0E73  120A  158A  2000   	fcall	stringtab
  9914  0E76  00F3               	movwf	??_getbit
  9915  0E77  0E73               	swapf	??_getbit,w
  9916  0E78  3901               	andlw	1
  9917                           
  9918                           ;bit_operator.h: 55: break;
  9919  0E79  0008               	return
  9920  0E7A                     l3020:	
  9921                           ;bit_operator.h: 56: case 5:
  9922                           
  9923                           
  9924                           ;bit_operator.h: 57: return (uint8_t)temp->b5;
  9925  0E7A  0876               	movf	getbit@temp+1,w
  9926  0E7B  1283               	bcf	3,5	;RP0=0, select bank0
  9927  0E7C  1303               	bcf	3,6	;RP1=0, select bank0
  9928  0E7D  00FF               	movwf	127
  9929  0E7E  0875               	movf	getbit@temp,w
  9930  0E7F  0084               	movwf	4
  9931  0E80  120A  158A  2000   	fcall	stringtab
  9932  0E83  00F3               	movwf	??_getbit
  9933  0E84  0E73               	swapf	??_getbit,w
  9934  0E85  00F4               	movwf	??_getbit+1
  9935  0E86  0C74               	rrf	??_getbit+1,w
  9936  0E87  3901               	andlw	1
  9937                           
  9938                           ;bit_operator.h: 58: break;
  9939  0E88  0008               	return
  9940  0E89                     l3026:	
  9941                           ;bit_operator.h: 59: case 6:
  9942                           
  9943                           
  9944                           ;bit_operator.h: 60: return (uint8_t)temp->b6;
  9945  0E89  0876               	movf	getbit@temp+1,w
  9946  0E8A  1283               	bcf	3,5	;RP0=0, select bank0
  9947  0E8B  1303               	bcf	3,6	;RP1=0, select bank0
  9948  0E8C  00FF               	movwf	127
  9949  0E8D  0875               	movf	getbit@temp,w
  9950  0E8E  0084               	movwf	4
  9951  0E8F  120A  158A  2000   	fcall	stringtab
  9952  0E92  00F3               	movwf	??_getbit
  9953  0E93  0E73               	swapf	??_getbit,w
  9954  0E94  00F4               	movwf	??_getbit+1
  9955  0E95  0CF4               	rrf	??_getbit+1,f
  9956  0E96  0C74               	rrf	??_getbit+1,w
  9957  0E97  3901               	andlw	1
  9958                           
  9959                           ;bit_operator.h: 61: break;
  9960  0E98  0008               	return
  9961  0E99                     l3032:	
  9962                           ;bit_operator.h: 62: case 7:
  9963                           
  9964                           
  9965                           ;bit_operator.h: 63: return (uint8_t)temp->b7;
  9966  0E99  0876               	movf	getbit@temp+1,w
  9967  0E9A  1283               	bcf	3,5	;RP0=0, select bank0
  9968  0E9B  1303               	bcf	3,6	;RP1=0, select bank0
  9969  0E9C  00FF               	movwf	127
  9970  0E9D  0875               	movf	getbit@temp,w
  9971  0E9E  0084               	movwf	4
  9972  0E9F  120A  158A  2000   	fcall	stringtab
  9973  0EA2  00F3               	movwf	??_getbit
  9974  0EA3  0D73               	rlf	??_getbit,w
  9975  0EA4  0D73               	rlf	??_getbit,w
  9976  0EA5  3901               	andlw	1
  9977                           
  9978                           ;bit_operator.h: 65: }
  9979                           
  9980                           ;bit_operator.h: 64: break;
  9981  0EA6  0008               	return
  9982  0EA7                     l3040:	
  9983  0EA7  0872               	movf	getbit@at,w
  9984                           
  9985                           ; Switch size 1, requested type "space"
  9986                           ; Number of cases is 8, Range of values is 0 to 7
  9987                           ; switch strategies available:
  9988                           ; Name         Instructions Cycles
  9989                           ; simple_byte           25    13 (average)
  9990                           ; direct_byte           32     8 (fixed)
  9991                           ; jumptable            260     6 (fixed)
  9992                           ;	Chosen strategy is simple_byte
  9993  0EA8  3A00               	xorlw	0	; case 0
  9994  0EA9  1903               	skipnz
  9995  0EAA  2E34               	goto	l2990
  9996  0EAB  3A01               	xorlw	1	; case 1
  9997  0EAC  1903               	skipnz
  9998  0EAD  2E41               	goto	l2996
  9999  0EAE  3A03               	xorlw	3	; case 2
 10000  0EAF  1903               	skipnz
 10001  0EB0  2E4E               	goto	l3002
 10002  0EB1  3A01               	xorlw	1	; case 3
 10003  0EB2  1903               	skipnz
 10004  0EB3  2E5D               	goto	l3008
 10005  0EB4  3A07               	xorlw	7	; case 4
 10006  0EB5  1903               	skipnz
 10007  0EB6  2E6D               	goto	l3014
 10008  0EB7  3A01               	xorlw	1	; case 5
 10009  0EB8  1903               	skipnz
 10010  0EB9  2E7A               	goto	l3020
 10011  0EBA  3A03               	xorlw	3	; case 6
 10012  0EBB  1903               	skipnz
 10013  0EBC  2E89               	goto	l3026
 10014  0EBD  3A01               	xorlw	1	; case 7
 10015  0EBE  1903               	skipnz
 10016  0EBF  2E99               	goto	l3032
 10017  0EC0  2EC1               	goto	l66
 10018  0EC1                     l66:	
 10019  0EC1  0008               	return
 10020  0EC2                     __end_of_getbit:	
 10021                           
 10022                           	psect	text47
 10023  1FB1                     __ptext47:	
 10024 ;; *************** function _lg_char_info_index_rand *****************
 10025 ;; Defined at:
 10026 ;;		line 340 in file "../logic.h"
 10027 ;; Parameters:    Size  Location     Type
 10028 ;;		None
 10029 ;; Auto vars:     Size  Location     Type
 10030 ;;		None
 10031 ;; Return value:  Size  Location     Type
 10032 ;;                  1    wreg      unsigned char 
 10033 ;; Registers used:
 10034 ;;		wreg, status,2, status,0, pclath, cstack
 10035 ;; Tracked objects:
 10036 ;;		On entry : 0/0
 10037 ;;		On exit  : 0/0
 10038 ;;		Unchanged: 0/0
 10039 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 10040 ;;      Params:         0       0       0       0       0
 10041 ;;      Locals:         0       0       0       0       0
 10042 ;;      Temps:          0       0       0       0       0
 10043 ;;      Totals:         0       0       0       0       0
 10044 ;;Total ram usage:        0 bytes
 10045 ;; Hardware stack levels used:    1
 10046 ;; Hardware stack levels required when called:    2
 10047 ;; This function calls:
 10048 ;;		___awmod
 10049 ;;		_rand
 10050 ;; This function is called by:
 10051 ;;		_main
 10052 ;; This function uses a non-reentrant model
 10053 ;;
 10054                           
 10055                           
 10056                           ;psect for function _lg_char_info_index_rand
 10057  1FB1                     _lg_char_info_index_rand:	
 10058                           
 10059                           ;logic.h: 342: return (uint8_t)(rand()%9);
 10060                           
 10061                           ;incstack = 0
 10062                           ; Regs used in _lg_char_info_index_rand: [wreg+status,2+status,0+pclath+cstack]
 10063  1FB1  3009               	movlw	9
 10064  1FB2  1283               	bcf	3,5	;RP0=0, select bank0
 10065  1FB3  1303               	bcf	3,6	;RP1=0, select bank0
 10066  1FB4  00A7               	movwf	___awmod@divisor
 10067  1FB5  3000               	movlw	0
 10068  1FB6  00A8               	movwf	___awmod@divisor+1
 10069  1FB7  160A  118A  2545  160A  158A  	fcall	_rand
 10070  1FBC  1283               	bcf	3,5	;RP0=0, select bank0
 10071  1FBD  1303               	bcf	3,6	;RP1=0, select bank0
 10072  1FBE  0821               	movf	?_rand+1,w
 10073  1FBF  00AA               	movwf	___awmod@dividend+1
 10074  1FC0  0820               	movf	?_rand,w
 10075  1FC1  00A9               	movwf	___awmod@dividend
 10076  1FC2  160A  118A  2409   	fcall	___awmod
 10077  1FC5  1283               	bcf	3,5	;RP0=0, select bank0
 10078  1FC6  1303               	bcf	3,6	;RP1=0, select bank0
 10079  1FC7  0827               	movf	?___awmod,w
 10080  1FC8  0008               	return
 10081  1FC9                     __end_of_lg_char_info_index_rand:	
 10082                           
 10083                           	psect	text48
 10084  1545                     __ptext48:	
 10085 ;; *************** function _rand *****************
 10086 ;; Defined at:
 10087 ;;		line 12 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\rand.c"
 10088 ;; Parameters:    Size  Location     Type
 10089 ;;		None
 10090 ;; Auto vars:     Size  Location     Type
 10091 ;;		None
 10092 ;; Return value:  Size  Location     Type
 10093 ;;                  2    0[BANK0 ] int 
 10094 ;; Registers used:
 10095 ;;		wreg, status,2, status,0, pclath, cstack
 10096 ;; Tracked objects:
 10097 ;;		On entry : 0/0
 10098 ;;		On exit  : 0/0
 10099 ;;		Unchanged: 0/0
 10100 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 10101 ;;      Params:         0       2       0       0       0
 10102 ;;      Locals:         0       0       0       0       0
 10103 ;;      Temps:          0       5       0       0       0
 10104 ;;      Totals:         0       7       0       0       0
 10105 ;;Total ram usage:        7 bytes
 10106 ;; Hardware stack levels used:    1
 10107 ;; Hardware stack levels required when called:    1
 10108 ;; This function calls:
 10109 ;;		___lmul
 10110 ;; This function is called by:
 10111 ;;		_lg_char_info_index_rand
 10112 ;; This function uses a non-reentrant model
 10113 ;;
 10114                           
 10115                           
 10116                           ;psect for function _rand
 10117  1545                     _rand:	
 10118                           
 10119                           ;incstack = 0
 10120                           ; Regs used in _rand: [wreg+status,2+status,0+pclath+cstack]
 10121  1545  1683               	bsf	3,5	;RP0=1, select bank1
 10122  1546  1303               	bcf	3,6	;RP1=0, select bank1
 10123  1547  0860               	movf	(_randx+3)^(0+128),w
 10124  1548  00F3               	movwf	___lmul@multiplier+3
 10125  1549  085F               	movf	(_randx+2)^(0+128),w
 10126  154A  00F2               	movwf	___lmul@multiplier+2
 10127  154B  085E               	movf	(_randx+1)^(0+128),w
 10128  154C  00F1               	movwf	___lmul@multiplier+1
 10129  154D  085D               	movf	_randx^(0+128),w
 10130  154E  00F0               	movwf	___lmul@multiplier
 10131  154F  3041               	movlw	65
 10132  1550  00F7               	movwf	___lmul@multiplicand+3
 10133  1551  30C6               	movlw	198
 10134  1552  00F6               	movwf	___lmul@multiplicand+2
 10135  1553  304E               	movlw	78
 10136  1554  00F5               	movwf	___lmul@multiplicand+1
 10137  1555  306D               	movlw	109
 10138  1556  00F4               	movwf	___lmul@multiplicand
 10139  1557  160A  118A  2347  160A  118A  	fcall	___lmul
 10140  155C  0873               	movf	?___lmul+3,w
 10141  155D  1683               	bsf	3,5	;RP0=1, select bank1
 10142  155E  1303               	bcf	3,6	;RP1=0, select bank1
 10143  155F  00E0               	movwf	(_randx+3)^(0+128)
 10144  1560  0872               	movf	?___lmul+2,w
 10145  1561  00DF               	movwf	(_randx+2)^(0+128)
 10146  1562  0871               	movf	?___lmul+1,w
 10147  1563  00DE               	movwf	(_randx+1)^(0+128)
 10148  1564  0870               	movf	?___lmul,w
 10149  1565  00DD               	movwf	_randx^(0+128)
 10150  1566  3039               	movlw	57
 10151  1567  07DD               	addwf	_randx^(0+128),f
 10152  1568  3030               	movlw	48
 10153  1569  1803               	skipnc
 10154  156A  3031               	movlw	49
 10155  156B  07DE               	addwf	(_randx+1)^(0+128),f
 10156  156C  3000               	movlw	0
 10157  156D  1803               	skipnc
 10158  156E  3001               	movlw	1
 10159  156F  07DF               	addwf	(_randx+2)^(0+128),f
 10160  1570  3000               	movlw	0
 10161  1571  1803               	skipnc
 10162  1572  3001               	movlw	1
 10163  1573  07E0               	addwf	(_randx+3)^(0+128),f
 10164  1574  085D               	movf	_randx^(0+128),w
 10165  1575  1283               	bcf	3,5	;RP0=0, select bank0
 10166  1576  1303               	bcf	3,6	;RP1=0, select bank0
 10167  1577  00A2               	movwf	??_rand
 10168  1578  1683               	bsf	3,5	;RP0=1, select bank1
 10169  1579  1303               	bcf	3,6	;RP1=0, select bank1
 10170  157A  085E               	movf	(_randx+1)^(0+128),w
 10171  157B  1283               	bcf	3,5	;RP0=0, select bank0
 10172  157C  1303               	bcf	3,6	;RP1=0, select bank0
 10173  157D  00A3               	movwf	??_rand+1
 10174  157E  1683               	bsf	3,5	;RP0=1, select bank1
 10175  157F  1303               	bcf	3,6	;RP1=0, select bank1
 10176  1580  085F               	movf	(_randx+2)^(0+128),w
 10177  1581  1283               	bcf	3,5	;RP0=0, select bank0
 10178  1582  1303               	bcf	3,6	;RP1=0, select bank0
 10179  1583  00A4               	movwf	??_rand+2
 10180  1584  1683               	bsf	3,5	;RP0=1, select bank1
 10181  1585  1303               	bcf	3,6	;RP1=0, select bank1
 10182  1586  0860               	movf	(_randx+3)^(0+128),w
 10183  1587  1283               	bcf	3,5	;RP0=0, select bank0
 10184  1588  1303               	bcf	3,6	;RP1=0, select bank0
 10185  1589  00A5               	movwf	??_rand+3
 10186  158A  3010               	movlw	16
 10187  158B  00A6               	movwf	??_rand+4
 10188  158C                     u3725:	
 10189  158C  0D25               	rlf	??_rand+3,w
 10190  158D  0CA5               	rrf	??_rand+3,f
 10191  158E  0CA4               	rrf	??_rand+2,f
 10192  158F  0CA3               	rrf	??_rand+1,f
 10193  1590  0CA2               	rrf	??_rand,f
 10194  1591  0BA6               	decfsz	??_rand+4,f
 10195  1592  2D8C               	goto	u3725
 10196  1593  30FF               	movlw	255
 10197  1594  0522               	andwf	??_rand,w
 10198  1595  00A0               	movwf	?_rand
 10199  1596  307F               	movlw	127
 10200  1597  0523               	andwf	??_rand+1,w
 10201  1598  00A1               	movwf	?_rand+1
 10202  1599  0008               	return
 10203  159A                     __end_of_rand:	
 10204                           
 10205                           	psect	text49
 10206  1347                     __ptext49:	
 10207 ;; *************** function ___lmul *****************
 10208 ;; Defined at:
 10209 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\Umul32.c"
 10210 ;; Parameters:    Size  Location     Type
 10211 ;;  multiplier      4    0[COMMON] unsigned long 
 10212 ;;  multiplicand    4    4[COMMON] unsigned long 
 10213 ;; Auto vars:     Size  Location     Type
 10214 ;;  product         4    9[COMMON] unsigned long 
 10215 ;; Return value:  Size  Location     Type
 10216 ;;                  4    0[COMMON] unsigned long 
 10217 ;; Registers used:
 10218 ;;		wreg, status,2, status,0
 10219 ;; Tracked objects:
 10220 ;;		On entry : 0/0
 10221 ;;		On exit  : 0/0
 10222 ;;		Unchanged: 0/0
 10223 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 10224 ;;      Params:         8       0       0       0       0
 10225 ;;      Locals:         4       0       0       0       0
 10226 ;;      Temps:          1       0       0       0       0
 10227 ;;      Totals:        13       0       0       0       0
 10228 ;;Total ram usage:       13 bytes
 10229 ;; Hardware stack levels used:    1
 10230 ;; This function calls:
 10231 ;;		Nothing
 10232 ;; This function is called by:
 10233 ;;		_rand
 10234 ;; This function uses a non-reentrant model
 10235 ;;
 10236                           
 10237                           
 10238                           ;psect for function ___lmul
 10239  1347                     ___lmul:	
 10240                           
 10241                           ;incstack = 0
 10242                           ; Regs used in ___lmul: [wreg+status,2+status,0]
 10243  1347  3000               	movlw	0
 10244  1348  00FC               	movwf	___lmul@product+3
 10245  1349  3000               	movlw	0
 10246  134A  00FB               	movwf	___lmul@product+2
 10247  134B  3000               	movlw	0
 10248  134C  00FA               	movwf	___lmul@product+1
 10249  134D  3000               	movlw	0
 10250  134E  00F9               	movwf	___lmul@product
 10251  134F                     l3554:	
 10252  134F  1C70               	btfss	___lmul@multiplier,0
 10253  1350  2B65               	goto	l3558
 10254  1351  0874               	movf	___lmul@multiplicand,w
 10255  1352  07F9               	addwf	___lmul@product,f
 10256  1353  0875               	movf	___lmul@multiplicand+1,w
 10257  1354  1103               	clrz
 10258  1355  1803               	skipnc
 10259  1356  3E01               	addlw	1
 10260  1357  1D03               	btfss	3,2
 10261  1358  07FA               	addwf	___lmul@product+1,f
 10262  1359  0876               	movf	___lmul@multiplicand+2,w
 10263  135A  1103               	clrz
 10264  135B  1803               	skipnc
 10265  135C  3E01               	addlw	1
 10266  135D  1D03               	btfss	3,2
 10267  135E  07FB               	addwf	___lmul@product+2,f
 10268  135F  0877               	movf	___lmul@multiplicand+3,w
 10269  1360  1103               	clrz
 10270  1361  1803               	skipnc
 10271  1362  3E01               	addlw	1
 10272  1363  1D03               	btfss	3,2
 10273  1364  07FC               	addwf	___lmul@product+3,f
 10274  1365                     l3558:	
 10275  1365  3001               	movlw	1
 10276  1366  00F8               	movwf	??___lmul
 10277  1367                     u3135:	
 10278  1367  1003               	clrc
 10279  1368  0DF4               	rlf	___lmul@multiplicand,f
 10280  1369  0DF5               	rlf	___lmul@multiplicand+1,f
 10281  136A  0DF6               	rlf	___lmul@multiplicand+2,f
 10282  136B  0DF7               	rlf	___lmul@multiplicand+3,f
 10283  136C  0BF8               	decfsz	??___lmul,f
 10284  136D  2B67               	goto	u3135
 10285  136E  3001               	movlw	1
 10286  136F                     u3145:	
 10287  136F  1003               	clrc
 10288  1370  0CF3               	rrf	___lmul@multiplier+3,f
 10289  1371  0CF2               	rrf	___lmul@multiplier+2,f
 10290  1372  0CF1               	rrf	___lmul@multiplier+1,f
 10291  1373  0CF0               	rrf	___lmul@multiplier,f
 10292  1374  3EFF               	addlw	-1
 10293  1375  1D03               	skipz
 10294  1376  2B6F               	goto	u3145
 10295  1377  0873               	movf	___lmul@multiplier+3,w
 10296  1378  0472               	iorwf	___lmul@multiplier+2,w
 10297  1379  0471               	iorwf	___lmul@multiplier+1,w
 10298  137A  0470               	iorwf	___lmul@multiplier,w
 10299  137B  1D03               	skipz
 10300  137C  2B4F               	goto	l3554
 10301  137D  087C               	movf	___lmul@product+3,w
 10302  137E  00F3               	movwf	?___lmul+3
 10303  137F  087B               	movf	___lmul@product+2,w
 10304  1380  00F2               	movwf	?___lmul+2
 10305  1381  087A               	movf	___lmul@product+1,w
 10306  1382  00F1               	movwf	?___lmul+1
 10307  1383  0879               	movf	___lmul@product,w
 10308  1384  00F0               	movwf	?___lmul
 10309  1385  0008               	return
 10310  1386                     __end_of___lmul:	
 10311                           
 10312                           	psect	text50
 10313  1409                     __ptext50:	
 10314 ;; *************** function ___awmod *****************
 10315 ;; Defined at:
 10316 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\awmod.c"
 10317 ;; Parameters:    Size  Location     Type
 10318 ;;  divisor         2    7[BANK0 ] int 
 10319 ;;  dividend        2    9[BANK0 ] int 
 10320 ;; Auto vars:     Size  Location     Type
 10321 ;;  sign            1   12[BANK0 ] unsigned char 
 10322 ;;  counter         1   11[BANK0 ] unsigned char 
 10323 ;; Return value:  Size  Location     Type
 10324 ;;                  2    7[BANK0 ] int 
 10325 ;; Registers used:
 10326 ;;		wreg, status,2, status,0
 10327 ;; Tracked objects:
 10328 ;;		On entry : 0/0
 10329 ;;		On exit  : 0/0
 10330 ;;		Unchanged: 0/0
 10331 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 10332 ;;      Params:         0       4       0       0       0
 10333 ;;      Locals:         0       2       0       0       0
 10334 ;;      Temps:          1       0       0       0       0
 10335 ;;      Totals:         1       6       0       0       0
 10336 ;;Total ram usage:        7 bytes
 10337 ;; Hardware stack levels used:    1
 10338 ;; This function calls:
 10339 ;;		Nothing
 10340 ;; This function is called by:
 10341 ;;		_lg_char_info_index_rand
 10342 ;;		_USARTWriteInt
 10343 ;; This function uses a non-reentrant model
 10344 ;;
 10345                           
 10346                           
 10347                           ;psect for function ___awmod
 10348  1409                     ___awmod:	
 10349                           
 10350                           ;incstack = 0
 10351                           ; Regs used in ___awmod: [wreg+status,2+status,0]
 10352  1409  1283               	bcf	3,5	;RP0=0, select bank0
 10353  140A  1303               	bcf	3,6	;RP1=0, select bank0
 10354  140B  01AC               	clrf	___awmod@sign
 10355  140C  1FAA               	btfss	___awmod@dividend+1,7
 10356  140D  2C15               	goto	l4150
 10357  140E  09A9               	comf	___awmod@dividend,f
 10358  140F  09AA               	comf	___awmod@dividend+1,f
 10359  1410  0AA9               	incf	___awmod@dividend,f
 10360  1411  1903               	skipnz
 10361  1412  0AAA               	incf	___awmod@dividend+1,f
 10362  1413  01AC               	clrf	___awmod@sign
 10363  1414  0AAC               	incf	___awmod@sign,f
 10364  1415                     l4150:	
 10365  1415  1FA8               	btfss	___awmod@divisor+1,7
 10366  1416  2C1C               	goto	l4154
 10367  1417  09A7               	comf	___awmod@divisor,f
 10368  1418  09A8               	comf	___awmod@divisor+1,f
 10369  1419  0AA7               	incf	___awmod@divisor,f
 10370  141A  1903               	skipnz
 10371  141B  0AA8               	incf	___awmod@divisor+1,f
 10372  141C                     l4154:	
 10373  141C  0827               	movf	___awmod@divisor,w
 10374  141D  0428               	iorwf	___awmod@divisor+1,w
 10375  141E  1903               	btfsc	3,2
 10376  141F  2C49               	goto	l4172
 10377  1420  01AB               	clrf	___awmod@counter
 10378  1421  0AAB               	incf	___awmod@counter,f
 10379  1422                     l4162:	
 10380  1422  1BA8               	btfsc	___awmod@divisor+1,7
 10381  1423  2C30               	goto	l4164
 10382  1424  3001               	movlw	1
 10383  1425                     u4175:	
 10384  1425  1003               	clrc
 10385  1426  0DA7               	rlf	___awmod@divisor,f
 10386  1427  0DA8               	rlf	___awmod@divisor+1,f
 10387  1428  3EFF               	addlw	-1
 10388  1429  1D03               	skipz
 10389  142A  2C25               	goto	u4175
 10390  142B  3001               	movlw	1
 10391  142C  00FD               	movwf	??___awmod
 10392  142D  087D               	movf	??___awmod,w
 10393  142E  07AB               	addwf	___awmod@counter,f
 10394  142F  2C22               	goto	l4162
 10395  1430                     l4164:	
 10396  1430  0828               	movf	___awmod@divisor+1,w
 10397  1431  022A               	subwf	___awmod@dividend+1,w
 10398  1432  1D03               	skipz
 10399  1433  2C36               	goto	u4195
 10400  1434  0827               	movf	___awmod@divisor,w
 10401  1435  0229               	subwf	___awmod@dividend,w
 10402  1436                     u4195:	
 10403  1436  1C03               	skipc
 10404  1437  2C3E               	goto	l4168
 10405  1438  0827               	movf	___awmod@divisor,w
 10406  1439  02A9               	subwf	___awmod@dividend,f
 10407  143A  0828               	movf	___awmod@divisor+1,w
 10408  143B  1C03               	skipc
 10409  143C  03AA               	decf	___awmod@dividend+1,f
 10410  143D  02AA               	subwf	___awmod@dividend+1,f
 10411  143E                     l4168:	
 10412  143E  3001               	movlw	1
 10413  143F                     u4205:	
 10414  143F  1003               	clrc
 10415  1440  0CA8               	rrf	___awmod@divisor+1,f
 10416  1441  0CA7               	rrf	___awmod@divisor,f
 10417  1442  3EFF               	addlw	-1
 10418  1443  1D03               	skipz
 10419  1444  2C3F               	goto	u4205
 10420  1445  3001               	movlw	1
 10421  1446  02AB               	subwf	___awmod@counter,f
 10422  1447  1D03               	btfss	3,2
 10423  1448  2C30               	goto	l4164
 10424  1449                     l4172:	
 10425  1449  082C               	movf	___awmod@sign,w
 10426  144A  1903               	btfsc	3,2
 10427  144B  2C51               	goto	l4176
 10428  144C  09A9               	comf	___awmod@dividend,f
 10429  144D  09AA               	comf	___awmod@dividend+1,f
 10430  144E  0AA9               	incf	___awmod@dividend,f
 10431  144F  1903               	skipnz
 10432  1450  0AAA               	incf	___awmod@dividend+1,f
 10433  1451                     l4176:	
 10434  1451  082A               	movf	___awmod@dividend+1,w
 10435  1452  00A8               	movwf	?___awmod+1
 10436  1453  0829               	movf	___awmod@dividend,w
 10437  1454  00A7               	movwf	?___awmod
 10438  1455  0008               	return
 10439  1456                     __end_of___awmod:	
 10440                           
 10441                           	psect	text51
 10442  1043                     __ptext51:	
 10443 ;; *************** function _eeprom_write_int *****************
 10444 ;; Defined at:
 10445 ;;		line 2 in file "../eeprom_operator.h"
 10446 ;; Parameters:    Size  Location     Type
 10447 ;;  at              1    wreg     unsigned char 
 10448 ;;  value           2   19[BANK0 ] unsigned int 
 10449 ;; Auto vars:     Size  Location     Type
 10450 ;;  at              1   22[BANK0 ] unsigned char 
 10451 ;;  temp            1   23[BANK0 ] unsigned char 
 10452 ;; Return value:  Size  Location     Type
 10453 ;;                  1    wreg      void 
 10454 ;; Registers used:
 10455 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
 10456 ;; Tracked objects:
 10457 ;;		On entry : 0/0
 10458 ;;		On exit  : 0/0
 10459 ;;		Unchanged: 0/0
 10460 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 10461 ;;      Params:         0       2       0       0       0
 10462 ;;      Locals:         0       2       0       0       0
 10463 ;;      Temps:          0       1       0       0       0
 10464 ;;      Totals:         0       5       0       0       0
 10465 ;;Total ram usage:        5 bytes
 10466 ;; Hardware stack levels used:    1
 10467 ;; Hardware stack levels required when called:    2
 10468 ;; This function calls:
 10469 ;;		_USARTWriteString
 10470 ;;		_eeprom_write
 10471 ;;		_sprintf
 10472 ;; This function is called by:
 10473 ;;		_main
 10474 ;; This function uses a non-reentrant model
 10475 ;;
 10476                           
 10477                           
 10478                           ;psect for function _eeprom_write_int
 10479  1043                     _eeprom_write_int:	
 10480                           
 10481                           ;incstack = 0
 10482                           ; Regs used in _eeprom_write_int: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
 10483                           ;eeprom_write_int@at stored from wreg
 10484  1043  1283               	bcf	3,5	;RP0=0, select bank0
 10485  1044  1303               	bcf	3,6	;RP1=0, select bank0
 10486  1045  00B6               	movwf	eeprom_write_int@at
 10487                           
 10488                           ;eeprom_operator.h: 4: uint8_t temp;
 10489                           ;eeprom_operator.h: 5: temp = value >> 8;
 10490  1046  0834               	movf	eeprom_write_int@value+1,w
 10491  1047  00B5               	movwf	??_eeprom_write_int
 10492  1048  0835               	movf	??_eeprom_write_int,w
 10493  1049  00B7               	movwf	eeprom_write_int@temp
 10494                           
 10495                           ;eeprom_operator.h: 6: eeprom_write(at, temp);
 10496  104A  0837               	movf	eeprom_write_int@temp,w
 10497  104B  00B5               	movwf	??_eeprom_write_int
 10498  104C  0835               	movf	??_eeprom_write_int,w
 10499  104D  00F0               	movwf	eeprom_write@value
 10500  104E  0836               	movf	eeprom_write_int@at,w
 10501  104F  160A  118A  20AB  160A  118A  	fcall	_eeprom_write
 10502                           
 10503                           ;eeprom_operator.h: 8: temp = value & 0xFF;
 10504  1054  1283               	bcf	3,5	;RP0=0, select bank0
 10505  1055  1303               	bcf	3,6	;RP1=0, select bank0
 10506  1056  0833               	movf	eeprom_write_int@value,w
 10507  1057  00B5               	movwf	??_eeprom_write_int
 10508  1058  0835               	movf	??_eeprom_write_int,w
 10509  1059  00B7               	movwf	eeprom_write_int@temp
 10510                           
 10511                           ;eeprom_operator.h: 9: eeprom_write(at + 1, temp);
 10512  105A  0837               	movf	eeprom_write_int@temp,w
 10513  105B  00B5               	movwf	??_eeprom_write_int
 10514  105C  0835               	movf	??_eeprom_write_int,w
 10515  105D  00F0               	movwf	eeprom_write@value
 10516  105E  0836               	movf	eeprom_write_int@at,w
 10517  105F  3E01               	addlw	1
 10518  1060  160A  118A  20AB   	fcall	_eeprom_write
 10519                           
 10520                           ;eeprom_operator.h: 10: do { if(0) { sprintf(g_debug, "eeprom_write_int = %d""\r\n", val
      +                          ue); USARTWriteString(g_debug); } } while (0);;
 10521  1063  0008               	return
 10522  1064                     __end_of_eeprom_write_int:	
 10523                           
 10524                           	psect	text52
 10525  0250                     __ptext52:	
 10526 ;; *************** function _sprintf *****************
 10527 ;; Defined at:
 10528 ;;		line 492 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\doprnt.c"
 10529 ;; Parameters:    Size  Location     Type
 10530 ;;  sp              1    wreg     PTR unsigned char 
 10531 ;;		 -> g_debug(32), 
 10532 ;;  f               2    0[BANK0 ] PTR const unsigned char 
 10533 ;;		 -> STR_81(12), STR_80(15), STR_79(15), STR_78(25), 
 10534 ;;		 -> STR_77(29), STR_76(12), STR_75(23), STR_74(15), 
 10535 ;;		 -> STR_73(61), STR_72(7), STR_71(54), STR_70(20), 
 10536 ;;		 -> STR_69(17), STR_68(19), STR_67(15), STR_66(15), 
 10537 ;;		 -> STR_65(15), STR_64(27), STR_63(16), STR_62(12), 
 10538 ;;		 -> STR_61(13), STR_60(11), STR_59(14), STR_58(11), 
 10539 ;;		 -> STR_57(9), STR_56(28), STR_55(28), STR_54(18), 
 10540 ;;		 -> STR_53(17), STR_52(12), STR_51(12), STR_50(22), 
 10541 ;;		 -> STR_49(23), STR_48(23), STR_47(17), STR_46(12), 
 10542 ;;		 -> STR_45(17), STR_44(12), STR_43(28), STR_42(27), 
 10543 ;;		 -> STR_41(8), STR_40(21), STR_39(13), STR_38(21), 
 10544 ;;		 -> STR_37(13), STR_36(21), STR_35(13), STR_34(37), 
 10545 ;;		 -> STR_33(10), STR_32(26), STR_31(26), STR_30(37), 
 10546 ;;		 -> STR_29(21), STR_28(27), STR_27(23), STR_26(24), 
 10547 ;;		 -> STR_25(12), STR_24(18), STR_23(11), STR_22(23), 
 10548 ;;		 -> STR_21(24), STR_20(4), STR_19(4), STR_18(23), 
 10549 ;;		 -> STR_17(3), STR_16(2), STR_15(2), STR_14(23), 
 10550 ;;		 -> STR_13(4), STR_12(23), STR_11(3), STR_10(2), 
 10551 ;;		 -> STR_9(2), STR_8(32), STR_7(4), STR_6(23), 
 10552 ;;		 -> STR_5(3), STR_4(2), STR_3(2), STR_2(32), 
 10553 ;;		 -> STR_1(4), ROM(8192), 
 10554 ;; Auto vars:     Size  Location     Type
 10555 ;;  sp              1   18[BANK0 ] PTR unsigned char 
 10556 ;;		 -> g_debug(32), 
 10557 ;;  idx             1   11[BANK0 ] unsigned char 
 10558 ;;  tmpval          4    0        struct .
 10559 ;;  val             2   15[BANK0 ] unsigned int 
 10560 ;;  cp              2    0        PTR const unsigned char 
 10561 ;;  len             2    0        unsigned int 
 10562 ;;  c               1   17[BANK0 ] char 
 10563 ;;  flag            1   14[BANK0 ] unsigned char 
 10564 ;;  prec            1   13[BANK0 ] char 
 10565 ;;  ap              1   12[BANK0 ] PTR void [1]
 10566 ;;		 -> ?_sprintf(2), 
 10567 ;; Return value:  Size  Location     Type
 10568 ;;                  2    0[BANK0 ] int 
 10569 ;; Registers used:
 10570 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
 10571 ;; Tracked objects:
 10572 ;;		On entry : 0/0
 10573 ;;		On exit  : 0/0
 10574 ;;		Unchanged: 0/0
 10575 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 10576 ;;      Params:         0       8       0       0       0
 10577 ;;      Locals:         0       8       0       0       0
 10578 ;;      Temps:          0       3       0       0       0
 10579 ;;      Totals:         0      19       0       0       0
 10580 ;;Total ram usage:       19 bytes
 10581 ;; Hardware stack levels used:    1
 10582 ;; Hardware stack levels required when called:    1
 10583 ;; This function calls:
 10584 ;;		___lwdiv
 10585 ;;		___lwmod
 10586 ;; This function is called by:
 10587 ;;		_dbg_print_MATRIX4x4
 10588 ;;		_dbg_print_MATRIX8x8
 10589 ;;		_dbg_print_Screen
 10590 ;;		_dbg_print_cur_MATRIX4x4
 10591 ;;		_eeprom_write_int
 10592 ;;		_eeprom_read_int
 10593 ;;		_lg_is_row_full
 10594 ;;		_lg_delete_matrix
 10595 ;;		_lg_get_num_removed_rows
 10596 ;;		_lg_hit_land
 10597 ;;		_lg_is_valid
 10598 ;;		_lg_is_left_boundary
 10599 ;;		_lg_is_right_boundary
 10600 ;;		_lg_fall_off
 10601 ;;		_lg_get_num_of_orphan
 10602 ;;		_lg_get_weight
 10603 ;;		_lg_left_most
 10604 ;;		_lg_right_most
 10605 ;;		_lg_get_height
 10606 ;;		_lg_get_height_after_merge
 10607 ;;		_lg_get_holes_after_merge
 10608 ;;		_lg_find_best_solution
 10609 ;;		_main
 10610 ;;		_dbg_print_MATRIX7219
 10611 ;;		_dbg_print_all_MATRIX4x4
 10612 ;; This function uses a non-reentrant model
 10613 ;;
 10614                           
 10615                           
 10616                           ;psect for function _sprintf
 10617  0250                     _sprintf:	
 10618                           
 10619                           ;incstack = 0
 10620                           ; Regs used in _sprintf: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
 10621                           ;sprintf@sp stored from wreg
 10622  0250  1283               	bcf	3,5	;RP0=0, select bank0
 10623  0251  1303               	bcf	3,6	;RP1=0, select bank0
 10624  0252  00B2               	movwf	sprintf@sp
 10625                           
 10626                           ;doprnt.c: 494: va_list ap;
 10627                           ;doprnt.c: 499: signed char c;
 10628                           ;doprnt.c: 506: signed char prec;
 10629                           ;doprnt.c: 508: unsigned char flag;
 10630                           ;doprnt.c: 523: union {
 10631                           ;doprnt.c: 524: unsigned long vd;
 10632                           ;doprnt.c: 525: double integ;
 10633                           ;doprnt.c: 526: } tmpval;
 10634                           ;doprnt.c: 528: unsigned int val;
 10635                           ;doprnt.c: 529: unsigned len;
 10636                           ;doprnt.c: 530: const char * cp;
 10637                           ;doprnt.c: 533: *ap = __va_start();
 10638  0253  3022               	movlw	(low ((?_sprintf| 0+2)))& (0+255)
 10639  0254  00A8               	movwf	??_sprintf
 10640  0255  0828               	movf	??_sprintf,w
 10641  0256  00AC               	movwf	sprintf@ap
 10642                           
 10643                           ;doprnt.c: 635: switch(c = *f++) {
 10644  0257  2A65               	goto	l3206
 10645  0258                     l719:	
 10646                           ;doprnt.c: 712: case 'X':
 10647                           
 10648                           ;doprnt.c: 698: case 'i':
 10649                           ;doprnt.c: 699: break;
 10650                           
 10651                           ;doprnt.c: 697: case 'd':
 10652                           
 10653                           ;doprnt.c: 638: goto alldone;
 10654                           
 10655                           ;doprnt.c: 637: case 0:
 10656                           
 10657                           
 10658                           ;doprnt.c: 718: case 'x':
 10659                           ;doprnt.c: 721: flag |= 0x80;
 10660  0258  17AE               	bsf	sprintf@flag,7
 10661                           
 10662                           ;doprnt.c: 723: break;
 10663  0259  2AA1               	goto	l717
 10664  025A                     l3136:	
 10665                           ;doprnt.c: 802: default:
 10666                           
 10667                           
 10668                           ;doprnt.c: 809: ((*sp++ = (c)));
 10669  025A  0831               	movf	sprintf@c,w
 10670  025B  00A8               	movwf	??_sprintf
 10671  025C  0832               	movf	sprintf@sp,w
 10672  025D  0084               	movwf	4
 10673  025E  0828               	movf	??_sprintf,w
 10674  025F  1383               	bcf	3,7	;select IRP bank0
 10675  0260  0080               	movwf	0
 10676  0261  3001               	movlw	1
 10677  0262  00A8               	movwf	??_sprintf
 10678  0263  0828               	movf	??_sprintf,w
 10679  0264  07B2               	addwf	sprintf@sp,f
 10680  0265                     l3206:	
 10681                           ;doprnt.c: 536: while(c = *f++) {
 10682                           
 10683                           ;doprnt.c: 810: continue;
 10684                           
 10685  0265  0821               	movf	sprintf@f+1,w
 10686  0266  00A9               	movwf	??_sprintf+1
 10687  0267  0820               	movf	sprintf@f,w
 10688  0268  00A8               	movwf	??_sprintf
 10689  0269  0AA0               	incf	sprintf@f,f
 10690  026A  1903               	skipnz
 10691  026B  0AA1               	incf	sprintf@f+1,f
 10692  026C  0829               	movf	??_sprintf+1,w
 10693  026D  00FF               	movwf	127
 10694  026E  0828               	movf	??_sprintf,w
 10695  026F  0084               	movwf	4
 10696  0270  120A  158A  2000  120A  118A  	fcall	stringtab
 10697  0275  00AA               	movwf	??_sprintf+2
 10698  0276  082A               	movf	??_sprintf+2,w
 10699  0277  00B1               	movwf	sprintf@c
 10700  0278  0831               	movf	sprintf@c,w
 10701  0279  1903               	btfsc	3,2
 10702  027A  2BB7               	goto	l3208
 10703                           
 10704                           ;doprnt.c: 538: if(c != '%')
 10705  027B  3025               	movlw	37
 10706  027C  0631               	xorwf	sprintf@c,w
 10707  027D  1D03               	btfss	3,2
 10708  027E  2A5A               	goto	l3136
 10709                           
 10710                           ;doprnt.c: 543: }
 10711                           ;doprnt.c: 548: flag = 0;
 10712                           
 10713                           ;doprnt.c: 542: continue;
 10714                           
 10715                           ;doprnt.c: 540: {
 10716                           ;doprnt.c: 541: ((*sp++ = (c)));
 10717  027F  01AE               	clrf	sprintf@flag
 10718                           
 10719                           ;doprnt.c: 822: }
 10720  0280  0821               	movf	sprintf@f+1,w
 10721  0281  00A9               	movwf	??_sprintf+1
 10722  0282  0820               	movf	sprintf@f,w
 10723  0283  00A8               	movwf	??_sprintf
 10724  0284  0AA0               	incf	sprintf@f,f
 10725  0285  1903               	skipnz
 10726  0286  0AA1               	incf	sprintf@f+1,f
 10727  0287  0829               	movf	??_sprintf+1,w
 10728  0288  00FF               	movwf	127
 10729  0289  0828               	movf	??_sprintf,w
 10730  028A  0084               	movwf	4
 10731  028B  120A  158A  2000  120A  118A  	fcall	stringtab
 10732  0290  00B1               	movwf	sprintf@c
 10733                           
 10734                           ; Switch size 1, requested type "space"
 10735                           ; Number of cases is 5, Range of values is 0 to 120
 10736                           ; switch strategies available:
 10737                           ; Name         Instructions Cycles
 10738                           ; simple_byte           16     9 (average)
 10739                           ; jumptable            260     6 (fixed)
 10740                           ;	Chosen strategy is simple_byte
 10741  0291  3A00               	xorlw	0	; case 0
 10742  0292  1903               	skipnz
 10743  0293  2BB7               	goto	l3208
 10744  0294  3A58               	xorlw	88	; case 88
 10745  0295  1903               	skipnz
 10746  0296  2A58               	goto	l719
 10747  0297  3A3C               	xorlw	60	; case 100
 10748  0298  1903               	skipnz
 10749  0299  2AA1               	goto	l717
 10750  029A  3A0D               	xorlw	13	; case 105
 10751  029B  1903               	skipnz
 10752  029C  2AA1               	goto	l717
 10753  029D  3A11               	xorlw	17	; case 120
 10754  029E  1903               	skipnz
 10755  029F  2A58               	goto	l719
 10756  02A0  2A5A               	goto	l3136
 10757  02A1                     l717:	
 10758                           
 10759                           ;doprnt.c: 1251: if((flag & 0x80) == 0x00)
 10760  02A1  1BAE               	btfsc	sprintf@flag,7
 10761  02A2  2ABB               	goto	l3154
 10762                           
 10763                           ;doprnt.c: 1253: {
 10764                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
 10765  02A3  082C               	movf	sprintf@ap,w
 10766  02A4  0084               	movwf	4
 10767  02A5  1383               	bcf	3,7	;select IRP bank0
 10768  02A6  0800               	movf	0,w
 10769  02A7  00AF               	movwf	sprintf@val
 10770  02A8  0A84               	incf	4,f
 10771  02A9  0800               	movf	0,w
 10772  02AA  00B0               	movwf	sprintf@val+1
 10773  02AB  3002               	movlw	2
 10774  02AC  00A8               	movwf	??_sprintf
 10775  02AD  0828               	movf	??_sprintf,w
 10776  02AE  07AC               	addwf	sprintf@ap,f
 10777                           
 10778                           ;doprnt.c: 1261: if((int)val < 0) {
 10779  02AF  1FB0               	btfss	sprintf@val+1,7
 10780  02B0  2B18               	goto	l3180
 10781                           
 10782                           ;doprnt.c: 1262: flag |= 0x03;
 10783  02B1  3003               	movlw	3
 10784  02B2  00A8               	movwf	??_sprintf
 10785  02B3  0828               	movf	??_sprintf,w
 10786  02B4  04AE               	iorwf	sprintf@flag,f
 10787                           
 10788                           ;doprnt.c: 1263: val = -val;
 10789  02B5  09AF               	comf	sprintf@val,f
 10790  02B6  09B0               	comf	sprintf@val+1,f
 10791  02B7  0AAF               	incf	sprintf@val,f
 10792  02B8  1903               	skipnz
 10793  02B9  0AB0               	incf	sprintf@val+1,f
 10794                           
 10795                           ;doprnt.c: 1264: }
 10796                           ;doprnt.c: 1266: }
 10797  02BA  2B18               	goto	l3180
 10798  02BB                     l3154:	
 10799                           
 10800                           ;doprnt.c: 1268: else
 10801                           ;doprnt.c: 1273: {
 10802                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
 10803  02BB  082C               	movf	sprintf@ap,w
 10804  02BC  0084               	movwf	4
 10805  02BD  1383               	bcf	3,7	;select IRP bank0
 10806  02BE  0800               	movf	0,w
 10807  02BF  00AF               	movwf	sprintf@val
 10808  02C0  0A84               	incf	4,f
 10809  02C1  0800               	movf	0,w
 10810  02C2  00B0               	movwf	sprintf@val+1
 10811  02C3  3002               	movlw	2
 10812  02C4  00A8               	movwf	??_sprintf
 10813  02C5  0828               	movf	??_sprintf,w
 10814  02C6  07AC               	addwf	sprintf@ap,f
 10815                           
 10816                           ;doprnt.c: 1287: }
 10817                           ;doprnt.c: 1294: switch((unsigned char)(flag & 0x80)) {
 10818  02C7  2B18               	goto	l3180
 10819  02C8                     l725:	
 10820                           ;doprnt.c: 1299: case 0x00:
 10821                           
 10822                           
 10823                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
 10824  02C8  01B1               	clrf	sprintf@c
 10825  02C9  0AB1               	incf	sprintf@c,f
 10826  02CA                     L26:	
 10827  02CA  3005               	movlw	5
 10828  02CB  0631               	xorwf	sprintf@c,w
 10829  02CC  1903               	btfsc	3,2
 10830  02CD  2B21               	goto	l3182
 10831                           
 10832                           ;doprnt.c: 1306: if(val < dpowers[c])
 10833  02CE  0831               	movf	sprintf@c,w
 10834  02CF  00A8               	movwf	??_sprintf
 10835  02D0  0728               	addwf	??_sprintf,w
 10836  02D1  3E12               	addlw	low (_dpowers| (0+32768))
 10837  02D2  0084               	movwf	4
 10838  02D3  3088               	movlw	high (_dpowers| (0+32768))
 10839  02D4  1803               	skipnc
 10840  02D5  3E01               	addlw	1
 10841  02D6  00FF               	movwf	127
 10842  02D7  120A  158A  2000  120A  118A  	fcall	stringtab
 10843  02DC  00A9               	movwf	??_sprintf+1
 10844  02DD  120A  158A  2000  120A  118A  	fcall	stringtab
 10845  02E2  00AA               	movwf	??_sprintf+2
 10846  02E3  082A               	movf	??_sprintf+2,w
 10847  02E4  0230               	subwf	sprintf@val+1,w
 10848  02E5  1D03               	skipz
 10849  02E6  2AE9               	goto	u2605
 10850  02E7  0829               	movf	??_sprintf+1,w
 10851  02E8  022F               	subwf	sprintf@val,w
 10852  02E9                     u2605:	
 10853  02E9  1C03               	btfss	3,0
 10854  02EA  2B21               	goto	l3182
 10855                           
 10856                           ;doprnt.c: 1307: break;
 10857  02EB  3001               	movlw	1
 10858  02EC  00A8               	movwf	??_sprintf
 10859  02ED  0828               	movf	??_sprintf,w
 10860  02EE  07B1               	addwf	sprintf@c,f
 10861  02EF  2ACA               	goto	L26
 10862  02F0                     l730:	
 10863                           ;doprnt.c: 1314: case 0x80:
 10864                           
 10865                           ;doprnt.c: 1309: break;
 10866                           
 10867                           
 10868                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
 10869  02F0  01B1               	clrf	sprintf@c
 10870  02F1  0AB1               	incf	sprintf@c,f
 10871  02F2                     L27:	
 10872  02F2  3004               	movlw	4
 10873  02F3  0631               	xorwf	sprintf@c,w
 10874  02F4  1903               	btfsc	3,2
 10875  02F5  2B21               	goto	l3182
 10876                           
 10877                           ;doprnt.c: 1317: if(val < hexpowers[c])
 10878  02F6  0831               	movf	sprintf@c,w
 10879  02F7  00A8               	movwf	??_sprintf
 10880  02F8  0728               	addwf	??_sprintf,w
 10881  02F9  3E1C               	addlw	low (_hexpowers| (0+32768))
 10882  02FA  0084               	movwf	4
 10883  02FB  3088               	movlw	high (_hexpowers| (0+32768))
 10884  02FC  1803               	skipnc
 10885  02FD  3E01               	addlw	1
 10886  02FE  00FF               	movwf	127
 10887  02FF  120A  158A  2000  120A  118A  	fcall	stringtab
 10888  0304  00A9               	movwf	??_sprintf+1
 10889  0305  120A  158A  2000  120A  118A  	fcall	stringtab
 10890  030A  00AA               	movwf	??_sprintf+2
 10891  030B  082A               	movf	??_sprintf+2,w
 10892  030C  0230               	subwf	sprintf@val+1,w
 10893  030D  1D03               	skipz
 10894  030E  2B11               	goto	u2635
 10895  030F  0829               	movf	??_sprintf+1,w
 10896  0310  022F               	subwf	sprintf@val,w
 10897  0311                     u2635:	
 10898  0311  1C03               	btfss	3,0
 10899  0312  2B21               	goto	l3182
 10900                           
 10901                           ;doprnt.c: 1318: break;
 10902  0313  3001               	movlw	1
 10903  0314  00A8               	movwf	??_sprintf
 10904  0315  0828               	movf	??_sprintf,w
 10905  0316  07B1               	addwf	sprintf@c,f
 10906  0317  2AF2               	goto	L27
 10907  0318                     l3180:	
 10908                           ;doprnt.c: 1336: }
 10909                           
 10910                           ;doprnt.c: 1320: break;
 10911                           
 10912  0318  082E               	movf	sprintf@flag,w
 10913  0319  3980               	andlw	128
 10914                           
 10915                           ; Switch size 1, requested type "space"
 10916                           ; Number of cases is 2, Range of values is 0 to 128
 10917                           ; switch strategies available:
 10918                           ; Name         Instructions Cycles
 10919                           ; simple_byte            7     4 (average)
 10920                           ; jumptable            260     6 (fixed)
 10921                           ;	Chosen strategy is simple_byte
 10922  031A  3A00               	xorlw	0	; case 0
 10923  031B  1903               	skipnz
 10924  031C  2AC8               	goto	l725
 10925  031D  3A80               	xorlw	128	; case 128
 10926  031E  1903               	skipnz
 10927  031F  2AF0               	goto	l730
 10928  0320  2B21               	goto	l3182
 10929  0321                     l3182:	
 10930                           
 10931                           ;doprnt.c: 1422: {
 10932                           ;doprnt.c: 1438: if(flag & 0x03)
 10933  0321  082E               	movf	sprintf@flag,w
 10934  0322  3903               	andlw	3
 10935  0323  1903               	btfsc	3,2
 10936  0324  2B30               	goto	l3188
 10937                           
 10938                           ;doprnt.c: 1439: ((*sp++ = ('-')));
 10939  0325  302D               	movlw	45
 10940  0326  00A8               	movwf	??_sprintf
 10941  0327  0832               	movf	sprintf@sp,w
 10942  0328  0084               	movwf	4
 10943  0329  0828               	movf	??_sprintf,w
 10944  032A  1383               	bcf	3,7	;select IRP bank0
 10945  032B  0080               	movwf	0
 10946  032C  3001               	movlw	1
 10947  032D  00A8               	movwf	??_sprintf
 10948  032E  0828               	movf	??_sprintf,w
 10949  032F  07B2               	addwf	sprintf@sp,f
 10950  0330                     l3188:	
 10951                           
 10952                           ;doprnt.c: 1469: }
 10953                           ;doprnt.c: 1472: prec = c;
 10954  0330  0831               	movf	sprintf@c,w
 10955  0331  00A8               	movwf	??_sprintf
 10956  0332  0828               	movf	??_sprintf,w
 10957  0333  00AD               	movwf	sprintf@prec
 10958                           
 10959                           ;doprnt.c: 1474: while(prec--) {
 10960  0334  2BA6               	goto	l3204
 10961  0335                     l3190:	
 10962                           ;doprnt.c: 1478: {
 10963                           ;doprnt.c: 1483: case 0x00:
 10964                           
 10965                           ;doprnt.c: 1476: switch((unsigned char)(flag & 0x80))
 10966                           
 10967                           
 10968                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
 10969  0335  300A               	movlw	10
 10970  0336  00F8               	movwf	___lwmod@divisor
 10971  0337  3000               	movlw	0
 10972  0338  00F9               	movwf	___lwmod@divisor+1
 10973  0339  082D               	movf	sprintf@prec,w
 10974  033A  00A8               	movwf	??_sprintf
 10975  033B  0728               	addwf	??_sprintf,w
 10976  033C  3E12               	addlw	low (_dpowers| (0+32768))
 10977  033D  0084               	movwf	4
 10978  033E  3088               	movlw	high (_dpowers| (0+32768))
 10979  033F  1803               	skipnc
 10980  0340  3E01               	addlw	1
 10981  0341  00FF               	movwf	127
 10982  0342  120A  158A  2000  120A  118A  	fcall	stringtab
 10983  0347  00F0               	movwf	___lwdiv@divisor
 10984  0348  120A  158A  2000  120A  118A  	fcall	stringtab
 10985  034D  00F1               	movwf	___lwdiv@divisor+1
 10986  034E  0830               	movf	sprintf@val+1,w
 10987  034F  00F3               	movwf	___lwdiv@dividend+1
 10988  0350  082F               	movf	sprintf@val,w
 10989  0351  00F2               	movwf	___lwdiv@dividend
 10990  0352  160A  118A  22CE  120A  118A  	fcall	___lwdiv
 10991  0357  0871               	movf	?___lwdiv+1,w
 10992  0358  00FB               	movwf	___lwmod@dividend+1
 10993  0359  0870               	movf	?___lwdiv,w
 10994  035A  00FA               	movwf	___lwmod@dividend
 10995  035B  160A  118A  21F1  120A  118A  	fcall	___lwmod
 10996  0360  0878               	movf	?___lwmod,w
 10997  0361  3E30               	addlw	48
 10998  0362  1283               	bcf	3,5	;RP0=0, select bank0
 10999  0363  1303               	bcf	3,6	;RP1=0, select bank0
 11000  0364  00A9               	movwf	??_sprintf+1
 11001  0365  0829               	movf	??_sprintf+1,w
 11002  0366  2B9A               	goto	L25
 11003  0367                     l3192:	
 11004                           ;doprnt.c: 1497: case 0x80:
 11005                           
 11006                           ;doprnt.c: 1491: break;
 11007                           
 11008                           
 11009                           ;doprnt.c: 1499: {
 11010                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
 11011  0367  082D               	movf	sprintf@prec,w
 11012  0368  00A8               	movwf	??_sprintf
 11013  0369  0728               	addwf	??_sprintf,w
 11014  036A  3E1C               	addlw	low (_hexpowers| (0+32768))
 11015  036B  0084               	movwf	4
 11016  036C  3088               	movlw	high (_hexpowers| (0+32768))
 11017  036D  1803               	skipnc
 11018  036E  3E01               	addlw	1
 11019  036F  00FF               	movwf	127
 11020  0370  120A  158A  2000  120A  118A  	fcall	stringtab
 11021  0375  00F0               	movwf	___lwdiv@divisor
 11022  0376  120A  158A  2000  120A  118A  	fcall	stringtab
 11023  037B  00F1               	movwf	___lwdiv@divisor+1
 11024  037C  0830               	movf	sprintf@val+1,w
 11025  037D  00F3               	movwf	___lwdiv@dividend+1
 11026  037E  082F               	movf	sprintf@val,w
 11027  037F  00F2               	movwf	___lwdiv@dividend
 11028  0380  160A  118A  22CE  120A  118A  	fcall	___lwdiv
 11029  0385  0870               	movf	?___lwdiv,w
 11030  0386  390F               	andlw	15
 11031  0387  1283               	bcf	3,5	;RP0=0, select bank0
 11032  0388  1303               	bcf	3,6	;RP1=0, select bank0
 11033  0389  00A9               	movwf	??_sprintf+1
 11034  038A  0829               	movf	??_sprintf+1,w
 11035  038B  00AB               	movwf	sprintf@idx
 11036                           
 11037                           ;doprnt.c: 1504: c = "0123456789ABCDEF"[idx];
 11038  038C  082B               	movf	sprintf@idx,w
 11039  038D  3E8A               	addlw	low (STR_82| (0+32768))
 11040  038E  0084               	movwf	4
 11041  038F  308B               	movlw	high (STR_82| (0+32768))
 11042  0390  1803               	skipnc
 11043  0391  3E01               	addlw	1
 11044  0392  00FF               	movwf	127
 11045  0393  120A  158A  2000  120A  118A  	fcall	stringtab
 11046  0398  00A8               	movwf	??_sprintf
 11047  0399  0828               	movf	??_sprintf,w
 11048  039A                     L25:	
 11049  039A  00B1               	movwf	sprintf@c
 11050  039B                     l3200:	
 11051                           ;doprnt.c: 1523: }
 11052                           
 11053                           ;doprnt.c: 1508: }
 11054                           ;doprnt.c: 1510: break;
 11055                           
 11056                           
 11057                           ;doprnt.c: 1524: ((*sp++ = (c)));
 11058  039B  0831               	movf	sprintf@c,w
 11059  039C  00A8               	movwf	??_sprintf
 11060  039D  0832               	movf	sprintf@sp,w
 11061  039E  0084               	movwf	4
 11062  039F  0828               	movf	??_sprintf,w
 11063  03A0  1383               	bcf	3,7	;select IRP bank0
 11064  03A1  0080               	movwf	0
 11065  03A2  3001               	movlw	1
 11066  03A3  00A8               	movwf	??_sprintf
 11067  03A4  0828               	movf	??_sprintf,w
 11068  03A5  07B2               	addwf	sprintf@sp,f
 11069  03A6                     l3204:	
 11070  03A6  30FF               	movlw	255
 11071  03A7  00A8               	movwf	??_sprintf
 11072  03A8  0828               	movf	??_sprintf,w
 11073  03A9  07AD               	addwf	sprintf@prec,f
 11074  03AA  0A2D               	incf	sprintf@prec,w
 11075  03AB  1903               	btfsc	3,2
 11076  03AC  2A65               	goto	l3206
 11077  03AD  082E               	movf	sprintf@flag,w
 11078  03AE  3980               	andlw	128
 11079                           
 11080                           ; Switch size 1, requested type "space"
 11081                           ; Number of cases is 2, Range of values is 0 to 128
 11082                           ; switch strategies available:
 11083                           ; Name         Instructions Cycles
 11084                           ; simple_byte            7     4 (average)
 11085                           ; jumptable            260     6 (fixed)
 11086                           ;	Chosen strategy is simple_byte
 11087  03AF  3A00               	xorlw	0	; case 0
 11088  03B0  1903               	skipnz
 11089  03B1  2B35               	goto	l3190
 11090  03B2  3A80               	xorlw	128	; case 128
 11091  03B3  1903               	skipnz
 11092  03B4  2B67               	goto	l3192
 11093  03B5  2B9B               	goto	l3200
 11094  03B6  2B9B               	goto	l3200
 11095  03B7                     l3208:	
 11096                           ;doprnt.c: 1525: }
 11097                           ;doprnt.c: 1533: }
 11098                           ;doprnt.c: 1535: alldone:
 11099                           
 11100                           
 11101                           ;doprnt.c: 1538: *sp = 0;
 11102  03B7  0832               	movf	sprintf@sp,w
 11103  03B8  0084               	movwf	4
 11104  03B9  1383               	bcf	3,7	;select IRP bank0
 11105  03BA  0180               	clrf	0
 11106  03BB  0008               	return
 11107  03BC                     __end_of_sprintf:	
 11108                           ;doprnt.c: 1540: return 0;
 11109                           ;	Return value of _sprintf is never used
 11110                           
 11111                           
 11112                           	psect	text53
 11113  11F1                     __ptext53:	
 11114 ;; *************** function ___lwmod *****************
 11115 ;; Defined at:
 11116 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\lwmod.c"
 11117 ;; Parameters:    Size  Location     Type
 11118 ;;  divisor         2    8[COMMON] unsigned int 
 11119 ;;  dividend        2   10[COMMON] unsigned int 
 11120 ;; Auto vars:     Size  Location     Type
 11121 ;;  counter         1   13[COMMON] unsigned char 
 11122 ;; Return value:  Size  Location     Type
 11123 ;;                  2    8[COMMON] unsigned int 
 11124 ;; Registers used:
 11125 ;;		wreg, status,2, status,0
 11126 ;; Tracked objects:
 11127 ;;		On entry : 0/0
 11128 ;;		On exit  : 0/0
 11129 ;;		Unchanged: 0/0
 11130 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 11131 ;;      Params:         4       0       0       0       0
 11132 ;;      Locals:         1       0       0       0       0
 11133 ;;      Temps:          1       0       0       0       0
 11134 ;;      Totals:         6       0       0       0       0
 11135 ;;Total ram usage:        6 bytes
 11136 ;; Hardware stack levels used:    1
 11137 ;; This function calls:
 11138 ;;		Nothing
 11139 ;; This function is called by:
 11140 ;;		_sprintf
 11141 ;; This function uses a non-reentrant model
 11142 ;;
 11143                           
 11144                           
 11145                           ;psect for function ___lwmod
 11146  11F1                     ___lwmod:	
 11147                           
 11148                           ;incstack = 0
 11149                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
 11150  11F1  0878               	movf	___lwmod@divisor,w
 11151  11F2  0479               	iorwf	___lwmod@divisor+1,w
 11152  11F3  1903               	btfsc	3,2
 11153  11F4  2A1E               	goto	l3112
 11154  11F5  01FD               	clrf	___lwmod@counter
 11155  11F6  0AFD               	incf	___lwmod@counter,f
 11156  11F7                     l3102:	
 11157  11F7  1BF9               	btfsc	___lwmod@divisor+1,7
 11158  11F8  2A05               	goto	l3104
 11159  11F9  3001               	movlw	1
 11160  11FA                     u2515:	
 11161  11FA  1003               	clrc
 11162  11FB  0DF8               	rlf	___lwmod@divisor,f
 11163  11FC  0DF9               	rlf	___lwmod@divisor+1,f
 11164  11FD  3EFF               	addlw	-1
 11165  11FE  1D03               	skipz
 11166  11FF  29FA               	goto	u2515
 11167  1200  3001               	movlw	1
 11168  1201  00FC               	movwf	??___lwmod
 11169  1202  087C               	movf	??___lwmod,w
 11170  1203  07FD               	addwf	___lwmod@counter,f
 11171  1204  29F7               	goto	l3102
 11172  1205                     l3104:	
 11173  1205  0879               	movf	___lwmod@divisor+1,w
 11174  1206  027B               	subwf	___lwmod@dividend+1,w
 11175  1207  1D03               	skipz
 11176  1208  2A0B               	goto	u2535
 11177  1209  0878               	movf	___lwmod@divisor,w
 11178  120A  027A               	subwf	___lwmod@dividend,w
 11179  120B                     u2535:	
 11180  120B  1C03               	skipc
 11181  120C  2A13               	goto	l3108
 11182  120D  0878               	movf	___lwmod@divisor,w
 11183  120E  02FA               	subwf	___lwmod@dividend,f
 11184  120F  0879               	movf	___lwmod@divisor+1,w
 11185  1210  1C03               	skipc
 11186  1211  03FB               	decf	___lwmod@dividend+1,f
 11187  1212  02FB               	subwf	___lwmod@dividend+1,f
 11188  1213                     l3108:	
 11189  1213  3001               	movlw	1
 11190  1214                     u2545:	
 11191  1214  1003               	clrc
 11192  1215  0CF9               	rrf	___lwmod@divisor+1,f
 11193  1216  0CF8               	rrf	___lwmod@divisor,f
 11194  1217  3EFF               	addlw	-1
 11195  1218  1D03               	skipz
 11196  1219  2A14               	goto	u2545
 11197  121A  3001               	movlw	1
 11198  121B  02FD               	subwf	___lwmod@counter,f
 11199  121C  1D03               	btfss	3,2
 11200  121D  2A05               	goto	l3104
 11201  121E                     l3112:	
 11202  121E  087B               	movf	___lwmod@dividend+1,w
 11203  121F  00F9               	movwf	?___lwmod+1
 11204  1220  087A               	movf	___lwmod@dividend,w
 11205  1221  00F8               	movwf	?___lwmod
 11206  1222  0008               	return
 11207  1223                     __end_of___lwmod:	
 11208                           
 11209                           	psect	text54
 11210  12CE                     __ptext54:	
 11211 ;; *************** function ___lwdiv *****************
 11212 ;; Defined at:
 11213 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\lwdiv.c"
 11214 ;; Parameters:    Size  Location     Type
 11215 ;;  divisor         2    0[COMMON] unsigned int 
 11216 ;;  dividend        2    2[COMMON] unsigned int 
 11217 ;; Auto vars:     Size  Location     Type
 11218 ;;  quotient        2    5[COMMON] unsigned int 
 11219 ;;  counter         1    7[COMMON] unsigned char 
 11220 ;; Return value:  Size  Location     Type
 11221 ;;                  2    0[COMMON] unsigned int 
 11222 ;; Registers used:
 11223 ;;		wreg, status,2, status,0
 11224 ;; Tracked objects:
 11225 ;;		On entry : 0/0
 11226 ;;		On exit  : 0/0
 11227 ;;		Unchanged: 0/0
 11228 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 11229 ;;      Params:         4       0       0       0       0
 11230 ;;      Locals:         3       0       0       0       0
 11231 ;;      Temps:          1       0       0       0       0
 11232 ;;      Totals:         8       0       0       0       0
 11233 ;;Total ram usage:        8 bytes
 11234 ;; Hardware stack levels used:    1
 11235 ;; This function calls:
 11236 ;;		Nothing
 11237 ;; This function is called by:
 11238 ;;		_sprintf
 11239 ;; This function uses a non-reentrant model
 11240 ;;
 11241                           
 11242                           
 11243                           ;psect for function ___lwdiv
 11244  12CE                     ___lwdiv:	
 11245                           
 11246                           ;incstack = 0
 11247                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
 11248  12CE  01F5               	clrf	___lwdiv@quotient
 11249  12CF  01F6               	clrf	___lwdiv@quotient+1
 11250  12D0  0870               	movf	___lwdiv@divisor,w
 11251  12D1  0471               	iorwf	___lwdiv@divisor+1,w
 11252  12D2  1903               	btfsc	3,2
 11253  12D3  2B05               	goto	l3090
 11254  12D4  01F7               	clrf	___lwdiv@counter
 11255  12D5  0AF7               	incf	___lwdiv@counter,f
 11256  12D6                     l3078:	
 11257  12D6  1BF1               	btfsc	___lwdiv@divisor+1,7
 11258  12D7  2AE4               	goto	l3080
 11259  12D8  3001               	movlw	1
 11260  12D9                     u2445:	
 11261  12D9  1003               	clrc
 11262  12DA  0DF0               	rlf	___lwdiv@divisor,f
 11263  12DB  0DF1               	rlf	___lwdiv@divisor+1,f
 11264  12DC  3EFF               	addlw	-1
 11265  12DD  1D03               	skipz
 11266  12DE  2AD9               	goto	u2445
 11267  12DF  3001               	movlw	1
 11268  12E0  00F4               	movwf	??___lwdiv
 11269  12E1  0874               	movf	??___lwdiv,w
 11270  12E2  07F7               	addwf	___lwdiv@counter,f
 11271  12E3  2AD6               	goto	l3078
 11272  12E4                     l3080:	
 11273  12E4  3001               	movlw	1
 11274  12E5                     u2465:	
 11275  12E5  1003               	clrc
 11276  12E6  0DF5               	rlf	___lwdiv@quotient,f
 11277  12E7  0DF6               	rlf	___lwdiv@quotient+1,f
 11278  12E8  3EFF               	addlw	-1
 11279  12E9  1D03               	skipz
 11280  12EA  2AE5               	goto	u2465
 11281  12EB  0871               	movf	___lwdiv@divisor+1,w
 11282  12EC  0273               	subwf	___lwdiv@dividend+1,w
 11283  12ED  1D03               	skipz
 11284  12EE  2AF1               	goto	u2475
 11285  12EF  0870               	movf	___lwdiv@divisor,w
 11286  12F0  0272               	subwf	___lwdiv@dividend,w
 11287  12F1                     u2475:	
 11288  12F1  1C03               	skipc
 11289  12F2  2AFA               	goto	l3086
 11290  12F3  0870               	movf	___lwdiv@divisor,w
 11291  12F4  02F2               	subwf	___lwdiv@dividend,f
 11292  12F5  0871               	movf	___lwdiv@divisor+1,w
 11293  12F6  1C03               	skipc
 11294  12F7  03F3               	decf	___lwdiv@dividend+1,f
 11295  12F8  02F3               	subwf	___lwdiv@dividend+1,f
 11296  12F9  1475               	bsf	___lwdiv@quotient,0
 11297  12FA                     l3086:	
 11298  12FA  3001               	movlw	1
 11299  12FB                     u2485:	
 11300  12FB  1003               	clrc
 11301  12FC  0CF1               	rrf	___lwdiv@divisor+1,f
 11302  12FD  0CF0               	rrf	___lwdiv@divisor,f
 11303  12FE  3EFF               	addlw	-1
 11304  12FF  1D03               	skipz
 11305  1300  2AFB               	goto	u2485
 11306  1301  3001               	movlw	1
 11307  1302  02F7               	subwf	___lwdiv@counter,f
 11308  1303  1D03               	btfss	3,2
 11309  1304  2AE4               	goto	l3080
 11310  1305                     l3090:	
 11311  1305  0876               	movf	___lwdiv@quotient+1,w
 11312  1306  00F1               	movwf	?___lwdiv+1
 11313  1307  0875               	movf	___lwdiv@quotient,w
 11314  1308  00F0               	movwf	?___lwdiv
 11315  1309  0008               	return
 11316  130A                     __end_of___lwdiv:	
 11317                           
 11318                           	psect	text55
 11319  10AB                     __ptext55:	
 11320 ;; *************** function _eeprom_write *****************
 11321 ;; Defined at:
 11322 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\pic\eewrite.c"
 11323 ;; Parameters:    Size  Location     Type
 11324 ;;  addr            1    wreg     unsigned char 
 11325 ;;  value           1    0[COMMON] unsigned char 
 11326 ;; Auto vars:     Size  Location     Type
 11327 ;;  addr            1    2[COMMON] unsigned char 
 11328 ;; Return value:  Size  Location     Type
 11329 ;;                  1    wreg      void 
 11330 ;; Registers used:
 11331 ;;		wreg, status,2, status,0
 11332 ;; Tracked objects:
 11333 ;;		On entry : 0/0
 11334 ;;		On exit  : 0/0
 11335 ;;		Unchanged: 0/0
 11336 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 11337 ;;      Params:         1       0       0       0       0
 11338 ;;      Locals:         1       0       0       0       0
 11339 ;;      Temps:          1       0       0       0       0
 11340 ;;      Totals:         3       0       0       0       0
 11341 ;;Total ram usage:        3 bytes
 11342 ;; Hardware stack levels used:    1
 11343 ;; This function calls:
 11344 ;;		Nothing
 11345 ;; This function is called by:
 11346 ;;		_eeprom_write_int
 11347 ;; This function uses a non-reentrant model
 11348 ;;
 11349                           
 11350                           
 11351                           ;psect for function _eeprom_write
 11352  10AB                     _eeprom_write:	
 11353                           
 11354                           ;incstack = 0
 11355                           ; Regs used in _eeprom_write: [wreg+status,2+status,0]
 11356                           ;eeprom_write@addr stored from wreg
 11357  10AB  00F2               	movwf	eeprom_write@addr
 11358  10AC                     l778:	
 11359  10AC  1683               	bsf	3,5	;RP0=1, select bank3
 11360  10AD  1703               	bsf	3,6	;RP1=1, select bank3
 11361  10AE  188C               	btfsc	12,1	;volsfr
 11362  10AF  28AC               	goto	l778
 11363  10B0  0872               	movf	eeprom_write@addr,w
 11364  10B1  1283               	bcf	3,5	;RP0=0, select bank2
 11365  10B2  1703               	bsf	3,6	;RP1=1, select bank2
 11366  10B3  008D               	movwf	13	;volatile
 11367  10B4  0870               	movf	eeprom_write@value,w
 11368  10B5  008C               	movwf	12	;volatile
 11369  10B6  303F               	movlw	63
 11370  10B7  00F1               	movwf	??_eeprom_write
 11371  10B8  0871               	movf	??_eeprom_write,w
 11372  10B9  1683               	bsf	3,5	;RP0=1, select bank3
 11373  10BA  1703               	bsf	3,6	;RP1=1, select bank3
 11374  10BB  058C               	andwf	12,f	;volsfr
 11375  10BC  1283               	bcf	3,5	;RP0=0, select bank0
 11376  10BD  1303               	bcf	3,6	;RP1=0, select bank0
 11377  10BE  1003               	bcf	3,0	;volatile
 11378  10BF  1B8B               	btfsc	11,7	;volatile
 11379  10C0  1403               	bsf	3,0	;volatile
 11380  10C1  138B               	bcf	11,7	;volatile
 11381  10C2  1683               	bsf	3,5	;RP0=1, select bank3
 11382  10C3  1703               	bsf	3,6	;RP1=1, select bank3
 11383  10C4  150C               	bsf	12,2	;volsfr
 11384  10C5  3055               	movlw	85
 11385  10C6  008D               	movwf	13	;volsfr
 11386  10C7  30AA               	movlw	170
 11387  10C8  008D               	movwf	13	;volsfr
 11388  10C9  148C               	bsf	12,1	;volsfr
 11389  10CA  110C               	bcf	12,2	;volsfr
 11390  10CB  1283               	bcf	3,5	;RP0=0, select bank0
 11391  10CC  1303               	bcf	3,6	;RP1=0, select bank0
 11392  10CD  1C03               	btfss	3,0	;volatile
 11393  10CE  0008               	return
 11394  10CF  178B               	bsf	11,7	;volatile
 11395  10D0  0008               	return
 11396  10D1                     __end_of_eeprom_write:	
 11397                           
 11398                           	psect	text56
 11399  0004                     __ptext56:	
 11400 ;; *************** function _USARTWriteString *****************
 11401 ;; Defined at:
 11402 ;;		line 73 in file "../usart_pic16.c"
 11403 ;; Parameters:    Size  Location     Type
 11404 ;;  str             1    wreg     PTR const unsigned char 
 11405 ;;		 -> g_debug(32), 
 11406 ;; Auto vars:     Size  Location     Type
 11407 ;;  str             1    2[COMMON] PTR const unsigned char 
 11408 ;;		 -> g_debug(32), 
 11409 ;; Return value:  Size  Location     Type
 11410 ;;                  1    wreg      void 
 11411 ;; Registers used:
 11412 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 11413 ;; Tracked objects:
 11414 ;;		On entry : 0/0
 11415 ;;		On exit  : 0/0
 11416 ;;		Unchanged: 0/0
 11417 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 11418 ;;      Params:         0       0       0       0       0
 11419 ;;      Locals:         1       0       0       0       0
 11420 ;;      Temps:          1       0       0       0       0
 11421 ;;      Totals:         2       0       0       0       0
 11422 ;;Total ram usage:        2 bytes
 11423 ;; Hardware stack levels used:    1
 11424 ;; Hardware stack levels required when called:    1
 11425 ;; This function calls:
 11426 ;;		_USARTWriteChar
 11427 ;; This function is called by:
 11428 ;;		_dbg_print_MATRIX4x4
 11429 ;;		_dbg_print_MATRIX8x8
 11430 ;;		_dbg_print_Screen
 11431 ;;		_dbg_print_cur_MATRIX4x4
 11432 ;;		_eeprom_write_int
 11433 ;;		_eeprom_read_int
 11434 ;;		_lg_is_row_full
 11435 ;;		_lg_delete_matrix
 11436 ;;		_lg_get_num_removed_rows
 11437 ;;		_lg_hit_land
 11438 ;;		_lg_is_valid
 11439 ;;		_lg_is_left_boundary
 11440 ;;		_lg_is_right_boundary
 11441 ;;		_lg_fall_off
 11442 ;;		_lg_get_num_of_orphan
 11443 ;;		_lg_get_weight
 11444 ;;		_lg_left_most
 11445 ;;		_lg_right_most
 11446 ;;		_lg_get_height
 11447 ;;		_lg_get_height_after_merge
 11448 ;;		_lg_get_holes_after_merge
 11449 ;;		_lg_find_best_solution
 11450 ;;		_main
 11451 ;;		_dbg_print_MATRIX7219
 11452 ;;		_dbg_print_all_MATRIX4x4
 11453 ;;		_USARTWriteLine
 11454 ;; This function uses a non-reentrant model
 11455 ;;
 11456                           
 11457                           
 11458                           ;psect for function _USARTWriteString
 11459  0004                     _USARTWriteString:	
 11460                           
 11461                           ;incstack = 0
 11462                           ; Regs used in _USARTWriteString: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 11463                           ;USARTWriteString@str stored from wreg
 11464  0004  00F2               	movwf	USARTWriteString@str
 11465  0005                     l3218:	
 11466                           ;usart_pic16.c: 74: while (*str != '\0') {
 11467                           
 11468  0005  0872               	movf	USARTWriteString@str,w
 11469  0006  0084               	movwf	4
 11470  0007  1383               	bcf	3,7	;select IRP bank0
 11471  0008  0800               	movf	0,w
 11472  0009  1903               	btfsc	3,2
 11473  000A  0008               	return
 11474                           
 11475                           ;usart_pic16.c: 75: USARTWriteChar(*str);
 11476  000B  0872               	movf	USARTWriteString@str,w
 11477  000C  0084               	movwf	4
 11478  000D  1383               	bcf	3,7	;select IRP bank0
 11479  000E  0800               	movf	0,w
 11480  000F  160A  158A  271B  120A  118A  	fcall	_USARTWriteChar
 11481                           
 11482                           ;usart_pic16.c: 76: str++;
 11483  0014  3001               	movlw	1
 11484  0015  00F1               	movwf	??_USARTWriteString
 11485  0016  0871               	movf	??_USARTWriteString,w
 11486  0017  07F2               	addwf	USARTWriteString@str,f
 11487  0018  2805               	goto	l3218
 11488  0019                     __end_of_USARTWriteString:	
 11489                           
 11490                           	psect	text57
 11491  1F1B                     __ptext57:	
 11492 ;; *************** function _USARTWriteChar *****************
 11493 ;; Defined at:
 11494 ;;		line 67 in file "../usart_pic16.c"
 11495 ;; Parameters:    Size  Location     Type
 11496 ;;  ch              1    wreg     unsigned char 
 11497 ;; Auto vars:     Size  Location     Type
 11498 ;;  ch              1    0[COMMON] unsigned char 
 11499 ;; Return value:  Size  Location     Type
 11500 ;;                  1    wreg      void 
 11501 ;; Registers used:
 11502 ;;		wreg
 11503 ;; Tracked objects:
 11504 ;;		On entry : 0/0
 11505 ;;		On exit  : 0/0
 11506 ;;		Unchanged: 0/0
 11507 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 11508 ;;      Params:         0       0       0       0       0
 11509 ;;      Locals:         1       0       0       0       0
 11510 ;;      Temps:          0       0       0       0       0
 11511 ;;      Totals:         1       0       0       0       0
 11512 ;;Total ram usage:        1 bytes
 11513 ;; Hardware stack levels used:    1
 11514 ;; This function calls:
 11515 ;;		Nothing
 11516 ;; This function is called by:
 11517 ;;		_USARTWriteString
 11518 ;;		_USARTWriteLine
 11519 ;;		_USARTWriteInt
 11520 ;;		_USARTGotoNewLine
 11521 ;; This function uses a non-reentrant model
 11522 ;;
 11523                           
 11524                           
 11525                           ;psect for function _USARTWriteChar
 11526  1F1B                     _USARTWriteChar:	
 11527                           
 11528                           ;incstack = 0
 11529                           ; Regs used in _USARTWriteChar: [wreg]
 11530                           ;USARTWriteChar@ch stored from wreg
 11531  1F1B  00F0               	movwf	USARTWriteChar@ch
 11532  1F1C                     l665:	
 11533                           ;usart_pic16.c: 68: while (!PIR1bits.TXIF);
 11534                           
 11535  1F1C  1283               	bcf	3,5	;RP0=0, select bank0
 11536  1F1D  1303               	bcf	3,6	;RP1=0, select bank0
 11537  1F1E  1E0C               	btfss	12,4	;volatile
 11538  1F1F  2F1C               	goto	l665
 11539                           
 11540                           ;usart_pic16.c: 70: TXREG = ch;
 11541  1F20  0870               	movf	USARTWriteChar@ch,w
 11542  1F21  0099               	movwf	25	;volatile
 11543  1F22  0008               	return
 11544  1F23                     __end_of_USARTWriteChar:	
 11545  007E                     btemp	set	126	;btemp
 11546  007E                     wtemp	set	126
 11547  007E                     wtemp0	set	126
 11548  0080                     wtemp1	set	128
 11549  0082                     wtemp2	set	130
 11550  0084                     wtemp3	set	132
 11551  0086                     wtemp4	set	134
 11552  0088                     wtemp5	set	136
 11553  007F                     wtemp6	set	127
 11554  007E                     ttemp	set	126
 11555  007E                     ttemp0	set	126
 11556  0081                     ttemp1	set	129
 11557  0084                     ttemp2	set	132
 11558  0087                     ttemp3	set	135
 11559  007F                     ttemp4	set	127
 11560  007E                     ltemp	set	126
 11561  007E                     ltemp0	set	126
 11562  0082                     ltemp1	set	130
 11563  0086                     ltemp2	set	134
 11564  0080                     ltemp3	set	128


Data Sizes:
    Strings     1097
    Constant    114
    Data        23
    BSS         62
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     78      80
    BANK1            80      4      69
    BANK3            96      0      18
    BANK2            96      0       0

Pointer List with Targets:

    lg_is_right_boundary@matrix8x8	PTR const struct . size(1) Largest target is 8
		 -> g_matrix8x8(BANK1[8]), 

    lg_is_left_boundary@matrix8x8	PTR const struct . size(1) Largest target is 8
		 -> g_matrix8x8(BANK1[8]), 

    memset@p1	PTR void  size(1) Largest target is 8
		 -> g_matrix8x8(BANK1[8]), 

    memset@p	PTR unsigned char  size(1) Largest target is 8
		 -> g_matrix8x8(BANK1[8]), 

    memcpy@d1	PTR void  size(1) Largest target is 8
		 -> temp_matrix8x8(BANK1[8]), 

    memcpy@d	PTR unsigned char  size(1) Largest target is 8
		 -> temp_matrix8x8(BANK1[8]), 

    memcpy@s1	PTR const void  size(1) Largest target is 8
		 -> g_matrix8x8(BANK1[8]), 

    memcpy@s	PTR const unsigned char  size(1) Largest target is 8
		 -> g_matrix8x8(BANK1[8]), 

    sprintf@f	PTR const unsigned char  size(2) Largest target is 8192
		 -> STR_81(CODE[12]), STR_80(CODE[15]), STR_79(CODE[15]), STR_78(CODE[25]), 
		 -> STR_77(CODE[29]), STR_76(CODE[12]), STR_75(CODE[23]), STR_74(CODE[15]), 
		 -> STR_73(CODE[61]), STR_72(CODE[7]), STR_71(CODE[54]), STR_70(CODE[20]), 
		 -> STR_69(CODE[17]), STR_68(CODE[19]), STR_67(CODE[15]), STR_66(CODE[15]), 
		 -> STR_65(CODE[15]), STR_64(CODE[27]), STR_63(CODE[16]), STR_62(CODE[12]), 
		 -> STR_61(CODE[13]), STR_60(CODE[11]), STR_59(CODE[14]), STR_58(CODE[11]), 
		 -> STR_57(CODE[9]), STR_56(CODE[28]), STR_55(CODE[28]), STR_54(CODE[18]), 
		 -> STR_53(CODE[17]), STR_52(CODE[12]), STR_51(CODE[12]), STR_50(CODE[22]), 
		 -> STR_49(CODE[23]), STR_48(CODE[23]), STR_47(CODE[17]), STR_46(CODE[12]), 
		 -> STR_45(CODE[17]), STR_44(CODE[12]), STR_43(CODE[28]), STR_42(CODE[27]), 
		 -> STR_41(CODE[8]), STR_40(CODE[21]), STR_39(CODE[13]), STR_38(CODE[21]), 
		 -> STR_37(CODE[13]), STR_36(CODE[21]), STR_35(CODE[13]), STR_34(CODE[37]), 
		 -> STR_33(CODE[10]), STR_32(CODE[26]), STR_31(CODE[26]), STR_30(CODE[37]), 
		 -> STR_29(CODE[21]), STR_28(CODE[27]), STR_27(CODE[23]), STR_26(CODE[24]), 
		 -> STR_25(CODE[12]), STR_24(CODE[18]), STR_23(CODE[11]), STR_22(CODE[23]), 
		 -> STR_21(CODE[24]), STR_20(CODE[4]), STR_19(CODE[4]), STR_18(CODE[23]), 
		 -> STR_17(CODE[3]), STR_16(CODE[2]), STR_15(CODE[2]), STR_14(CODE[23]), 
		 -> STR_13(CODE[4]), STR_12(CODE[23]), STR_11(CODE[3]), STR_10(CODE[2]), 
		 -> STR_9(CODE[2]), STR_8(CODE[32]), STR_7(CODE[4]), STR_6(CODE[23]), 
		 -> STR_5(CODE[3]), STR_4(CODE[2]), STR_3(CODE[2]), STR_2(CODE[32]), 
		 -> STR_1(CODE[4]), ROM(CODE[8192]), 

    sprintf@sp	PTR unsigned char  size(1) Largest target is 32
		 -> g_debug(BANK1[32]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    USARTWriteString@str	PTR const unsigned char  size(1) Largest target is 32
		 -> g_debug(BANK1[32]), 

    g_cur_matrix4x4	PTR struct . size(2) Largest target is 96
		 -> NULL(NULL[0]), g_matrix4x4(CODE[96]), 

    temp_cur_matrix4x4	PTR struct . size(2) Largest target is 96
		 -> NULL(NULL[0]), g_matrix4x4(CODE[96]), 

    lg_get_holes_after_merge@matrix	PTR struct . size(1) Largest target is 8
		 -> temp_matrix8x8(BANK1[8]), 

    lg_get_height_after_merge@matrix	PTR struct . size(2) Largest target is 96
		 -> NULL(NULL[0]), g_matrix4x4(CODE[96]), 

    lg_get_height@matrix	PTR struct . size(1) Largest target is 8
		 -> g_matrix8x8(BANK1[8]), 

    lg_right_most@matrix8x8	PTR const struct . size(1) Largest target is 8
		 -> g_matrix8x8(BANK1[8]), 

    lg_right_most@matrix4x4	PTR const struct . size(2) Largest target is 96
		 -> NULL(NULL[0]), g_matrix4x4(CODE[96]), 

    lg_left_most@matrix8x8	PTR const struct . size(1) Largest target is 8
		 -> g_matrix8x8(BANK1[8]), 

    lg_left_most@matrix4x4	PTR const struct . size(2) Largest target is 96
		 -> NULL(NULL[0]), g_matrix4x4(CODE[96]), 

    lg_get_weight@matrix	PTR const struct . size(1) Largest target is 8
		 -> temp_matrix8x8(BANK1[8]), 

    lg_get_num_of_orphan@matrix	PTR const struct . size(1) Largest target is 8
		 -> temp_matrix8x8(BANK1[8]), 

    lg_merge1@matrix4x4	PTR const struct . size(2) Largest target is 96
		 -> NULL(NULL[0]), g_matrix4x4(CODE[96]), 

    sp__memcpy	PTR void  size(1) Largest target is 8
		 -> temp_matrix8x8(BANK1[8]), 

    lg_merge1@matrix8x8_in	PTR const struct . size(1) Largest target is 8
		 -> g_matrix8x8(BANK1[8]), 

    lg_merge1@matrix8x8_out	PTR struct . size(1) Largest target is 8
		 -> temp_matrix8x8(BANK1[8]), 

    lg_merge@matrix8x8	PTR struct . size(1) Largest target is 8
		 -> g_matrix8x8(BANK1[8]), 

    lg_merge@matrix4x4	PTR const struct . size(2) Largest target is 96
		 -> NULL(NULL[0]), g_matrix4x4(CODE[96]), 

    lg_clear@matrix8x8	PTR struct . size(1) Largest target is 8
		 -> g_matrix8x8(BANK1[8]), 

    lg_clear@matrix4x4	PTR const struct . size(2) Largest target is 96
		 -> NULL(NULL[0]), g_matrix4x4(CODE[96]), 

    lg_fall_off@matrix8x8	PTR const struct . size(1) Largest target is 8
		 -> g_matrix8x8(BANK1[8]), 

    lg_fall_off@matrix4x4	PTR const struct . size(2) Largest target is 96
		 -> NULL(NULL[0]), g_matrix4x4(CODE[96]), 

    lg_is_right_boundary@matrix4x4	PTR const struct . size(2) Largest target is 96
		 -> NULL(NULL[0]), g_matrix4x4(CODE[96]), 

    lg_is_left_boundary@matrix4x4	PTR const struct . size(2) Largest target is 96
		 -> NULL(NULL[0]), g_matrix4x4(CODE[96]), 

    lg_is_valid@matrix8x8	PTR const struct . size(1) Largest target is 8
		 -> g_matrix8x8(BANK1[8]), 

    lg_is_valid@matrix4x4	PTR const struct . size(2) Largest target is 96
		 -> NULL(NULL[0]), g_matrix4x4(CODE[96]), 

    lg_hit_land@matrix8x8	PTR const struct . size(1) Largest target is 8
		 -> g_matrix8x8(BANK1[8]), 

    lg_hit_land@matrix4x4	PTR const struct . size(2) Largest target is 96
		 -> NULL(NULL[0]), g_matrix4x4(CODE[96]), 

    lg_is_row_empty@matrix	PTR const struct . size(1) Largest target is 8
		 -> g_matrix8x8(BANK1[8]), 

    lg_get_num_removed_rows@matrix	PTR struct . size(1) Largest target is 8
		 -> temp_matrix8x8(BANK1[8]), 

    lg_delete_matrix@matrix	PTR struct . size(1) Largest target is 8
		 -> g_matrix8x8(BANK1[8]), 

    lg_delete_matrix_row@matrix	PTR struct . size(1) Largest target is 8
		 -> g_matrix8x8(BANK1[8]), 

    lg_is_row_full@matrix	PTR const struct . size(1) Largest target is 8
		 -> temp_matrix8x8(BANK1[8]), g_matrix8x8(BANK1[8]), 

    sp__memset	PTR void  size(1) Largest target is 8
		 -> g_matrix8x8(BANK1[8]), 

    sp__lg_get_MATRIX4x4	PTR struct . size(2) Largest target is 96
		 -> g_matrix4x4(CODE[96]), 

    hal_print_MATRIX8x8@matrix88	PTR const struct . size(1) Largest target is 8
		 -> g_matrix8x8(BANK1[8]), 

    hal_print_MATRIX7219@matrix7219	PTR const struct . size(1) Largest target is 8
		 -> hal_print_MATRIX8x8@matrix7219(BANK0[8]), 

    hal_MATRIX8x8_to_MATRIX7219@matrix8x8	PTR const struct . size(1) Largest target is 8
		 -> g_matrix8x8(BANK1[8]), 

    hal_MATRIX8x8_to_MATRIX7219@matrix7219	PTR struct . size(1) Largest target is 8
		 -> hal_print_MATRIX8x8@matrix7219(BANK0[8]), 

    dbg_print_cur_MATRIX4x4@matrix	PTR struct . size(2) Largest target is 96
		 -> g_matrix4x4(CODE[96]), 

    dbg_print_cur_MATRIX4x4@lable	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_72(CODE[7]), 

    dbg_print_Screen@lable	PTR const unsigned char  size(2) Largest target is 15
		 -> STR_66(CODE[15]), 

    dbg_print_MATRIX8x8@matrix	PTR const struct . size(1) Largest target is 8
		 -> temp_matrix8x8(BANK1[8]), g_matrix8x8(BANK1[8]), 

    dbg_print_MATRIX8x8@lable	PTR const unsigned char  size(2) Largest target is 8192
		 -> STR_81(CODE[12]), STR_67(CODE[15]), STR_50(CODE[22]), STR_49(CODE[23]), 
		 -> STR_27(CODE[23]), STR_26(CODE[24]), STR_25(CODE[12]), ROM(CODE[8192]), 

    dbg_print_MATRIX4x4@matrix	PTR const struct . size(2) Largest target is 96
		 -> NULL(NULL[0]), g_matrix4x4(CODE[96]), 

    dbg_print_MATRIX4x4@lable	PTR const unsigned char  size(2) Largest target is 8192
		 -> STR_65(CODE[15]), STR_48(CODE[23]), ROM(CODE[8192]), 

    get_matrix_bit@byte	PTR const unsigned char  size(2) Largest target is 96
		 -> temp_matrix8x8.row(BANK1[8]), NULL(NULL[0]), temp_matrix8x8(BANK1[8]), g_matrix8x8.row(BANK1[8]), 
		 -> g_matrix8x8(BANK1[8]), g_matrix4x4.row(CODE[4]), g_matrix4x4(CODE[96]), 

    set_matrix_bit@byte	PTR unsigned char  size(1) Largest target is 8
		 -> temp_matrix8x8(BANK1[8]), g_matrix8x8(BANK1[8]), 

    getbit@byte	PTR const unsigned char  size(2) Largest target is 96
		 -> temp_matrix8x8.row(BANK1[8]), NULL(NULL[0]), temp_matrix8x8(BANK1[8]), g_matrix8x8.row(BANK1[8]), 
		 -> g_matrix8x8(BANK1[8]), g_matrix4x4.row(CODE[4]), g_matrix4x4(CODE[96]), 

    getbit@temp	PTR struct . size(2) Largest target is 96
		 -> temp_matrix8x8.row(BANK1[8]), NULL(NULL[0]), temp_matrix8x8(BANK1[8]), g_matrix8x8.row(BANK1[8]), 
		 -> g_matrix8x8(BANK1[8]), g_matrix4x4.row(CODE[4]), g_matrix4x4(CODE[96]), 

    setbit@byte	PTR unsigned char  size(1) Largest target is 8
		 -> temp_matrix8x8(BANK1[8]), g_matrix8x8(BANK1[8]), 

    setbit@temp	PTR struct . size(1) Largest target is 8
		 -> temp_matrix8x8(BANK1[8]), g_matrix8x8(BANK1[8]), 


Critical Paths under _main in COMMON

    _main->_lg_clear
    _max7219_init1->_Write_Byte
    _dbg_init->_USARTInit
    _lg_find_best_solution->_lg_merge1
    _lg_merge1->_get_matrix_bit
    _hal_print_Screen->_hal_print_MATRIX8x8
    _hal_print_MATRIX8x8->_hal_MATRIX8x8_to_MATRIX7219
    _hal_print_MATRIX7219->_Write_Byte
    _Write_Byte->_SPI1_write
    _hal_MATRIX8x8_to_MATRIX7219->_get_matrix_bit
    _lg_clear->_get_matrix_bit
    _set_matrix_bit->_setbit
    _get_matrix_bit->_getbit
    _lg_char_info_index_rand->___awmod
    _rand->___lmul
    _sprintf->___lwmod
    ___lwmod->___lwdiv
    _USARTWriteString->_USARTWriteChar

Critical Paths under _main in BANK0

    _main->_lg_find_best_solution
    _main_init->_eeprom_read_int
    _eeprom_read_int->_sprintf
    _lg_merge->_dbg_print_MATRIX4x4
    _lg_hit_land->_sprintf
    _lg_find_best_solution->_dbg_print_cur_MATRIX4x4
    _lg_right_most->_lg_is_right_boundary
    _lg_is_right_boundary->_sprintf
    _lg_left_most->_lg_is_left_boundary
    _lg_is_left_boundary->_sprintf
    _lg_is_valid->_sprintf
    _lg_get_weight->_sprintf
    _lg_get_num_removed_rows->_lg_is_row_full
    _lg_get_num_of_orphan->_sprintf
    _lg_get_holes_after_merge->_sprintf
    _lg_get_height_after_merge->_sprintf
    _lg_get_height->_sprintf
    _lg_fall_off->_sprintf
    _dbg_print_cur_MATRIX4x4->_dbg_print_MATRIX4x4
    _dbg_print_MATRIX4x4->_sprintf
    _dbg_print_Screen->_dbg_print_MATRIX8x8
    ___wmul->_lg_get_holes_after_merge
    _lg_delete_matrix->_lg_is_row_full
    _lg_is_row_full->_dbg_print_MATRIX8x8
    _dbg_print_MATRIX8x8->_sprintf
    _hal_print_Screen->_hal_print_MATRIX8x8
    _hal_print_MATRIX8x8->_hal_MATRIX8x8_to_MATRIX7219
    _lg_char_info_index_rand->___awmod
    ___awmod->_rand
    _eeprom_write_int->_sprintf

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 5     5      0  454312
                                             77 BANK0      1     1      0
                                              0 BANK1      4     4      0
                   _USARTWriteString
                _dbg_print_MATRIX8x8
                   _eeprom_write_int
                   _hal_print_Screen
            _lg_char_info_index_rand
                           _lg_clear
                    _lg_clear_matrix
                   _lg_delete_matrix
              _lg_find_best_solution
                        _lg_hit_land
                           _lg_merge
                          _main_init
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _main_init                                            0     0      0   10246
                           _dbg_init
                    _eeprom_read_int
                      _max7219_init1
                              _srand
 ---------------------------------------------------------------------------------
 (2) _srand                                                2     0      2      75
                                              0 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (2) _max7219_init1                                        1     1      0     454
                                              6 COMMON     1     1      0
                         _Write_Byte
 ---------------------------------------------------------------------------------
 (2) _eeprom_read_int                                      7     5      2    9642
                                             19 BANK0      7     5      2
                   _USARTWriteString
                        _eeprom_read
                            _sprintf
 ---------------------------------------------------------------------------------
 (3) _eeprom_read                                          2     2      0      22
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (2) _dbg_init                                             0     0      0      75
                          _USARTInit
 ---------------------------------------------------------------------------------
 (3) _USARTInit                                            2     0      2      75
                                              0 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (1) _lg_merge                                             9     5      4   38147
                                             34 BANK0      9     5      4
                _dbg_print_MATRIX4x4
                _dbg_print_MATRIX8x8
                     _get_matrix_bit
                     _set_matrix_bit
 ---------------------------------------------------------------------------------
 (1) _lg_hit_land                                          9     5      4   15092
                                             19 BANK0      9     5      4
                   _USARTWriteString
                     _get_matrix_bit
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _lg_find_best_solution                               32    32      0  285053
                                             45 BANK0     32    32      0
                   _USARTWriteString
                             ___wmul
                _dbg_print_MATRIX4x4
                _dbg_print_MATRIX8x8
                   _dbg_print_Screen
            _dbg_print_cur_MATRIX4x4
                        _lg_fall_off
                      _lg_get_height
          _lg_get_height_after_merge
           _lg_get_holes_after_merge
               _lg_get_num_of_orphan
            _lg_get_num_removed_rows
                      _lg_get_weight
                        _lg_is_valid
                       _lg_left_most
                          _lg_merge1
                      _lg_right_most
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _lg_right_most                                        6     3      3   24587
                                             27 BANK0      6     3      3
                   _USARTWriteString
               _lg_is_right_boundary
                            _sprintf
 ---------------------------------------------------------------------------------
 (3) _lg_is_right_boundary                                 8     5      3   14841
                                             19 BANK0      8     5      3
                   _USARTWriteString
                     _get_matrix_bit
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _lg_merge1                                           12     7      5    6980
                                             12 COMMON     2     2      0
                                              0 BANK0     10     5      5
                     _get_matrix_bit
                             _memcpy
                     _set_matrix_bit
 ---------------------------------------------------------------------------------
 (3) _memcpy                                               7     4      3     253
                                              0 COMMON     7     4      3
 ---------------------------------------------------------------------------------
 (2) _lg_left_most                                         5     2      3   24587
                                             30 BANK0      5     2      3
                   _USARTWriteString
                _lg_is_left_boundary
                            _sprintf
 ---------------------------------------------------------------------------------
 (3) _lg_is_left_boundary                                 11     8      3   14841
                                             19 BANK0     11     8      3
                   _USARTWriteString
                     _get_matrix_bit
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _lg_is_valid                                          9     5      4   15224
                                             19 BANK0      9     5      4
                   _USARTWriteString
                     _get_matrix_bit
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _lg_get_weight                                       12    10      2   15018
                                             19 BANK0     12    10      2
                   _USARTWriteString
                     _get_matrix_bit
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _lg_get_num_removed_rows                              5     5      0   35145
                                             32 BANK0      5     5      0
                   _USARTWriteString
                     _lg_is_row_full
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _lg_get_num_of_orphan                                11     9      2   14971
                                             19 BANK0     11     9      2
                   _USARTWriteString
                     _get_matrix_bit
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _lg_get_holes_after_merge                            12    12      0   15702
                                             19 BANK0     12    12      0
                   _USARTWriteString
                     _get_matrix_bit
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _lg_get_height_after_merge                            7     5      2   14876
                                             19 BANK0      7     5      2
                   _USARTWriteString
                     _get_matrix_bit
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _lg_get_height                                        4     4      0    9792
                                             19 BANK0      4     4      0
                   _USARTWriteString
                    _lg_is_row_empty
                            _sprintf
 ---------------------------------------------------------------------------------
 (3) _lg_is_row_empty                                      2     1      1     102
                                              0 COMMON     2     1      1
 ---------------------------------------------------------------------------------
 (2) _lg_fall_off                                          9     5      4   15137
                                             19 BANK0      9     5      4
                   _USARTWriteString
                     _get_matrix_bit
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _dbg_print_cur_MATRIX4x4                             11     7      4   25646
                                             34 BANK0     11     7      4
                   _USARTWriteString
                _dbg_print_MATRIX4x4
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _dbg_print_MATRIX4x4                                 15     9      6   15825
                                             19 BANK0     15     9      6
                   _USARTWriteString
                     _get_matrix_bit
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _dbg_print_Screen                                     4     2      2   25253
                                             27 BANK0      4     2      2
                   _USARTWriteString
                _dbg_print_MATRIX8x8
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     410
                                             31 BANK0      6     2      4
           _lg_get_holes_after_merge (ARG)
 ---------------------------------------------------------------------------------
 (1) _lg_delete_matrix                                     5     5      0   51053
                                             32 BANK0      5     5      0
                   _USARTWriteString
                _dbg_print_MATRIX8x8
               _lg_delete_matrix_row
                     _lg_is_row_full
                            _sprintf
 ---------------------------------------------------------------------------------
 (3) _lg_is_row_full                                       5     4      1   25426
                                             27 BANK0      5     4      1
                   _USARTWriteString
                _dbg_print_MATRIX8x8
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _dbg_print_MATRIX8x8                                  8     5      3   15605
                                             19 BANK0      8     5      3
                   _USARTWriteString
                     _get_matrix_bit
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _lg_delete_matrix_row                                 6     5      1     324
                                              0 COMMON     6     5      1
 ---------------------------------------------------------------------------------
 (1) _lg_clear_matrix                                      0     0      0    6274
                   _hal_print_Screen
                             _memset
 ---------------------------------------------------------------------------------
 (2) _memset                                               7     3      4     229
                                              0 COMMON     7     3      4
 ---------------------------------------------------------------------------------
 (2) _hal_print_Screen                                     0     0      0    6045
                _hal_print_MATRIX8x8
 ---------------------------------------------------------------------------------
 (3) _hal_print_MATRIX8x8                                 10    10      0    6045
                                             13 COMMON     1     1      0
                                              6 BANK0      9     9      0
        _hal_MATRIX8x8_to_MATRIX7219
               _hal_print_MATRIX7219
 ---------------------------------------------------------------------------------
 (4) _hal_print_MATRIX7219                                 4     4      0     593
                                              6 COMMON     4     4      0
                         _Write_Byte
 ---------------------------------------------------------------------------------
 (3) _Write_Byte                                           2     1      1     454
                                              4 COMMON     2     1      1
                         _SPI1_write
 ---------------------------------------------------------------------------------
 (4) _SPI1_write                                           4     4      0      92
                                              0 COMMON     4     4      0
 ---------------------------------------------------------------------------------
 (4) _hal_MATRIX8x8_to_MATRIX7219                          7     6      1    5356
                                             12 COMMON     1     0      1
                                              0 BANK0      6     6      0
                     _get_matrix_bit
 ---------------------------------------------------------------------------------
 (1) _lg_clear                                             9     5      4    6607
                                             12 COMMON     2     2      0
                                              0 BANK0      7     3      4
                     _get_matrix_bit
                     _set_matrix_bit
 ---------------------------------------------------------------------------------
 (2) _set_matrix_bit                                       6     3      3    1176
                                              5 COMMON     6     3      3
                             _setbit
 ---------------------------------------------------------------------------------
 (3) _setbit                                               5     3      2     530
                                              0 COMMON     5     3      2
 ---------------------------------------------------------------------------------
 (2) _get_matrix_bit                                       5     1      4    5004
                                              7 COMMON     5     1      4
                             _getbit
 ---------------------------------------------------------------------------------
 (4) _getbit                                               7     4      3     327
                                              0 COMMON     7     4      3
 ---------------------------------------------------------------------------------
 (1) _lg_char_info_index_rand                              0     0      0     706
                            ___awmod
                               _rand
 ---------------------------------------------------------------------------------
 (2) _rand                                                 7     5      2     198
                                              0 BANK0      7     5      2
                             ___lmul
 ---------------------------------------------------------------------------------
 (3) ___lmul                                              13     5      8     198
                                              0 COMMON    13     5      8
 ---------------------------------------------------------------------------------
 (2) ___awmod                                              7     3      4     508
                                             13 COMMON     1     1      0
                                              7 BANK0      6     2      4
                               _rand (ARG)
 ---------------------------------------------------------------------------------
 (1) _eeprom_write_int                                     5     3      2    9888
                                             19 BANK0      5     3      2
                   _USARTWriteString
                       _eeprom_write
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             27    19      8    7410
                                              0 BANK0     19    11      8
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              6     2      4     265
                                              8 COMMON     6     2      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              8     4      4     374
                                              0 COMMON     8     4      4
 ---------------------------------------------------------------------------------
 (2) _eeprom_write                                         3     2      1     150
                                              0 COMMON     3     2      1
 ---------------------------------------------------------------------------------
 (3) _USARTWriteString                                     2     2      0    2119
                                              1 COMMON     2     2      0
                     _USARTWriteChar
 ---------------------------------------------------------------------------------
 (4) _USARTWriteChar                                       1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _USARTWriteString
     _USARTWriteChar
   _dbg_print_MATRIX8x8
     _USARTWriteString
       _USARTWriteChar
     _get_matrix_bit
       _getbit
     _sprintf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
   _eeprom_write_int
     _USARTWriteString
       _USARTWriteChar
     _eeprom_write
     _sprintf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
   _hal_print_Screen
     _hal_print_MATRIX8x8
       _hal_MATRIX8x8_to_MATRIX7219
         _get_matrix_bit
           _getbit
       _hal_print_MATRIX7219
         _Write_Byte
           _SPI1_write
   _lg_char_info_index_rand
     ___awmod
       _rand (ARG)
         ___lmul
     _rand
       ___lmul
   _lg_clear
     _get_matrix_bit
       _getbit
     _set_matrix_bit
       _setbit
   _lg_clear_matrix
     _hal_print_Screen
       _hal_print_MATRIX8x8
         _hal_MATRIX8x8_to_MATRIX7219
           _get_matrix_bit
             _getbit
         _hal_print_MATRIX7219
           _Write_Byte
             _SPI1_write
     _memset
   _lg_delete_matrix
     _USARTWriteString
       _USARTWriteChar
     _dbg_print_MATRIX8x8
       _USARTWriteString
         _USARTWriteChar
       _get_matrix_bit
         _getbit
       _sprintf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
     _lg_delete_matrix_row
     _lg_is_row_full
       _USARTWriteString
         _USARTWriteChar
       _dbg_print_MATRIX8x8
         _USARTWriteString
           _USARTWriteChar
         _get_matrix_bit
           _getbit
         _sprintf
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
       _sprintf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
     _sprintf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
   _lg_find_best_solution
     _USARTWriteString
       _USARTWriteChar
     ___wmul
       _lg_get_holes_after_merge (ARG)
         _USARTWriteString
           _USARTWriteChar
         _get_matrix_bit
           _getbit
         _sprintf
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
     _dbg_print_MATRIX4x4
       _USARTWriteString
         _USARTWriteChar
       _get_matrix_bit
         _getbit
       _sprintf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
     _dbg_print_MATRIX8x8
       _USARTWriteString
         _USARTWriteChar
       _get_matrix_bit
         _getbit
       _sprintf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
     _dbg_print_Screen
       _USARTWriteString
         _USARTWriteChar
       _dbg_print_MATRIX8x8
         _USARTWriteString
           _USARTWriteChar
         _get_matrix_bit
           _getbit
         _sprintf
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
       _sprintf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
     _dbg_print_cur_MATRIX4x4
       _USARTWriteString
         _USARTWriteChar
       _dbg_print_MATRIX4x4
         _USARTWriteString
           _USARTWriteChar
         _get_matrix_bit
           _getbit
         _sprintf
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
       _sprintf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
     _lg_fall_off
       _USARTWriteString
         _USARTWriteChar
       _get_matrix_bit
         _getbit
       _sprintf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
     _lg_get_height
       _USARTWriteString
         _USARTWriteChar
       _lg_is_row_empty
       _sprintf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
     _lg_get_height_after_merge
       _USARTWriteString
         _USARTWriteChar
       _get_matrix_bit
         _getbit
       _sprintf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
     _lg_get_holes_after_merge
       _USARTWriteString
         _USARTWriteChar
       _get_matrix_bit
         _getbit
       _sprintf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
     _lg_get_num_of_orphan
       _USARTWriteString
         _USARTWriteChar
       _get_matrix_bit
         _getbit
       _sprintf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
     _lg_get_num_removed_rows
       _USARTWriteString
         _USARTWriteChar
       _lg_is_row_full
         _USARTWriteString
           _USARTWriteChar
         _dbg_print_MATRIX8x8
           _USARTWriteString
             _USARTWriteChar
           _get_matrix_bit
             _getbit
           _sprintf
             ___lwdiv
             ___lwmod
               ___lwdiv (ARG)
         _sprintf
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
       _sprintf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
     _lg_get_weight
       _USARTWriteString
         _USARTWriteChar
       _get_matrix_bit
         _getbit
       _sprintf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
     _lg_is_valid
       _USARTWriteString
         _USARTWriteChar
       _get_matrix_bit
         _getbit
       _sprintf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
     _lg_left_most
       _USARTWriteString
         _USARTWriteChar
       _lg_is_left_boundary
         _USARTWriteString
           _USARTWriteChar
         _get_matrix_bit
           _getbit
         _sprintf
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
       _sprintf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
     _lg_merge1
       _get_matrix_bit
         _getbit
       _memcpy
       _set_matrix_bit
         _setbit
     _lg_right_most
       _USARTWriteString
         _USARTWriteChar
       _lg_is_right_boundary
         _USARTWriteString
           _USARTWriteChar
         _get_matrix_bit
           _getbit
         _sprintf
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
       _sprintf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
     _sprintf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
   _lg_hit_land
     _USARTWriteString
       _USARTWriteChar
     _get_matrix_bit
       _getbit
     _sprintf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
   _lg_merge
     _dbg_print_MATRIX4x4
       _USARTWriteString
         _USARTWriteChar
       _get_matrix_bit
         _getbit
       _sprintf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
     _dbg_print_MATRIX8x8
       _USARTWriteString
         _USARTWriteChar
       _get_matrix_bit
         _getbit
       _sprintf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
     _get_matrix_bit
       _getbit
     _set_matrix_bit
       _setbit
   _main_init
     _dbg_init
       _USARTInit
     _eeprom_read_int
       _USARTWriteString
         _USARTWriteChar
       _eeprom_read
       _sprintf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
     _max7219_init1
       _Write_Byte
         _SPI1_write
     _srand
   _sprintf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60      0      12       9       18.8%
BITBANK3            60      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60      0       0      11        0.0%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50      4      45       7       86.3%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50     4E      50       5      100.0%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      E       E       1      100.0%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      B5      12        0.0%
ABS                  0      0      B5       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V1.37 build -260352376 
Symbol Table                                                                                   Sun Sep 04 01:01:49 2016

         __size_of_lg_get_num_of_orphan 0064                              __CFG_CP$ON 0000  
                                     pc 0002                                      l61 1716  
                                    l66 0EC1                                      l85 1159  
                                    _RD 0C60                             __CFG_CPD$ON 0000  
                                    _WR 0C61                   _lg_find_best_solution 0536  
                                    fsr 0004                     ___wmul@multiplicand 0041  
                    USARTInit@baud_rate 0070                            ?_lg_fall_off 0033  
                           __CFG_LVP$ON 0000                                     l290 113C  
                                   l518 00EF                                     l454 0E12  
                                   l384 0D34                                     l529 00E4  
                                   l730 02F0                                     l466 1174  
                                   l476 119E                                     l725 02C8  
                                   l717 02A1                                     l719 0258  
                                   l665 1F1C                                     l658 13B4  
                                   l756 1FCA                                     l778 10AC  
                                   l868 1070                                     _GIE 005F  
                                   _RA1 0029                                     _RA2 002A  
                                   _RA3 002B                  __size_of_lg_right_most 002A  
                                   fsr0 0004                   eeprom_write_int@value 0033  
                         _lg_get_height 10F7                                     indf 0000  
                          ___awmod@sign 002C                            ?_lg_hit_land 0033  
                lg_delete_matrix@matrix 0043                            __CFG_IESO$ON 0000  
                         _lg_get_weight 0DAE                       ?_dbg_print_Screen 003B  
                          ?_lg_is_valid 0033                   __end_of_max7219_init1 12CE  
        hal_MATRIX8x8_to_MATRIX7219@col 0025                          lg_right_most@x 0040  
                                  l3002 0E4E                                    l3020 0E7A  
                                  l3102 11F7                                    l3014 0E6D  
                                  l3104 1205                                    l3112 121E  
                                  l3200 039B                                    l3032 0E99  
                                  l3008 0E5D                                    l3040 0EA7  
                                  l3026 0E89                                    l3108 1213  
                                  l3204 03A6                                    l3206 0265  
                                  l3230 16D8                                    l3222 16B4  
                                  l3054 115C                                    l4030 1342  
                                  l3080 12E4                                    l3136 025A  
                                  l3208 03B7                                    l3232 16E1  
                                  l3224 16BD                                    l3240 16FC  
                                  l3312 14BF                                    l4008 131B  
                                  l3218 0005                                    l3090 1305  
                                  l3154 02BB                                    l3234 16EA  
                                  l3226 16C6                                    l3322 14EB  
                                  l4130 1068                                    l4026 1337  
                                  l4114 011A                                    l4050 0032  
                                  l4122 0121                                    l3180 0318  
                                  l3236 16F3                                    l3228 16CF  
                                  l4300 1404                                    l3316 14DF  
                                  l3252 0F83                                    l3412 0209  
                                  l3420 0226                                    l4060 0048  
                                  l3086 12FA                                    l3078 12D6  
                                  l3190 0335                                    l3182 0321  
                                  l4150 1415                                    l3262 0F9C  
                                  l4070 006D                                    l3502 14A1  
                                  l3350 138D                                    l3192 0367  
                                  l4216 1646                                    l4080 00B8  
                                  l3512 14FD                                    l4400 0546  
                                  l4312 17B4                                    l3344 1387  
                                  l4162 1422                                    l4154 141C  
                                  l3274 0FBB                                    l3282 0FD7  
                                  l3290 0FF1                                    l4218 15FA  
                                  l3530 1532                                    l4402 07AB  
                                  l4242 1728                                    l4322 17E1  
                                  l4330 17F3                                    l3346 1389  
                                  l3354 1392                                    l3188 0330  
                                  l4164 1430                                    l4172 1449  
                                  l3268 0FA1                                    l3428 0241  
                                  l3348 138B                                    l3382 0151  
                                  l3550 10DA                                    l3534 153D  
                                  l3518 1503                                    l4254 1757  
                                  l4326 17EB                                    l4318 17B9  
        hal_MATRIX8x8_to_MATRIX7219@row 0024                                    l4176 1451  
                                  l4168 143E                                    l3640 100E  
                                  l3456 1041                                    l3392 016B  
                                  l4088 00C5                                    l3712 0F01  
                                  l4416 07CE                                    l4264 1772  
                                  l3554 134F                                    l3802 0D98  
                                  l3810 0DA9                                    l3466 1F29  
                                  l3482 1465                                    l3538 1543  
                                  l4522 03F1                                    l4292 13D3  
                                  l3900 0DC7                                    l3724 0F28  
                                  l3476 145F                                    l4268 177D  
                                  l4276 1782                                    l4516 03D4  
                                  l3558 1365                                    l3654 124E  
                                  l3582 1286                                    l3398 0171  
                                  l3806 0DA3                                    l3742 0F45  
                                  l3494 1490                                    l4542 0453  
                                  l4296 13FA                                    l3656 1255  
                                  l3912 0E14                                    l3904 0DE1  
                                  l3920 0E23                                    l3728 0F2A  
                                  l3832 15E3                                    l4368 06EB  
                                  l4560 04E0                                    l4536 03C2  
                                  l3594 1679                                    l3770 0D40  
                                  l3746 0F50                                    l3754 0F55  
                                  l3498 149B                                    l4394 079F  
                                  l3764 0D3A                                    l3676 1143  
                                  l3916 0E1D                                    l3836 15ED  
                                  l3828 15BB                                    l4396 05A8  
                                  l2990 0E34                                    l3870 0D25  
                                  l3854 0CE5                                    l4398 07A6  
                                  l3864 0D07                                    l3928 0E28  
                                  l3696 0ED3                                    l3952 1194  
                                  l4760 13AF                                    l4754 13A0  
                                  l2996 0E41                                    l3788 0D7B  
                                  l4756 13A5                                    l3974 1100  
                                  l3878 0D2A                                    l3966 11BE  
                                  l4758 13AA                                    l3984 1115  
                    ??_dbg_print_Screen 003D                                    l3988 111D  
                                  STR_1 0CC5                            __CFG_WDTE$ON 0000  
                                  STR_2 090B                                    STR_3 0CC9  
                                  STR_4 0CCB                                    STR_5 0BEA  
                                  STR_6 0AB8                                    STR_7 0CC5  
                                  STR_8 092B                                    STR_9 0CC9  
                           main@hit_res 006D                                    u3205 1689  
                                  u3135 1367                                    u3145 136F  
                                  u2515 11FA                                    u4115 1071  
                                  u3075 152E                                    u2445 12D9  
                                  u2605 02E9                                    u4205 143F  
                                  u4125 1078                                    u2535 120B  
                                  u3415 0F41                                    u2465 12E5  
                                  u2545 1214                                    u3265 1236  
                                  u4305 1753                                    u2475 12F1  
                                  u2635 0311                                    u2485 12FB  
                                  u4085 0112                                    u4175 1425  
                                  u2905 01E7                                    u4505 078F  
                                  u4195 1436                                    u3395 0F26  
                                  _PEIE 005E                                    u3725 158C  
                                  u4445 0559                                    u3495 0D92  
                                  _RCIE 0465                                    u2885 01AA  
                                  u4485 06C6                                    u4495 0750  
                                  u4665 0442                                    u4907 1169  
                                  u4877 04D3                                    u4887 0528  
                                  u4897 1161                                    _WREN 0C62  
                        ??_eeprom_write 0071               __size_of_eeprom_write_int 0021  
                                  _Seed 00A5                            __CFG_WRT$OFF 0000  
                __end_of_USARTWriteChar 1F23                           __CFG_FCMEN$ON 0000  
                     eeprom_read_int@at 0037             __end_of_lg_is_left_boundary 14A3  
                                  _main 03BC                                    _rand 1545  
                                  btemp 007E                           __CFG_BOREN$ON 0000  
               lg_get_num_of_orphan@col 003C                                    ltemp 007E  
               lg_get_num_of_orphan@row 003D                                    start 0000  
                                  ttemp 007E                                    wtemp 007E  
                           lg_clear@col 0026                           ?_lg_left_most 003E  
                           lg_clear@row 0025                           __CFG_MCLRE$ON 0000  
    lg_find_best_solution@tem_sub_index 0066               ??_lg_get_num_removed_rows 0040  
   __end_of_hal_MATRIX8x8_to_MATRIX7219 14F4             _hal_MATRIX8x8_to_MATRIX7219 14A3  
                  lg_is_valid@matrix4x4 0034                    lg_is_valid@matrix8x8 0036  
       hal_MATRIX8x8_to_MATRIX7219@mask 0023                                   ?_main 0070  
                                 ?_rand 0020                                   _EEADR 010D  
                                 STR_10 0CCB                                   STR_11 0BEA  
                                 STR_20 0CC5                                   STR_12 0AB8  
                                 STR_21 0A5A                                   STR_22 0ACF  
                                 STR_14 0AA1                                   STR_30 08E6  
                                 STR_23 0C96                                   STR_31 0A0D  
                                 STR_40 0A12                                   STR_24 0B78  
                                 STR_32 0A27                                   STR_41 0CB6  
                                 STR_33 0CAC                                   STR_25 0C7E  
                                 STR_50 0B14                                   STR_26 0A72  
                                 STR_42 09D7                                   STR_34 08C1  
                                 STR_19 0CC5                                   STR_51 08B5  
                                 STR_35 0C1A                                   STR_27 0AFD  
                                 STR_43 0968                                   STR_52 08B5  
                                 STR_60 0A1C                                   STR_36 0A12  
                                 STR_44 0C4E                                   STR_28 09F2  
                       __end_of___awmod 1456                                   STR_61 0C41  
                                 STR_37 0C27                                   STR_45 0BBD  
                                 STR_53 0BAC                                   STR_29 0B2A  
                                 STR_38 0A12                                   STR_62 0C72  
                                 STR_46 0C5A                                   STR_54 0B66  
                                 STR_70 0B3F                                   STR_71 088B  
                                 STR_47 0BBD                                   STR_39 0C34  
                                 STR_63 0BCE                                   STR_55 0984  
                                 STR_72 0CBE                                   STR_80 0BED  
                                 STR_48 0AE6                                   STR_64 09BC  
                                 STR_56 09A0                                   STR_57 0BC5  
                                 STR_49 0AE6                                   STR_81 0C8A  
                                 STR_65 0C0B                                   STR_73 0884  
                                 STR_66 0C0B                                   STR_58 0CA1  
                                 STR_74 0BDE                                   STR_82 0B8A  
                                 STR_59 0992                                   STR_67 0BFC  
                                 STR_75 0A8A                                   STR_76 0C66  
                                 STR_68 0B53                                   STR_69 0B9B  
                                 STR_77 094B                                   STR_78 0A41  
                                 STR_79 0BDE                                   _CARRY 0018  
                      USARTWriteChar@ch 0070                         __end_of___lwdiv 130A  
                       __end_of___lwmod 1223                          ?_lg_get_height 0070  
                                 _SPBRG 0099           ??_hal_MATRIX8x8_to_MATRIX7219 0020  
                     lg_is_row_full@row 003B                                   _TXREG 0019  
                   ___lmul@multiplicand 0074             __end_of_hal_print_MATRIX8x8 1F9F  
                        ?_lg_get_weight 0033                             ?_SPI1_write 0070  
                   _dbg_print_MATRIX4x4 0125                     _dbg_print_MATRIX8x8 0F57  
                     ??_lg_is_row_empty 0071                             lg_merge@col 004A  
                           lg_merge@row 0049                        _hal_print_Screen 1F16  
                       __end_of_dpowers 081C                                   _cur_x 006F  
                                 _cur_y 00AB                                   _randx 00DD  
               __end_of_lg_clear_matrix 1F6A           lg_get_holes_after_merge@start 003B  
                                 _srand 1000                                   pclath 000A  
                                 ltemp0 007E                                   ltemp1 0082  
                                 ltemp2 0086                                   ltemp3 0080  
              lg_get_num_of_orphan@full 003A                      __size_of_USARTInit 0040  
              lg_get_num_of_orphan@risk 0038                         ?_USARTWriteChar 0070  
                                 ttemp0 007E                                   ttemp1 0081  
                                 ttemp2 0084                                   ttemp3 0087  
                                 ttemp4 007F                                   status 0003  
                  lg_is_left_boundary@x 003B                                   wtemp0 007E  
                                 wtemp1 0080                                   wtemp2 0082  
                                 wtemp3 0084                                   wtemp4 0086  
                                 wtemp5 0088                                   wtemp6 007F  
                       __end_of_sprintf 03BC                          ??_lg_left_most 0041  
                         _lg_right_most 119B         lg_get_height_after_merge@matrix 0033  
                          lg_fall_off@x 0039                            lg_fall_off@y 0033  
                  ?_dbg_print_MATRIX4x4 0033           __size_of_lg_delete_matrix_row 0037  
                  ?_dbg_print_MATRIX8x8 0033                 lg_delete_matrix_row@row 0070  
                       __initialization 07D2      lg_find_best_solution@temp_pre_risk 0067  
                          __end_of_main 0536                            __end_of_rand 159A  
                  lg_hit_land@matrix4x4 0034                    lg_hit_land@matrix8x8 0036  
                 dbg_print_Screen@lable 003B                  ?_lg_find_best_solution 0070  
                                ??_main 00E1                       get_matrix_bit@col 007A  
                                ??_rand 0022                       set_matrix_bit@col 0076  
                     get_matrix_bit@row 0079            __end_of_lg_is_right_boundary 1545  
                     set_matrix_bit@row 0075           dbg_print_cur_MATRIX4x4@enable 004C  
         dbg_print_cur_MATRIX4x4@matrix 004A      __size_of_lg_get_height_after_merge 003D  
       __end_of_lg_get_num_removed_rows 1147                ?_lg_char_info_index_rand 0070  
                        _lg_is_row_full 1025                                  _EEDATA 010C  
                                _EECON1 018C                                  _EECON2 018D  
                                ?_srand 0070          hal_print_MATRIX7219@matrix7219 0078  
                    lg_is_row_empty@row 0070                        __end_of_dbg_init 1F33  
                          lg_hit_land@x 0039                            lg_hit_land@y 0033  
                        ?_lg_right_most 003B            __end_of_hal_print_MATRIX7219 2000  
                        __CFG_PWRTE$OFF 0000                   ??_dbg_print_MATRIX4x4 0039  
                 ??_dbg_print_MATRIX8x8 0036                            lg_merge1@col 0029  
              __size_of_eeprom_read_int 002C                            lg_merge1@len 0025  
                          lg_merge1@row 0028                    __size_of_eeprom_read 001B  
                      __end_of_lg_clear 1409                     __size_of_SPI1_write 002A  
                                ___lmul 1347                                  ___wmul 1064  
                      __end_of_lg_merge 1800                               ??___awmod 007D  
              __end_of_lg_delete_matrix 164D                               ??___lwdiv 0074  
                             ??___lwmod 007C                                  _getbit 0E2F  
        lg_get_holes_after_merge@matrix 003C                __end_of_USARTWriteString 0019  
                                _memcpy 10D1                                  _memset 1009  
                          lg_is_valid@x 0039                            lg_is_valid@y 0033  
                       ___awmod@divisor 0027                         ??_lg_get_height 0033  
                                _setbit 16AE                    __end_of_eeprom_write 10D1  
                       ___awmod@counter 002B                       __end_of_USARTInit 13C6  
                  __size_of_lg_fall_off 007D                         ??_lg_get_weight 0035  
                __end_of_lg_is_row_full 1043              lg_get_num_of_orphan@matrix 003B  
                                srand@x 0070       __end_of_lg_get_height_after_merge 1347  
                  __size_of_lg_hit_land 006D                               ??_sprintf 0028  
                      ??_get_matrix_bit 007B                        ?_lg_clear_matrix 0070  
                  __size_of_lg_is_valid 0095        __size_of_dbg_print_cur_MATRIX4x4 0061  
                      _eeprom_write_int 1043                 __end_of__initialization 07FC  
                       eeprom_read@addr 0071             lg_find_best_solution@temp_x 006C  
           lg_find_best_solution@temp_y 006B            lg_get_height_after_merge@col 0038  
          lg_get_height_after_merge@row 0039                          __pcstackCOMMON 0070  
                          __pidataBANK0 0003                            __pidataBANK1 1F12  
                          __pidataBANK3 1F9F                              _Write_Byte 1F7B  
                  lg_fall_off@matrix4x4 0034                    lg_fall_off@matrix8x8 0036  
              _lg_get_holes_after_merge 0019                           __end_of_srand 1009  
                dbg_print_Screen@enable 003E            dbg_print_cur_MATRIX4x4@lable 0042  
               __size_of_set_matrix_bit 000F                    __end_of_lg_left_most 119B  
          __end_of_lg_get_num_of_orphan 0D31                         ?_lg_is_row_full 003B  
                     eeprom_write@value 0070                      get_matrix_bit@byte 0077  
                               ??_srand 0072                      set_matrix_bit@byte 007A  
                    __size_of_lg_merge1 0058                      __size_of_main_init 0024  
                            __pbssBANK0 006E                              __pbssBANK1 00A0  
                       ??_lg_right_most 003E                    _lg_is_right_boundary 14F4  
             __size_of_dbg_print_Screen 003A                              __pmaintext 03BC  
                               ?___lmul 0070                __end_of_hal_print_Screen 1F1B  
              lg_find_best_solution@res 0061                                 ?___wmul 003F  
                               ?_getbit 0070                 hal_print_MATRIX7219@col 0079  
                               ?_memcpy 0070                         _lg_is_row_empty 1F23  
                               ?_memset 0070                       ??_eeprom_read_int 0035  
                        ___lmul@product 0079                                 ?_setbit 0070  
                 lg_left_most@matrix4x4 003E                   lg_left_most@matrix8x8 0040  
                             ?_dbg_init 0070                    _hal_print_MATRIX7219 1FE4  
                          ??_SPI1_write 0070                        ??_USARTWriteChar 0070  
                    USARTWriteInt@F1605 00A0                               ?_lg_clear 0020  
                            __stringtab 0800                               ?_lg_merge 0042  
         lg_is_right_boundary@matrix4x4 0033           lg_is_right_boundary@matrix8x8 0035  
         hal_print_MATRIX8x8@matrix7219 0027                   ?_lg_is_right_boundary 0033  
                         lg_left_most@x 0042            lg_get_num_removed_rows@count 0043  
               ??_lg_find_best_solution 004D                   __size_of_eeprom_write 0026  
          __size_of_lg_is_left_boundary 004D                         __size_of___lmul 003F  
                           ?_Write_Byte 0074                                 ___awmod 1409  
                    __end_of_SPI1_write 1171                    eeprom_read_int@value 0038  
                       __size_of___wmul 0023                  __size_of_max7219_init1 003A  
                               ___lwdiv 12CE                                 ___lwmod 11F1  
                     __end_of_lg_merge1 15F2                         __size_of_getbit 0093  
                               _g_debug 00AD                       __end_of_main_init 10AB  
                       __size_of_memcpy 0026                               _ANSELbits 0188  
                       __size_of_memset 001C                                 __ptext1 1087  
                               __ptext2 1000                                 __ptext3 1294  
                               __ptext4 11C5                                 __ptext5 1FC9  
                               __ptext6 1F2B                                 __ptext7 1386  
                               __ptext8 1784                                 __ptext9 1717  
                       __size_of_setbit 0069  lg_find_best_solution@tem_pre_sub_index 0065  
        lg_find_best_solution@temp_high 0062          lg_find_best_solution@temp_risk 0069  
                     __end_of_hexpowers 0824                              ??_dbg_init 0072  
                               _dpowers 0812                   ?_hal_print_MATRIX7219 0070  
          __end_of_lg_delete_matrix_row 125A                        ___awmod@dividend 0029  
                           SPI1_write@i 0073                             setbit@value 0071  
                               _sprintf 0250                 _dbg_print_cur_MATRIX4x4 164D  
                               clrloop0 1F34                              ??_lg_clear 007C  
                  end_of_initialization 07FC                   lg_is_right_boundary@x 0038  
                            ??_lg_merge 0046                       lg_get_weight@risk 0039  
          lg_is_left_boundary@matrix4x4 0033            lg_is_left_boundary@matrix8x8 0035  
                               memcpy@d 0075             hal_print_MATRIX8x8@matrix88 0026  
                               memcpy@n 0071                                 memcpy@s 0076  
          __size_of_hal_print_MATRIX8x8 0012                                 memset@c 0070  
            lg_get_num_removed_rows@row 0044                                 memset@n 0072  
                               memset@p 0076                            _eeprom_write 10AB  
      lg_get_holes_after_merge@num_hole 0039                          SPI1_write@data 0071  
                        SPI1_write@mask 0072                ?_lg_get_num_removed_rows 0070  
                 lg_is_row_empty@matrix 0071                 __end_of_lg_is_row_empty 1F2B  
      __size_of_lg_char_info_index_rand 0018                    _lg_get_num_of_orphan 0CCD  
              dbg_print_MATRIX4x4@lable 0033                               _RCSTAbits 0018  
                     Write_Byte@myValue 0074                            __pstringtext 0800  
                     ?_lg_delete_matrix 0070                  lg_is_left_boundary@col 003D  
                 __size_of_lg_left_most 002A                  lg_is_left_boundary@row 003C  
              __end_of_eeprom_write_int 1064                       ?_USARTWriteString 0070  
                    ??_lg_delete_matrix 0040                          _set_matrix_bit 1F4A  
              dbg_print_MATRIX8x8@lable 0033                      ??_USARTWriteString 0071  
                             _USARTInit 1386                               _TRISAbits 0085  
                         _max7219_init1 1294                     __size_of_Write_Byte 0012  
                  eeprom_write_int@temp 0037             __end_of_dbg_print_MATRIX4x4 0250  
                            getbit@byte 0070             __end_of_dbg_print_MATRIX8x8 1000  
                 lg_delete_matrix@count 0042                              getbit@temp 0075  
                ??_lg_is_right_boundary 0036                          lg_fall_off@col 003A  
                        lg_fall_off@row 003B                           ??_eeprom_read 0070  
                             _TXSTAbits 0098                         _g_cur_matrix4x4 00A7  
            ??_lg_get_holes_after_merge 0033               dbg_print_MATRIX4x4@enable 003F  
                          _lg_left_most 1171                        _dbg_print_Screen 125A  
             dbg_print_MATRIX4x4@matrix 0037                   ?_lg_get_num_of_orphan 0033  
                 lg_delete_matrix_row@i 0075                          __end_of___lmul 1386  
                        __end_of___wmul 1087                           ??_lg_fall_off 0037  
                __end_of_set_matrix_bit 1F59                     __end_of_g_matrix4x4 0884  
                            lg_merge1@x 0027                              lg_merge1@y 0020  
                        __end_of_getbit 0EC2                        ??_lg_is_row_full 003C  
                ??_hal_print_MATRIX7219 0076                          __end_of_memcpy 10F7  
                        __end_of_memset 1025            lg_get_holes_after_merge@stop 003A  
                 __end_of_lg_get_height 111F                          __end_of_setbit 1717  
                         ??_lg_hit_land 0037                     start_initialization 07D2  
             ??_dbg_print_cur_MATRIX4x4 0046                              ?_USARTInit 0070  
                 __end_of_lg_get_weight 0E2F                           ??_lg_is_valid 0037  
             dbg_print_MATRIX8x8@enable 0038                          ?_max7219_init1 0070  
                        _temp_matrix8x8 00D5              ?_lg_get_height_after_merge 0033  
             dbg_print_MATRIX8x8@matrix 0035   hal_MATRIX8x8_to_MATRIX7219@matrix7219 007C  
                       _eeprom_read_int 11C5                __CFG_FOSC$INTRC_NOCLKOUT 0000  
                      lg_get_height@row 0036                __size_of_lg_clear_matrix 0011  
                  _lg_delete_matrix_row 1223                        ?_lg_is_row_empty 0070  
                              ??___lmul 0078                                ??___wmul 007E  
                   __end_of_eeprom_read 1FE4                              init_fetch0 1F6A  
                     ?_hal_print_Screen 0070            ?_hal_MATRIX8x8_to_MATRIX7219 007C  
                              ??_getbit 0073                      lg_merge1@matrix4x4 0021  
                           __pdataBANK0 006F                             __pdataBANK1 00DD  
                           __pdataBANK3 0190                       _g_char_info_index 006E  
                     lg_merge@matrix4x4 0043                                ??_memcpy 0073  
                     lg_merge@matrix8x8 0045                                ??_memset 0074  
                       ?_set_matrix_bit 0075                      ??_hal_print_Screen 007E  
                              ??_setbit 0072                             _g_char_info 0190  
                   set_matrix_bit@value 0077    lg_find_best_solution@left_most_index 005F  
                    eeprom_write_int@at 0036                               ___latbits 0002  
                   __end_of_lg_fall_off 0DAE                           __pcstackBANK0 0020  
                         __pcstackBANK1 00E1                       __size_of_dbg_init 0008  
                   _lg_is_left_boundary 1456                     __end_of_lg_hit_land 1784  
                      eeprom_write@addr 0072                             sprintf@flag 002E  
                   __end_of_lg_is_valid 0F57                       __size_of_lg_clear 0043  
                           sprintf@prec 002D                   __end_of_lg_right_most 11C5  
                     __size_of_lg_merge 007C                  ??_lg_get_num_of_orphan 0035  
               _lg_char_info_index_rand 1FB1         __end_of_dbg_print_cur_MATRIX4x4 16AE  
                 ?_lg_delete_matrix_row 0070                        ___lwdiv@dividend 0072  
                           _g_matrix4x4 0824                             _g_matrix8x8 00CD  
               __size_of_get_matrix_bit 000F              lg_get_height_after_merge@y 0037  
                  ?_lg_is_left_boundary 0033          __size_of_lg_find_best_solution 029C  
         __end_of_lg_find_best_solution 07D2                            ??_Write_Byte 0075  
                              ?___awmod 0027                                ?___lwdiv 0070  
                              ?___lwmod 0078                     _hal_print_MATRIX8x8 1F8D  
                             _lg_merge1 159A                               _main_init 1087  
                       ??_max7219_init1 0076                             ??_USARTInit 0072  
                             _hexpowers 081C                        ___lwdiv@quotient 0075  
                              ?_sprintf 0020                 __end_of_eeprom_read_int 11F1  
                        __size_of_srand 0009                      __end_of_Write_Byte 1F8D  
                  ?_hal_print_MATRIX8x8 0070                              setbit@byte 0073  
                            setbit@temp 0074                          ___wmul@product 0043  
      __end_of_lg_get_holes_after_merge 0125                        lg_get_weight@col 003D  
                      lg_get_weight@pre 003C                        lg_get_weight@row 003E  
                             clear_ram0 1F33                             _eeprom_read 1FC9  
                              _PIR1bits 000C                   ??_lg_is_left_boundary 0036  
                lg_right_most@matrix4x4 003B                  lg_right_most@matrix8x8 003D  
                  lg_is_row_full@matrix 003F                       ??_lg_clear_matrix 007E  
                           _lg_fall_off 0D31                          lg_hit_land@col 003A  
                     ?_eeprom_write_int 0033                             __stringbase 0812  
                        lg_hit_land@row 003B                       ___wmul@multiplier 003F  
      __size_of_lg_get_num_removed_rows 0028                              ?_lg_merge1 0020  
                            ?_main_init 0070                      ??_eeprom_write_int 0035  
                           _lg_hit_land 1717                __end_of_dbg_print_Screen 1294  
                             lg_clear@x 0024                               lg_clear@y 0020  
                   lg_get_height@matrix 0035                             _lg_is_valid 0EC2  
                     ___lmul@multiplier 0070               __size_of_lg_delete_matrix 005B  
                             lg_merge@x 0048                               lg_merge@y 0042  
                lg_merge1@matrix8x8_out 0024    __size_of_hal_MATRIX8x8_to_MATRIX7219 0051  
             __size_of_USARTWriteString 0015                   ??_hal_print_MATRIX8x8 007D  
               lg_is_right_boundary@col 003A                 lg_is_right_boundary@row 0039  
             ??_lg_char_info_index_rand 007E                     lg_get_weight@matrix 003B  
                ??_lg_delete_matrix_row 0071    hal_MATRIX8x8_to_MATRIX7219@matrix8x8 0022  
         lg_get_num_removed_rows@matrix 0042                 __size_of_USARTWriteChar 0008  
                      __size_of___awmod 004D                        __size_of___lwdiv 003C  
                      __size_of___lwmod 0032                      __end_of__stringtab 0812  
                              _dbg_init 1F2B                              sprintf@idx 002B  
                            sprintf@val 002F                         ___lwdiv@divisor 0070  
            lg_delete_matrix_row@matrix 0074                         ___lwdiv@counter 0077  
                              __ptext10 0536                                __ptext11 119B  
                              __ptext20 0CCD                                __ptext12 14F4  
                              __ptext21 0019                                __ptext13 159A  
                              __ptext30 15F2                                __ptext22 130A  
                              __ptext14 10D1                                __ptext31 1025  
                              __ptext23 10F7                                __ptext15 1171  
                              __ptext40 1147                                __ptext32 0F57  
                              __ptext24 1F23                                __ptext16 1456  
                              __ptext41 14A3                                __ptext33 1223  
                              __ptext25 0D31                                __ptext17 0EC2  
                              __ptext50 1409                                __ptext42 13C6  
                              __ptext34 1F59                                __ptext26 164D  
                              __ptext18 0DAE                                __ptext51 1043  
                              __ptext43 1F4A                                __ptext35 1009  
                              __ptext27 0125                                __ptext19 111F  
                              __ptext52 0250                                __ptext44 16AE  
                              __ptext36 1F16                                __ptext28 125A  
                              __ptext53 11F1                                __ptext45 1F3B  
                              __ptext37 1F8D                                __ptext29 1064  
                              __ptext54 12CE                                __ptext46 0E2F  
                              __ptext38 1FE4                                __ptext55 10AB  
                              __ptext47 1FB1                                __ptext39 1F7B  
                              __ptext56 0004                                __ptext48 1545  
                              __ptext57 1F1B                                __ptext49 1347  
                     __CFG_BOR4V$BOR21V 0000                   _g_char_info_sub_index 00AC  
           ??_lg_get_height_after_merge 0035                        ?_eeprom_read_int 0033  
                              _lg_clear 13C6                        __size_of_sprintf 016C  
                              _lg_merge 1784         lg_find_best_solution@temp_pre_x 0064  
                         __size_of_main 017A                           __size_of_rand 0055  
         __size_of_lg_is_right_boundary 0051                          lg_is_valid@col 003B  
                        lg_is_valid@row 003A                          _get_matrix_bit 1F3B  
          __size_of_dbg_print_MATRIX4x4 012B            __size_of_dbg_print_MATRIX8x8 00A9  
                dbg_print_MATRIX4x4@col 0041                        ??_set_matrix_bit 0078  
                dbg_print_MATRIX4x4@row 0040                  dbg_print_MATRIX8x8@col 003A  
                dbg_print_MATRIX8x8@row 0039                                getbit@at 0072  
                   lg_delete_matrix@row 0044         __end_of_lg_char_info_index_rand 1FC9  
              dbg_print_cur_MATRIX4x4@x 0044                dbg_print_cur_MATRIX4x4@y 0045  
                 lg_merge1@matrix8x8_in 0023       __size_of_lg_get_holes_after_merge 010C  
             ?_lg_get_holes_after_merge 0070                             ??_lg_merge1 007C  
                           ??_main_init 007E           __size_of_hal_print_MATRIX7219 001C  
                    lg_get_weight@start 0038                                memcpy@d1 0074  
                              memcpy@s1 0070                                init_ram0 1F6E  
                              memset@p1 0075               __size_of_hal_print_Screen 0005  
                             sprintf@ap 002C                               sprintf@sp 0032  
                      ___lwmod@dividend 007A                  __end_of_get_matrix_bit 1F4A  
                __size_of_lg_get_height 0028                               stringcode 080A  
                              setbit@at 0070                      Write_Byte@myColumn 0075  
                __size_of_lg_get_weight 0081               _lg_get_height_after_merge 130A  
                   USARTWriteString@str 0072                 _lg_get_num_removed_rows 111F  
              __size_of_lg_is_row_empty 0008                ?_dbg_print_cur_MATRIX4x4 0042  
                              sprintf@c 0031                                sprintf@f 0020  
 lg_find_best_solution@right_most_index 0060                         ___lwmod@divisor 0078  
                       ___lwmod@counter 007D                                stringtab 0800  
                            _SPI1_write 1147                    dbg_print_MATRIX4x4@x 0035  
                  dbg_print_MATRIX4x4@y 0036                        _lg_delete_matrix 15F2  
               __size_of_lg_is_row_full 001E                        _USARTWriteString 0004  
           lg_get_holes_after_merge@col 003D             lg_get_holes_after_merge@row 003E  
                    _temp_cur_matrix4x4 00A9                           ?_eeprom_write 0070  
                     lg_clear@matrix4x4 0021                       lg_clear@matrix8x8 0023  
                          ?_eeprom_read 0070                         ?_get_matrix_bit 0077  
                        _USARTWriteChar 1F1B                         _lg_clear_matrix 1F59  
