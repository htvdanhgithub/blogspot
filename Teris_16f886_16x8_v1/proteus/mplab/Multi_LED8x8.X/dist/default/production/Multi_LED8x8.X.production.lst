

Microchip Technology PIC LITE Macro Assembler V1.37 build -260352376 
                                                                                               Sat Sep 24 19:02:36 2016

Microchip Technology Omniscient Code Generator v1.37 (Free mode) build 201603110536
     1                           	processor	16F886
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK1,global,class=CODE,delta=2
     5                           	psect	idataBANK2,global,class=CODE,delta=2
     6                           	psect	stringtext,global,reloc=256,class=STRCODE,delta=2
     7                           	psect	cinit,global,class=CODE,merge=1,delta=2
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    10                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    11                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    12                           	psect	dataBANK2,global,class=BANK2,space=1,delta=1
    13                           	psect	clrtext,global,class=CODE,delta=2
    14                           	psect	inittext,global,class=CODE,delta=2
    15                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    16                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    17                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    18                           	psect	maintext,global,class=CODE,split=1,delta=2
    19                           	psect	text1,local,class=CODE,merge=1,delta=2
    20                           	psect	text2,local,class=CODE,merge=1,delta=2
    21                           	psect	text3,local,class=CODE,merge=1,delta=2
    22                           	psect	text4,local,class=CODE,merge=1,delta=2
    23                           	psect	text5,local,class=CODE,merge=1,delta=2
    24                           	psect	text6,local,class=CODE,merge=1,delta=2
    25                           	psect	text7,local,class=CODE,merge=1,delta=2
    26                           	psect	text8,local,class=CODE,merge=1,delta=2
    27                           	psect	text9,local,class=CODE,merge=1,delta=2
    28                           	psect	text10,local,class=CODE,merge=1,delta=2
    29                           	psect	text11,local,class=CODE,merge=1,delta=2
    30                           	psect	text12,local,class=CODE,merge=1,delta=2
    31                           	psect	text13,local,class=CODE,merge=1,delta=2
    32                           	psect	text14,local,class=CODE,merge=1,delta=2
    33                           	psect	text15,local,class=CODE,merge=1,delta=2
    34                           	psect	text16,local,class=CODE,merge=1,delta=2
    35                           	psect	text17,local,class=CODE,merge=1,delta=2
    36                           	psect	text18,local,class=CODE,merge=1,delta=2
    37                           	psect	text19,local,class=CODE,merge=1,delta=2
    38                           	psect	text20,local,class=CODE,merge=1,delta=2
    39                           	psect	text21,local,class=CODE,merge=1,delta=2
    40                           	psect	text22,local,class=CODE,merge=1,delta=2
    41                           	psect	text23,local,class=CODE,merge=1,delta=2
    42                           	psect	text24,local,class=CODE,merge=1,delta=2
    43                           	psect	text25,local,class=CODE,merge=1,delta=2
    44                           	psect	text26,local,class=CODE,merge=1,delta=2
    45                           	psect	text27,local,class=CODE,merge=1,delta=2
    46                           	psect	text28,local,class=CODE,merge=1,delta=2
    47                           	psect	text29,local,class=CODE,merge=1,delta=2
    48                           	psect	text30,local,class=CODE,merge=1,delta=2
    49                           	psect	text31,local,class=CODE,merge=1,delta=2
    50                           	psect	text32,local,class=CODE,merge=1,delta=2
    51                           	psect	text33,local,class=CODE,merge=1,delta=2
    52                           	psect	text34,local,class=CODE,merge=1,delta=2
    53                           	psect	text35,local,class=CODE,merge=1,delta=2
    54                           	psect	text36,local,class=CODE,merge=1,delta=2
    55                           	psect	text37,local,class=CODE,merge=1,delta=2
    56                           	psect	text38,local,class=CODE,merge=1,delta=2
    57                           	psect	text39,local,class=CODE,merge=1,delta=2
    58                           	psect	text40,local,class=CODE,merge=1,delta=2
    59                           	psect	text41,local,class=CODE,merge=1,delta=2
    60                           	psect	text42,local,class=CODE,merge=1,delta=2
    61                           	psect	text43,local,class=CODE,merge=1,delta=2
    62                           	psect	text44,local,class=CODE,merge=1,delta=2
    63                           	psect	text45,local,class=CODE,merge=1,delta=2
    64                           	psect	text46,local,class=CODE,merge=1,delta=2
    65                           	psect	text47,local,class=CODE,merge=1,delta=2
    66                           	psect	text48,local,class=CODE,merge=1,delta=2
    67                           	psect	text49,local,class=CODE,merge=1,delta=2
    68                           	psect	text50,local,class=CODE,merge=1,delta=2
    69                           	psect	text51,local,class=CODE,merge=1,delta=2
    70                           	psect	text52,local,class=CODE,merge=1,delta=2
    71                           	psect	text53,local,class=CODE,merge=1,delta=2
    72                           	psect	text54,local,class=CODE,merge=1,delta=2
    73                           	psect	text55,local,class=CODE,merge=1,delta=2
    74                           	psect	text56,local,class=CODE,merge=1,delta=2
    75                           	psect	text57,local,class=CODE,merge=1,delta=2
    76                           	psect	text58,local,class=CODE,merge=1,delta=2
    77                           	psect	text59,local,class=CODE,merge=1,delta=2
    78                           	psect	text60,local,class=CODE,merge=1,delta=2
    79                           	psect	text61,local,class=CODE,merge=1,delta=2
    80                           	psect	text62,local,class=CODE,merge=1,delta=2
    81                           	dabs	1,0x7E,2
    82  0000                     	;# 
    83  0001                     	;# 
    84  0002                     	;# 
    85  0003                     	;# 
    86  0004                     	;# 
    87  0005                     	;# 
    88  0006                     	;# 
    89  0007                     	;# 
    90  0009                     	;# 
    91  000A                     	;# 
    92  000B                     	;# 
    93  000C                     	;# 
    94  000D                     	;# 
    95  000E                     	;# 
    96  000E                     	;# 
    97  000F                     	;# 
    98  0010                     	;# 
    99  0011                     	;# 
   100  0012                     	;# 
   101  0013                     	;# 
   102  0014                     	;# 
   103  0015                     	;# 
   104  0015                     	;# 
   105  0016                     	;# 
   106  0017                     	;# 
   107  0018                     	;# 
   108  0019                     	;# 
   109  001A                     	;# 
   110  001B                     	;# 
   111  001B                     	;# 
   112  001C                     	;# 
   113  001D                     	;# 
   114  001E                     	;# 
   115  001F                     	;# 
   116  0081                     	;# 
   117  0085                     	;# 
   118  0086                     	;# 
   119  0087                     	;# 
   120  0089                     	;# 
   121  008C                     	;# 
   122  008D                     	;# 
   123  008E                     	;# 
   124  008F                     	;# 
   125  0090                     	;# 
   126  0091                     	;# 
   127  0092                     	;# 
   128  0093                     	;# 
   129  0093                     	;# 
   130  0093                     	;# 
   131  0094                     	;# 
   132  0095                     	;# 
   133  0096                     	;# 
   134  0097                     	;# 
   135  0098                     	;# 
   136  0099                     	;# 
   137  009A                     	;# 
   138  009B                     	;# 
   139  009C                     	;# 
   140  009D                     	;# 
   141  009E                     	;# 
   142  009F                     	;# 
   143  0105                     	;# 
   144  0107                     	;# 
   145  0108                     	;# 
   146  0109                     	;# 
   147  010C                     	;# 
   148  010C                     	;# 
   149  010D                     	;# 
   150  010E                     	;# 
   151  010F                     	;# 
   152  0185                     	;# 
   153  0187                     	;# 
   154  0188                     	;# 
   155  0189                     	;# 
   156  018C                     	;# 
   157  018D                     	;# 
   158  0000                     	;# 
   159  0001                     	;# 
   160  0002                     	;# 
   161  0003                     	;# 
   162  0004                     	;# 
   163  0005                     	;# 
   164  0006                     	;# 
   165  0007                     	;# 
   166  0009                     	;# 
   167  000A                     	;# 
   168  000B                     	;# 
   169  000C                     	;# 
   170  000D                     	;# 
   171  000E                     	;# 
   172  000E                     	;# 
   173  000F                     	;# 
   174  0010                     	;# 
   175  0011                     	;# 
   176  0012                     	;# 
   177  0013                     	;# 
   178  0014                     	;# 
   179  0015                     	;# 
   180  0015                     	;# 
   181  0016                     	;# 
   182  0017                     	;# 
   183  0018                     	;# 
   184  0019                     	;# 
   185  001A                     	;# 
   186  001B                     	;# 
   187  001B                     	;# 
   188  001C                     	;# 
   189  001D                     	;# 
   190  001E                     	;# 
   191  001F                     	;# 
   192  0081                     	;# 
   193  0085                     	;# 
   194  0086                     	;# 
   195  0087                     	;# 
   196  0089                     	;# 
   197  008C                     	;# 
   198  008D                     	;# 
   199  008E                     	;# 
   200  008F                     	;# 
   201  0090                     	;# 
   202  0091                     	;# 
   203  0092                     	;# 
   204  0093                     	;# 
   205  0093                     	;# 
   206  0093                     	;# 
   207  0094                     	;# 
   208  0095                     	;# 
   209  0096                     	;# 
   210  0097                     	;# 
   211  0098                     	;# 
   212  0099                     	;# 
   213  009A                     	;# 
   214  009B                     	;# 
   215  009C                     	;# 
   216  009D                     	;# 
   217  009E                     	;# 
   218  009F                     	;# 
   219  0105                     	;# 
   220  0107                     	;# 
   221  0108                     	;# 
   222  0109                     	;# 
   223  010C                     	;# 
   224  010C                     	;# 
   225  010D                     	;# 
   226  010E                     	;# 
   227  010F                     	;# 
   228  0185                     	;# 
   229  0187                     	;# 
   230  0188                     	;# 
   231  0189                     	;# 
   232  018C                     	;# 
   233  018D                     	;# 
   234                           
   235                           	psect	idataBANK1
   236  196A                     __pidataBANK1:	
   237                           
   238                           ;initializer for _randx
   239  196A  3401               	retlw	1
   240  196B  3400               	retlw	0
   241  196C  3400               	retlw	0
   242  196D  3400               	retlw	0
   243                           
   244                           ;initializer for _cur_x
   245  196E  3402               	retlw	2
   246                           
   247                           	psect	idataBANK2
   248  19DB                     __pidataBANK2:	
   249                           
   250                           ;initializer for _g_char_info
   251  19DB  3400               	retlw	0
   252  19DC  3402               	retlw	2
   253  19DD  3402               	retlw	2
   254  19DE  3402               	retlw	2
   255  19DF  3404               	retlw	4
   256  19E0  3402               	retlw	2
   257  19E1  3406               	retlw	6
   258  19E2  3404               	retlw	4
   259  19E3  340A               	retlw	10
   260  19E4  3404               	retlw	4
   261  19E5  340E               	retlw	14
   262  19E6  3401               	retlw	1
   263  19E7  340F               	retlw	15
   264  19E8  3404               	retlw	4
   265  19E9  3413               	retlw	19
   266  19EA  3401               	retlw	1
   267  19EB  3414               	retlw	20
   268  19EC  3404               	retlw	4
   269                           
   270                           	psect	stringtext
   271  0800                     __pstringtext:	
   272  0800                     stringtab:	
   273  0800                     __stringtab:	
   274                           
   275                           ;	String table - string pointers are 2 bytes each
   276  0800  1BFF               	btfsc	btemp+1,7
   277  0801  280A               	ljmp	stringcode
   278  0802  1383               	bcf	3,7
   279  0803  187F               	btfsc	btemp+1,0
   280  0804  1783               	bsf	3,7
   281  0805  0800               	movf	0,w
   282  0806  0A84               	incf	4,f
   283  0807  1903               	skipnz
   284  0808  0AFF               	incf	btemp+1,f
   285  0809  0008               	return
   286  080A                     stringcode:	
   287  080A  087F               	movf	btemp+1,w
   288  080B  397F               	andlw	127
   289  080C  008A               	movwf	10
   290  080D  0804               	movf	4,w
   291  080E  0A84               	incf	4,f
   292  080F  1903               	skipnz
   293  0810  0AFF               	incf	btemp+1,f
   294  0811  0082               	movwf	2
   295  0812                     __stringbase:	
   296  0812                     __end_of__stringtab:	
   297  0812                     _dpowers:	
   298  0812  3401               	retlw	1
   299  0813  3400               	retlw	0
   300  0814  340A               	retlw	10
   301  0815  3400               	retlw	0
   302  0816  3464               	retlw	100
   303  0817  3400               	retlw	0
   304  0818  34E8               	retlw	232
   305  0819  3403               	retlw	3
   306  081A  3410               	retlw	16
   307  081B  3427               	retlw	39
   308  081C                     __end_of_dpowers:	
   309  081C                     _hexpowers:	
   310  081C  3401               	retlw	1
   311  081D  3400               	retlw	0
   312  081E  3410               	retlw	16
   313  081F  3400               	retlw	0
   314  0820  3400               	retlw	0
   315  0821  3401               	retlw	1
   316  0822  3400               	retlw	0
   317  0823  3410               	retlw	16
   318  0824                     __end_of_hexpowers:	
   319  0824                     _g_matrix4x4:	
   320  0824  3402               	retlw	2
   321  0825  3402               	retlw	2
   322  0826  3402               	retlw	2
   323  0827  3402               	retlw	2
   324  0828  3400               	retlw	0
   325  0829  340F               	retlw	15
   326  082A  3400               	retlw	0
   327  082B  3400               	retlw	0
   328  082C  3406               	retlw	6
   329  082D  3403               	retlw	3
   330  082E  3400               	retlw	0
   331  082F  3400               	retlw	0
   332  0830  3402               	retlw	2
   333  0831  3406               	retlw	6
   334  0832  3404               	retlw	4
   335  0833  3400               	retlw	0
   336  0834  3403               	retlw	3
   337  0835  3406               	retlw	6
   338  0836  3400               	retlw	0
   339  0837  3400               	retlw	0
   340  0838  3402               	retlw	2
   341  0839  3403               	retlw	3
   342  083A  3401               	retlw	1
   343  083B  3400               	retlw	0
   344  083C  3400               	retlw	0
   345  083D  3407               	retlw	7
   346  083E  3404               	retlw	4
   347  083F  3400               	retlw	0
   348  0840  3406               	retlw	6
   349  0841  3402               	retlw	2
   350  0842  3402               	retlw	2
   351  0843  3400               	retlw	0
   352  0844  3401               	retlw	1
   353  0845  3407               	retlw	7
   354  0846  3400               	retlw	0
   355  0847  3400               	retlw	0
   356  0848  3402               	retlw	2
   357  0849  3402               	retlw	2
   358  084A  3403               	retlw	3
   359  084B  3400               	retlw	0
   360  084C  3400               	retlw	0
   361  084D  3407               	retlw	7
   362  084E  3401               	retlw	1
   363  084F  3400               	retlw	0
   364  0850  3403               	retlw	3
   365  0851  3402               	retlw	2
   366  0852  3402               	retlw	2
   367  0853  3400               	retlw	0
   368  0854  3404               	retlw	4
   369  0855  3407               	retlw	7
   370  0856  3400               	retlw	0
   371  0857  3400               	retlw	0
   372  0858  3402               	retlw	2
   373  0859  3402               	retlw	2
   374  085A  3406               	retlw	6
   375  085B  3400               	retlw	0
   376  085C  3403               	retlw	3
   377  085D  3403               	retlw	3
   378  085E  3400               	retlw	0
   379  085F  3400               	retlw	0
   380  0860  3400               	retlw	0
   381  0861  3406               	retlw	6
   382  0862  3402               	retlw	2
   383  0863  3400               	retlw	0
   384  0864  3400               	retlw	0
   385  0865  3403               	retlw	3
   386  0866  3402               	retlw	2
   387  0867  3400               	retlw	0
   388  0868  3402               	retlw	2
   389  0869  3403               	retlw	3
   390  086A  3400               	retlw	0
   391  086B  3400               	retlw	0
   392  086C  3402               	retlw	2
   393  086D  3406               	retlw	6
   394  086E  3400               	retlw	0
   395  086F  3400               	retlw	0
   396  0870  3402               	retlw	2
   397  0871  3407               	retlw	7
   398  0872  3402               	retlw	2
   399  0873  3400               	retlw	0
   400  0874  3407               	retlw	7
   401  0875  3402               	retlw	2
   402  0876  3402               	retlw	2
   403  0877  3400               	retlw	0
   404  0878  3404               	retlw	4
   405  0879  3407               	retlw	7
   406  087A  3404               	retlw	4
   407  087B  3400               	retlw	0
   408  087C  3402               	retlw	2
   409  087D  3402               	retlw	2
   410  087E  3407               	retlw	7
   411  087F  3400               	retlw	0
   412  0880  3401               	retlw	1
   413  0881  3407               	retlw	7
   414  0882  3401               	retlw	1
   415  0883  3400               	retlw	0
   416  0884                     __end_of_g_matrix4x4:	
   417  000C                     _PIR1bits	set	12
   418  0018                     _RCSTAbits	set	24
   419  0019                     _TXREG	set	25
   420  0018                     _CARRY	set	24
   421  005F                     _GIE	set	95
   422  005E                     _PEIE	set	94
   423  0029                     _RA1	set	41
   424  002A                     _RA2	set	42
   425  002B                     _RA3	set	43
   426  0099                     _SPBRG	set	153
   427  0085                     _TRISAbits	set	133
   428  0098                     _TXSTAbits	set	152
   429  0465                     _RCIE	set	1125
   430  010D                     _EEADR	set	269
   431  010C                     _EEDATA	set	268
   432  0188                     _ANSELbits	set	392
   433  018C                     _EECON1	set	396
   434  018D                     _EECON2	set	397
   435  0C60                     _RD	set	3168
   436  0C61                     _WR	set	3169
   437  0C62                     _WREN	set	3170
   438  0884                     STR_140:	
   439  0884  3463               	retlw	99	;'c'
   440  0885  3468               	retlw	104	;'h'
   441  0886  346F               	retlw	111	;'o'
   442  0887  3473               	retlw	115	;'s'
   443  0888  3465               	retlw	101	;'e'
   444  0889  346E               	retlw	110	;'n'
   445  088A  3420               	retlw	32	;' '
   446  088B  3473               	retlw	115	;'s'
   447  088C  3475               	retlw	117	;'u'
   448  088D  3462               	retlw	98	;'b'
   449  088E  345F               	retlw	95	;'_'
   450  088F  3469               	retlw	105	;'i'
   451  0890  346E               	retlw	110	;'n'
   452  0891  3464               	retlw	100	;'d'
   453  0892  3465               	retlw	101	;'e'
   454  0893  3478               	retlw	120	;'x'
   455  0894  3420               	retlw	32	;' '
   456  0895  343D               	retlw	61	;'='
   457  0896  3420               	retlw	32	;' '
   458  0897  3425               	retlw	37	;'%'
   459  0898  3464               	retlw	100	;'d'
   460  0899  342C               	retlw	44	;','
   461  089A  3420               	retlw	32	;' '
   462  089B  3474               	retlw	116	;'t'
   463  089C  3465               	retlw	101	;'e'
   464  089D  346D               	retlw	109	;'m'
   465  089E  3470               	retlw	112	;'p'
   466  089F  345F               	retlw	95	;'_'
   467  08A0  3470               	retlw	112	;'p'
   468  08A1  3472               	retlw	114	;'r'
   469  08A2  3465               	retlw	101	;'e'
   470  08A3  345F               	retlw	95	;'_'
   471  08A4  3478               	retlw	120	;'x'
   472  08A5  3420               	retlw	32	;' '
   473  08A6  343D               	retlw	61	;'='
   474  08A7  3420               	retlw	32	;' '
   475  08A8  3425               	retlw	37	;'%'
   476  08A9  3464               	retlw	100	;'d'
   477  08AA  342C               	retlw	44	;','
   478  08AB  3420               	retlw	32	;' '
   479  08AC  3474               	retlw	116	;'t'
   480  08AD  3465               	retlw	101	;'e'
   481  08AE  346D               	retlw	109	;'m'
   482  08AF  3470               	retlw	112	;'p'
   483  08B0  345F               	retlw	95	;'_'
   484  08B1  3470               	retlw	112	;'p'
   485  08B2  3472               	retlw	114	;'r'
   486  08B3  3465               	retlw	101	;'e'
   487  08B4  345F               	retlw	95	;'_'
   488  08B5  3472               	retlw	114	;'r'
   489  08B6  3469               	retlw	105	;'i'
   490  08B7  3473               	retlw	115	;'s'
   491  08B8  346B               	retlw	107	;'k'
   492  08B9  3420               	retlw	32	;' '
   493  08BA  343D               	retlw	61	;'='
   494  08BB  3420               	retlw	32	;' '
   495  08BC  3425               	retlw	37	;'%'
   496  08BD  3464               	retlw	100	;'d'
   497  08BE  340D               	retlw	13
   498  08BF  340A               	retlw	10
   499  08C0  3400               	retlw	0
   500  08C1                     STR_69:	
   501  08C1  343D               	retlw	61	;'='
   502  08C2  343D               	retlw	61	;'='
   503  08C3  343D               	retlw	61	;'='
   504  08C4  343D               	retlw	61	;'='
   505  08C5  343D               	retlw	61	;'='
   506  08C6  343D               	retlw	61	;'='
   507  08C7  343D               	retlw	61	;'='
   508  08C8  343D               	retlw	61	;'='
   509  08C9  343D               	retlw	61	;'='
   510  08CA  343D               	retlw	61	;'='
   511  08CB  343D               	retlw	61	;'='
   512  08CC  343D               	retlw	61	;'='
   513  08CD  343D               	retlw	61	;'='
   514  08CE  343D               	retlw	61	;'='
   515  08CF  3469               	retlw	105	;'i'
   516  08D0  3473               	retlw	115	;'s'
   517  08D1  345F               	retlw	95	;'_'
   518  08D2  3476               	retlw	118	;'v'
   519  08D3  3461               	retlw	97	;'a'
   520  08D4  346C               	retlw	108	;'l'
   521  08D5  3469               	retlw	105	;'i'
   522  08D6  3464               	retlw	100	;'d'
   523  08D7  343D               	retlw	61	;'='
   524  08D8  343D               	retlw	61	;'='
   525  08D9  343D               	retlw	61	;'='
   526  08DA  343D               	retlw	61	;'='
   527  08DB  343D               	retlw	61	;'='
   528  08DC  343D               	retlw	61	;'='
   529  08DD  343D               	retlw	61	;'='
   530  08DE  343D               	retlw	61	;'='
   531  08DF  343D               	retlw	61	;'='
   532  08E0  343D               	retlw	61	;'='
   533  08E1  343D               	retlw	61	;'='
   534  08E2  343D               	retlw	61	;'='
   535  08E3  340D               	retlw	13
   536  08E4  340A               	retlw	10
   537  08E5  3400               	retlw	0
   538  08E6                     STR_61:	
   539  08E6  343D               	retlw	61	;'='
   540  08E7  343D               	retlw	61	;'='
   541  08E8  343D               	retlw	61	;'='
   542  08E9  343D               	retlw	61	;'='
   543  08EA  343D               	retlw	61	;'='
   544  08EB  343D               	retlw	61	;'='
   545  08EC  343D               	retlw	61	;'='
   546  08ED  343D               	retlw	61	;'='
   547  08EE  343D               	retlw	61	;'='
   548  08EF  343D               	retlw	61	;'='
   549  08F0  343D               	retlw	61	;'='
   550  08F1  343D               	retlw	61	;'='
   551  08F2  343D               	retlw	61	;'='
   552  08F3  343D               	retlw	61	;'='
   553  08F4  3468               	retlw	104	;'h'
   554  08F5  3469               	retlw	105	;'i'
   555  08F6  3474               	retlw	116	;'t'
   556  08F7  345F               	retlw	95	;'_'
   557  08F8  346C               	retlw	108	;'l'
   558  08F9  3461               	retlw	97	;'a'
   559  08FA  346E               	retlw	110	;'n'
   560  08FB  3464               	retlw	100	;'d'
   561  08FC  343D               	retlw	61	;'='
   562  08FD  343D               	retlw	61	;'='
   563  08FE  343D               	retlw	61	;'='
   564  08FF  343D               	retlw	61	;'='
   565  0900  343D               	retlw	61	;'='
   566  0901  343D               	retlw	61	;'='
   567  0902  343D               	retlw	61	;'='
   568  0903  343D               	retlw	61	;'='
   569  0904  343D               	retlw	61	;'='
   570  0905  343D               	retlw	61	;'='
   571  0906  343D               	retlw	61	;'='
   572  0907  343D               	retlw	61	;'='
   573  0908  340D               	retlw	13
   574  0909  340A               	retlw	10
   575  090A  3400               	retlw	0
   576  090B                     STR_17:	
   577  090B  343C               	retlw	60	;'<'
   578  090C  343C               	retlw	60	;'<'
   579  090D  343C               	retlw	60	;'<'
   580  090E  343C               	retlw	60	;'<'
   581  090F  343C               	retlw	60	;'<'
   582  0910  343C               	retlw	60	;'<'
   583  0911  343C               	retlw	60	;'<'
   584  0912  343C               	retlw	60	;'<'
   585  0913  343C               	retlw	60	;'<'
   586  0914  343C               	retlw	60	;'<'
   587  0915  343C               	retlw	60	;'<'
   588  0916  343C               	retlw	60	;'<'
   589  0917  343C               	retlw	60	;'<'
   590  0918  343C               	retlw	60	;'<'
   591  0919  343C               	retlw	60	;'<'
   592  091A  343C               	retlw	60	;'<'
   593  091B  343C               	retlw	60	;'<'
   594  091C  343C               	retlw	60	;'<'
   595  091D  343C               	retlw	60	;'<'
   596  091E  343C               	retlw	60	;'<'
   597  091F  344D               	retlw	77	;'M'
   598  0920  3441               	retlw	65	;'A'
   599  0921  3454               	retlw	84	;'T'
   600  0922  3452               	retlw	82	;'R'
   601  0923  3449               	retlw	73	;'I'
   602  0924  3458               	retlw	88	;'X'
   603  0925  3431               	retlw	49	;'1'
   604  0926  3436               	retlw	54	;'6'
   605  0927  3478               	retlw	120	;'x'
   606  0928  3438               	retlw	56	;'8'
   607  0929  340D               	retlw	13
   608  092A  340A               	retlw	10
   609  092B  3400               	retlw	0
   610  092C                     STR_4:	
   611  092C  343C               	retlw	60	;'<'
   612  092D  343C               	retlw	60	;'<'
   613  092E  343C               	retlw	60	;'<'
   614  092F  343C               	retlw	60	;'<'
   615  0930  343C               	retlw	60	;'<'
   616  0931  343C               	retlw	60	;'<'
   617  0932  343C               	retlw	60	;'<'
   618  0933  343C               	retlw	60	;'<'
   619  0934  343C               	retlw	60	;'<'
   620  0935  343C               	retlw	60	;'<'
   621  0936  343C               	retlw	60	;'<'
   622  0937  343C               	retlw	60	;'<'
   623  0938  343C               	retlw	60	;'<'
   624  0939  343C               	retlw	60	;'<'
   625  093A  343C               	retlw	60	;'<'
   626  093B  343C               	retlw	60	;'<'
   627  093C  343C               	retlw	60	;'<'
   628  093D  343C               	retlw	60	;'<'
   629  093E  343C               	retlw	60	;'<'
   630  093F  343C               	retlw	60	;'<'
   631  0940  344D               	retlw	77	;'M'
   632  0941  3441               	retlw	65	;'A'
   633  0942  3454               	retlw	84	;'T'
   634  0943  3452               	retlw	82	;'R'
   635  0944  3449               	retlw	73	;'I'
   636  0945  3458               	retlw	88	;'X'
   637  0946  3434               	retlw	52	;'4'
   638  0947  3478               	retlw	120	;'x'
   639  0948  3434               	retlw	52	;'4'
   640  0949  340D               	retlw	13
   641  094A  340A               	retlw	10
   642  094B  3400               	retlw	0
   643  094C                     STR_1:	
   644  094C  3445               	retlw	69	;'E'
   645  094D  3452               	retlw	82	;'R'
   646  094E  3452               	retlw	82	;'R'
   647  094F  344F               	retlw	79	;'O'
   648  0950  3452               	retlw	82	;'R'
   649  0951  343A               	retlw	58	;':'
   650  0952  3420               	retlw	32	;' '
   651  0953  3467               	retlw	103	;'g'
   652  0954  345F               	retlw	95	;'_'
   653  0955  3464               	retlw	100	;'d'
   654  0956  3465               	retlw	101	;'e'
   655  0957  3462               	retlw	98	;'b'
   656  0958  3475               	retlw	117	;'u'
   657  0959  3467               	retlw	103	;'g'
   658  095A  3420               	retlw	32	;' '
   659  095B  3469               	retlw	105	;'i'
   660  095C  3473               	retlw	115	;'s'
   661  095D  3420               	retlw	32	;' '
   662  095E  346F               	retlw	111	;'o'
   663  095F  3476               	retlw	118	;'v'
   664  0960  3465               	retlw	101	;'e'
   665  0961  3472               	retlw	114	;'r'
   666  0962  3466               	retlw	102	;'f'
   667  0963  346C               	retlw	108	;'l'
   668  0964  346F               	retlw	111	;'o'
   669  0965  3477               	retlw	119	;'w'
   670  0966  3465               	retlw	101	;'e'
   671  0967  3464               	retlw	100	;'d'
   672  0968  340D               	retlw	13
   673  0969  340A               	retlw	10
   674  096A  3400               	retlw	0
   675  096B                     STR_148:	
   676  096B  3469               	retlw	105	;'i'
   677  096C  346E               	retlw	110	;'n'
   678  096D  3464               	retlw	100	;'d'
   679  096E  3465               	retlw	101	;'e'
   680  096F  3478               	retlw	120	;'x'
   681  0970  3420               	retlw	32	;' '
   682  0971  343D               	retlw	61	;'='
   683  0972  3420               	retlw	32	;' '
   684  0973  3425               	retlw	37	;'%'
   685  0974  3464               	retlw	100	;'d'
   686  0975  342C               	retlw	44	;','
   687  0976  3420               	retlw	32	;' '
   688  0977  3473               	retlw	115	;'s'
   689  0978  3475               	retlw	117	;'u'
   690  0979  3462               	retlw	98	;'b'
   691  097A  345F               	retlw	95	;'_'
   692  097B  3469               	retlw	105	;'i'
   693  097C  346E               	retlw	110	;'n'
   694  097D  3464               	retlw	100	;'d'
   695  097E  3465               	retlw	101	;'e'
   696  097F  3478               	retlw	120	;'x'
   697  0980  3420               	retlw	32	;' '
   698  0981  343D               	retlw	61	;'='
   699  0982  3420               	retlw	32	;' '
   700  0983  3425               	retlw	37	;'%'
   701  0984  3464               	retlw	100	;'d'
   702  0985  340D               	retlw	13
   703  0986  340A               	retlw	10
   704  0987  3400               	retlw	0
   705  0988                     STR_87:	
   706  0988  3441               	retlw	65	;'A'
   707  0989  344C               	retlw	76	;'L'
   708  098A  3449               	retlw	73	;'I'
   709  098B  3447               	retlw	71	;'G'
   710  098C  344E               	retlw	78	;'N'
   711  098D  345F               	retlw	95	;'_'
   712  098E  3452               	retlw	82	;'R'
   713  098F  3449               	retlw	73	;'I'
   714  0990  3447               	retlw	71	;'G'
   715  0991  3448               	retlw	72	;'H'
   716  0992  3454               	retlw	84	;'T'
   717  0993  345F               	retlw	95	;'_'
   718  0994  344F               	retlw	79	;'O'
   719  0995  3456               	retlw	86	;'V'
   720  0996  3445               	retlw	69	;'E'
   721  0997  3452               	retlw	82	;'R'
   722  0998  345F               	retlw	95	;'_'
   723  0999  3442               	retlw	66	;'B'
   724  099A  344F               	retlw	79	;'O'
   725  099B  3455               	retlw	85	;'U'
   726  099C  344E               	retlw	78	;'N'
   727  099D  3444               	retlw	68	;'D'
   728  099E  3441               	retlw	65	;'A'
   729  099F  3452               	retlw	82	;'R'
   730  09A0  3459               	retlw	89	;'Y'
   731  09A1  340D               	retlw	13
   732  09A2  340A               	retlw	10
   733  09A3  3400               	retlw	0
   734  09A4                     STR_108:	
   735  09A4  346C               	retlw	108	;'l'
   736  09A5  3467               	retlw	103	;'g'
   737  09A6  345F               	retlw	95	;'_'
   738  09A7  3467               	retlw	103	;'g'
   739  09A8  3465               	retlw	101	;'e'
   740  09A9  3474               	retlw	116	;'t'
   741  09AA  345F               	retlw	95	;'_'
   742  09AB  3468               	retlw	104	;'h'
   743  09AC  3465               	retlw	101	;'e'
   744  09AD  3469               	retlw	105	;'i'
   745  09AE  3467               	retlw	103	;'g'
   746  09AF  3468               	retlw	104	;'h'
   747  09B0  3474               	retlw	116	;'t'
   748  09B1  3420               	retlw	32	;' '
   749  09B2  3468               	retlw	104	;'h'
   750  09B3  3465               	retlw	101	;'e'
   751  09B4  3469               	retlw	105	;'i'
   752  09B5  3467               	retlw	103	;'g'
   753  09B6  3468               	retlw	104	;'h'
   754  09B7  3474               	retlw	116	;'t'
   755  09B8  3420               	retlw	32	;' '
   756  09B9  343D               	retlw	61	;'='
   757  09BA  3420               	retlw	32	;' '
   758  09BB  3425               	retlw	37	;'%'
   759  09BC  3464               	retlw	100	;'d'
   760  09BD  340D               	retlw	13
   761  09BE  340A               	retlw	10
   762  09BF  3400               	retlw	0
   763  09C0                     STR_110:	
   764  09C0  346C               	retlw	108	;'l'
   765  09C1  3467               	retlw	103	;'g'
   766  09C2  345F               	retlw	95	;'_'
   767  09C3  3467               	retlw	103	;'g'
   768  09C4  3465               	retlw	101	;'e'
   769  09C5  3474               	retlw	116	;'t'
   770  09C6  345F               	retlw	95	;'_'
   771  09C7  3468               	retlw	104	;'h'
   772  09C8  3465               	retlw	101	;'e'
   773  09C9  3469               	retlw	105	;'i'
   774  09CA  3467               	retlw	103	;'g'
   775  09CB  3468               	retlw	104	;'h'
   776  09CC  3474               	retlw	116	;'t'
   777  09CD  345F               	retlw	95	;'_'
   778  09CE  3461               	retlw	97	;'a'
   779  09CF  3466               	retlw	102	;'f'
   780  09D0  3474               	retlw	116	;'t'
   781  09D1  3465               	retlw	101	;'e'
   782  09D2  3472               	retlw	114	;'r'
   783  09D3  345F               	retlw	95	;'_'
   784  09D4  346D               	retlw	109	;'m'
   785  09D5  3465               	retlw	101	;'e'
   786  09D6  3472               	retlw	114	;'r'
   787  09D7  3467               	retlw	103	;'g'
   788  09D8  3465               	retlw	101	;'e'
   789  09D9  340D               	retlw	13
   790  09DA  340A               	retlw	10
   791  09DB  3400               	retlw	0
   792  09DC                     STR_126:	
   793  09DC  343D               	retlw	61	;'='
   794  09DD  343D               	retlw	61	;'='
   795  09DE  343D               	retlw	61	;'='
   796  09DF  3466               	retlw	102	;'f'
   797  09E0  3469               	retlw	105	;'i'
   798  09E1  346E               	retlw	110	;'n'
   799  09E2  3464               	retlw	100	;'d'
   800  09E3  345F               	retlw	95	;'_'
   801  09E4  3462               	retlw	98	;'b'
   802  09E5  3465               	retlw	101	;'e'
   803  09E6  3473               	retlw	115	;'s'
   804  09E7  3474               	retlw	116	;'t'
   805  09E8  345F               	retlw	95	;'_'
   806  09E9  3473               	retlw	115	;'s'
   807  09EA  346F               	retlw	111	;'o'
   808  09EB  346C               	retlw	108	;'l'
   809  09EC  3475               	retlw	117	;'u'
   810  09ED  3474               	retlw	116	;'t'
   811  09EE  3469               	retlw	105	;'i'
   812  09EF  346F               	retlw	111	;'o'
   813  09F0  346E               	retlw	110	;'n'
   814  09F1  343D               	retlw	61	;'='
   815  09F2  343D               	retlw	61	;'='
   816  09F3  343D               	retlw	61	;'='
   817  09F4  340D               	retlw	13
   818  09F5  340A               	retlw	10
   819  09F6  3400               	retlw	0
   820  09F7                     STR_85:	
   821  09F7  3441               	retlw	65	;'A'
   822  09F8  344C               	retlw	76	;'L'
   823  09F9  3449               	retlw	73	;'I'
   824  09FA  3447               	retlw	71	;'G'
   825  09FB  344E               	retlw	78	;'N'
   826  09FC  345F               	retlw	95	;'_'
   827  09FD  344C               	retlw	76	;'L'
   828  09FE  3445               	retlw	69	;'E'
   829  09FF  3446               	retlw	70	;'F'
   830  0A00  3454               	retlw	84	;'T'
   831  0A01  345F               	retlw	95	;'_'
   832  0A02  344F               	retlw	79	;'O'
   833  0A03  3456               	retlw	86	;'V'
   834  0A04  3445               	retlw	69	;'E'
   835  0A05  3452               	retlw	82	;'R'
   836  0A06  345F               	retlw	95	;'_'
   837  0A07  3442               	retlw	66	;'B'
   838  0A08  344F               	retlw	79	;'O'
   839  0A09  3455               	retlw	85	;'U'
   840  0A0A  344E               	retlw	78	;'N'
   841  0A0B  3444               	retlw	68	;'D'
   842  0A0C  3441               	retlw	65	;'A'
   843  0A0D  3452               	retlw	82	;'R'
   844  0A0E  3459               	retlw	89	;'Y'
   845  0A0F  340D               	retlw	13
   846  0A10  340A               	retlw	10
   847  0A11  3400               	retlw	0
   848  0A12                     STR_57:	
   849  0A12  3464               	retlw	100	;'d'
   850  0A13  3465               	retlw	101	;'e'
   851  0A14  346C               	retlw	108	;'l'
   852  0A15  3465               	retlw	101	;'e'
   853  0A16  3474               	retlw	116	;'t'
   854  0A17  3465               	retlw	101	;'e'
   855  0A18  345F               	retlw	95	;'_'
   856  0A19  346D               	retlw	109	;'m'
   857  0A1A  3461               	retlw	97	;'a'
   858  0A1B  3474               	retlw	116	;'t'
   859  0A1C  3472               	retlw	114	;'r'
   860  0A1D  3469               	retlw	105	;'i'
   861  0A1E  3478               	retlw	120	;'x'
   862  0A1F  3420               	retlw	32	;' '
   863  0A20  3463               	retlw	99	;'c'
   864  0A21  346F               	retlw	111	;'o'
   865  0A22  3475               	retlw	117	;'u'
   866  0A23  346E               	retlw	110	;'n'
   867  0A24  3474               	retlw	116	;'t'
   868  0A25  3420               	retlw	32	;' '
   869  0A26  343D               	retlw	61	;'='
   870  0A27  3420               	retlw	32	;' '
   871  0A28  3425               	retlw	37	;'%'
   872  0A29  3464               	retlw	100	;'d'
   873  0A2A  340D               	retlw	13
   874  0A2B  340A               	retlw	10
   875  0A2C  3400               	retlw	0
   876  0A2D                     STR_63:	
   877  0A2D  3468               	retlw	104	;'h'
   878  0A2E  3469               	retlw	105	;'i'
   879  0A2F  3474               	retlw	116	;'t'
   880  0A30  3431               	retlw	49	;'1'
   881  0A31  3420               	retlw	32	;' '
   882  0A32  3472               	retlw	114	;'r'
   883  0A33  346F               	retlw	111	;'o'
   884  0A34  3477               	retlw	119	;'w'
   885  0A35  3420               	retlw	32	;' '
   886  0A36  343D               	retlw	61	;'='
   887  0A37  3420               	retlw	32	;' '
   888  0A38  3425               	retlw	37	;'%'
   889  0A39  3464               	retlw	100	;'d'
   890  0A3A  342C               	retlw	44	;','
   891  0A3B  3420               	retlw	32	;' '
   892  0A3C  3463               	retlw	99	;'c'
   893  0A3D  346F               	retlw	111	;'o'
   894  0A3E  346C               	retlw	108	;'l'
   895  0A3F  3420               	retlw	32	;' '
   896  0A40  343D               	retlw	61	;'='
   897  0A41  3420               	retlw	32	;' '
   898  0A42  3425               	retlw	37	;'%'
   899  0A43  3464               	retlw	100	;'d'
   900  0A44  340D               	retlw	13
   901  0A45  340A               	retlw	10
   902  0A46  3400               	retlw	0
   903  0A47                     STR_65:	
   904  0A47  3468               	retlw	104	;'h'
   905  0A48  3469               	retlw	105	;'i'
   906  0A49  3474               	retlw	116	;'t'
   907  0A4A  3432               	retlw	50	;'2'
   908  0A4B  3420               	retlw	32	;' '
   909  0A4C  3472               	retlw	114	;'r'
   910  0A4D  346F               	retlw	111	;'o'
   911  0A4E  3477               	retlw	119	;'w'
   912  0A4F  3420               	retlw	32	;' '
   913  0A50  343D               	retlw	61	;'='
   914  0A51  3420               	retlw	32	;' '
   915  0A52  3425               	retlw	37	;'%'
   916  0A53  3464               	retlw	100	;'d'
   917  0A54  342C               	retlw	44	;','
   918  0A55  3420               	retlw	32	;' '
   919  0A56  3463               	retlw	99	;'c'
   920  0A57  346F               	retlw	111	;'o'
   921  0A58  346C               	retlw	108	;'l'
   922  0A59  3420               	retlw	32	;' '
   923  0A5A  343D               	retlw	61	;'='
   924  0A5B  3420               	retlw	32	;' '
   925  0A5C  3425               	retlw	37	;'%'
   926  0A5D  3464               	retlw	100	;'d'
   927  0A5E  340D               	retlw	13
   928  0A5F  340A               	retlw	10
   929  0A60  3400               	retlw	0
   930  0A61                     STR_150:	
   931  0A61  3467               	retlw	103	;'g'
   932  0A62  345F               	retlw	95	;'_'
   933  0A63  3463               	retlw	99	;'c'
   934  0A64  3468               	retlw	104	;'h'
   935  0A65  3461               	retlw	97	;'a'
   936  0A66  3472               	retlw	114	;'r'
   937  0A67  345F               	retlw	95	;'_'
   938  0A68  3469               	retlw	105	;'i'
   939  0A69  346E               	retlw	110	;'n'
   940  0A6A  3466               	retlw	102	;'f'
   941  0A6B  346F               	retlw	111	;'o'
   942  0A6C  345F               	retlw	95	;'_'
   943  0A6D  3469               	retlw	105	;'i'
   944  0A6E  346E               	retlw	110	;'n'
   945  0A6F  3464               	retlw	100	;'d'
   946  0A70  3465               	retlw	101	;'e'
   947  0A71  3478               	retlw	120	;'x'
   948  0A72  3420               	retlw	32	;' '
   949  0A73  343D               	retlw	61	;'='
   950  0A74  3420               	retlw	32	;' '
   951  0A75  3425               	retlw	37	;'%'
   952  0A76  3464               	retlw	100	;'d'
   953  0A77  340D               	retlw	13
   954  0A78  340A               	retlw	10
   955  0A79  3400               	retlw	0
   956  0A7A                     STR_55:	
   957  0A7A  3442               	retlw	66	;'B'
   958  0A7B  3465               	retlw	101	;'e'
   959  0A7C  3466               	retlw	102	;'f'
   960  0A7D  346F               	retlw	111	;'o'
   961  0A7E  3472               	retlw	114	;'r'
   962  0A7F  3465               	retlw	101	;'e'
   963  0A80  3420               	retlw	32	;' '
   964  0A81  3464               	retlw	100	;'d'
   965  0A82  3465               	retlw	101	;'e'
   966  0A83  346C               	retlw	108	;'l'
   967  0A84  3465               	retlw	101	;'e'
   968  0A85  3474               	retlw	116	;'t'
   969  0A86  3465               	retlw	101	;'e'
   970  0A87  3420               	retlw	32	;' '
   971  0A88  344D               	retlw	77	;'M'
   972  0A89  3441               	retlw	65	;'A'
   973  0A8A  3454               	retlw	84	;'T'
   974  0A8B  3452               	retlw	82	;'R'
   975  0A8C  3449               	retlw	73	;'I'
   976  0A8D  3458               	retlw	88	;'X'
   977  0A8E  3431               	retlw	49	;'1'
   978  0A8F  3436               	retlw	54	;'6'
   979  0A90  3478               	retlw	120	;'x'
   980  0A91  3438               	retlw	56	;'8'
   981  0A92  3400               	retlw	0
   982  0A93                     STR_46:	
   983  0A93  3465               	retlw	101	;'e'
   984  0A94  3465               	retlw	101	;'e'
   985  0A95  3470               	retlw	112	;'p'
   986  0A96  3472               	retlw	114	;'r'
   987  0A97  346F               	retlw	111	;'o'
   988  0A98  346D               	retlw	109	;'m'
   989  0A99  345F               	retlw	95	;'_'
   990  0A9A  3477               	retlw	119	;'w'
   991  0A9B  3472               	retlw	114	;'r'
   992  0A9C  3469               	retlw	105	;'i'
   993  0A9D  3474               	retlw	116	;'t'
   994  0A9E  3465               	retlw	101	;'e'
   995  0A9F  345F               	retlw	95	;'_'
   996  0AA0  3469               	retlw	105	;'i'
   997  0AA1  346E               	retlw	110	;'n'
   998  0AA2  3474               	retlw	116	;'t'
   999  0AA3  3420               	retlw	32	;' '
  1000  0AA4  343D               	retlw	61	;'='
  1001  0AA5  3420               	retlw	32	;' '
  1002  0AA6  3425               	retlw	37	;'%'
  1003  0AA7  3464               	retlw	100	;'d'
  1004  0AA8  340D               	retlw	13
  1005  0AA9  340A               	retlw	10
  1006  0AAA  3400               	retlw	0
  1007  0AAB                     STR_97:	
  1008  0AAB  3442               	retlw	66	;'B'
  1009  0AAC  3465               	retlw	101	;'e'
  1010  0AAD  3466               	retlw	102	;'f'
  1011  0AAE  346F               	retlw	111	;'o'
  1012  0AAF  3472               	retlw	114	;'r'
  1013  0AB0  3465               	retlw	101	;'e'
  1014  0AB1  3420               	retlw	32	;' '
  1015  0AB2  346D               	retlw	109	;'m'
  1016  0AB3  3465               	retlw	101	;'e'
  1017  0AB4  3472               	retlw	114	;'r'
  1018  0AB5  3467               	retlw	103	;'g'
  1019  0AB6  3465               	retlw	101	;'e'
  1020  0AB7  3420               	retlw	32	;' '
  1021  0AB8  344D               	retlw	77	;'M'
  1022  0AB9  3441               	retlw	65	;'A'
  1023  0ABA  3454               	retlw	84	;'T'
  1024  0ABB  3452               	retlw	82	;'R'
  1025  0ABC  3449               	retlw	73	;'I'
  1026  0ABD  3458               	retlw	88	;'X'
  1027  0ABE  3431               	retlw	49	;'1'
  1028  0ABF  3436               	retlw	54	;'6'
  1029  0AC0  3478               	retlw	120	;'x'
  1030  0AC1  3438               	retlw	56	;'8'
  1031  0AC2  3400               	retlw	0
  1032  0AC3                     STR_56:	
  1033  0AC3  3441               	retlw	65	;'A'
  1034  0AC4  3466               	retlw	102	;'f'
  1035  0AC5  3474               	retlw	116	;'t'
  1036  0AC6  3465               	retlw	101	;'e'
  1037  0AC7  3472               	retlw	114	;'r'
  1038  0AC8  3420               	retlw	32	;' '
  1039  0AC9  3464               	retlw	100	;'d'
  1040  0ACA  3465               	retlw	101	;'e'
  1041  0ACB  346C               	retlw	108	;'l'
  1042  0ACC  3465               	retlw	101	;'e'
  1043  0ACD  3474               	retlw	116	;'t'
  1044  0ACE  3465               	retlw	101	;'e'
  1045  0ACF  3420               	retlw	32	;' '
  1046  0AD0  344D               	retlw	77	;'M'
  1047  0AD1  3441               	retlw	65	;'A'
  1048  0AD2  3454               	retlw	84	;'T'
  1049  0AD3  3452               	retlw	82	;'R'
  1050  0AD4  3449               	retlw	73	;'I'
  1051  0AD5  3458               	retlw	88	;'X'
  1052  0AD6  3431               	retlw	49	;'1'
  1053  0AD7  3436               	retlw	54	;'6'
  1054  0AD8  3478               	retlw	120	;'x'
  1055  0AD9  3438               	retlw	56	;'8'
  1056  0ADA  3400               	retlw	0
  1057  0ADB                     STR_144:	
  1058  0ADB  3470               	retlw	112	;'p'
  1059  0ADC  3472               	retlw	114	;'r'
  1060  0ADD  3469               	retlw	105	;'i'
  1061  0ADE  346E               	retlw	110	;'n'
  1062  0ADF  3474               	retlw	116	;'t'
  1063  0AE0  3466               	retlw	102	;'f'
  1064  0AE1  345F               	retlw	95	;'_'
  1065  0AE2  3461               	retlw	97	;'a'
  1066  0AE3  346C               	retlw	108	;'l'
  1067  0AE4  346C               	retlw	108	;'l'
  1068  0AE5  345F               	retlw	95	;'_'
  1069  0AE6  344D               	retlw	77	;'M'
  1070  0AE7  3441               	retlw	65	;'A'
  1071  0AE8  3454               	retlw	84	;'T'
  1072  0AE9  3452               	retlw	82	;'R'
  1073  0AEA  3449               	retlw	73	;'I'
  1074  0AEB  3458               	retlw	88	;'X'
  1075  0AEC  3434               	retlw	52	;'4'
  1076  0AED  3478               	retlw	120	;'x'
  1077  0AEE  3434               	retlw	52	;'4'
  1078  0AEF  340D               	retlw	13
  1079  0AF0  340A               	retlw	10
  1080  0AF1  3400               	retlw	0
  1081  0AF2                     STR_30:	
  1082  0AF2  343C               	retlw	60	;'<'
  1083  0AF3  343C               	retlw	60	;'<'
  1084  0AF4  343C               	retlw	60	;'<'
  1085  0AF5  343C               	retlw	60	;'<'
  1086  0AF6  343C               	retlw	60	;'<'
  1087  0AF7  343C               	retlw	60	;'<'
  1088  0AF8  343C               	retlw	60	;'<'
  1089  0AF9  343C               	retlw	60	;'<'
  1090  0AFA  343C               	retlw	60	;'<'
  1091  0AFB  343C               	retlw	60	;'<'
  1092  0AFC  343C               	retlw	60	;'<'
  1093  0AFD  343C               	retlw	60	;'<'
  1094  0AFE  343C               	retlw	60	;'<'
  1095  0AFF  343C               	retlw	60	;'<'
  1096  0B00  343C               	retlw	60	;'<'
  1097  0B01  343C               	retlw	60	;'<'
  1098  0B02  343C               	retlw	60	;'<'
  1099  0B03  343C               	retlw	60	;'<'
  1100  0B04  343C               	retlw	60	;'<'
  1101  0B05  343C               	retlw	60	;'<'
  1102  0B06  340D               	retlw	13
  1103  0B07  340A               	retlw	10
  1104  0B08  3400               	retlw	0
  1105  0B09                     STR_12:	
  1106  0B09  343E               	retlw	62	;'>'
  1107  0B0A  343E               	retlw	62	;'>'
  1108  0B0B  343E               	retlw	62	;'>'
  1109  0B0C  343E               	retlw	62	;'>'
  1110  0B0D  343E               	retlw	62	;'>'
  1111  0B0E  343E               	retlw	62	;'>'
  1112  0B0F  343E               	retlw	62	;'>'
  1113  0B10  343E               	retlw	62	;'>'
  1114  0B11  343E               	retlw	62	;'>'
  1115  0B12  343E               	retlw	62	;'>'
  1116  0B13  343E               	retlw	62	;'>'
  1117  0B14  343E               	retlw	62	;'>'
  1118  0B15  343E               	retlw	62	;'>'
  1119  0B16  343E               	retlw	62	;'>'
  1120  0B17  343E               	retlw	62	;'>'
  1121  0B18  343E               	retlw	62	;'>'
  1122  0B19  343E               	retlw	62	;'>'
  1123  0B1A  343E               	retlw	62	;'>'
  1124  0B1B  343E               	retlw	62	;'>'
  1125  0B1C  343E               	retlw	62	;'>'
  1126  0B1D  340D               	retlw	13
  1127  0B1E  340A               	retlw	10
  1128  0B1F  3400               	retlw	0
  1129  0B20                     STR_48:	
  1130  0B20  3465               	retlw	101	;'e'
  1131  0B21  3465               	retlw	101	;'e'
  1132  0B22  3470               	retlw	112	;'p'
  1133  0B23  3472               	retlw	114	;'r'
  1134  0B24  346F               	retlw	111	;'o'
  1135  0B25  346D               	retlw	109	;'m'
  1136  0B26  345F               	retlw	95	;'_'
  1137  0B27  3472               	retlw	114	;'r'
  1138  0B28  3465               	retlw	101	;'e'
  1139  0B29  3461               	retlw	97	;'a'
  1140  0B2A  3464               	retlw	100	;'d'
  1141  0B2B  345F               	retlw	95	;'_'
  1142  0B2C  3469               	retlw	105	;'i'
  1143  0B2D  346E               	retlw	110	;'n'
  1144  0B2E  3474               	retlw	116	;'t'
  1145  0B2F  3420               	retlw	32	;' '
  1146  0B30  343D               	retlw	61	;'='
  1147  0B31  3420               	retlw	32	;' '
  1148  0B32  3425               	retlw	37	;'%'
  1149  0B33  3464               	retlw	100	;'d'
  1150  0B34  340D               	retlw	13
  1151  0B35  340A               	retlw	10
  1152  0B36  3400               	retlw	0
  1153  0B37                     STR_99:	
  1154  0B37  3441               	retlw	65	;'A'
  1155  0B38  3466               	retlw	102	;'f'
  1156  0B39  3474               	retlw	116	;'t'
  1157  0B3A  3465               	retlw	101	;'e'
  1158  0B3B  3472               	retlw	114	;'r'
  1159  0B3C  3420               	retlw	32	;' '
  1160  0B3D  346D               	retlw	109	;'m'
  1161  0B3E  3465               	retlw	101	;'e'
  1162  0B3F  3472               	retlw	114	;'r'
  1163  0B40  3467               	retlw	103	;'g'
  1164  0B41  3465               	retlw	101	;'e'
  1165  0B42  3420               	retlw	32	;' '
  1166  0B43  344D               	retlw	77	;'M'
  1167  0B44  3441               	retlw	65	;'A'
  1168  0B45  3454               	retlw	84	;'T'
  1169  0B46  3452               	retlw	82	;'R'
  1170  0B47  3449               	retlw	73	;'I'
  1171  0B48  3458               	retlw	88	;'X'
  1172  0B49  3431               	retlw	49	;'1'
  1173  0B4A  3436               	retlw	54	;'6'
  1174  0B4B  3478               	retlw	120	;'x'
  1175  0B4C  3438               	retlw	56	;'8'
  1176  0B4D  3400               	retlw	0
  1177  0B4E                     STR_59:	
  1178  0B4E  346E               	retlw	110	;'n'
  1179  0B4F  3475               	retlw	117	;'u'
  1180  0B50  346D               	retlw	109	;'m'
  1181  0B51  3420               	retlw	32	;' '
  1182  0B52  3466               	retlw	102	;'f'
  1183  0B53  3475               	retlw	117	;'u'
  1184  0B54  346C               	retlw	108	;'l'
  1185  0B55  346C               	retlw	108	;'l'
  1186  0B56  3420               	retlw	32	;' '
  1187  0B57  3472               	retlw	114	;'r'
  1188  0B58  346F               	retlw	111	;'o'
  1189  0B59  3477               	retlw	119	;'w'
  1190  0B5A  3473               	retlw	115	;'s'
  1191  0B5B  3420               	retlw	32	;' '
  1192  0B5C  343D               	retlw	61	;'='
  1193  0B5D  3420               	retlw	32	;' '
  1194  0B5E  3425               	retlw	37	;'%'
  1195  0B5F  3464               	retlw	100	;'d'
  1196  0B60  340D               	retlw	13
  1197  0B61  340A               	retlw	10
  1198  0B62  3400               	retlw	0
  1199  0B63                     STR_135:	
  1200  0B63  3472               	retlw	114	;'r'
  1201  0B64  3469               	retlw	105	;'i'
  1202  0B65  3473               	retlw	115	;'s'
  1203  0B66  346B               	retlw	107	;'k'
  1204  0B67  343A               	retlw	58	;':'
  1205  0B68  3420               	retlw	32	;' '
  1206  0B69  3428               	retlw	40	;'('
  1207  0B6A  3425               	retlw	37	;'%'
  1208  0B6B  3464               	retlw	100	;'d'
  1209  0B6C  3429               	retlw	41	;')'
  1210  0B6D  3420               	retlw	32	;' '
  1211  0B6E  343E               	retlw	62	;'>'
  1212  0B6F  3420               	retlw	32	;' '
  1213  0B70  3428               	retlw	40	;'('
  1214  0B71  3425               	retlw	37	;'%'
  1215  0B72  3464               	retlw	100	;'d'
  1216  0B73  3429               	retlw	41	;')'
  1217  0B74  340D               	retlw	13
  1218  0B75  340A               	retlw	10
  1219  0B76  3400               	retlw	0
  1220  0B77                     STR_131:	
  1221  0B77  3453               	retlw	83	;'S'
  1222  0B78  3474               	retlw	116	;'t'
  1223  0B79  3461               	retlw	97	;'a'
  1224  0B7A  3472               	retlw	114	;'r'
  1225  0B7B  3474               	retlw	116	;'t'
  1226  0B7C  3420               	retlw	32	;' '
  1227  0B7D  3465               	retlw	101	;'e'
  1228  0B7E  3476               	retlw	118	;'v'
  1229  0B7F  3461               	retlw	97	;'a'
  1230  0B80  346C               	retlw	108	;'l'
  1231  0B81  3475               	retlw	117	;'u'
  1232  0B82  3461               	retlw	97	;'a'
  1233  0B83  3474               	retlw	116	;'t'
  1234  0B84  3469               	retlw	105	;'i'
  1235  0B85  346F               	retlw	111	;'o'
  1236  0B86  346E               	retlw	110	;'n'
  1237  0B87  340D               	retlw	13
  1238  0B88  340A               	retlw	10
  1239  0B89  3400               	retlw	0
  1240  0B8A                     STR_106:	
  1241  0B8A  3472               	retlw	114	;'r'
  1242  0B8B  3469               	retlw	105	;'i'
  1243  0B8C  3467               	retlw	103	;'g'
  1244  0B8D  3468               	retlw	104	;'h'
  1245  0B8E  3474               	retlw	116	;'t'
  1246  0B8F  345F               	retlw	95	;'_'
  1247  0B90  346D               	retlw	109	;'m'
  1248  0B91  346F               	retlw	111	;'o'
  1249  0B92  3473               	retlw	115	;'s'
  1250  0B93  3474               	retlw	116	;'t'
  1251  0B94  3420               	retlw	32	;' '
  1252  0B95  343D               	retlw	61	;'='
  1253  0B96  3420               	retlw	32	;' '
  1254  0B97  3425               	retlw	37	;'%'
  1255  0B98  3464               	retlw	100	;'d'
  1256  0B99  340D               	retlw	13
  1257  0B9A  340A               	retlw	10
  1258  0B9B  3400               	retlw	0
  1259  0B9C                     STR_52:	
  1260  0B9C  3472               	retlw	114	;'r'
  1261  0B9D  346F               	retlw	111	;'o'
  1262  0B9E  3477               	retlw	119	;'w'
  1263  0B9F  3428               	retlw	40	;'('
  1264  0BA0  3425               	retlw	37	;'%'
  1265  0BA1  3464               	retlw	100	;'d'
  1266  0BA2  3429               	retlw	41	;')'
  1267  0BA3  3420               	retlw	32	;' '
  1268  0BA4  3469               	retlw	105	;'i'
  1269  0BA5  3473               	retlw	115	;'s'
  1270  0BA6  3420               	retlw	32	;' '
  1271  0BA7  3466               	retlw	102	;'f'
  1272  0BA8  3475               	retlw	117	;'u'
  1273  0BA9  346C               	retlw	108	;'l'
  1274  0BAA  346C               	retlw	108	;'l'
  1275  0BAB  340D               	retlw	13
  1276  0BAC  340A               	retlw	10
  1277  0BAD  3400               	retlw	0
  1278  0BAE                     STR_157:	
  1279  0BAE  3430               	retlw	48	;'0'
  1280  0BAF  3431               	retlw	49	;'1'
  1281  0BB0  3432               	retlw	50	;'2'
  1282  0BB1  3433               	retlw	51	;'3'
  1283  0BB2  3434               	retlw	52	;'4'
  1284  0BB3  3435               	retlw	53	;'5'
  1285  0BB4  3436               	retlw	54	;'6'
  1286  0BB5  3437               	retlw	55	;'7'
  1287  0BB6  3438               	retlw	56	;'8'
  1288  0BB7  3439               	retlw	57	;'9'
  1289  0BB8  3441               	retlw	65	;'A'
  1290  0BB9  3442               	retlw	66	;'B'
  1291  0BBA  3443               	retlw	67	;'C'
  1292  0BBB  3444               	retlw	68	;'D'
  1293  0BBC  3445               	retlw	69	;'E'
  1294  0BBD  3446               	retlw	70	;'F'
  1295  0BBE  3400               	retlw	0
  1296  0BBF                     STR_133:	
  1297  0BBF  3474               	retlw	116	;'t'
  1298  0BC0  3465               	retlw	101	;'e'
  1299  0BC1  346D               	retlw	109	;'m'
  1300  0BC2  3470               	retlw	112	;'p'
  1301  0BC3  345F               	retlw	95	;'_'
  1302  0BC4  3472               	retlw	114	;'r'
  1303  0BC5  3469               	retlw	105	;'i'
  1304  0BC6  3473               	retlw	115	;'s'
  1305  0BC7  346B               	retlw	107	;'k'
  1306  0BC8  3420               	retlw	32	;' '
  1307  0BC9  343D               	retlw	61	;'='
  1308  0BCA  3420               	retlw	32	;' '
  1309  0BCB  3425               	retlw	37	;'%'
  1310  0BCC  3464               	retlw	100	;'d'
  1311  0BCD  340D               	retlw	13
  1312  0BCE  340A               	retlw	10
  1313  0BCF  3400               	retlw	0
  1314  0BD0                     STR_104:	
  1315  0BD0  346C               	retlw	108	;'l'
  1316  0BD1  3465               	retlw	101	;'e'
  1317  0BD2  3466               	retlw	102	;'f'
  1318  0BD3  3474               	retlw	116	;'t'
  1319  0BD4  345F               	retlw	95	;'_'
  1320  0BD5  346D               	retlw	109	;'m'
  1321  0BD6  346F               	retlw	111	;'o'
  1322  0BD7  3473               	retlw	115	;'s'
  1323  0BD8  3474               	retlw	116	;'t'
  1324  0BD9  3420               	retlw	32	;' '
  1325  0BDA  343D               	retlw	61	;'='
  1326  0BDB  3420               	retlw	32	;' '
  1327  0BDC  3425               	retlw	37	;'%'
  1328  0BDD  3464               	retlw	100	;'d'
  1329  0BDE  340D               	retlw	13
  1330  0BDF  340A               	retlw	10
  1331  0BE0  3400               	retlw	0
  1332  0BE1                     STR_91:	
  1333  0BE1  3478               	retlw	120	;'x'
  1334  0BE2  3420               	retlw	32	;' '
  1335  0BE3  343D               	retlw	61	;'='
  1336  0BE4  3420               	retlw	32	;' '
  1337  0BE5  3425               	retlw	37	;'%'
  1338  0BE6  3464               	retlw	100	;'d'
  1339  0BE7  342C               	retlw	44	;','
  1340  0BE8  3420               	retlw	32	;' '
  1341  0BE9  3479               	retlw	121	;'y'
  1342  0BEA  3420               	retlw	32	;' '
  1343  0BEB  343D               	retlw	61	;'='
  1344  0BEC  3420               	retlw	32	;' '
  1345  0BED  3425               	retlw	37	;'%'
  1346  0BEE  3464               	retlw	100	;'d'
  1347  0BEF  340D               	retlw	13
  1348  0BF0  340A               	retlw	10
  1349  0BF1  3400               	retlw	0
  1350  0BF2                     STR_124:	
  1351  0BF2  346E               	retlw	110	;'n'
  1352  0BF3  3475               	retlw	117	;'u'
  1353  0BF4  346D               	retlw	109	;'m'
  1354  0BF5  345F               	retlw	95	;'_'
  1355  0BF6  3468               	retlw	104	;'h'
  1356  0BF7  346F               	retlw	111	;'o'
  1357  0BF8  346C               	retlw	108	;'l'
  1358  0BF9  3465               	retlw	101	;'e'
  1359  0BFA  3420               	retlw	32	;' '
  1360  0BFB  343D               	retlw	61	;'='
  1361  0BFC  3420               	retlw	32	;' '
  1362  0BFD  3425               	retlw	37	;'%'
  1363  0BFE  3464               	retlw	100	;'d'
  1364  0BFF  340D               	retlw	13
  1365  0C00  340A               	retlw	10
  1366  0C01  3400               	retlw	0
  1367  0C02                     STR_142:	
  1368  0C02  3447               	retlw	71	;'G'
  1369  0C03  3441               	retlw	65	;'A'
  1370  0C04  344D               	retlw	77	;'M'
  1371  0C05  3445               	retlw	69	;'E'
  1372  0C06  3420               	retlw	32	;' '
  1373  0C07  344F               	retlw	79	;'O'
  1374  0C08  3456               	retlw	86	;'V'
  1375  0C09  3445               	retlw	69	;'E'
  1376  0C0A  3452               	retlw	82	;'R'
  1377  0C0B  3421               	retlw	33	;'!'
  1378  0C0C  3421               	retlw	33	;'!'
  1379  0C0D  3421               	retlw	33	;'!'
  1380  0C0E  340D               	retlw	13
  1381  0C0F  340A               	retlw	10
  1382  0C10  3400               	retlw	0
  1383  0C11                     STR_154:	
  1384  0C11  3468               	retlw	104	;'h'
  1385  0C12  3469               	retlw	105	;'i'
  1386  0C13  3474               	retlw	116	;'t'
  1387  0C14  345F               	retlw	95	;'_'
  1388  0C15  3472               	retlw	114	;'r'
  1389  0C16  3465               	retlw	101	;'e'
  1390  0C17  3473               	retlw	115	;'s'
  1391  0C18  3420               	retlw	32	;' '
  1392  0C19  343D               	retlw	61	;'='
  1393  0C1A  3420               	retlw	32	;' '
  1394  0C1B  3425               	retlw	37	;'%'
  1395  0C1C  3464               	retlw	100	;'d'
  1396  0C1D  340D               	retlw	13
  1397  0C1E  340A               	retlw	10
  1398  0C1F  3400               	retlw	0
  1399  0C20                     STR_130:	
  1400  0C20  3456               	retlw	86	;'V'
  1401  0C21  3461               	retlw	97	;'a'
  1402  0C22  346C               	retlw	108	;'l'
  1403  0C23  3469               	retlw	105	;'i'
  1404  0C24  3464               	retlw	100	;'d'
  1405  0C25  3420               	retlw	32	;' '
  1406  0C26  3469               	retlw	105	;'i'
  1407  0C27  346E               	retlw	110	;'n'
  1408  0C28  3473               	retlw	115	;'s'
  1409  0C29  3474               	retlw	116	;'t'
  1410  0C2A  3461               	retlw	97	;'a'
  1411  0C2B  346E               	retlw	110	;'n'
  1412  0C2C  3463               	retlw	99	;'c'
  1413  0C2D  3465               	retlw	101	;'e'
  1414  0C2E  3400               	retlw	0
  1415  0C2F                     STR_128:	
  1416  0C2F  3441               	retlw	65	;'A'
  1417  0C30  3466               	retlw	102	;'f'
  1418  0C31  3474               	retlw	116	;'t'
  1419  0C32  3465               	retlw	101	;'e'
  1420  0C33  3472               	retlw	114	;'r'
  1421  0C34  3420               	retlw	32	;' '
  1422  0C35  3466               	retlw	102	;'f'
  1423  0C36  3461               	retlw	97	;'a'
  1424  0C37  346C               	retlw	108	;'l'
  1425  0C38  346C               	retlw	108	;'l'
  1426  0C39  3420               	retlw	32	;' '
  1427  0C3A  346F               	retlw	111	;'o'
  1428  0C3B  3466               	retlw	102	;'f'
  1429  0C3C  3466               	retlw	102	;'f'
  1430  0C3D  3400               	retlw	0
  1431  0C3E                     STR_71:	
  1432  0C3E  346E               	retlw	110	;'n'
  1433  0C3F  346F               	retlw	111	;'o'
  1434  0C40  3474               	retlw	116	;'t'
  1435  0C41  3420               	retlw	32	;' '
  1436  0C42  3476               	retlw	118	;'v'
  1437  0C43  3461               	retlw	97	;'a'
  1438  0C44  346C               	retlw	108	;'l'
  1439  0C45  3469               	retlw	105	;'i'
  1440  0C46  3464               	retlw	100	;'d'
  1441  0C47  3431               	retlw	49	;'1'
  1442  0C48  340D               	retlw	13
  1443  0C49  340A               	retlw	10
  1444  0C4A  3400               	retlw	0
  1445  0C4B                     STR_75:	
  1446  0C4B  346E               	retlw	110	;'n'
  1447  0C4C  346F               	retlw	111	;'o'
  1448  0C4D  3474               	retlw	116	;'t'
  1449  0C4E  3420               	retlw	32	;' '
  1450  0C4F  3476               	retlw	118	;'v'
  1451  0C50  3461               	retlw	97	;'a'
  1452  0C51  346C               	retlw	108	;'l'
  1453  0C52  3469               	retlw	105	;'i'
  1454  0C53  3464               	retlw	100	;'d'
  1455  0C54  3432               	retlw	50	;'2'
  1456  0C55  340D               	retlw	13
  1457  0C56  340A               	retlw	10
  1458  0C57  3400               	retlw	0
  1459  0C58                     STR_79:	
  1460  0C58  346E               	retlw	110	;'n'
  1461  0C59  346F               	retlw	111	;'o'
  1462  0C5A  3474               	retlw	116	;'t'
  1463  0C5B  3420               	retlw	32	;' '
  1464  0C5C  3476               	retlw	118	;'v'
  1465  0C5D  3461               	retlw	97	;'a'
  1466  0C5E  346C               	retlw	108	;'l'
  1467  0C5F  3469               	retlw	105	;'i'
  1468  0C60  3464               	retlw	100	;'d'
  1469  0C61  3433               	retlw	51	;'3'
  1470  0C62  340D               	retlw	13
  1471  0C63  340A               	retlw	10
  1472  0C64  3400               	retlw	0
  1473  0C65                     STR_120:	
  1474  0C65  3473               	retlw	115	;'s'
  1475  0C66  3474               	retlw	116	;'t'
  1476  0C67  3461               	retlw	97	;'a'
  1477  0C68  3472               	retlw	114	;'r'
  1478  0C69  3474               	retlw	116	;'t'
  1479  0C6A  3420               	retlw	32	;' '
  1480  0C6B  343D               	retlw	61	;'='
  1481  0C6C  3420               	retlw	32	;' '
  1482  0C6D  3425               	retlw	37	;'%'
  1483  0C6E  3464               	retlw	100	;'d'
  1484  0C6F  340D               	retlw	13
  1485  0C70  340A               	retlw	10
  1486  0C71  3400               	retlw	0
  1487  0C72                     STR_89:	
  1488  0C72  3466               	retlw	102	;'f'
  1489  0C73  3461               	retlw	97	;'a'
  1490  0C74  346C               	retlw	108	;'l'
  1491  0C75  346C               	retlw	108	;'l'
  1492  0C76  345F               	retlw	95	;'_'
  1493  0C77  346F               	retlw	111	;'o'
  1494  0C78  3466               	retlw	102	;'f'
  1495  0C79  3466               	retlw	102	;'f'
  1496  0C7A  3431               	retlw	49	;'1'
  1497  0C7B  340D               	retlw	13
  1498  0C7C  340A               	retlw	10
  1499  0C7D  3400               	retlw	0
  1500  0C7E                     STR_93:	
  1501  0C7E  3466               	retlw	102	;'f'
  1502  0C7F  3461               	retlw	97	;'a'
  1503  0C80  346C               	retlw	108	;'l'
  1504  0C81  346C               	retlw	108	;'l'
  1505  0C82  345F               	retlw	95	;'_'
  1506  0C83  346F               	retlw	111	;'o'
  1507  0C84  3466               	retlw	102	;'f'
  1508  0C85  3466               	retlw	102	;'f'
  1509  0C86  3432               	retlw	50	;'2'
  1510  0C87  340D               	retlw	13
  1511  0C88  340A               	retlw	10
  1512  0C89  3400               	retlw	0
  1513  0C8A                     STR_146:	
  1514  0C8A  3473               	retlw	115	;'s'
  1515  0C8B  3469               	retlw	105	;'i'
  1516  0C8C  347A               	retlw	122	;'z'
  1517  0C8D  3465               	retlw	101	;'e'
  1518  0C8E  3420               	retlw	32	;' '
  1519  0C8F  343D               	retlw	61	;'='
  1520  0C90  3420               	retlw	32	;' '
  1521  0C91  3425               	retlw	37	;'%'
  1522  0C92  3464               	retlw	100	;'d'
  1523  0C93  340D               	retlw	13
  1524  0C94  340A               	retlw	10
  1525  0C95  3400               	retlw	0
  1526  0C96                     STR_122:	
  1527  0C96  3473               	retlw	115	;'s'
  1528  0C97  3474               	retlw	116	;'t'
  1529  0C98  346F               	retlw	111	;'o'
  1530  0C99  3470               	retlw	112	;'p'
  1531  0C9A  3420               	retlw	32	;' '
  1532  0C9B  343D               	retlw	61	;'='
  1533  0C9C  3420               	retlw	32	;' '
  1534  0C9D  3425               	retlw	37	;'%'
  1535  0C9E  3464               	retlw	100	;'d'
  1536  0C9F  340D               	retlw	13
  1537  0CA0  340A               	retlw	10
  1538  0CA1  3400               	retlw	0
  1539  0CA2                     STR_54:	
  1540  0CA2  3452               	retlw	82	;'R'
  1541  0CA3  346F               	retlw	111	;'o'
  1542  0CA4  3477               	retlw	119	;'w'
  1543  0CA5  3420               	retlw	32	;' '
  1544  0CA6  3469               	retlw	105	;'i'
  1545  0CA7  3473               	retlw	115	;'s'
  1546  0CA8  3420               	retlw	32	;' '
  1547  0CA9  3466               	retlw	102	;'f'
  1548  0CAA  3475               	retlw	117	;'u'
  1549  0CAB  346C               	retlw	108	;'l'
  1550  0CAC  346C               	retlw	108	;'l'
  1551  0CAD  3400               	retlw	0
  1552  0CAE                     STR_156:	
  1553  0CAE  344D               	retlw	77	;'M'
  1554  0CAF  3461               	retlw	97	;'a'
  1555  0CB0  3469               	retlw	105	;'i'
  1556  0CB1  346E               	retlw	110	;'n'
  1557  0CB2  3420               	retlw	32	;' '
  1558  0CB3  3473               	retlw	115	;'s'
  1559  0CB4  3463               	retlw	99	;'c'
  1560  0CB5  3472               	retlw	114	;'r'
  1561  0CB6  3465               	retlw	101	;'e'
  1562  0CB7  3465               	retlw	101	;'e'
  1563  0CB8  346E               	retlw	110	;'n'
  1564  0CB9  3400               	retlw	0
  1565  0CBA                     STR_50:	
  1566  0CBA  3472               	retlw	114	;'r'
  1567  0CBB  346F               	retlw	111	;'o'
  1568  0CBC  3477               	retlw	119	;'w'
  1569  0CBD  3420               	retlw	32	;' '
  1570  0CBE  343D               	retlw	61	;'='
  1571  0CBF  3420               	retlw	32	;' '
  1572  0CC0  3425               	retlw	37	;'%'
  1573  0CC1  3458               	retlw	88	;'X'
  1574  0CC2  340D               	retlw	13
  1575  0CC3  340A               	retlw	10
  1576  0CC4  3400               	retlw	0
  1577  0CC5                     STR_114:	
  1578  0CC5  3472               	retlw	114	;'r'
  1579  0CC6  346F               	retlw	111	;'o'
  1580  0CC7  3477               	retlw	119	;'w'
  1581  0CC8  3420               	retlw	32	;' '
  1582  0CC9  343D               	retlw	61	;'='
  1583  0CCA  3420               	retlw	32	;' '
  1584  0CCB  3425               	retlw	37	;'%'
  1585  0CCC  3464               	retlw	100	;'d'
  1586  0CCD  340D               	retlw	13
  1587  0CCE  340A               	retlw	10
  1588  0CCF  3400               	retlw	0
  1589  0CD0                     STR_67:	
  1590  0CD0  346E               	retlw	110	;'n'
  1591  0CD1  346F               	retlw	111	;'o'
  1592  0CD2  3474               	retlw	116	;'t'
  1593  0CD3  3420               	retlw	32	;' '
  1594  0CD4  3468               	retlw	104	;'h'
  1595  0CD5  3469               	retlw	105	;'i'
  1596  0CD6  3474               	retlw	116	;'t'
  1597  0CD7  340D               	retlw	13
  1598  0CD8  340A               	retlw	10
  1599  0CD9  3400               	retlw	0
  1600  0CDA                     STR_83:	
  1601  0CDA  3476               	retlw	118	;'v'
  1602  0CDB  3461               	retlw	97	;'a'
  1603  0CDC  346C               	retlw	108	;'l'
  1604  0CDD  3469               	retlw	105	;'i'
  1605  0CDE  3464               	retlw	100	;'d'
  1606  0CDF  340D               	retlw	13
  1607  0CE0  340A               	retlw	10
  1608  0CE1  3400               	retlw	0
  1609  0CE2                     STR_139:	
  1610  0CE2  3443               	retlw	67	;'C'
  1611  0CE3  3468               	retlw	104	;'h'
  1612  0CE4  346F               	retlw	111	;'o'
  1613  0CE5  3473               	retlw	115	;'s'
  1614  0CE6  3465               	retlw	101	;'e'
  1615  0CE7  346E               	retlw	110	;'n'
  1616  0CE8  3400               	retlw	0
  1617  0CE9                     STR_2:	
  1618  0CE9  343A               	retlw	58	;':'
  1619  0CEA  340D               	retlw	13
  1620  0CEB  340A               	retlw	10
  1621  0CEC  3400               	retlw	0
  1622  0CED                     STR_6:	
  1623  0CED  342A               	retlw	42	;'*'
  1624  0CEE  3400               	retlw	0
  1625  0CEF                     STR_8:	
  1626  0CEF  345F               	retlw	95	;'_'
  1627  0CF0  3400               	retlw	0
  1628  0C0E                     
  1629                           ; #config settings
  1630  0000                     
  1631                           	psect	cinit
  1632  07CD                     start_initialization:	
  1633  07CD                     __initialization:	
  1634                           
  1635                           ; Clear objects allocated to BANK0
  1636  07CD  01EC               	clrf	__pbssBANK0& (0+127)
  1637  07CE  01ED               	clrf	(__pbssBANK0+1)& (0+127)
  1638  07CF  01EE               	clrf	(__pbssBANK0+2)& (0+127)
  1639  07D0  01EF               	clrf	(__pbssBANK0+3)& (0+127)
  1640                           
  1641                           ; Clear objects allocated to BANK1
  1642  07D1  1383               	bcf	3,7	;select IRP bank0
  1643  07D2  30CE               	movlw	low __pbssBANK1
  1644  07D3  0084               	movwf	4
  1645  07D4  30E8               	movlw	low (__pbssBANK1+26)
  1646  07D5  160A  158A  2187  120A  118A  	fcall	clear_ram0
  1647                           
  1648                           ; Clear objects allocated to BANK3
  1649  07DA  1783               	bsf	3,7	;select IRP bank2
  1650  07DB  3090               	movlw	low __pbssBANK3
  1651  07DC  0084               	movwf	4
  1652  07DD  30E0               	movlw	low (__pbssBANK3+80)
  1653  07DE  160A  158A  2187  120A  118A  	fcall	clear_ram0
  1654                           
  1655                           ; Initialize objects allocated to BANK2
  1656  07E3  3022               	movlw	low (__pdataBANK2+18)
  1657  07E4  00FD               	movwf	btemp+-1
  1658  07E5  3019               	movlw	high __pidataBANK2
  1659  07E6  00FE               	movwf	btemp
  1660  07E7  30DB               	movlw	low __pidataBANK2
  1661  07E8  00FF               	movwf	btemp+1
  1662  07E9  3010               	movlw	low __pdataBANK2
  1663  07EA  0084               	movwf	4
  1664  07EB  160A  158A  21BC  120A  118A  	fcall	init_ram0
  1665                           
  1666                           ; Initialize objects allocated to BANK1
  1667  07F0  1383               	bcf	3,7	;select IRP bank0
  1668  07F1  30ED               	movlw	low (__pdataBANK1+5)
  1669  07F2  00FD               	movwf	btemp+-1
  1670  07F3  3019               	movlw	high __pidataBANK1
  1671  07F4  00FE               	movwf	btemp
  1672  07F5  306A               	movlw	low __pidataBANK1
  1673  07F6  00FF               	movwf	btemp+1
  1674  07F7  30E8               	movlw	low __pdataBANK1
  1675  07F8  0084               	movwf	4
  1676  07F9  160A  158A  21BC   	fcall	init_ram0
  1677  07FC                     end_of_initialization:	
  1678                           ;End of C runtime variable initialization code
  1679                           
  1680  07FC                     __end_of__initialization:	
  1681  07FC  0183               	clrf	3
  1682  07FD  120A  158A  2D10   	ljmp	_main	;jump to C main() function
  1683                           
  1684                           	psect	bssBANK0
  1685  006C                     __pbssBANK0:	
  1686  006C                     _g_cur_matrix4x4:	
  1687  006C                     	ds	2
  1688  006E                     _g_char_info_index:	
  1689  006E                     	ds	1
  1690  006F                     _g_char_info_sub_index:	
  1691  006F                     	ds	1
  1692                           
  1693                           	psect	bssBANK1
  1694  00CE                     __pbssBANK1:	
  1695  00CE                     USARTWriteInt@F1605:	
  1696  00CE                     	ds	5
  1697  00D3                     _Seed:	
  1698  00D3                     	ds	2
  1699  00D5                     _temp_cur_matrix4x4:	
  1700  00D5                     	ds	2
  1701  00D7                     _cur_y:	
  1702  00D7                     	ds	1
  1703  00D8                     _g_matrix16x8:	
  1704  00D8                     	ds	16
  1705                           
  1706                           	psect	dataBANK1
  1707  00E8                     __pdataBANK1:	
  1708  00E8                     _randx:	
  1709  00E8                     	ds	4
  1710  00EC                     _cur_x:	
  1711  00EC                     	ds	1
  1712                           
  1713                           	psect	bssBANK3
  1714  0190                     __pbssBANK3:	
  1715  0190                     _g_debug:	
  1716  0190                     	ds	64
  1717  01D0                     _temp_matrix16x8:	
  1718  01D0                     	ds	16
  1719                           
  1720                           	psect	dataBANK2
  1721  0110                     __pdataBANK2:	
  1722  0110                     _g_char_info:	
  1723  0110                     	ds	18
  1724                           
  1725                           	psect	clrtext
  1726  1987                     clear_ram0:	
  1727                           ;	Called with FSR containing the base address, and
  1728                           ;	W with the last address+1
  1729                           
  1730  1987  0064               	clrwdt	;clear the watchdog before getting into this loop
  1731  1988                     clrloop0:	
  1732  1988  0180               	clrf	0	;clear RAM location pointed to by FSR
  1733  1989  0A84               	incf	4,f	;increment pointer
  1734  198A  0604               	xorwf	4,w	;XOR with final address
  1735  198B  1903               	btfsc	3,2	;have we reached the end yet?
  1736  198C  3400               	retlw	0	;all done for this memory range, return
  1737  198D  0604               	xorwf	4,w	;XOR again to restore value
  1738  198E  2988               	goto	clrloop0	;do the next byte
  1739                           
  1740                           	psect	inittext
  1741  19B8                     init_fetch0:	
  1742                           ;	Called with low address in FSR and high address in W
  1743                           
  1744  19B8  087E               	movf	126,w
  1745  19B9  008A               	movwf	10
  1746  19BA  087F               	movf	127,w
  1747  19BB  0082               	movwf	2
  1748  19BC                     init_ram0:	
  1749                           ;Called with:
  1750                           ;	high address of idata address in btemp 
  1751                           ;	low address of idata address in btemp+1 
  1752                           ;	low address of data in FSR
  1753                           ;	high address + 1 of data in btemp-1
  1754                           
  1755  19BC  21B8  160A  158A   	fcall	init_fetch0
  1756  19BF  0080               	movwf	0
  1757  19C0  0A84               	incf	4,f
  1758  19C1  0804               	movf	4,w
  1759  19C2  067D               	xorwf	125,w
  1760  19C3  1903               	btfsc	3,2
  1761  19C4  3400               	retlw	0
  1762  19C5  0AFF               	incf	127,f
  1763  19C6  1903               	btfsc	3,2
  1764  19C7  0AFE               	incf	126,f
  1765  19C8  29BC               	goto	init_ram0
  1766                           
  1767                           	psect	cstackBANK1
  1768  00A0                     __pcstackBANK1:	
  1769  00A0                     ??_lg_find_best_solution:	
  1770                           
  1771                           ; 1 bytes @ 0x0
  1772  00A0                     	ds	18
  1773  00B2                     lg_find_best_solution@n:	
  1774                           
  1775                           ; 2 bytes @ 0x12
  1776  00B2                     	ds	2
  1777  00B4                     lg_find_best_solution@n_714:	
  1778                           
  1779                           ; 2 bytes @ 0x14
  1780  00B4                     	ds	2
  1781  00B6                     lg_find_best_solution@n_717:	
  1782                           
  1783                           ; 2 bytes @ 0x16
  1784  00B6                     	ds	2
  1785  00B8                     lg_find_best_solution@n_720:	
  1786                           
  1787                           ; 2 bytes @ 0x18
  1788  00B8                     	ds	2
  1789  00BA                     lg_find_best_solution@n_723:	
  1790                           
  1791                           ; 2 bytes @ 0x1A
  1792  00BA                     	ds	2
  1793  00BC                     lg_find_best_solution@n_728:	
  1794                           
  1795                           ; 2 bytes @ 0x1C
  1796  00BC                     	ds	2
  1797  00BE                     lg_find_best_solution@n_731:	
  1798                           
  1799                           ; 2 bytes @ 0x1E
  1800  00BE                     	ds	2
  1801  00C0                     lg_find_best_solution@left_most_index:	
  1802                           
  1803                           ; 1 bytes @ 0x20
  1804  00C0                     	ds	1
  1805  00C1                     lg_find_best_solution@right_most_index:	
  1806                           
  1807                           ; 1 bytes @ 0x21
  1808  00C1                     	ds	1
  1809  00C2                     lg_find_best_solution@res:	
  1810                           
  1811                           ; 1 bytes @ 0x22
  1812  00C2                     	ds	1
  1813  00C3                     lg_find_best_solution@temp_high:	
  1814                           
  1815                           ; 2 bytes @ 0x23
  1816  00C3                     	ds	2
  1817  00C5                     lg_find_best_solution@temp_pre_x:	
  1818                           
  1819                           ; 1 bytes @ 0x25
  1820  00C5                     	ds	1
  1821  00C6                     lg_find_best_solution@tem_pre_sub_index:	
  1822                           
  1823                           ; 1 bytes @ 0x26
  1824  00C6                     	ds	1
  1825  00C7                     lg_find_best_solution@tem_sub_index:	
  1826                           
  1827                           ; 1 bytes @ 0x27
  1828  00C7                     	ds	1
  1829  00C8                     lg_find_best_solution@temp_y:	
  1830                           
  1831                           ; 1 bytes @ 0x28
  1832  00C8                     	ds	1
  1833  00C9                     lg_find_best_solution@temp_pre_risk:	
  1834                           
  1835                           ; 2 bytes @ 0x29
  1836  00C9                     	ds	2
  1837  00CB                     lg_find_best_solution@temp_risk:	
  1838                           
  1839                           ; 2 bytes @ 0x2B
  1840  00CB                     	ds	2
  1841  00CD                     lg_find_best_solution@temp_x:	
  1842                           
  1843                           ; 1 bytes @ 0x2D
  1844  00CD                     	ds	1
  1845                           
  1846                           	psect	cstackCOMMON
  1847  0070                     __pcstackCOMMON:	
  1848  0070                     ?_memset:	
  1849  0070                     ?_USARTInit:	
  1850                           ; 1 bytes @ 0x0
  1851                           
  1852  0070                     ?_eeprom_write:	
  1853                           ; 1 bytes @ 0x0
  1854                           
  1855  0070                     ?_eeprom_read:	
  1856                           ; 1 bytes @ 0x0
  1857                           
  1858  0070                     ??_eeprom_read:	
  1859                           ; 1 bytes @ 0x0
  1860                           
  1861  0070                     ?_memcpy:	
  1862                           ; 1 bytes @ 0x0
  1863                           
  1864  0070                     ?_srand:	
  1865                           ; 1 bytes @ 0x0
  1866                           
  1867  0070                     ?_set_matrix7219_bit:	
  1868                           ; 1 bytes @ 0x0
  1869                           
  1870  0070                     ?_setbit:	
  1871                           ; 1 bytes @ 0x0
  1872                           
  1873  0070                     ?_getbit:	
  1874                           ; 1 bytes @ 0x0
  1875                           
  1876  0070                     ?_reverse:	
  1877                           ; 1 bytes @ 0x0
  1878                           
  1879  0070                     ??_reverse:	
  1880                           ; 1 bytes @ 0x0
  1881                           
  1882  0070                     ?_SPI1_write:	
  1883                           ; 1 bytes @ 0x0
  1884                           
  1885  0070                     ??_SPI1_write:	
  1886                           ; 1 bytes @ 0x0
  1887                           
  1888  0070                     ?_max7219_init1:	
  1889                           ; 1 bytes @ 0x0
  1890                           
  1891  0070                     ?_dbg_init:	
  1892                           ; 1 bytes @ 0x0
  1893                           
  1894  0070                     ?_hal_print_MATRIX_MATRIX7219:	
  1895                           ; 1 bytes @ 0x0
  1896                           
  1897  0070                     ?_hal_print_MATRIX16x8:	
  1898                           ; 1 bytes @ 0x0
  1899                           
  1900  0070                     ?_hal_print_Screen:	
  1901                           ; 1 bytes @ 0x0
  1902                           
  1903  0070                     ?_lg_clear_matrix:	
  1904                           ; 1 bytes @ 0x0
  1905                           
  1906  0070                     ?_lg_delete_matrix_row:	
  1907                           ; 1 bytes @ 0x0
  1908                           
  1909  0070                     ?_lg_delete_matrix:	
  1910                           ; 1 bytes @ 0x0
  1911                           
  1912  0070                     ?_lg_get_num_removed_rows:	
  1913                           ; 1 bytes @ 0x0
  1914                           
  1915  0070                     ?_lg_is_row_empty:	
  1916                           ; 1 bytes @ 0x0
  1917                           
  1918  0070                     ?_lg_char_info_index_rand:	
  1919                           ; 1 bytes @ 0x0
  1920                           
  1921  0070                     ?_lg_get_height:	
  1922                           ; 1 bytes @ 0x0
  1923                           
  1924  0070                     ?_lg_get_holes_after_merge:	
  1925                           ; 1 bytes @ 0x0
  1926                           
  1927  0070                     ?_lg_find_best_solution:	
  1928                           ; 1 bytes @ 0x0
  1929                           
  1930  0070                     ?_main_init:	
  1931                           ; 1 bytes @ 0x0
  1932                           
  1933  0070                     ?_USARTWriteChar:	
  1934                           ; 1 bytes @ 0x0
  1935                           
  1936  0070                     ??_USARTWriteChar:	
  1937                           ; 1 bytes @ 0x0
  1938                           
  1939  0070                     ?_main:	
  1940                           ; 1 bytes @ 0x0
  1941                           
  1942  0070                     ?___awdiv:	
  1943                           ; 2 bytes @ 0x0
  1944                           
  1945  0070                     ?___lwdiv:	
  1946                           ; 2 bytes @ 0x0
  1947                           
  1948  0070                     ?___lmul:	
  1949                           ; 2 bytes @ 0x0
  1950                           
  1951  0070                     set_matrix7219_bit@row:	
  1952                           ; 4 bytes @ 0x0
  1953                           
  1954  0070                     lg_delete_matrix_row@row:	
  1955                           ; 1 bytes @ 0x0
  1956                           
  1957  0070                     lg_is_row_empty@row:	
  1958                           ; 1 bytes @ 0x0
  1959                           
  1960  0070                     USARTWriteChar@ch:	
  1961                           ; 1 bytes @ 0x0
  1962                           
  1963  0070                     eeprom_write@value:	
  1964                           ; 1 bytes @ 0x0
  1965                           
  1966  0070                     memcpy@s1:	
  1967                           ; 1 bytes @ 0x0
  1968                           
  1969  0070                     setbit@byte:	
  1970                           ; 1 bytes @ 0x0
  1971                           
  1972  0070                     getbit@byte:	
  1973                           ; 2 bytes @ 0x0
  1974                           
  1975  0070                     USARTInit@baud_rate:	
  1976                           ; 2 bytes @ 0x0
  1977                           
  1978  0070                     ___awdiv@divisor:	
  1979                           ; 2 bytes @ 0x0
  1980                           
  1981  0070                     ___lwdiv@divisor:	
  1982                           ; 2 bytes @ 0x0
  1983                           
  1984  0070                     memset@c:	
  1985                           ; 2 bytes @ 0x0
  1986                           
  1987  0070                     srand@x:	
  1988                           ; 2 bytes @ 0x0
  1989                           
  1990  0070                     ___lmul@multiplier:	
  1991                           ; 2 bytes @ 0x0
  1992                           
  1993                           
  1994                           ; 4 bytes @ 0x0
  1995  0070                     	ds	1
  1996  0071                     ?_USARTWriteString:	
  1997  0071                     ??_eeprom_write:	
  1998                           ; 1 bytes @ 0x1
  1999                           
  2000  0071                     ??_lg_delete_matrix_row:	
  2001                           ; 1 bytes @ 0x1
  2002                           
  2003  0071                     ??_lg_is_row_empty:	
  2004                           ; 1 bytes @ 0x1
  2005                           
  2006  0071                     set_matrix7219_bit@col:	
  2007                           ; 1 bytes @ 0x1
  2008                           
  2009  0071                     reverse@byte:	
  2010                           ; 1 bytes @ 0x1
  2011                           
  2012  0071                     SPI1_write@data:	
  2013                           ; 1 bytes @ 0x1
  2014                           
  2015  0071                     lg_is_row_empty@matrix:	
  2016                           ; 1 bytes @ 0x1
  2017                           
  2018  0071                     eeprom_read@addr:	
  2019                           ; 1 bytes @ 0x1
  2020                           
  2021  0071                     USARTWriteString@str:	
  2022                           ; 1 bytes @ 0x1
  2023                           
  2024  0071                     memcpy@n:	
  2025                           ; 2 bytes @ 0x1
  2026                           
  2027                           
  2028                           ; 2 bytes @ 0x1
  2029  0071                     	ds	1
  2030  0072                     ??_USARTInit:	
  2031  0072                     ??_srand:	
  2032                           ; 1 bytes @ 0x2
  2033                           
  2034  0072                     ??_dbg_init:	
  2035                           ; 1 bytes @ 0x2
  2036                           
  2037  0072                     set_matrix7219_bit@value:	
  2038                           ; 1 bytes @ 0x2
  2039                           
  2040  0072                     setbit@at:	
  2041                           ; 1 bytes @ 0x2
  2042                           
  2043  0072                     getbit@at:	
  2044                           ; 1 bytes @ 0x2
  2045                           
  2046  0072                     reverse@res:	
  2047                           ; 1 bytes @ 0x2
  2048                           
  2049  0072                     SPI1_write@mask:	
  2050                           ; 1 bytes @ 0x2
  2051                           
  2052  0072                     eeprom_write@addr:	
  2053                           ; 1 bytes @ 0x2
  2054                           
  2055  0072                     ___awdiv@dividend:	
  2056                           ; 1 bytes @ 0x2
  2057                           
  2058  0072                     ___lwdiv@dividend:	
  2059                           ; 2 bytes @ 0x2
  2060                           
  2061  0072                     memset@n:	
  2062                           ; 2 bytes @ 0x2
  2063                           
  2064                           
  2065                           ; 2 bytes @ 0x2
  2066  0072                     	ds	1
  2067  0073                     ??_USARTWriteString:	
  2068  0073                     ??_memcpy:	
  2069                           ; 1 bytes @ 0x3
  2070                           
  2071  0073                     ??_set_matrix7219_bit:	
  2072                           ; 1 bytes @ 0x3
  2073                           
  2074  0073                     ??_getbit:	
  2075                           ; 1 bytes @ 0x3
  2076                           
  2077  0073                     setbit@value:	
  2078                           ; 1 bytes @ 0x3
  2079                           
  2080  0073                     reverse@temp:	
  2081                           ; 1 bytes @ 0x3
  2082                           
  2083  0073                     SPI1_write@i:	
  2084                           ; 1 bytes @ 0x3
  2085                           
  2086                           
  2087                           ; 1 bytes @ 0x3
  2088  0073                     	ds	1
  2089  0074                     ??_memset:	
  2090  0074                     ??_setbit:	
  2091                           ; 1 bytes @ 0x4
  2092                           
  2093  0074                     ?_Write_Matrix:	
  2094                           ; 1 bytes @ 0x4
  2095                           
  2096  0074                     ??___awdiv:	
  2097                           ; 1 bytes @ 0x4
  2098                           
  2099  0074                     ??___lwdiv:	
  2100                           ; 1 bytes @ 0x4
  2101                           
  2102  0074                     Write_Matrix@option:	
  2103                           ; 1 bytes @ 0x4
  2104                           
  2105  0074                     lg_delete_matrix_row@matrix:	
  2106                           ; 1 bytes @ 0x4
  2107                           
  2108  0074                     memcpy@d1:	
  2109                           ; 1 bytes @ 0x4
  2110                           
  2111  0074                     setbit@temp:	
  2112                           ; 1 bytes @ 0x4
  2113                           
  2114  0074                     ___lmul@multiplicand:	
  2115                           ; 2 bytes @ 0x4
  2116                           
  2117                           
  2118                           ; 4 bytes @ 0x4
  2119  0074                     	ds	1
  2120  0075                     Write_Matrix@column:	
  2121  0075                     lg_delete_matrix_row@i:	
  2122                           ; 1 bytes @ 0x5
  2123                           
  2124  0075                     ___awdiv@counter:	
  2125                           ; 1 bytes @ 0x5
  2126                           
  2127  0075                     memcpy@d:	
  2128                           ; 1 bytes @ 0x5
  2129                           
  2130  0075                     memset@p:	
  2131                           ; 1 bytes @ 0x5
  2132                           
  2133  0075                     getbit@temp:	
  2134                           ; 1 bytes @ 0x5
  2135                           
  2136  0075                     ___lwdiv@quotient:	
  2137                           ; 2 bytes @ 0x5
  2138                           
  2139                           
  2140                           ; 2 bytes @ 0x5
  2141  0075                     	ds	1
  2142  0076                     ?_set_matrix_bit:	
  2143  0076                     ??_Write_Matrix:	
  2144                           ; 1 bytes @ 0x6
  2145                           
  2146  0076                     ___awdiv@sign:	
  2147                           ; 1 bytes @ 0x6
  2148                           
  2149  0076                     memcpy@s:	
  2150                           ; 1 bytes @ 0x6
  2151                           
  2152  0076                     memset@p1:	
  2153                           ; 1 bytes @ 0x6
  2154                           
  2155  0076                     set_matrix_bit@byte:	
  2156                           ; 1 bytes @ 0x6
  2157                           
  2158                           
  2159                           ; 2 bytes @ 0x6
  2160  0076                     	ds	1
  2161  0077                     ?_get_matrix_bit:	
  2162  0077                     set_matrix7219_bit@matrix:	
  2163                           ; 1 bytes @ 0x7
  2164                           
  2165  0077                     ___lwdiv@counter:	
  2166                           ; 1 bytes @ 0x7
  2167                           
  2168  0077                     get_matrix_bit@byte:	
  2169                           ; 1 bytes @ 0x7
  2170                           
  2171  0077                     ___awdiv@quotient:	
  2172                           ; 2 bytes @ 0x7
  2173                           
  2174                           
  2175                           ; 2 bytes @ 0x7
  2176  0077                     	ds	1
  2177  0078                     ??___lmul:	
  2178  0078                     ?___lwmod:	
  2179                           ; 1 bytes @ 0x8
  2180                           
  2181  0078                     set_matrix7219_bit@mask:	
  2182                           ; 2 bytes @ 0x8
  2183                           
  2184  0078                     set_matrix_bit@row:	
  2185                           ; 1 bytes @ 0x8
  2186                           
  2187  0078                     ___lwmod@divisor:	
  2188                           ; 1 bytes @ 0x8
  2189                           
  2190                           
  2191                           ; 2 bytes @ 0x8
  2192  0078                     	ds	1
  2193  0079                     ?_get_matrix7219:	
  2194  0079                     get_matrix7219@matrix_row:	
  2195                           ; 1 bytes @ 0x9
  2196                           
  2197  0079                     set_matrix_bit@col:	
  2198                           ; 1 bytes @ 0x9
  2199                           
  2200  0079                     get_matrix_bit@row:	
  2201                           ; 1 bytes @ 0x9
  2202                           
  2203  0079                     Write_Matrix@at:	
  2204                           ; 1 bytes @ 0x9
  2205                           
  2206  0079                     ___lmul@product:	
  2207                           ; 1 bytes @ 0x9
  2208                           
  2209                           
  2210                           ; 4 bytes @ 0x9
  2211  0079                     	ds	1
  2212  007A                     get_matrix7219@matrix_col:	
  2213  007A                     set_matrix_bit@value:	
  2214                           ; 1 bytes @ 0xA
  2215                           
  2216  007A                     get_matrix_bit@col:	
  2217                           ; 1 bytes @ 0xA
  2218                           
  2219  007A                     Write_Matrix@value:	
  2220                           ; 1 bytes @ 0xA
  2221                           
  2222  007A                     ___lwmod@dividend:	
  2223                           ; 1 bytes @ 0xA
  2224                           
  2225                           
  2226                           ; 2 bytes @ 0xA
  2227  007A                     	ds	1
  2228  007B                     ??_set_matrix_bit:	
  2229  007B                     ??_get_matrix_bit:	
  2230                           ; 1 bytes @ 0xB
  2231                           
  2232  007B                     get_matrix7219@matrix_matrix:	
  2233                           ; 1 bytes @ 0xB
  2234                           
  2235  007B                     Write_Matrix@matrix:	
  2236                           ; 1 bytes @ 0xB
  2237                           
  2238                           
  2239                           ; 1 bytes @ 0xB
  2240  007B                     	ds	1
  2241  007C                     ??___lwmod:	
  2242  007C                     set_matrix_matrix7219_bit@matrix:	
  2243                           ; 1 bytes @ 0xC
  2244                           
  2245  007C                     Write_Matrix@col:	
  2246                           ; 1 bytes @ 0xC
  2247                           
  2248                           
  2249                           ; 1 bytes @ 0xC
  2250  007C                     	ds	1
  2251  007D                     ??___awmod:	
  2252  007D                     set_matrix_matrix7219_bit@matrix_matrix:	
  2253                           ; 1 bytes @ 0xD
  2254                           
  2255  007D                     Write_Matrix@row:	
  2256                           ; 1 bytes @ 0xD
  2257                           
  2258  007D                     ___lwmod@counter:	
  2259                           ; 1 bytes @ 0xD
  2260                           
  2261                           
  2262                           ; 1 bytes @ 0xD
  2263  007D                     	ds	1
  2264  007E                     ??_dbg_print_Screen:	
  2265  007E                     ??_hal_print_Screen:	
  2266                           ; 1 bytes @ 0xE
  2267                           
  2268  007E                     ??_lg_clear_matrix:	
  2269                           ; 1 bytes @ 0xE
  2270                           
  2271  007E                     ??_lg_char_info_index_rand:	
  2272                           ; 1 bytes @ 0xE
  2273                           
  2274  007E                     ??_main_init:	
  2275                           ; 1 bytes @ 0xE
  2276                           
  2277  007E                     ??___wmul:	
  2278                           ; 1 bytes @ 0xE
  2279                           
  2280                           
  2281                           	psect	cstackBANK0
  2282  0020                     __pcstackBANK0:	
  2283                           ; 1 bytes @ 0xE
  2284                           
  2285  0020                     ??_get_matrix7219:	
  2286  0020                     ??_max7219_init1:	
  2287                           ; 1 bytes @ 0x0
  2288                           
  2289  0020                     ??_hal_print_MATRIX_MATRIX7219:	
  2290                           ; 1 bytes @ 0x0
  2291                           
  2292  0020                     ?_lg_clear:	
  2293                           ; 1 bytes @ 0x0
  2294                           
  2295  0020                     ?_lg_merge1:	
  2296                           ; 1 bytes @ 0x0
  2297                           
  2298  0020                     ?_sprintf:	
  2299                           ; 1 bytes @ 0x0
  2300                           
  2301  0020                     ?_rand:	
  2302                           ; 2 bytes @ 0x0
  2303                           
  2304  0020                     lg_clear@y:	
  2305                           ; 2 bytes @ 0x0
  2306                           
  2307  0020                     lg_merge1@y:	
  2308                           ; 1 bytes @ 0x0
  2309                           
  2310  0020                     sprintf@f:	
  2311                           ; 1 bytes @ 0x0
  2312                           
  2313                           
  2314                           ; 2 bytes @ 0x0
  2315  0020                     	ds	1
  2316  0021                     lg_clear@matrix4x4:	
  2317  0021                     lg_merge1@matrix4x4:	
  2318                           ; 2 bytes @ 0x1
  2319                           
  2320  0021                     max7219_init1@matrix:	
  2321                           ; 2 bytes @ 0x1
  2322                           
  2323                           
  2324                           ; 16 bytes @ 0x1
  2325  0021                     	ds	1
  2326  0022                     ??_rand:	
  2327                           
  2328                           ; 1 bytes @ 0x2
  2329  0022                     	ds	1
  2330  0023                     lg_clear@matrix16x8:	
  2331  0023                     lg_merge1@matrix16x8_in:	
  2332                           ; 1 bytes @ 0x3
  2333                           
  2334                           
  2335                           ; 1 bytes @ 0x3
  2336  0023                     	ds	1
  2337  0024                     ??_lg_clear:	
  2338  0024                     lg_merge1@matrix16x8_out:	
  2339                           ; 1 bytes @ 0x4
  2340                           
  2341                           
  2342                           ; 1 bytes @ 0x4
  2343  0024                     	ds	1
  2344  0025                     ??_lg_merge1:	
  2345                           
  2346                           ; 1 bytes @ 0x5
  2347  0025                     	ds	1
  2348  0026                     lg_clear@x:	
  2349                           
  2350                           ; 1 bytes @ 0x6
  2351  0026                     	ds	1
  2352  0027                     ?_set_matrix_matrix7219_bit:	
  2353  0027                     ?___awmod:	
  2354                           ; 1 bytes @ 0x7
  2355                           
  2356  0027                     set_matrix_matrix7219_bit@matrix_row:	
  2357                           ; 2 bytes @ 0x7
  2358                           
  2359  0027                     lg_clear@row:	
  2360                           ; 1 bytes @ 0x7
  2361                           
  2362  0027                     lg_merge1@x:	
  2363                           ; 1 bytes @ 0x7
  2364                           
  2365  0027                     ___awmod@divisor:	
  2366                           ; 1 bytes @ 0x7
  2367                           
  2368                           
  2369                           ; 2 bytes @ 0x7
  2370  0027                     	ds	1
  2371  0028                     ??_sprintf:	
  2372  0028                     set_matrix_matrix7219_bit@matrix_col:	
  2373                           ; 1 bytes @ 0x8
  2374                           
  2375  0028                     hal_print_MATRIX_MATRIX7219@matrix7219:	
  2376                           ; 1 bytes @ 0x8
  2377                           
  2378  0028                     lg_clear@col:	
  2379                           ; 1 bytes @ 0x8
  2380                           
  2381  0028                     lg_merge1@len:	
  2382                           ; 1 bytes @ 0x8
  2383                           
  2384                           
  2385                           ; 2 bytes @ 0x8
  2386  0028                     	ds	1
  2387  0029                     set_matrix_matrix7219_bit@value:	
  2388  0029                     hal_print_MATRIX_MATRIX7219@matrix:	
  2389                           ; 1 bytes @ 0x9
  2390                           
  2391  0029                     ___awmod@dividend:	
  2392                           ; 2 bytes @ 0x9
  2393                           
  2394                           
  2395                           ; 2 bytes @ 0x9
  2396  0029                     	ds	1
  2397  002A                     ??_set_matrix_matrix7219_bit:	
  2398  002A                     lg_merge1@row:	
  2399                           ; 1 bytes @ 0xA
  2400                           
  2401                           
  2402                           ; 1 bytes @ 0xA
  2403  002A                     	ds	1
  2404  002B                     hal_print_MATRIX_MATRIX7219@col:	
  2405  002B                     lg_merge1@col:	
  2406                           ; 1 bytes @ 0xB
  2407                           
  2408  002B                     sprintf@idx:	
  2409                           ; 1 bytes @ 0xB
  2410                           
  2411  002B                     ___awmod@counter:	
  2412                           ; 1 bytes @ 0xB
  2413                           
  2414                           
  2415                           ; 1 bytes @ 0xB
  2416  002B                     	ds	1
  2417  002C                     hal_print_MATRIX_MATRIX7219@matrix_row:	
  2418  002C                     ___awmod@sign:	
  2419                           ; 1 bytes @ 0xC
  2420                           
  2421  002C                     sprintf@ccnt:	
  2422                           ; 1 bytes @ 0xC
  2423                           
  2424                           
  2425                           ; 2 bytes @ 0xC
  2426  002C                     	ds	1
  2427  002D                     ?_hal_MATRIX16x8_to_MATRIX_MATRIX7219:	
  2428  002D                     hal_MATRIX16x8_to_MATRIX_MATRIX7219@matrix7219:	
  2429                           ; 1 bytes @ 0xD
  2430                           
  2431  002D                     hal_print_MATRIX_MATRIX7219@matrix_col:	
  2432                           ; 1 bytes @ 0xD
  2433                           
  2434                           
  2435                           ; 1 bytes @ 0xD
  2436  002D                     	ds	1
  2437  002E                     ??_hal_MATRIX16x8_to_MATRIX_MATRIX7219:	
  2438  002E                     sprintf@ap:	
  2439                           ; 1 bytes @ 0xE
  2440                           
  2441                           
  2442                           ; 1 bytes @ 0xE
  2443  002E                     	ds	1
  2444  002F                     sprintf@prec:	
  2445                           
  2446                           ; 1 bytes @ 0xF
  2447  002F                     	ds	1
  2448  0030                     sprintf@flag:	
  2449                           
  2450                           ; 1 bytes @ 0x10
  2451  0030                     	ds	1
  2452  0031                     sprintf@val:	
  2453                           
  2454                           ; 2 bytes @ 0x11
  2455  0031                     	ds	2
  2456  0033                     hal_MATRIX16x8_to_MATRIX_MATRIX7219@matrix16x8:	
  2457  0033                     sprintf@c:	
  2458                           ; 1 bytes @ 0x13
  2459                           
  2460                           
  2461                           ; 1 bytes @ 0x13
  2462  0033                     	ds	1
  2463  0034                     hal_MATRIX16x8_to_MATRIX_MATRIX7219@col:	
  2464  0034                     sprintf@sp:	
  2465                           ; 1 bytes @ 0x14
  2466                           
  2467                           
  2468                           ; 1 bytes @ 0x14
  2469  0034                     	ds	1
  2470  0035                     ?_dbg_print_MATRIX4x4:	
  2471  0035                     ?_dbg_print_MATRIX16x8:	
  2472                           ; 1 bytes @ 0x15
  2473                           
  2474  0035                     ?_eeprom_write_int:	
  2475                           ; 1 bytes @ 0x15
  2476                           
  2477  0035                     ?_lg_hit_land:	
  2478                           ; 1 bytes @ 0x15
  2479                           
  2480  0035                     ?_lg_is_valid:	
  2481                           ; 1 bytes @ 0x15
  2482                           
  2483  0035                     ?_lg_is_left_boundary:	
  2484                           ; 1 bytes @ 0x15
  2485                           
  2486  0035                     ?_lg_is_right_boundary:	
  2487                           ; 1 bytes @ 0x15
  2488                           
  2489  0035                     ?_lg_fall_off:	
  2490                           ; 1 bytes @ 0x15
  2491                           
  2492  0035                     ??_lg_get_height:	
  2493                           ; 1 bytes @ 0x15
  2494                           
  2495  0035                     ?_lg_get_height_after_merge:	
  2496                           ; 1 bytes @ 0x15
  2497                           
  2498  0035                     ??_lg_get_holes_after_merge:	
  2499                           ; 1 bytes @ 0x15
  2500                           
  2501  0035                     ?_eeprom_read_int:	
  2502                           ; 1 bytes @ 0x15
  2503                           
  2504  0035                     ?_lg_get_num_of_orphan:	
  2505                           ; 2 bytes @ 0x15
  2506                           
  2507  0035                     ?_lg_get_weight:	
  2508                           ; 2 bytes @ 0x15
  2509                           
  2510  0035                     hal_MATRIX16x8_to_MATRIX_MATRIX7219@row:	
  2511                           ; 2 bytes @ 0x15
  2512                           
  2513  0035                     lg_hit_land@y:	
  2514                           ; 1 bytes @ 0x15
  2515                           
  2516  0035                     lg_is_valid@y:	
  2517                           ; 1 bytes @ 0x15
  2518                           
  2519  0035                     lg_fall_off@y:	
  2520                           ; 1 bytes @ 0x15
  2521                           
  2522  0035                     dbg_print_MATRIX4x4@lable:	
  2523                           ; 1 bytes @ 0x15
  2524                           
  2525  0035                     dbg_print_MATRIX16x8@lable:	
  2526                           ; 2 bytes @ 0x15
  2527                           
  2528  0035                     eeprom_write_int@value:	
  2529                           ; 2 bytes @ 0x15
  2530                           
  2531  0035                     lg_is_left_boundary@matrix4x4:	
  2532                           ; 2 bytes @ 0x15
  2533                           
  2534  0035                     lg_is_right_boundary@matrix4x4:	
  2535                           ; 2 bytes @ 0x15
  2536                           
  2537  0035                     lg_get_height_after_merge@matrix:	
  2538                           ; 2 bytes @ 0x15
  2539                           
  2540                           
  2541                           ; 2 bytes @ 0x15
  2542  0035                     	ds	1
  2543  0036                     ??_hal_print_MATRIX16x8:	
  2544  0036                     lg_hit_land@matrix4x4:	
  2545                           ; 1 bytes @ 0x16
  2546                           
  2547  0036                     lg_is_valid@matrix4x4:	
  2548                           ; 2 bytes @ 0x16
  2549                           
  2550  0036                     lg_fall_off@matrix4x4:	
  2551                           ; 2 bytes @ 0x16
  2552                           
  2553                           
  2554                           ; 2 bytes @ 0x16
  2555  0036                     	ds	1
  2556  0037                     ??_eeprom_write_int:	
  2557  0037                     ??_eeprom_read_int:	
  2558                           ; 1 bytes @ 0x17
  2559                           
  2560  0037                     ??_lg_get_num_of_orphan:	
  2561                           ; 1 bytes @ 0x17
  2562                           
  2563  0037                     ??_lg_get_weight:	
  2564                           ; 1 bytes @ 0x17
  2565                           
  2566  0037                     ??_lg_get_height_after_merge:	
  2567                           ; 1 bytes @ 0x17
  2568                           
  2569  0037                     dbg_print_MATRIX4x4@x:	
  2570                           ; 1 bytes @ 0x17
  2571                           
  2572  0037                     hal_print_MATRIX16x8@matrix88:	
  2573                           ; 1 bytes @ 0x17
  2574                           
  2575  0037                     lg_is_left_boundary@matrix16x8:	
  2576                           ; 1 bytes @ 0x17
  2577                           
  2578  0037                     lg_is_right_boundary@matrix16x8:	
  2579                           ; 1 bytes @ 0x17
  2580                           
  2581  0037                     dbg_print_MATRIX16x8@matrix:	
  2582                           ; 1 bytes @ 0x17
  2583                           
  2584  0037                     lg_get_height@n:	
  2585                           ; 2 bytes @ 0x17
  2586                           
  2587                           
  2588                           ; 2 bytes @ 0x17
  2589  0037                     	ds	1
  2590  0038                     ??_lg_is_left_boundary:	
  2591  0038                     ??_lg_is_right_boundary:	
  2592                           ; 1 bytes @ 0x18
  2593                           
  2594  0038                     dbg_print_MATRIX4x4@y:	
  2595                           ; 1 bytes @ 0x18
  2596                           
  2597  0038                     lg_hit_land@matrix16x8:	
  2598                           ; 1 bytes @ 0x18
  2599                           
  2600  0038                     lg_is_valid@matrix16x8:	
  2601                           ; 1 bytes @ 0x18
  2602                           
  2603  0038                     lg_fall_off@matrix16x8:	
  2604                           ; 1 bytes @ 0x18
  2605                           
  2606  0038                     eeprom_write_int@n:	
  2607                           ; 1 bytes @ 0x18
  2608                           
  2609  0038                     hal_print_MATRIX16x8@matrix7219:	
  2610                           ; 2 bytes @ 0x18
  2611                           
  2612                           
  2613                           ; 16 bytes @ 0x18
  2614  0038                     	ds	1
  2615  0039                     ??_dbg_print_MATRIX16x8:	
  2616  0039                     ??_lg_hit_land:	
  2617                           ; 1 bytes @ 0x19
  2618                           
  2619  0039                     ??_lg_is_valid:	
  2620                           ; 1 bytes @ 0x19
  2621                           
  2622  0039                     ??_lg_fall_off:	
  2623                           ; 1 bytes @ 0x19
  2624                           
  2625  0039                     lg_get_height@matrix:	
  2626                           ; 1 bytes @ 0x19
  2627                           
  2628  0039                     dbg_print_MATRIX4x4@matrix:	
  2629                           ; 1 bytes @ 0x19
  2630                           
  2631  0039                     eeprom_read_int@n:	
  2632                           ; 2 bytes @ 0x19
  2633                           
  2634  0039                     lg_get_height_after_merge@n:	
  2635                           ; 2 bytes @ 0x19
  2636                           
  2637                           
  2638                           ; 2 bytes @ 0x19
  2639  0039                     	ds	1
  2640  003A                     eeprom_write_int@at:	
  2641  003A                     lg_get_height@row:	
  2642                           ; 1 bytes @ 0x1A
  2643                           
  2644  003A                     lg_is_right_boundary@n:	
  2645                           ; 1 bytes @ 0x1A
  2646                           
  2647  003A                     lg_get_num_of_orphan@n:	
  2648                           ; 2 bytes @ 0x1A
  2649                           
  2650  003A                     lg_get_weight@n:	
  2651                           ; 2 bytes @ 0x1A
  2652                           
  2653                           
  2654                           ; 2 bytes @ 0x1A
  2655  003A                     	ds	1
  2656  003B                     ??_dbg_print_MATRIX4x4:	
  2657  003B                     eeprom_write_int@temp:	
  2658                           ; 1 bytes @ 0x1B
  2659                           
  2660  003B                     eeprom_read_int@at:	
  2661                           ; 1 bytes @ 0x1B
  2662                           
  2663  003B                     dbg_print_MATRIX16x8@n:	
  2664                           ; 1 bytes @ 0x1B
  2665                           
  2666  003B                     lg_hit_land@n:	
  2667                           ; 2 bytes @ 0x1B
  2668                           
  2669  003B                     lg_is_valid@n:	
  2670                           ; 2 bytes @ 0x1B
  2671                           
  2672  003B                     lg_fall_off@n:	
  2673                           ; 2 bytes @ 0x1B
  2674                           
  2675  003B                     lg_get_height_after_merge@n_652:	
  2676                           ; 2 bytes @ 0x1B
  2677                           
  2678  003B                     lg_get_holes_after_merge@n:	
  2679                           ; 2 bytes @ 0x1B
  2680                           
  2681                           
  2682                           ; 2 bytes @ 0x1B
  2683  003B                     	ds	1
  2684  003C                     lg_is_right_boundary@x:	
  2685  003C                     lg_get_weight@start:	
  2686                           ; 1 bytes @ 0x1C
  2687                           
  2688  003C                     eeprom_read_int@value:	
  2689                           ; 1 bytes @ 0x1C
  2690                           
  2691  003C                     lg_get_num_of_orphan@risk:	
  2692                           ; 2 bytes @ 0x1C
  2693                           
  2694                           
  2695                           ; 2 bytes @ 0x1C
  2696  003C                     	ds	1
  2697  003D                     lg_is_right_boundary@row:	
  2698  003D                     dbg_print_MATRIX16x8@n_321:	
  2699                           ; 1 bytes @ 0x1D
  2700                           
  2701  003D                     lg_hit_land@n_481:	
  2702                           ; 2 bytes @ 0x1D
  2703                           
  2704  003D                     lg_is_valid@n_503:	
  2705                           ; 2 bytes @ 0x1D
  2706                           
  2707  003D                     lg_is_left_boundary@n:	
  2708                           ; 2 bytes @ 0x1D
  2709                           
  2710  003D                     lg_fall_off@n_556:	
  2711                           ; 2 bytes @ 0x1D
  2712                           
  2713  003D                     lg_get_weight@risk:	
  2714                           ; 2 bytes @ 0x1D
  2715                           
  2716  003D                     lg_get_height_after_merge@n_655:	
  2717                           ; 2 bytes @ 0x1D
  2718                           
  2719  003D                     lg_get_holes_after_merge@n_672:	
  2720                           ; 2 bytes @ 0x1D
  2721                           
  2722                           
  2723                           ; 2 bytes @ 0x1D
  2724  003D                     	ds	1
  2725  003E                     lg_is_right_boundary@col:	
  2726  003E                     lg_get_num_of_orphan@full:	
  2727                           ; 1 bytes @ 0x1E
  2728                           
  2729                           
  2730                           ; 1 bytes @ 0x1E
  2731  003E                     	ds	1
  2732  003F                     ?_lg_right_most:	
  2733  003F                     lg_is_left_boundary@x:	
  2734                           ; 1 bytes @ 0x1F
  2735                           
  2736  003F                     lg_get_num_of_orphan@matrix:	
  2737                           ; 1 bytes @ 0x1F
  2738                           
  2739  003F                     lg_get_weight@matrix:	
  2740                           ; 1 bytes @ 0x1F
  2741                           
  2742  003F                     dbg_print_MATRIX16x8@n_324:	
  2743                           ; 1 bytes @ 0x1F
  2744                           
  2745  003F                     lg_hit_land@n_485:	
  2746                           ; 2 bytes @ 0x1F
  2747                           
  2748  003F                     lg_is_valid@n_506:	
  2749                           ; 2 bytes @ 0x1F
  2750                           
  2751  003F                     lg_fall_off@n_559:	
  2752                           ; 2 bytes @ 0x1F
  2753                           
  2754  003F                     lg_right_most@matrix4x4:	
  2755                           ; 2 bytes @ 0x1F
  2756                           
  2757  003F                     lg_get_height_after_merge@n_658:	
  2758                           ; 2 bytes @ 0x1F
  2759                           
  2760  003F                     lg_get_holes_after_merge@n_675:	
  2761                           ; 2 bytes @ 0x1F
  2762                           
  2763                           
  2764                           ; 2 bytes @ 0x1F
  2765  003F                     	ds	1
  2766  0040                     lg_is_left_boundary@row:	
  2767  0040                     lg_get_num_of_orphan@col:	
  2768                           ; 1 bytes @ 0x20
  2769                           
  2770  0040                     lg_get_weight@pre:	
  2771                           ; 1 bytes @ 0x20
  2772                           
  2773                           
  2774                           ; 1 bytes @ 0x20
  2775  0040                     	ds	1
  2776  0041                     lg_is_left_boundary@col:	
  2777  0041                     lg_get_num_of_orphan@row:	
  2778                           ; 1 bytes @ 0x21
  2779                           
  2780  0041                     lg_get_weight@col:	
  2781                           ; 1 bytes @ 0x21
  2782                           
  2783  0041                     lg_right_most@matrix16x8:	
  2784                           ; 1 bytes @ 0x21
  2785                           
  2786  0041                     lg_get_height_after_merge@y:	
  2787                           ; 1 bytes @ 0x21
  2788                           
  2789  0041                     dbg_print_MATRIX4x4@n:	
  2790                           ; 1 bytes @ 0x21
  2791                           
  2792  0041                     dbg_print_MATRIX16x8@n_330:	
  2793                           ; 2 bytes @ 0x21
  2794                           
  2795  0041                     lg_hit_land@n_488:	
  2796                           ; 2 bytes @ 0x21
  2797                           
  2798  0041                     lg_is_valid@n_509:	
  2799                           ; 2 bytes @ 0x21
  2800                           
  2801  0041                     lg_fall_off@n_562:	
  2802                           ; 2 bytes @ 0x21
  2803                           
  2804  0041                     lg_get_holes_after_merge@n_678:	
  2805                           ; 2 bytes @ 0x21
  2806                           
  2807                           
  2808                           ; 2 bytes @ 0x21
  2809  0041                     	ds	1
  2810  0042                     ?_lg_left_most:	
  2811  0042                     ??_lg_right_most:	
  2812                           ; 1 bytes @ 0x22
  2813                           
  2814  0042                     lg_get_weight@row:	
  2815                           ; 1 bytes @ 0x22
  2816                           
  2817  0042                     lg_get_height_after_merge@col:	
  2818                           ; 1 bytes @ 0x22
  2819                           
  2820  0042                     lg_left_most@matrix4x4:	
  2821                           ; 1 bytes @ 0x22
  2822                           
  2823                           
  2824                           ; 2 bytes @ 0x22
  2825  0042                     	ds	1
  2826  0043                     lg_hit_land@x:	
  2827  0043                     lg_fall_off@x:	
  2828                           ; 1 bytes @ 0x23
  2829                           
  2830  0043                     lg_get_height_after_merge@row:	
  2831                           ; 1 bytes @ 0x23
  2832                           
  2833  0043                     lg_get_holes_after_merge@num_hole:	
  2834                           ; 1 bytes @ 0x23
  2835                           
  2836  0043                     dbg_print_MATRIX4x4@n_293:	
  2837                           ; 1 bytes @ 0x23
  2838                           
  2839  0043                     dbg_print_MATRIX16x8@n_333:	
  2840                           ; 2 bytes @ 0x23
  2841                           
  2842  0043                     lg_is_valid@n_512:	
  2843                           ; 2 bytes @ 0x23
  2844                           
  2845                           
  2846                           ; 2 bytes @ 0x23
  2847  0043                     	ds	1
  2848  0044                     lg_hit_land@col:	
  2849  0044                     lg_fall_off@col:	
  2850                           ; 1 bytes @ 0x24
  2851                           
  2852  0044                     lg_left_most@matrix16x8:	
  2853                           ; 1 bytes @ 0x24
  2854                           
  2855  0044                     lg_get_holes_after_merge@stop:	
  2856                           ; 1 bytes @ 0x24
  2857                           
  2858  0044                     lg_right_most@n:	
  2859                           ; 1 bytes @ 0x24
  2860                           
  2861                           
  2862                           ; 2 bytes @ 0x24
  2863  0044                     	ds	1
  2864  0045                     ??_lg_left_most:	
  2865  0045                     lg_hit_land@row:	
  2866                           ; 1 bytes @ 0x25
  2867                           
  2868  0045                     lg_fall_off@row:	
  2869                           ; 1 bytes @ 0x25
  2870                           
  2871  0045                     lg_get_holes_after_merge@start:	
  2872                           ; 1 bytes @ 0x25
  2873                           
  2874  0045                     dbg_print_MATRIX4x4@n_296:	
  2875                           ; 1 bytes @ 0x25
  2876                           
  2877  0045                     dbg_print_MATRIX16x8@n_336:	
  2878                           ; 2 bytes @ 0x25
  2879                           
  2880  0045                     lg_is_valid@n_515:	
  2881                           ; 2 bytes @ 0x25
  2882                           
  2883                           
  2884                           ; 2 bytes @ 0x25
  2885  0045                     	ds	1
  2886  0046                     lg_right_most@x:	
  2887  0046                     lg_get_holes_after_merge@matrix:	
  2888                           ; 1 bytes @ 0x26
  2889                           
  2890  0046                     lg_left_most@n:	
  2891                           ; 1 bytes @ 0x26
  2892                           
  2893                           
  2894                           ; 2 bytes @ 0x26
  2895  0046                     	ds	1
  2896  0047                     lg_get_holes_after_merge@col:	
  2897  0047                     dbg_print_MATRIX4x4@n_303:	
  2898                           ; 1 bytes @ 0x27
  2899                           
  2900  0047                     dbg_print_MATRIX16x8@n_339:	
  2901                           ; 2 bytes @ 0x27
  2902                           
  2903  0047                     lg_is_valid@n_518:	
  2904                           ; 2 bytes @ 0x27
  2905                           
  2906                           
  2907                           ; 2 bytes @ 0x27
  2908  0047                     	ds	1
  2909  0048                     lg_left_most@x:	
  2910  0048                     lg_get_holes_after_merge@row:	
  2911                           ; 1 bytes @ 0x28
  2912                           
  2913                           
  2914                           ; 1 bytes @ 0x28
  2915  0048                     	ds	1
  2916  0049                     ?___wmul:	
  2917  0049                     dbg_print_MATRIX16x8@enable:	
  2918                           ; 2 bytes @ 0x29
  2919                           
  2920  0049                     dbg_print_MATRIX4x4@n_306:	
  2921                           ; 1 bytes @ 0x29
  2922                           
  2923  0049                     lg_is_valid@n_521:	
  2924                           ; 2 bytes @ 0x29
  2925                           
  2926  0049                     ___wmul@multiplier:	
  2927                           ; 2 bytes @ 0x29
  2928                           
  2929                           
  2930                           ; 2 bytes @ 0x29
  2931  0049                     	ds	1
  2932  004A                     dbg_print_MATRIX16x8@row:	
  2933                           
  2934                           ; 1 bytes @ 0x2A
  2935  004A                     	ds	1
  2936  004B                     dbg_print_MATRIX16x8@col:	
  2937  004B                     lg_is_valid@x:	
  2938                           ; 1 bytes @ 0x2B
  2939                           
  2940  004B                     dbg_print_MATRIX4x4@n_309:	
  2941                           ; 1 bytes @ 0x2B
  2942                           
  2943  004B                     ___wmul@multiplicand:	
  2944                           ; 2 bytes @ 0x2B
  2945                           
  2946                           
  2947                           ; 2 bytes @ 0x2B
  2948  004B                     	ds	1
  2949  004C                     ?_dbg_print_Screen:	
  2950  004C                     ?_lg_is_row_full:	
  2951                           ; 1 bytes @ 0x2C
  2952                           
  2953  004C                     lg_is_valid@row:	
  2954                           ; 1 bytes @ 0x2C
  2955                           
  2956  004C                     dbg_print_Screen@lable:	
  2957                           ; 1 bytes @ 0x2C
  2958                           
  2959  004C                     lg_is_row_full@matrix:	
  2960                           ; 2 bytes @ 0x2C
  2961                           
  2962                           
  2963                           ; 2 bytes @ 0x2C
  2964  004C                     	ds	1
  2965  004D                     lg_is_valid@col:	
  2966  004D                     dbg_print_MATRIX4x4@n_312:	
  2967                           ; 1 bytes @ 0x2D
  2968                           
  2969  004D                     ___wmul@product:	
  2970                           ; 2 bytes @ 0x2D
  2971                           
  2972                           
  2973                           ; 2 bytes @ 0x2D
  2974  004D                     	ds	1
  2975  004E                     dbg_print_Screen@enable:	
  2976  004E                     lg_is_row_full@row:	
  2977                           ; 1 bytes @ 0x2E
  2978                           
  2979                           
  2980                           ; 1 bytes @ 0x2E
  2981  004E                     	ds	1
  2982  004F                     ??_lg_is_row_full:	
  2983  004F                     dbg_print_MATRIX4x4@enable:	
  2984                           ; 1 bytes @ 0x2F
  2985                           
  2986  004F                     dbg_print_Screen@n:	
  2987                           ; 1 bytes @ 0x2F
  2988                           
  2989                           
  2990                           ; 2 bytes @ 0x2F
  2991  004F                     	ds	1
  2992  0050                     dbg_print_MATRIX4x4@row:	
  2993                           
  2994                           ; 1 bytes @ 0x30
  2995  0050                     	ds	1
  2996  0051                     dbg_print_MATRIX4x4@col:	
  2997  0051                     dbg_print_Screen@n_373:	
  2998                           ; 1 bytes @ 0x31
  2999                           
  3000                           
  3001                           ; 2 bytes @ 0x31
  3002  0051                     	ds	1
  3003  0052                     ?_dbg_print_cur_MATRIX4x4:	
  3004  0052                     ?_lg_merge:	
  3005                           ; 1 bytes @ 0x32
  3006                           
  3007  0052                     lg_merge@y:	
  3008                           ; 1 bytes @ 0x32
  3009                           
  3010  0052                     dbg_print_cur_MATRIX4x4@lable:	
  3011                           ; 1 bytes @ 0x32
  3012                           
  3013                           
  3014                           ; 2 bytes @ 0x32
  3015  0052                     	ds	1
  3016  0053                     lg_is_row_full@n:	
  3017  0053                     lg_merge@matrix4x4:	
  3018                           ; 2 bytes @ 0x33
  3019                           
  3020                           
  3021                           ; 2 bytes @ 0x33
  3022  0053                     	ds	1
  3023  0054                     dbg_print_cur_MATRIX4x4@x:	
  3024                           
  3025                           ; 1 bytes @ 0x34
  3026  0054                     	ds	1
  3027  0055                     dbg_print_cur_MATRIX4x4@y:	
  3028  0055                     lg_merge@matrix16x8:	
  3029                           ; 1 bytes @ 0x35
  3030                           
  3031  0055                     lg_is_row_full@n_439:	
  3032                           ; 1 bytes @ 0x35
  3033                           
  3034                           
  3035                           ; 2 bytes @ 0x35
  3036  0055                     	ds	1
  3037  0056                     ??_dbg_print_cur_MATRIX4x4:	
  3038  0056                     ??_lg_merge:	
  3039                           ; 1 bytes @ 0x36
  3040                           
  3041                           
  3042                           ; 1 bytes @ 0x36
  3043  0056                     	ds	1
  3044  0057                     ??_lg_delete_matrix:	
  3045  0057                     ??_lg_get_num_removed_rows:	
  3046                           ; 1 bytes @ 0x37
  3047                           
  3048                           
  3049                           ; 1 bytes @ 0x37
  3050  0057                     	ds	1
  3051  0058                     lg_merge@x:	
  3052                           
  3053                           ; 1 bytes @ 0x38
  3054  0058                     	ds	1
  3055  0059                     lg_merge@row:	
  3056  0059                     lg_delete_matrix@n:	
  3057                           ; 1 bytes @ 0x39
  3058                           
  3059  0059                     lg_get_num_removed_rows@n:	
  3060                           ; 2 bytes @ 0x39
  3061                           
  3062                           
  3063                           ; 2 bytes @ 0x39
  3064  0059                     	ds	1
  3065  005A                     lg_merge@col:	
  3066  005A                     dbg_print_cur_MATRIX4x4@n:	
  3067                           ; 1 bytes @ 0x3A
  3068                           
  3069                           
  3070                           ; 2 bytes @ 0x3A
  3071  005A                     	ds	1
  3072  005B                     lg_delete_matrix@count:	
  3073  005B                     lg_get_num_removed_rows@matrix:	
  3074                           ; 1 bytes @ 0x3B
  3075                           
  3076                           
  3077                           ; 1 bytes @ 0x3B
  3078  005B                     	ds	1
  3079  005C                     lg_delete_matrix@matrix:	
  3080  005C                     lg_get_num_removed_rows@count:	
  3081                           ; 1 bytes @ 0x3C
  3082                           
  3083  005C                     dbg_print_cur_MATRIX4x4@n_384:	
  3084                           ; 1 bytes @ 0x3C
  3085                           
  3086                           
  3087                           ; 2 bytes @ 0x3C
  3088  005C                     	ds	1
  3089  005D                     lg_delete_matrix@row:	
  3090  005D                     lg_get_num_removed_rows@row:	
  3091                           ; 1 bytes @ 0x3D
  3092                           
  3093                           
  3094                           ; 1 bytes @ 0x3D
  3095  005D                     	ds	1
  3096  005E                     dbg_print_cur_MATRIX4x4@matrix:	
  3097                           
  3098                           ; 2 bytes @ 0x3E
  3099  005E                     	ds	2
  3100  0060                     dbg_print_cur_MATRIX4x4@enable:	
  3101                           
  3102                           ; 1 bytes @ 0x40
  3103  0060                     	ds	1
  3104  0061                     ??_main:	
  3105                           
  3106                           ; 1 bytes @ 0x41
  3107  0061                     	ds	4
  3108  0065                     main@n:	
  3109                           
  3110                           ; 2 bytes @ 0x45
  3111  0065                     	ds	2
  3112  0067                     main@n_765:	
  3113                           
  3114                           ; 2 bytes @ 0x47
  3115  0067                     	ds	2
  3116  0069                     main@n_769:	
  3117                           
  3118                           ; 2 bytes @ 0x49
  3119  0069                     	ds	2
  3120  006B                     main@hit_res:	
  3121                           
  3122                           ; 1 bytes @ 0x4B
  3123  006B                     	ds	1
  3124                           
  3125                           	psect	maintext
  3126  0D10                     __pmaintext:	
  3127 ;;
  3128 ;;Main: autosize = 0, tempsize = 4, incstack = 0, save=0
  3129 ;;
  3130 ;; *************** function _main *****************
  3131 ;; Defined at:
  3132 ;;		line 85 in file "../main.c"
  3133 ;; Parameters:    Size  Location     Type
  3134 ;;		None
  3135 ;; Auto vars:     Size  Location     Type
  3136 ;;  n               2   73[BANK0 ] int 
  3137 ;;  n               2   71[BANK0 ] int 
  3138 ;;  n               2   69[BANK0 ] int 
  3139 ;;  hit_res         1   75[BANK0 ] unsigned char 
  3140 ;; Return value:  Size  Location     Type
  3141 ;;                  2  864[None  ] int 
  3142 ;; Registers used:
  3143 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3144 ;; Tracked objects:
  3145 ;;		On entry : B00/0
  3146 ;;		On exit  : 0/0
  3147 ;;		Unchanged: 0/0
  3148 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3149 ;;      Params:         0       0       0       0       0
  3150 ;;      Locals:         0       7       0       0       0
  3151 ;;      Temps:          0       4       0       0       0
  3152 ;;      Totals:         0      11       0       0       0
  3153 ;;Total ram usage:       11 bytes
  3154 ;; Hardware stack levels required when called:    7
  3155 ;; This function calls:
  3156 ;;		_USARTWriteString
  3157 ;;		_dbg_print_MATRIX16x8
  3158 ;;		_eeprom_write_int
  3159 ;;		_hal_print_Screen
  3160 ;;		_lg_char_info_index_rand
  3161 ;;		_lg_clear
  3162 ;;		_lg_clear_matrix
  3163 ;;		_lg_delete_matrix
  3164 ;;		_lg_find_best_solution
  3165 ;;		_lg_hit_land
  3166 ;;		_lg_merge
  3167 ;;		_main_init
  3168 ;;		_sprintf
  3169 ;; This function is called by:
  3170 ;;		Startup code after reset
  3171 ;; This function uses a non-reentrant model
  3172 ;;
  3173                           
  3174                           
  3175                           ;psect for function _main
  3176  0D10                     _main:	
  3177                           
  3178                           ;main.c: 87: main_init();
  3179                           
  3180                           ;incstack = 0
  3181                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3182  0D10  160A  158A  229D  120A  158A  	fcall	_main_init
  3183  0D15                     l5692:	
  3184                           ;main.c: 89: uint8_t hit_res;
  3185                           ;main.c: 90: __start:
  3186                           
  3187                           
  3188                           ;main.c: 92: Seed++;
  3189  0D15  3001               	movlw	1
  3190  0D16  1683               	bsf	3,5	;RP0=1, select bank1
  3191  0D17  1303               	bcf	3,6	;RP1=0, select bank1
  3192  0D18  07D3               	addwf	_Seed^(0+128),f
  3193  0D19  1803               	skipnc
  3194  0D1A  0AD4               	incf	(_Seed+1)^(0+128),f
  3195  0D1B  3000               	movlw	0
  3196  0D1C  07D4               	addwf	(_Seed+1)^(0+128),f
  3197                           
  3198                           ;main.c: 93: eeprom_write_int(0, Seed);
  3199  0D1D  0854               	movf	(_Seed+1)^(0+128),w
  3200  0D1E  1283               	bcf	3,5	;RP0=0, select bank0
  3201  0D1F  1303               	bcf	3,6	;RP1=0, select bank0
  3202  0D20  00B6               	movwf	eeprom_write_int@value+1
  3203  0D21  1683               	bsf	3,5	;RP0=1, select bank1
  3204  0D22  1303               	bcf	3,6	;RP1=0, select bank1
  3205  0D23  0853               	movf	_Seed^(0+128),w
  3206  0D24  1283               	bcf	3,5	;RP0=0, select bank0
  3207  0D25  1303               	bcf	3,6	;RP1=0, select bank0
  3208  0D26  00B5               	movwf	eeprom_write_int@value
  3209  0D27  3000               	movlw	0
  3210  0D28  160A  158A  2279  120A  158A  	fcall	_eeprom_write_int
  3211                           
  3212                           ;main.c: 95: lg_clear_matrix();
  3213  0D2D  160A  158A  21A7  120A  158A  	fcall	_lg_clear_matrix
  3214  0D32                     l5698:	
  3215                           ;main.c: 96: while(1)
  3216                           
  3217                           
  3218                           ;main.c: 97: {
  3219                           ;main.c: 98: cur_x = 2, cur_y = 0;
  3220  0D32  3002               	movlw	2
  3221  0D33  1283               	bcf	3,5	;RP0=0, select bank0
  3222  0D34  1303               	bcf	3,6	;RP1=0, select bank0
  3223  0D35  00E1               	movwf	??_main
  3224  0D36  0861               	movf	??_main,w
  3225  0D37  1683               	bsf	3,5	;RP0=1, select bank1
  3226  0D38  1303               	bcf	3,6	;RP1=0, select bank1
  3227  0D39  00EC               	movwf	_cur_x^(0+128)
  3228  0D3A  01D7               	clrf	_cur_y^(0+128)
  3229                           
  3230                           ;main.c: 99: g_char_info_index = lg_char_info_index_rand();
  3231  0D3B  160A  158A  2200  120A  158A  	fcall	_lg_char_info_index_rand
  3232  0D40  1283               	bcf	3,5	;RP0=0, select bank0
  3233  0D41  1303               	bcf	3,6	;RP1=0, select bank0
  3234  0D42  00E1               	movwf	??_main
  3235  0D43  0861               	movf	??_main,w
  3236  0D44  00EE               	movwf	_g_char_info_index
  3237                           
  3238                           ;main.c: 100: g_char_info_sub_index = 0;
  3239  0D45  01EF               	clrf	_g_char_info_sub_index
  3240                           
  3241                           ;main.c: 102: do { if(1) { int n = sprintf(g_debug, "g_char_info_index = %d""\r\n", g_ch
      +                          ar_info_index); if(n > 64) { USARTWriteString("ERROR: g_debug is overflowed\r\n"); do { 
      +                          ((void)0); asm("ljmp $"); }while(0); } USARTWriteString(g_debug); } } while (0);;
  3242  0D46  3061               	movlw	low (STR_150| (0+32768))
  3243  0D47  00A0               	movwf	sprintf@f
  3244  0D48  308A               	movlw	high (STR_150| (0+32768))
  3245  0D49  00A1               	movwf	sprintf@f+1
  3246  0D4A  086E               	movf	_g_char_info_index,w
  3247  0D4B  00E1               	movwf	??_main
  3248  0D4C  01E2               	clrf	??_main+1
  3249  0D4D  0861               	movf	??_main,w
  3250  0D4E  00A2               	movwf	?_sprintf+2
  3251  0D4F  0862               	movf	??_main+1,w
  3252  0D50  00A3               	movwf	?_sprintf+3
  3253  0D51  3090               	movlw	(low (_g_debug| (0+256)))& (0+255)
  3254  0D52  120A  158A  267C  120A  158A  	fcall	_sprintf
  3255  0D57  1283               	bcf	3,5	;RP0=0, select bank0
  3256  0D58  1303               	bcf	3,6	;RP1=0, select bank0
  3257  0D59  0821               	movf	?_sprintf+1,w
  3258  0D5A  00E6               	movwf	main@n+1
  3259  0D5B  0820               	movf	?_sprintf,w
  3260  0D5C  00E5               	movwf	main@n
  3261  0D5D  0866               	movf	main@n+1,w
  3262  0D5E  3A80               	xorlw	128
  3263  0D5F  00FF               	movwf	127
  3264  0D60  3080               	movlw	128
  3265  0D61  027F               	subwf	127,w
  3266  0D62  1D03               	skipz
  3267  0D63  2D66               	goto	u7265
  3268  0D64  3041               	movlw	65
  3269  0D65  0265               	subwf	main@n,w
  3270  0D66                     u7265:	
  3271  0D66  1C03               	skipc
  3272  0D67  2D74               	goto	l869
  3273  0D68  304C               	movlw	low (STR_1| (0+32768))
  3274  0D69  00F1               	movwf	USARTWriteString@str
  3275  0D6A  3089               	movlw	high (STR_1| (0+32768))
  3276  0D6B  00F2               	movwf	USARTWriteString@str+1
  3277  0D6C  160A  158A  2233  120A  158A  	fcall	_USARTWriteString
  3278  0D71  120A  158A  2D10   	ljmp	$	;# 
  3279  0D74                     l869:	
  3280  0D74  3090               	movlw	(low (_g_debug| (0+256)))& (0+255)
  3281  0D75  00F1               	movwf	USARTWriteString@str
  3282  0D76  3001               	movlw	1
  3283  0D77  00F2               	movwf	USARTWriteString@str+1
  3284  0D78  160A  158A  2233  120A  158A  	fcall	_USARTWriteString
  3285                           
  3286                           ;main.c: 103: if(lg_find_best_solution() == 0)
  3287  0D7D  120A  118A  24A3  120A  158A  	fcall	_lg_find_best_solution
  3288  0D82  3A00               	xorlw	0
  3289  0D83  1D03               	skipz
  3290  0D84  2DB8               	goto	l5718
  3291                           
  3292                           ;main.c: 104: {
  3293                           ;main.c: 105: do { if(1) { int n = sprintf(g_debug, "GAME OVER!!!""\r\n"); if(n > 64) { 
      +                          USARTWriteString("ERROR: g_debug is overflowed\r\n"); do { ((void)0); asm("ljmp $"); }wh
      +                          ile(0); } USARTWriteString(g_debug); } } while (0);;
  3294  0D85  3002               	movlw	low (STR_142| (0+32768))
  3295  0D86  1283               	bcf	3,5	;RP0=0, select bank0
  3296  0D87  1303               	bcf	3,6	;RP1=0, select bank0
  3297  0D88  00A0               	movwf	sprintf@f
  3298  0D89  308C               	movlw	high (STR_142| (0+32768))
  3299  0D8A  00A1               	movwf	sprintf@f+1
  3300  0D8B  3090               	movlw	(low (_g_debug| (0+256)))& (0+255)
  3301  0D8C  120A  158A  267C  120A  158A  	fcall	_sprintf
  3302  0D91  1283               	bcf	3,5	;RP0=0, select bank0
  3303  0D92  1303               	bcf	3,6	;RP1=0, select bank0
  3304  0D93  0821               	movf	?_sprintf+1,w
  3305  0D94  00E8               	movwf	main@n_765+1
  3306  0D95  0820               	movf	?_sprintf,w
  3307  0D96  00E7               	movwf	main@n_765
  3308  0D97  0868               	movf	main@n_765+1,w
  3309  0D98  3A80               	xorlw	128
  3310  0D99  00FF               	movwf	127
  3311  0D9A  3080               	movlw	128
  3312  0D9B  027F               	subwf	127,w
  3313  0D9C  1D03               	skipz
  3314  0D9D  2DA0               	goto	u7285
  3315  0D9E  3041               	movlw	65
  3316  0D9F  0267               	subwf	main@n_765,w
  3317  0DA0                     u7285:	
  3318  0DA0  1C03               	skipc
  3319  0DA1  2DAE               	goto	l876
  3320  0DA2  304C               	movlw	low (STR_1| (0+32768))
  3321  0DA3  00F1               	movwf	USARTWriteString@str
  3322  0DA4  3089               	movlw	high (STR_1| (0+32768))
  3323  0DA5  00F2               	movwf	USARTWriteString@str+1
  3324  0DA6  160A  158A  2233  120A  158A  	fcall	_USARTWriteString
  3325  0DAB  120A  158A  2D10   	ljmp	$	;# 
  3326  0DAE                     l876:	
  3327  0DAE  3090               	movlw	(low (_g_debug| (0+256)))& (0+255)
  3328  0DAF  00F1               	movwf	USARTWriteString@str
  3329  0DB0  3001               	movlw	1
  3330  0DB1  00F2               	movwf	USARTWriteString@str+1
  3331  0DB2  160A  158A  2233  120A  158A  	fcall	_USARTWriteString
  3332                           
  3333                           ;main.c: 106: goto __start;
  3334  0DB7  2D15               	goto	l5692
  3335  0DB8                     l5718:	
  3336                           
  3337                           ;main.c: 107: }
  3338                           ;main.c: 108: g_cur_matrix4x4 = &g_matrix4x4[g_char_info[g_char_info_index].start_index 
      +                          + g_char_info_sub_index];
  3339  0DB8  1283               	bcf	3,5	;RP0=0, select bank0
  3340  0DB9  1303               	bcf	3,6	;RP1=0, select bank0
  3341  0DBA  086E               	movf	_g_char_info_index,w
  3342  0DBB  00E1               	movwf	??_main
  3343  0DBC  0761               	addwf	??_main,w
  3344  0DBD  3E10               	addlw	(low (_g_char_info| (0+256)))& (0+255)
  3345  0DBE  0084               	movwf	4
  3346  0DBF  086F               	movf	_g_char_info_sub_index,w
  3347  0DC0  1783               	bsf	3,7	;select IRP bank2
  3348  0DC1  0700               	addwf	0,w
  3349  0DC2  00E2               	movwf	??_main+1
  3350  0DC3  3001               	movlw	1
  3351  0DC4                     u7295:	
  3352  0DC4  1003               	clrc
  3353  0DC5  0DE2               	rlf	??_main+1,f
  3354  0DC6  3EFF               	addlw	-1
  3355  0DC7  1D03               	skipz
  3356  0DC8  2DC4               	goto	u7295
  3357  0DC9  1003               	clrc
  3358  0DCA  0D62               	rlf	??_main+1,w
  3359  0DCB  3E24               	addlw	low (_g_matrix4x4| (0+32768))
  3360  0DCC  00E3               	movwf	??_main+2
  3361  0DCD  3088               	movlw	high (_g_matrix4x4| (0+32768))
  3362  0DCE  1803               	skipnc
  3363  0DCF  3E01               	addlw	1
  3364  0DD0  00E4               	movwf	??_main+3
  3365  0DD1  0863               	movf	??_main+2,w
  3366  0DD2  00EC               	movwf	_g_cur_matrix4x4
  3367  0DD3  0864               	movf	??_main+3,w
  3368  0DD4  00ED               	movwf	_g_cur_matrix4x4+1
  3369  0DD5                     l5720:	
  3370                           ;main.c: 109: while(1)
  3371                           
  3372                           
  3373                           ;main.c: 110: {
  3374                           ;main.c: 112: Seed++;
  3375  0DD5  3001               	movlw	1
  3376  0DD6  1683               	bsf	3,5	;RP0=1, select bank1
  3377  0DD7  1303               	bcf	3,6	;RP1=0, select bank1
  3378  0DD8  07D3               	addwf	_Seed^(0+128),f
  3379  0DD9  1803               	skipnc
  3380  0DDA  0AD4               	incf	(_Seed+1)^(0+128),f
  3381  0DDB  3000               	movlw	0
  3382  0DDC  07D4               	addwf	(_Seed+1)^(0+128),f
  3383                           
  3384                           ;main.c: 114: hit_res = lg_hit_land(cur_x, cur_y, g_cur_matrix4x4, &g_matrix16x8);
  3385  0DDD  0857               	movf	_cur_y^(0+128),w
  3386  0DDE  1283               	bcf	3,5	;RP0=0, select bank0
  3387  0DDF  1303               	bcf	3,6	;RP1=0, select bank0
  3388  0DE0  00E1               	movwf	??_main
  3389  0DE1  0861               	movf	??_main,w
  3390  0DE2  00B5               	movwf	lg_hit_land@y
  3391  0DE3  086C               	movf	_g_cur_matrix4x4,w
  3392  0DE4  00B6               	movwf	lg_hit_land@matrix4x4
  3393  0DE5  086D               	movf	_g_cur_matrix4x4+1,w
  3394  0DE6  00B7               	movwf	lg_hit_land@matrix4x4+1
  3395  0DE7  30D8               	movlw	(low (_g_matrix16x8| 0))& (0+255)
  3396  0DE8  00E2               	movwf	??_main+1
  3397  0DE9  0862               	movf	??_main+1,w
  3398  0DEA  00B8               	movwf	lg_hit_land@matrix16x8
  3399  0DEB  1683               	bsf	3,5	;RP0=1, select bank1
  3400  0DEC  1303               	bcf	3,6	;RP1=0, select bank1
  3401  0DED  086C               	movf	_cur_x^(0+128),w
  3402  0DEE  160A  118A  231F  120A  158A  	fcall	_lg_hit_land
  3403  0DF3  1283               	bcf	3,5	;RP0=0, select bank0
  3404  0DF4  1303               	bcf	3,6	;RP1=0, select bank0
  3405  0DF5  00E3               	movwf	??_main+2
  3406  0DF6  0863               	movf	??_main+2,w
  3407  0DF7  00EB               	movwf	main@hit_res
  3408                           
  3409                           ;main.c: 116: lg_merge(cur_x, cur_y, g_cur_matrix4x4, &g_matrix16x8);
  3410                           
  3411                           ;main.c: 115: do { if(0) { int n = sprintf(g_debug, "hit_res = %d""\r\n", hit_res); if(n
      +                           > 64) { USARTWriteString("ERROR: g_debug is overflowed\r\n"); do { ((void)0); asm("ljmp
      +                           $"); }while(0); } USARTWriteString(g_debug); } } while (0);;
  3412  0DF8  1683               	bsf	3,5	;RP0=1, select bank1
  3413  0DF9  1303               	bcf	3,6	;RP1=0, select bank1
  3414  0DFA  0857               	movf	_cur_y^(0+128),w
  3415  0DFB  1283               	bcf	3,5	;RP0=0, select bank0
  3416  0DFC  1303               	bcf	3,6	;RP1=0, select bank0
  3417  0DFD  00E1               	movwf	??_main
  3418  0DFE  0861               	movf	??_main,w
  3419  0DFF  00D2               	movwf	lg_merge@y
  3420  0E00  086C               	movf	_g_cur_matrix4x4,w
  3421  0E01  00D3               	movwf	lg_merge@matrix4x4
  3422  0E02  086D               	movf	_g_cur_matrix4x4+1,w
  3423  0E03  00D4               	movwf	lg_merge@matrix4x4+1
  3424  0E04  30D8               	movlw	(low (_g_matrix16x8| 0))& (0+255)
  3425  0E05  00E2               	movwf	??_main+1
  3426  0E06  0862               	movf	??_main+1,w
  3427  0E07  00D5               	movwf	lg_merge@matrix16x8
  3428  0E08  1683               	bsf	3,5	;RP0=1, select bank1
  3429  0E09  1303               	bcf	3,6	;RP1=0, select bank1
  3430  0E0A  086C               	movf	_cur_x^(0+128),w
  3431  0E0B  160A  118A  239B  120A  158A  	fcall	_lg_merge
  3432                           
  3433                           ;main.c: 117: if(hit_res == 1)
  3434  0E10  1283               	bcf	3,5	;RP0=0, select bank0
  3435  0E11  1303               	bcf	3,6	;RP1=0, select bank0
  3436  0E12  036B               	decf	main@hit_res,w
  3437  0E13  1D03               	btfss	3,2
  3438  0E14  2E2F               	goto	l5738
  3439                           
  3440                           ;main.c: 118: {
  3441                           ;main.c: 119: hal_print_Screen();
  3442  0E15  160A  158A  2165  120A  158A  	fcall	_hal_print_Screen
  3443                           
  3444                           ;main.c: 123: _delay((unsigned long)((100)*(20000000/4000.0)));
  3445  0E1A  3003               	movlw	3
  3446  0E1B  1283               	bcf	3,5	;RP0=0, select bank0
  3447  0E1C  1303               	bcf	3,6	;RP1=0, select bank0
  3448  0E1D  00E3               	movwf	??_main+2
  3449  0E1E  308A               	movlw	138
  3450  0E1F  00E2               	movwf	??_main+1
  3451  0E20  3056               	movlw	86
  3452  0E21  00E1               	movwf	??_main
  3453  0E22                     u7337:	
  3454  0E22  0BE1               	decfsz	??_main,f
  3455  0E23  2E22               	goto	u7337
  3456  0E24  0BE2               	decfsz	??_main+1,f
  3457  0E25  2E22               	goto	u7337
  3458  0E26  0BE3               	decfsz	??_main+2,f
  3459  0E27  2E22               	goto	u7337
  3460  0E28  2E29               	nop2
  3461                           
  3462                           ;main.c: 125: lg_delete_matrix(&g_matrix16x8);
  3463  0E29  30D8               	movlw	(low (_g_matrix16x8| 0))& (0+255)
  3464  0E2A  160A  118A  2165  120A  158A  	fcall	_lg_delete_matrix
  3465  0E2F                     l5738:	
  3466                           
  3467                           ;main.c: 126: }
  3468                           ;main.c: 127: dbg_print_MATRIX16x8(1, "Main screen", &g_matrix16x8);
  3469  0E2F  30AE               	movlw	low (STR_156| (0+32768))
  3470  0E30  1283               	bcf	3,5	;RP0=0, select bank0
  3471  0E31  1303               	bcf	3,6	;RP1=0, select bank0
  3472  0E32  00B5               	movwf	dbg_print_MATRIX16x8@lable
  3473  0E33  308C               	movlw	high (STR_156| (0+32768))
  3474  0E34  00B6               	movwf	dbg_print_MATRIX16x8@lable+1
  3475  0E35  30D8               	movlw	(low (_g_matrix16x8| 0))& (0+255)
  3476  0E36  00B7               	movwf	dbg_print_MATRIX16x8@matrix
  3477  0E37  3000               	movlw	0
  3478  0E38  00B8               	movwf	dbg_print_MATRIX16x8@matrix+1
  3479  0E39  3001               	movlw	1
  3480  0E3A  120A  118A  2107  120A  158A  	fcall	_dbg_print_MATRIX16x8
  3481                           
  3482                           ;main.c: 128: hal_print_Screen();
  3483  0E3F  160A  158A  2165  120A  158A  	fcall	_hal_print_Screen
  3484                           
  3485                           ;main.c: 129: if(hit_res == 0)
  3486  0E44  1283               	bcf	3,5	;RP0=0, select bank0
  3487  0E45  1303               	bcf	3,6	;RP1=0, select bank0
  3488  0E46  086B               	movf	main@hit_res,w
  3489  0E47  1D03               	btfss	3,2
  3490  0E48  2D32               	goto	l5698
  3491                           
  3492                           ;main.c: 130: {
  3493                           ;main.c: 131: lg_clear(cur_x, cur_y, g_cur_matrix4x4, &g_matrix16x8);
  3494  0E49  1683               	bsf	3,5	;RP0=1, select bank1
  3495  0E4A  1303               	bcf	3,6	;RP1=0, select bank1
  3496  0E4B  0857               	movf	_cur_y^(0+128),w
  3497  0E4C  1283               	bcf	3,5	;RP0=0, select bank0
  3498  0E4D  1303               	bcf	3,6	;RP1=0, select bank0
  3499  0E4E  00E1               	movwf	??_main
  3500  0E4F  0861               	movf	??_main,w
  3501  0E50  00A0               	movwf	lg_clear@y
  3502  0E51  086C               	movf	_g_cur_matrix4x4,w
  3503  0E52  00A1               	movwf	lg_clear@matrix4x4
  3504  0E53  086D               	movf	_g_cur_matrix4x4+1,w
  3505  0E54  00A2               	movwf	lg_clear@matrix4x4+1
  3506  0E55  30D8               	movlw	(low (_g_matrix16x8| 0))& (0+255)
  3507  0E56  00E2               	movwf	??_main+1
  3508  0E57  0862               	movf	??_main+1,w
  3509  0E58  00A3               	movwf	lg_clear@matrix16x8
  3510  0E59  1683               	bsf	3,5	;RP0=1, select bank1
  3511  0E5A  1303               	bcf	3,6	;RP1=0, select bank1
  3512  0E5B  086C               	movf	_cur_x^(0+128),w
  3513  0E5C  160A  158A  266C  120A  158A  	fcall	_lg_clear
  3514                           
  3515                           ;main.c: 136: }
  3516                           ;main.c: 140: _delay((unsigned long)((200)*(20000000/4000.0)));
  3517                           
  3518                           ;main.c: 133: else
  3519                           ;main.c: 134: {
  3520                           ;main.c: 135: break;
  3521                           
  3522                           ;main.c: 132: }
  3523  0E61  3006               	movlw	6
  3524  0E62  1283               	bcf	3,5	;RP0=0, select bank0
  3525  0E63  1303               	bcf	3,6	;RP1=0, select bank0
  3526  0E64  00E3               	movwf	??_main+2
  3527  0E65  3013               	movlw	19
  3528  0E66  00E2               	movwf	??_main+1
  3529  0E67  30B1               	movlw	177
  3530  0E68  00E1               	movwf	??_main
  3531  0E69                     u7347:	
  3532  0E69  0BE1               	decfsz	??_main,f
  3533  0E6A  2E69               	goto	u7347
  3534  0E6B  0BE2               	decfsz	??_main+1,f
  3535  0E6C  2E69               	goto	u7347
  3536  0E6D  0BE3               	decfsz	??_main+2,f
  3537  0E6E  2E69               	goto	u7347
  3538  0E6F  2E70               	nop2
  3539                           
  3540                           ;main.c: 142: cur_y++;
  3541  0E70  3001               	movlw	1
  3542  0E71  1283               	bcf	3,5	;RP0=0, select bank0
  3543  0E72  1303               	bcf	3,6	;RP1=0, select bank0
  3544  0E73  00E1               	movwf	??_main
  3545  0E74  0861               	movf	??_main,w
  3546  0E75  1683               	bsf	3,5	;RP0=1, select bank1
  3547  0E76  1303               	bcf	3,6	;RP1=0, select bank1
  3548  0E77  07D7               	addwf	_cur_y^(0+128),f
  3549  0E78  2DD5               	goto	l5720
  3550  0E79  120A  158A  2D10   	ljmp	$	;# 
  3551  0E7C                     __end_of_main:	
  3552                           ;main.c: 152: return 0;
  3553                           ;	Return value of _main is never used
  3554                           
  3555                           ;main.c: 143: }
  3556                           ;main.c: 144: }
  3557                           ;main.c: 145: __exit:
  3558                           
  3559                           
  3560                           	psect	text1
  3561  1A9D                     __ptext1:	
  3562 ;; *************** function _main_init *****************
  3563 ;; Defined at:
  3564 ;;		line 65 in file "../main.c"
  3565 ;; Parameters:    Size  Location     Type
  3566 ;;		None
  3567 ;; Auto vars:     Size  Location     Type
  3568 ;;		None
  3569 ;; Return value:  Size  Location     Type
  3570 ;;                  1    wreg      void 
  3571 ;; Registers used:
  3572 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3573 ;; Tracked objects:
  3574 ;;		On entry : 0/0
  3575 ;;		On exit  : 0/0
  3576 ;;		Unchanged: 0/0
  3577 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3578 ;;      Params:         0       0       0       0       0
  3579 ;;      Locals:         0       0       0       0       0
  3580 ;;      Temps:          0       0       0       0       0
  3581 ;;      Totals:         0       0       0       0       0
  3582 ;;Total ram usage:        0 bytes
  3583 ;; Hardware stack levels used:    1
  3584 ;; Hardware stack levels required when called:    3
  3585 ;; This function calls:
  3586 ;;		_dbg_init
  3587 ;;		_eeprom_read_int
  3588 ;;		_max7219_init1
  3589 ;;		_srand
  3590 ;; This function is called by:
  3591 ;;		_main
  3592 ;; This function uses a non-reentrant model
  3593 ;;
  3594                           
  3595                           
  3596                           ;psect for function _main_init
  3597  1A9D                     _main_init:	
  3598                           
  3599                           ;main.c: 68: max7219_init1();
  3600                           
  3601                           ;incstack = 0
  3602                           ; Regs used in _main_init: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3603  1A9D  160A  118A  2529  160A  158A  	fcall	_max7219_init1
  3604                           
  3605                           ;main.c: 70: dbg_init();
  3606  1AA2  160A  158A  217F  160A  158A  	fcall	_dbg_init
  3607                           
  3608                           ;main.c: 75: Seed = eeprom_read_int(0);
  3609  1AA7  3000               	movlw	0
  3610  1AA8  160A  158A  249A  160A  158A  	fcall	_eeprom_read_int
  3611  1AAD  1283               	bcf	3,5	;RP0=0, select bank0
  3612  1AAE  1303               	bcf	3,6	;RP1=0, select bank0
  3613  1AAF  0836               	movf	?_eeprom_read_int+1,w
  3614  1AB0  1683               	bsf	3,5	;RP0=1, select bank1
  3615  1AB1  1303               	bcf	3,6	;RP1=0, select bank1
  3616  1AB2  00D4               	movwf	(_Seed+1)^(0+128)
  3617  1AB3  1283               	bcf	3,5	;RP0=0, select bank0
  3618  1AB4  1303               	bcf	3,6	;RP1=0, select bank0
  3619  1AB5  0835               	movf	?_eeprom_read_int,w
  3620  1AB6  1683               	bsf	3,5	;RP0=1, select bank1
  3621  1AB7  1303               	bcf	3,6	;RP1=0, select bank1
  3622  1AB8  00D3               	movwf	_Seed^(0+128)
  3623                           
  3624                           ;main.c: 76: srand(Seed);
  3625  1AB9  0854               	movf	(_Seed+1)^(0+128),w
  3626  1ABA  00F1               	movwf	srand@x+1
  3627  1ABB  0853               	movf	_Seed^(0+128),w
  3628  1ABC  00F0               	movwf	srand@x
  3629  1ABD  160A  158A  218F   	fcall	_srand
  3630  1AC0  0008               	return
  3631  1AC1                     __end_of_main_init:	
  3632                           
  3633                           	psect	text2
  3634  198F                     __ptext2:	
  3635 ;; *************** function _srand *****************
  3636 ;; Defined at:
  3637 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\rand.c"
  3638 ;; Parameters:    Size  Location     Type
  3639 ;;  x               2    0[COMMON] unsigned int 
  3640 ;; Auto vars:     Size  Location     Type
  3641 ;;		None
  3642 ;; Return value:  Size  Location     Type
  3643 ;;                  1    wreg      void 
  3644 ;; Registers used:
  3645 ;;		wreg
  3646 ;; Tracked objects:
  3647 ;;		On entry : 0/0
  3648 ;;		On exit  : 0/0
  3649 ;;		Unchanged: 0/0
  3650 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3651 ;;      Params:         2       0       0       0       0
  3652 ;;      Locals:         0       0       0       0       0
  3653 ;;      Temps:          0       0       0       0       0
  3654 ;;      Totals:         2       0       0       0       0
  3655 ;;Total ram usage:        2 bytes
  3656 ;; Hardware stack levels used:    1
  3657 ;; This function calls:
  3658 ;;		Nothing
  3659 ;; This function is called by:
  3660 ;;		_main_init
  3661 ;; This function uses a non-reentrant model
  3662 ;;
  3663                           
  3664                           
  3665                           ;psect for function _srand
  3666  198F                     _srand:	
  3667                           
  3668                           ;incstack = 0
  3669                           ; Regs used in _srand: [wreg]
  3670  198F  0870               	movf	srand@x,w
  3671  1990  1683               	bsf	3,5	;RP0=1, select bank1
  3672  1991  1303               	bcf	3,6	;RP1=0, select bank1
  3673  1992  00E8               	movwf	_randx^(0+128)
  3674  1993  0871               	movf	srand@x+1,w
  3675  1994  00E9               	movwf	(_randx^(0+128)+1)
  3676  1995  01EA               	clrf	(_randx^(0+128)+2)
  3677  1996  01EB               	clrf	(_randx^(0+128)+3)
  3678  1997  0008               	return
  3679  1998                     __end_of_srand:	
  3680                           
  3681                           	psect	text3
  3682  1529                     __ptext3:	
  3683 ;; *************** function _max7219_init1 *****************
  3684 ;; Defined at:
  3685 ;;		line 87 in file "../max7219.h"
  3686 ;; Parameters:    Size  Location     Type
  3687 ;;		None
  3688 ;; Auto vars:     Size  Location     Type
  3689 ;;  matrix         16    1[BANK0 ] struct .
  3690 ;; Return value:  Size  Location     Type
  3691 ;;                  1    wreg      void 
  3692 ;; Registers used:
  3693 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3694 ;; Tracked objects:
  3695 ;;		On entry : 0/0
  3696 ;;		On exit  : 0/0
  3697 ;;		Unchanged: 0/0
  3698 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3699 ;;      Params:         0       0       0       0       0
  3700 ;;      Locals:         0      16       0       0       0
  3701 ;;      Temps:          0       1       0       0       0
  3702 ;;      Totals:         0      17       0       0       0
  3703 ;;Total ram usage:       17 bytes
  3704 ;; Hardware stack levels used:    1
  3705 ;; Hardware stack levels required when called:    2
  3706 ;; This function calls:
  3707 ;;		_Write_Matrix
  3708 ;;		_memset
  3709 ;; This function is called by:
  3710 ;;		_main_init
  3711 ;; This function uses a non-reentrant model
  3712 ;;
  3713                           
  3714                           
  3715                           ;psect for function _max7219_init1
  3716  1529                     _max7219_init1:	
  3717                           
  3718                           ;max7219.h: 89: (TRISAbits.TRISA3 = 0);
  3719                           
  3720                           ;incstack = 0
  3721                           ; Regs used in _max7219_init1: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3722  1529  1683               	bsf	3,5	;RP0=1, select bank1
  3723  152A  1303               	bcf	3,6	;RP1=0, select bank1
  3724  152B  1185               	bcf	5,3	;volatile
  3725                           
  3726                           ;max7219.h: 90: (TRISAbits.TRISA2 = 0);
  3727  152C  1105               	bcf	5,2	;volatile
  3728                           
  3729                           ;max7219.h: 91: (TRISAbits.TRISA1 = 0);
  3730  152D  1085               	bcf	5,1	;volatile
  3731                           
  3732                           ;max7219.h: 93: ANSELbits.ANS1 = 0;
  3733  152E  1683               	bsf	3,5	;RP0=1, select bank3
  3734  152F  1703               	bsf	3,6	;RP1=1, select bank3
  3735  1530  1088               	bcf	8,1	;volatile
  3736                           
  3737                           ;max7219.h: 94: ANSELbits.ANS2 = 0;
  3738  1531  1108               	bcf	8,2	;volatile
  3739                           
  3740                           ;max7219.h: 95: ANSELbits.ANS3 = 0;
  3741  1532  1188               	bcf	8,3	;volatile
  3742                           
  3743                           ;max7219.h: 96: RA2 = 1;
  3744  1533  1283               	bcf	3,5	;RP0=0, select bank0
  3745  1534  1303               	bcf	3,6	;RP1=0, select bank0
  3746  1535  1505               	bsf	5,2	;volatile
  3747                           
  3748                           ;max7219.h: 97: RA1 = 0;
  3749  1536  1085               	bcf	5,1	;volatile
  3750                           
  3751                           ;max7219.h: 99: MATRIX_MATRIX7219 matrix;
  3752                           ;max7219.h: 101: memset(&matrix, 0x00, sizeof(MATRIX_MATRIX7219));
  3753  1537  3000               	movlw	0
  3754  1538  00F0               	movwf	memset@c
  3755  1539  00F1               	movwf	memset@c+1
  3756  153A  3010               	movlw	16
  3757  153B  00F2               	movwf	memset@n
  3758  153C  3000               	movlw	0
  3759  153D  00F3               	movwf	memset@n+1
  3760  153E  3021               	movlw	(low (max7219_init1@matrix| 0))& (0+255)
  3761  153F  120A  158A  24F4  160A  118A  	fcall	_memset
  3762                           
  3763                           ;max7219.h: 102: Write_Matrix(&matrix, 0, 0x09);
  3764  1544  01F4               	clrf	Write_Matrix@option
  3765  1545  3009               	movlw	9
  3766  1546  1283               	bcf	3,5	;RP0=0, select bank0
  3767  1547  1303               	bcf	3,6	;RP1=0, select bank0
  3768  1548  00A0               	movwf	??_max7219_init1
  3769  1549  0820               	movf	??_max7219_init1,w
  3770  154A  00F5               	movwf	Write_Matrix@column
  3771  154B  3021               	movlw	(low (max7219_init1@matrix| 0))& (0+255)
  3772  154C  160A  118A  2107  160A  118A  	fcall	_Write_Matrix
  3773                           
  3774                           ;max7219.h: 104: memset(&matrix, 0x0F, sizeof(MATRIX_MATRIX7219));
  3775  1551  300F               	movlw	15
  3776  1552  00F0               	movwf	memset@c
  3777  1553  3000               	movlw	0
  3778  1554  00F1               	movwf	memset@c+1
  3779  1555  3010               	movlw	16
  3780  1556  00F2               	movwf	memset@n
  3781  1557  3000               	movlw	0
  3782  1558  00F3               	movwf	memset@n+1
  3783  1559  3021               	movlw	(low (max7219_init1@matrix| 0))& (0+255)
  3784  155A  120A  158A  24F4  160A  118A  	fcall	_memset
  3785                           
  3786                           ;max7219.h: 105: Write_Matrix(&matrix, 0, 0x0A);
  3787  155F  01F4               	clrf	Write_Matrix@option
  3788  1560  300A               	movlw	10
  3789  1561  1283               	bcf	3,5	;RP0=0, select bank0
  3790  1562  1303               	bcf	3,6	;RP1=0, select bank0
  3791  1563  00A0               	movwf	??_max7219_init1
  3792  1564  0820               	movf	??_max7219_init1,w
  3793  1565  00F5               	movwf	Write_Matrix@column
  3794  1566  3021               	movlw	(low (max7219_init1@matrix| 0))& (0+255)
  3795  1567  160A  118A  2107  160A  118A  	fcall	_Write_Matrix
  3796                           
  3797                           ;max7219.h: 107: memset(&matrix, 0x07, sizeof(MATRIX_MATRIX7219));
  3798  156C  3007               	movlw	7
  3799  156D  00F0               	movwf	memset@c
  3800  156E  3000               	movlw	0
  3801  156F  00F1               	movwf	memset@c+1
  3802  1570  3010               	movlw	16
  3803  1571  00F2               	movwf	memset@n
  3804  1572  3000               	movlw	0
  3805  1573  00F3               	movwf	memset@n+1
  3806  1574  3021               	movlw	(low (max7219_init1@matrix| 0))& (0+255)
  3807  1575  120A  158A  24F4  160A  118A  	fcall	_memset
  3808                           
  3809                           ;max7219.h: 108: Write_Matrix(&matrix, 0, 0x0B);
  3810  157A  01F4               	clrf	Write_Matrix@option
  3811  157B  300B               	movlw	11
  3812  157C  1283               	bcf	3,5	;RP0=0, select bank0
  3813  157D  1303               	bcf	3,6	;RP1=0, select bank0
  3814  157E  00A0               	movwf	??_max7219_init1
  3815  157F  0820               	movf	??_max7219_init1,w
  3816  1580  00F5               	movwf	Write_Matrix@column
  3817  1581  3021               	movlw	(low (max7219_init1@matrix| 0))& (0+255)
  3818  1582  160A  118A  2107  160A  118A  	fcall	_Write_Matrix
  3819                           
  3820                           ;max7219.h: 110: memset(&matrix, 0x01, sizeof(MATRIX_MATRIX7219));
  3821  1587  3001               	movlw	1
  3822  1588  00F0               	movwf	memset@c
  3823  1589  3000               	movlw	0
  3824  158A  00F1               	movwf	memset@c+1
  3825  158B  3010               	movlw	16
  3826  158C  00F2               	movwf	memset@n
  3827  158D  3000               	movlw	0
  3828  158E  00F3               	movwf	memset@n+1
  3829  158F  3021               	movlw	(low (max7219_init1@matrix| 0))& (0+255)
  3830  1590  120A  158A  24F4  160A  118A  	fcall	_memset
  3831                           
  3832                           ;max7219.h: 111: Write_Matrix(&matrix, 0, 0x0C);
  3833  1595  01F4               	clrf	Write_Matrix@option
  3834  1596  300C               	movlw	12
  3835  1597  1283               	bcf	3,5	;RP0=0, select bank0
  3836  1598  1303               	bcf	3,6	;RP1=0, select bank0
  3837  1599  00A0               	movwf	??_max7219_init1
  3838  159A  0820               	movf	??_max7219_init1,w
  3839  159B  00F5               	movwf	Write_Matrix@column
  3840  159C  3021               	movlw	(low (max7219_init1@matrix| 0))& (0+255)
  3841  159D  160A  118A  2107  160A  118A  	fcall	_Write_Matrix
  3842                           
  3843                           ;max7219.h: 113: memset(&matrix, 0xFF, sizeof(MATRIX_MATRIX7219));
  3844  15A2  30FF               	movlw	255
  3845  15A3  00F0               	movwf	memset@c
  3846  15A4  3000               	movlw	0
  3847  15A5  00F1               	movwf	memset@c+1
  3848  15A6  3010               	movlw	16
  3849  15A7  00F2               	movwf	memset@n
  3850  15A8  3000               	movlw	0
  3851  15A9  00F3               	movwf	memset@n+1
  3852  15AA  3021               	movlw	(low (max7219_init1@matrix| 0))& (0+255)
  3853  15AB  120A  158A  24F4  160A  118A  	fcall	_memset
  3854                           
  3855                           ;max7219.h: 114: Write_Matrix(&matrix, 0, 0x00);
  3856  15B0  01F4               	clrf	Write_Matrix@option
  3857  15B1  01F5               	clrf	Write_Matrix@column
  3858  15B2  3021               	movlw	(low (max7219_init1@matrix| 0))& (0+255)
  3859  15B3  160A  118A  2107   	fcall	_Write_Matrix
  3860  15B6  0008               	return
  3861  15B7                     __end_of_max7219_init1:	
  3862                           
  3863                           	psect	text4
  3864  1C9A                     __ptext4:	
  3865 ;; *************** function _eeprom_read_int *****************
  3866 ;; Defined at:
  3867 ;;		line 12 in file "../eeprom_operator.h"
  3868 ;; Parameters:    Size  Location     Type
  3869 ;;  at              1    wreg     unsigned char 
  3870 ;; Auto vars:     Size  Location     Type
  3871 ;;  at              1   27[BANK0 ] unsigned char 
  3872 ;;  n               2   25[BANK0 ] int 
  3873 ;;  value           2   28[BANK0 ] unsigned int 
  3874 ;; Return value:  Size  Location     Type
  3875 ;;                  2   21[BANK0 ] unsigned int 
  3876 ;; Registers used:
  3877 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3878 ;; Tracked objects:
  3879 ;;		On entry : 0/0
  3880 ;;		On exit  : 0/0
  3881 ;;		Unchanged: 0/0
  3882 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3883 ;;      Params:         0       2       0       0       0
  3884 ;;      Locals:         0       5       0       0       0
  3885 ;;      Temps:          0       2       0       0       0
  3886 ;;      Totals:         0       9       0       0       0
  3887 ;;Total ram usage:        9 bytes
  3888 ;; Hardware stack levels used:    1
  3889 ;; Hardware stack levels required when called:    2
  3890 ;; This function calls:
  3891 ;;		_USARTWriteString
  3892 ;;		_eeprom_read
  3893 ;;		_sprintf
  3894 ;; This function is called by:
  3895 ;;		_main_init
  3896 ;; This function uses a non-reentrant model
  3897 ;;
  3898                           
  3899                           
  3900                           ;psect for function _eeprom_read_int
  3901  1C9A                     _eeprom_read_int:	
  3902                           
  3903                           ;incstack = 0
  3904                           ; Regs used in _eeprom_read_int: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3905                           ;eeprom_read_int@at stored from wreg
  3906  1C9A  1283               	bcf	3,5	;RP0=0, select bank0
  3907  1C9B  1303               	bcf	3,6	;RP1=0, select bank0
  3908  1C9C  00BB               	movwf	eeprom_read_int@at
  3909                           
  3910                           ;eeprom_operator.h: 14: uint16_t value = 0;
  3911  1C9D  01BC               	clrf	eeprom_read_int@value
  3912  1C9E  01BD               	clrf	eeprom_read_int@value+1
  3913                           
  3914                           ;eeprom_operator.h: 15: value = eeprom_read(at) << 8;
  3915  1C9F  083B               	movf	eeprom_read_int@at,w
  3916  1CA0  160A  158A  2218  160A  158A  	fcall	_eeprom_read
  3917  1CA5  1283               	bcf	3,5	;RP0=0, select bank0
  3918  1CA6  1303               	bcf	3,6	;RP1=0, select bank0
  3919  1CA7  00B7               	movwf	??_eeprom_read_int
  3920  1CA8  01B8               	clrf	??_eeprom_read_int+1
  3921  1CA9  0837               	movf	??_eeprom_read_int,w
  3922  1CAA  00B8               	movwf	??_eeprom_read_int+1
  3923  1CAB  01B7               	clrf	??_eeprom_read_int
  3924  1CAC  0837               	movf	??_eeprom_read_int,w
  3925  1CAD  00BC               	movwf	eeprom_read_int@value
  3926  1CAE  0838               	movf	??_eeprom_read_int+1,w
  3927  1CAF  00BD               	movwf	eeprom_read_int@value+1
  3928                           
  3929                           ;eeprom_operator.h: 16: value += eeprom_read(at + 1);
  3930  1CB0  083B               	movf	eeprom_read_int@at,w
  3931  1CB1  3E01               	addlw	1
  3932  1CB2  160A  158A  2218   	fcall	_eeprom_read
  3933  1CB5  1283               	bcf	3,5	;RP0=0, select bank0
  3934  1CB6  1303               	bcf	3,6	;RP1=0, select bank0
  3935  1CB7  00B7               	movwf	??_eeprom_read_int
  3936  1CB8  01B8               	clrf	??_eeprom_read_int+1
  3937  1CB9  0837               	movf	??_eeprom_read_int,w
  3938  1CBA  07BC               	addwf	eeprom_read_int@value,f
  3939  1CBB  1803               	skipnc
  3940  1CBC  0ABD               	incf	eeprom_read_int@value+1,f
  3941  1CBD  0838               	movf	??_eeprom_read_int+1,w
  3942  1CBE  07BD               	addwf	eeprom_read_int@value+1,f
  3943                           
  3944                           ;eeprom_operator.h: 18: return value;
  3945                           
  3946                           ;eeprom_operator.h: 17: do { if(0) { int n = sprintf(g_debug, "eeprom_read_int = %d""\r\
      +                          n", value); if(n > 64) { USARTWriteString("ERROR: g_debug is overflowed\r\n"); do { ((vo
      +                          id)0); asm("ljmp $"); }while(0); } USARTWriteString(g_debug); } } while (0);;
  3947  1CBF  1283               	bcf	3,5	;RP0=0, select bank0
  3948  1CC0  1303               	bcf	3,6	;RP1=0, select bank0
  3949  1CC1  083D               	movf	eeprom_read_int@value+1,w
  3950  1CC2  00B6               	movwf	?_eeprom_read_int+1
  3951  1CC3  083C               	movf	eeprom_read_int@value,w
  3952  1CC4  00B5               	movwf	?_eeprom_read_int
  3953  1CC5  0008               	return
  3954  1CC6  160A  158A  2C9A   	ljmp	$	;# 
  3955  1CC9                     __end_of_eeprom_read_int:	
  3956                           
  3957                           	psect	text5
  3958  1A18                     __ptext5:	
  3959 ;; *************** function _eeprom_read *****************
  3960 ;; Defined at:
  3961 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\pic\eeread.c"
  3962 ;; Parameters:    Size  Location     Type
  3963 ;;  addr            1    wreg     unsigned char 
  3964 ;; Auto vars:     Size  Location     Type
  3965 ;;  addr            1    1[COMMON] unsigned char 
  3966 ;; Return value:  Size  Location     Type
  3967 ;;                  1    wreg      unsigned char 
  3968 ;; Registers used:
  3969 ;;		wreg, status,2, status,0
  3970 ;; Tracked objects:
  3971 ;;		On entry : 0/0
  3972 ;;		On exit  : 0/0
  3973 ;;		Unchanged: 0/0
  3974 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3975 ;;      Params:         0       0       0       0       0
  3976 ;;      Locals:         1       0       0       0       0
  3977 ;;      Temps:          1       0       0       0       0
  3978 ;;      Totals:         2       0       0       0       0
  3979 ;;Total ram usage:        2 bytes
  3980 ;; Hardware stack levels used:    1
  3981 ;; This function calls:
  3982 ;;		Nothing
  3983 ;; This function is called by:
  3984 ;;		_eeprom_read_int
  3985 ;; This function uses a non-reentrant model
  3986 ;;
  3987                           
  3988                           
  3989                           ;psect for function _eeprom_read
  3990  1A18                     _eeprom_read:	
  3991                           
  3992                           ;incstack = 0
  3993                           ; Regs used in _eeprom_read: [wreg+status,2+status,0]
  3994                           ;eeprom_read@addr stored from wreg
  3995  1A18  00F1               	movwf	eeprom_read@addr
  3996  1A19                     l1014:	
  3997  1A19  0064               	clrwdt	;# 
  3998  1A1A  1683               	bsf	3,5	;RP0=1, select bank3
  3999  1A1B  1703               	bsf	3,6	;RP1=1, select bank3
  4000  1A1C  188C               	btfsc	12,1	;volsfr
  4001  1A1D  2A19               	goto	l1014
  4002  1A1E  0871               	movf	eeprom_read@addr,w
  4003  1A1F  1283               	bcf	3,5	;RP0=0, select bank2
  4004  1A20  1703               	bsf	3,6	;RP1=1, select bank2
  4005  1A21  008D               	movwf	13	;volatile
  4006  1A22  303F               	movlw	63
  4007  1A23  00F0               	movwf	??_eeprom_read
  4008  1A24  0870               	movf	??_eeprom_read,w
  4009  1A25  1683               	bsf	3,5	;RP0=1, select bank3
  4010  1A26  1703               	bsf	3,6	;RP1=1, select bank3
  4011  1A27  058C               	andwf	12,f	;volsfr
  4012  1A28  140C               	bsf	12,0	;volsfr
  4013  1A29  1003               	clrc
  4014  1A2A  180C               	btfsc	12,0	;volsfr
  4015  1A2B  1403               	setc
  4016  1A2C  3000               	movlw	0
  4017  1A2D  1803               	skipnc
  4018  1A2E  3001               	movlw	1
  4019  1A2F  1283               	bcf	3,5	;RP0=0, select bank2
  4020  1A30  1703               	bsf	3,6	;RP1=1, select bank2
  4021  1A31  080C               	movf	12,w	;volatile
  4022  1A32  0008               	return
  4023  1A33                     __end_of_eeprom_read:	
  4024                           
  4025                           	psect	text6
  4026  197F                     __ptext6:	
  4027 ;; *************** function _dbg_init *****************
  4028 ;; Defined at:
  4029 ;;		line 116 in file "../debug_uart.h"
  4030 ;; Parameters:    Size  Location     Type
  4031 ;;		None
  4032 ;; Auto vars:     Size  Location     Type
  4033 ;;		None
  4034 ;; Return value:  Size  Location     Type
  4035 ;;                  1    wreg      void 
  4036 ;; Registers used:
  4037 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4038 ;; Tracked objects:
  4039 ;;		On entry : 0/0
  4040 ;;		On exit  : 0/0
  4041 ;;		Unchanged: 0/0
  4042 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4043 ;;      Params:         0       0       0       0       0
  4044 ;;      Locals:         0       0       0       0       0
  4045 ;;      Temps:          0       0       0       0       0
  4046 ;;      Totals:         0       0       0       0       0
  4047 ;;Total ram usage:        0 bytes
  4048 ;; Hardware stack levels used:    1
  4049 ;; Hardware stack levels required when called:    1
  4050 ;; This function calls:
  4051 ;;		_USARTInit
  4052 ;; This function is called by:
  4053 ;;		_main_init
  4054 ;; This function uses a non-reentrant model
  4055 ;;
  4056                           
  4057                           
  4058                           ;psect for function _dbg_init
  4059  197F                     _dbg_init:	
  4060                           
  4061                           ;debug_uart.h: 118: USARTInit(9600);
  4062                           
  4063                           ;incstack = 0
  4064                           ; Regs used in _dbg_init: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4065  197F  3080               	movlw	128
  4066  1980  00F0               	movwf	USARTInit@baud_rate
  4067  1981  3025               	movlw	37
  4068  1982  00F1               	movwf	USARTInit@baud_rate+1
  4069  1983  160A  158A  262C   	fcall	_USARTInit
  4070  1986  0008               	return
  4071  1987                     __end_of_dbg_init:	
  4072                           
  4073                           	psect	text7
  4074  1E2C                     __ptext7:	
  4075 ;; *************** function _USARTInit *****************
  4076 ;; Defined at:
  4077 ;;		line 31 in file "../usart_pic16.c"
  4078 ;; Parameters:    Size  Location     Type
  4079 ;;  baud_rate       2    0[COMMON] unsigned int 
  4080 ;; Auto vars:     Size  Location     Type
  4081 ;;		None
  4082 ;; Return value:  Size  Location     Type
  4083 ;;                  1    wreg      void 
  4084 ;; Registers used:
  4085 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  4086 ;; Tracked objects:
  4087 ;;		On entry : 0/0
  4088 ;;		On exit  : 0/0
  4089 ;;		Unchanged: 0/0
  4090 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4091 ;;      Params:         2       0       0       0       0
  4092 ;;      Locals:         0       0       0       0       0
  4093 ;;      Temps:          0       0       0       0       0
  4094 ;;      Totals:         2       0       0       0       0
  4095 ;;Total ram usage:        2 bytes
  4096 ;; Hardware stack levels used:    1
  4097 ;; This function calls:
  4098 ;;		Nothing
  4099 ;; This function is called by:
  4100 ;;		_dbg_init
  4101 ;; This function uses a non-reentrant model
  4102 ;;
  4103                           
  4104                           
  4105                           ;psect for function _USARTInit
  4106  1E2C                     _USARTInit:	
  4107                           
  4108                           ;usart_pic16.c: 33: switch (baud_rate) {
  4109                           
  4110                           ;incstack = 0
  4111                           ; Regs used in _USARTInit: [wreg-fsr0h+status,2+status,0]
  4112  1E2C  2E38               	goto	l4052
  4113  1E2D                     l4042:	
  4114                           ;usart_pic16.c: 34: case 9600:
  4115                           
  4116                           
  4117                           ;usart_pic16.c: 35: SPBRG = 129;
  4118  1E2D  3081               	movlw	129
  4119  1E2E  2E34               	goto	L3
  4120  1E2F                     l4044:	
  4121                           ;usart_pic16.c: 37: case 19200:
  4122                           
  4123                           ;usart_pic16.c: 36: break;
  4124                           
  4125                           
  4126                           ;usart_pic16.c: 38: SPBRG = 64;
  4127  1E2F  3040               	movlw	64
  4128  1E30  2E34               	goto	L3
  4129  1E31                     l4046:	
  4130                           ;usart_pic16.c: 40: case 28800:
  4131                           
  4132                           ;usart_pic16.c: 39: break;
  4133                           
  4134                           
  4135                           ;usart_pic16.c: 41: SPBRG = 42;
  4136  1E31  302A               	movlw	42
  4137  1E32  2E34               	goto	L3
  4138  1E33                     l4048:	
  4139                           ;usart_pic16.c: 43: case 33600:
  4140                           
  4141                           ;usart_pic16.c: 42: break;
  4142                           
  4143                           
  4144                           ;usart_pic16.c: 44: SPBRG = 36;
  4145  1E33  3024               	movlw	36
  4146  1E34                     L3:	
  4147  1E34  1683               	bsf	3,5	;RP0=1, select bank1
  4148  1E35  1303               	bcf	3,6	;RP1=0, select bank1
  4149  1E36  0099               	movwf	25	;volatile
  4150                           
  4151                           ;usart_pic16.c: 46: }
  4152                           
  4153                           ;usart_pic16.c: 45: break;
  4154  1E37  2E5A               	goto	l916
  4155  1E38                     l4052:	
  4156                           
  4157                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 4 sub-sw
      +                          itches
  4158                           ; Switch size 1, requested type "space"
  4159                           ; Number of cases is 4, Range of values is 37 to 131
  4160                           ; switch strategies available:
  4161                           ; Name         Instructions Cycles
  4162                           ; simple_byte           13     7 (average)
  4163                           ; jumptable            263     9 (fixed)
  4164                           ;	Chosen strategy is simple_byte
  4165  1E38  0871               	movf	USARTInit@baud_rate+1,w
  4166  1E39  3A25               	xorlw	37	; case 37
  4167  1E3A  1903               	skipnz
  4168  1E3B  2E46               	goto	l5830
  4169  1E3C  3A6E               	xorlw	110	; case 75
  4170  1E3D  1903               	skipnz
  4171  1E3E  2E4B               	goto	l5832
  4172  1E3F  3A3B               	xorlw	59	; case 112
  4173  1E40  1903               	skipnz
  4174  1E41  2E50               	goto	l5834
  4175  1E42  3AF3               	xorlw	243	; case 131
  4176  1E43  1903               	skipnz
  4177  1E44  2E55               	goto	l5836
  4178  1E45  2E5A               	goto	l916
  4179  1E46                     l5830:	
  4180                           
  4181                           ; Switch size 1, requested type "space"
  4182                           ; Number of cases is 1, Range of values is 128 to 128
  4183                           ; switch strategies available:
  4184                           ; Name         Instructions Cycles
  4185                           ; simple_byte            4     3 (average)
  4186                           ; direct_byte           14    11 (fixed)
  4187                           ; jumptable            263     9 (fixed)
  4188                           ;	Chosen strategy is simple_byte
  4189  1E46  0870               	movf	USARTInit@baud_rate,w
  4190  1E47  3A80               	xorlw	128	; case 128
  4191  1E48  1903               	skipnz
  4192  1E49  2E2D               	goto	l4042
  4193  1E4A  2E5A               	goto	l916
  4194  1E4B                     l5832:	
  4195                           
  4196                           ; Switch size 1, requested type "space"
  4197                           ; Number of cases is 1, Range of values is 0 to 0
  4198                           ; switch strategies available:
  4199                           ; Name         Instructions Cycles
  4200                           ; simple_byte            4     3 (average)
  4201                           ; direct_byte           11     8 (fixed)
  4202                           ; jumptable            260     6 (fixed)
  4203                           ;	Chosen strategy is simple_byte
  4204  1E4B  0870               	movf	USARTInit@baud_rate,w
  4205  1E4C  3A00               	xorlw	0	; case 0
  4206  1E4D  1903               	skipnz
  4207  1E4E  2E2F               	goto	l4044
  4208  1E4F  2E5A               	goto	l916
  4209  1E50                     l5834:	
  4210                           
  4211                           ; Switch size 1, requested type "space"
  4212                           ; Number of cases is 1, Range of values is 128 to 128
  4213                           ; switch strategies available:
  4214                           ; Name         Instructions Cycles
  4215                           ; simple_byte            4     3 (average)
  4216                           ; direct_byte           14    11 (fixed)
  4217                           ; jumptable            263     9 (fixed)
  4218                           ;	Chosen strategy is simple_byte
  4219  1E50  0870               	movf	USARTInit@baud_rate,w
  4220  1E51  3A80               	xorlw	128	; case 128
  4221  1E52  1903               	skipnz
  4222  1E53  2E31               	goto	l4046
  4223  1E54  2E5A               	goto	l916
  4224  1E55                     l5836:	
  4225                           
  4226                           ; Switch size 1, requested type "space"
  4227                           ; Number of cases is 1, Range of values is 64 to 64
  4228                           ; switch strategies available:
  4229                           ; Name         Instructions Cycles
  4230                           ; simple_byte            4     3 (average)
  4231                           ; direct_byte           14    11 (fixed)
  4232                           ; jumptable            263     9 (fixed)
  4233                           ;	Chosen strategy is simple_byte
  4234  1E55  0870               	movf	USARTInit@baud_rate,w
  4235  1E56  3A40               	xorlw	64	; case 64
  4236  1E57  1903               	skipnz
  4237  1E58  2E33               	goto	l4048
  4238  1E59  2E5A               	goto	l916
  4239  1E5A                     l916:	
  4240                           
  4241                           ;usart_pic16.c: 49: TXSTAbits.TX9 = 0;
  4242  1E5A  1683               	bsf	3,5	;RP0=1, select bank1
  4243  1E5B  1303               	bcf	3,6	;RP1=0, select bank1
  4244  1E5C  1318               	bcf	24,6	;volatile
  4245                           
  4246                           ;usart_pic16.c: 50: TXSTAbits.TXEN = 1;
  4247  1E5D  1698               	bsf	24,5	;volatile
  4248                           
  4249                           ;usart_pic16.c: 51: TXSTAbits.SYNC = 0;
  4250  1E5E  1218               	bcf	24,4	;volatile
  4251                           
  4252                           ;usart_pic16.c: 52: TXSTAbits.BRGH = 1;
  4253  1E5F  1518               	bsf	24,2	;volatile
  4254                           
  4255                           ;usart_pic16.c: 55: RCSTAbits.SPEN = 1;
  4256  1E60  1283               	bcf	3,5	;RP0=0, select bank0
  4257  1E61  1303               	bcf	3,6	;RP1=0, select bank0
  4258  1E62  1798               	bsf	24,7	;volatile
  4259                           
  4260                           ;usart_pic16.c: 56: RCSTAbits.RX9 = 0;
  4261  1E63  1318               	bcf	24,6	;volatile
  4262                           
  4263                           ;usart_pic16.c: 57: RCSTAbits.CREN = 1;
  4264  1E64  1618               	bsf	24,4	;volatile
  4265                           
  4266                           ;usart_pic16.c: 58: RCSTAbits.ADDEN = 0;
  4267  1E65  1198               	bcf	24,3	;volatile
  4268                           
  4269                           ;usart_pic16.c: 61: RCIE = 1;
  4270  1E66  1683               	bsf	3,5	;RP0=1, select bank1
  4271  1E67  1303               	bcf	3,6	;RP1=0, select bank1
  4272  1E68  168C               	bsf	12,5	;volatile
  4273                           
  4274                           ;usart_pic16.c: 62: PEIE = 1;
  4275  1E69  170B               	bsf	11,6	;volatile
  4276                           
  4277                           ;usart_pic16.c: 64: (GIE = 1);
  4278  1E6A  178B               	bsf	11,7	;volatile
  4279  1E6B  0008               	return
  4280  1E6C                     __end_of_USARTInit:	
  4281                           
  4282                           	psect	text8
  4283  139B                     __ptext8:	
  4284 ;; *************** function _lg_merge *****************
  4285 ;; Defined at:
  4286 ;;		line 234 in file "../logic.h"
  4287 ;; Parameters:    Size  Location     Type
  4288 ;;  x               1    wreg     char 
  4289 ;;  y               1   50[BANK0 ] char 
  4290 ;;  matrix4x4       2   51[BANK0 ] PTR const struct .
  4291 ;;		 -> NULL(0), g_matrix4x4(96), 
  4292 ;;  matrix16x8      1   53[BANK0 ] PTR struct .
  4293 ;;		 -> g_matrix16x8(16), 
  4294 ;; Auto vars:     Size  Location     Type
  4295 ;;  x               1   56[BANK0 ] char 
  4296 ;;  col             1   58[BANK0 ] unsigned char 
  4297 ;;  row             1   57[BANK0 ] unsigned char 
  4298 ;; Return value:  Size  Location     Type
  4299 ;;                  1    wreg      void 
  4300 ;; Registers used:
  4301 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  4302 ;; Tracked objects:
  4303 ;;		On entry : 0/0
  4304 ;;		On exit  : 0/0
  4305 ;;		Unchanged: 0/0
  4306 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4307 ;;      Params:         0       4       0       0       0
  4308 ;;      Locals:         0       3       0       0       0
  4309 ;;      Temps:          0       2       0       0       0
  4310 ;;      Totals:         0       9       0       0       0
  4311 ;;Total ram usage:        9 bytes
  4312 ;; Hardware stack levels used:    1
  4313 ;; Hardware stack levels required when called:    4
  4314 ;; This function calls:
  4315 ;;		_dbg_print_MATRIX16x8
  4316 ;;		_dbg_print_MATRIX4x4
  4317 ;;		_get_matrix_bit
  4318 ;;		_set_matrix_bit
  4319 ;; This function is called by:
  4320 ;;		_main
  4321 ;; This function uses a non-reentrant model
  4322 ;;
  4323                           
  4324                           
  4325                           ;psect for function _lg_merge
  4326  139B                     _lg_merge:	
  4327                           
  4328                           ;incstack = 0
  4329                           ; Regs used in _lg_merge: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  4330                           ;lg_merge@x stored from wreg
  4331  139B  1283               	bcf	3,5	;RP0=0, select bank0
  4332  139C  1303               	bcf	3,6	;RP1=0, select bank0
  4333  139D  00D8               	movwf	lg_merge@x
  4334                           
  4335                           ;logic.h: 236: dbg_print_MATRIX4x4(0, "Before merge MATRIX16x8", x, y, matrix4x4);
  4336  139E  30AB               	movlw	low (STR_97| (0+32768))
  4337  139F  00B5               	movwf	dbg_print_MATRIX4x4@lable
  4338  13A0  308A               	movlw	high (STR_97| (0+32768))
  4339  13A1  00B6               	movwf	dbg_print_MATRIX4x4@lable+1
  4340  13A2  0858               	movf	lg_merge@x,w
  4341  13A3  00D6               	movwf	??_lg_merge
  4342  13A4  0856               	movf	??_lg_merge,w
  4343  13A5  00B7               	movwf	dbg_print_MATRIX4x4@x
  4344  13A6  0852               	movf	lg_merge@y,w
  4345  13A7  00D7               	movwf	??_lg_merge+1
  4346  13A8  0857               	movf	??_lg_merge+1,w
  4347  13A9  00B8               	movwf	dbg_print_MATRIX4x4@y
  4348  13AA  0853               	movf	lg_merge@matrix4x4,w
  4349  13AB  00B9               	movwf	dbg_print_MATRIX4x4@matrix
  4350  13AC  0854               	movf	lg_merge@matrix4x4+1,w
  4351  13AD  00BA               	movwf	dbg_print_MATRIX4x4@matrix+1
  4352  13AE  3000               	movlw	0
  4353  13AF  120A  118A  2294  160A  118A  	fcall	_dbg_print_MATRIX4x4
  4354                           
  4355                           ;logic.h: 237: dbg_print_MATRIX16x8(0, "Before merge MATRIX16x8", matrix16x8);
  4356  13B4  30AB               	movlw	low (STR_97| (0+32768))
  4357  13B5  1283               	bcf	3,5	;RP0=0, select bank0
  4358  13B6  1303               	bcf	3,6	;RP1=0, select bank0
  4359  13B7  00B5               	movwf	dbg_print_MATRIX16x8@lable
  4360  13B8  308A               	movlw	high (STR_97| (0+32768))
  4361  13B9  00B6               	movwf	dbg_print_MATRIX16x8@lable+1
  4362  13BA  0855               	movf	lg_merge@matrix16x8,w
  4363  13BB  00B7               	movwf	dbg_print_MATRIX16x8@matrix
  4364  13BC  3000               	movlw	0
  4365  13BD  00B8               	movwf	dbg_print_MATRIX16x8@matrix+1
  4366  13BE  3000               	movlw	0
  4367  13BF  120A  118A  2107  160A  118A  	fcall	_dbg_print_MATRIX16x8
  4368                           
  4369                           ;logic.h: 239: for(uint8_t row = 0; row < 4; row++)
  4370  13C4  1283               	bcf	3,5	;RP0=0, select bank0
  4371  13C5  1303               	bcf	3,6	;RP1=0, select bank0
  4372  13C6  01D9               	clrf	lg_merge@row
  4373  13C7  3004               	movlw	4
  4374  13C8  0259               	subwf	lg_merge@row,w
  4375  13C9  1803               	btfsc	3,0
  4376  13CA  2C0D               	goto	l5110
  4377  13CB                     l5092:	
  4378                           
  4379                           ;logic.h: 240: {
  4380                           ;logic.h: 241: for(uint8_t col = 0; col < 4; col++)
  4381  13CB  01DA               	clrf	lg_merge@col
  4382  13CC  3004               	movlw	4
  4383  13CD  025A               	subwf	lg_merge@col,w
  4384  13CE  1803               	btfsc	3,0
  4385  13CF  2C05               	goto	l5106
  4386  13D0                     l5098:	
  4387                           
  4388                           ;logic.h: 242: {
  4389                           ;logic.h: 243: if(get_matrix_bit((uint8_t*)matrix4x4->row, row, col) == 1)
  4390  13D0  0853               	movf	lg_merge@matrix4x4,w
  4391  13D1  00F7               	movwf	get_matrix_bit@byte
  4392  13D2  0854               	movf	lg_merge@matrix4x4+1,w
  4393  13D3  00F8               	movwf	get_matrix_bit@byte+1
  4394  13D4  0859               	movf	lg_merge@row,w
  4395  13D5  00D6               	movwf	??_lg_merge
  4396  13D6  0856               	movf	??_lg_merge,w
  4397  13D7  00F9               	movwf	get_matrix_bit@row
  4398  13D8  085A               	movf	lg_merge@col,w
  4399  13D9  00D7               	movwf	??_lg_merge+1
  4400  13DA  0857               	movf	??_lg_merge+1,w
  4401  13DB  00FA               	movwf	get_matrix_bit@col
  4402  13DC  160A  158A  2198  160A  118A  	fcall	_get_matrix_bit
  4403  13E1  3A01               	xorlw	1
  4404  13E2  1D03               	skipz
  4405  13E3  2BFB               	goto	l5102
  4406                           
  4407                           ;logic.h: 244: {
  4408                           ;logic.h: 245: set_matrix_bit((uint8_t*)matrix16x8->row, y + row, x + col, 1);
  4409  13E4  1283               	bcf	3,5	;RP0=0, select bank0
  4410  13E5  1303               	bcf	3,6	;RP1=0, select bank0
  4411  13E6  0855               	movf	lg_merge@matrix16x8,w
  4412  13E7  00F6               	movwf	set_matrix_bit@byte
  4413  13E8  3000               	movlw	0
  4414  13E9  00F7               	movwf	set_matrix_bit@byte+1
  4415  13EA  0859               	movf	lg_merge@row,w
  4416  13EB  0752               	addwf	lg_merge@y,w
  4417  13EC  00D6               	movwf	??_lg_merge
  4418  13ED  0856               	movf	??_lg_merge,w
  4419  13EE  00F8               	movwf	set_matrix_bit@row
  4420  13EF  085A               	movf	lg_merge@col,w
  4421  13F0  0758               	addwf	lg_merge@x,w
  4422  13F1  00D7               	movwf	??_lg_merge+1
  4423  13F2  0857               	movf	??_lg_merge+1,w
  4424  13F3  00F9               	movwf	set_matrix_bit@col
  4425  13F4  01FA               	clrf	set_matrix_bit@value
  4426  13F5  0AFA               	incf	set_matrix_bit@value,f
  4427  13F6  160A  158A  21ED  160A  118A  	fcall	_set_matrix_bit
  4428  13FB                     l5102:	
  4429  13FB  3001               	movlw	1
  4430  13FC  1283               	bcf	3,5	;RP0=0, select bank0
  4431  13FD  1303               	bcf	3,6	;RP1=0, select bank0
  4432  13FE  00D6               	movwf	??_lg_merge
  4433  13FF  0856               	movf	??_lg_merge,w
  4434  1400  07DA               	addwf	lg_merge@col,f
  4435  1401  3004               	movlw	4
  4436  1402  025A               	subwf	lg_merge@col,w
  4437  1403  1C03               	skipc
  4438  1404  2BD0               	goto	l5098
  4439  1405                     l5106:	
  4440  1405  3001               	movlw	1
  4441  1406  00D6               	movwf	??_lg_merge
  4442  1407  0856               	movf	??_lg_merge,w
  4443  1408  07D9               	addwf	lg_merge@row,f
  4444  1409  3004               	movlw	4
  4445  140A  0259               	subwf	lg_merge@row,w
  4446  140B  1C03               	skipc
  4447  140C  2BCB               	goto	l5092
  4448  140D                     l5110:	
  4449                           
  4450                           ;logic.h: 246: }
  4451                           ;logic.h: 247: }
  4452                           ;logic.h: 248: }
  4453                           ;logic.h: 249: dbg_print_MATRIX16x8(0, "After merge MATRIX16x8", matrix16x8);
  4454  140D  3037               	movlw	low (STR_99| (0+32768))
  4455  140E  00B5               	movwf	dbg_print_MATRIX16x8@lable
  4456  140F  308B               	movlw	high (STR_99| (0+32768))
  4457  1410  00B6               	movwf	dbg_print_MATRIX16x8@lable+1
  4458  1411  0855               	movf	lg_merge@matrix16x8,w
  4459  1412  00B7               	movwf	dbg_print_MATRIX16x8@matrix
  4460  1413  3000               	movlw	0
  4461  1414  00B8               	movwf	dbg_print_MATRIX16x8@matrix+1
  4462  1415  3000               	movlw	0
  4463  1416  120A  118A  2107   	fcall	_dbg_print_MATRIX16x8
  4464  1419  0008               	return
  4465  141A                     __end_of_lg_merge:	
  4466                           
  4467                           	psect	text9
  4468  131F                     __ptext9:	
  4469 ;; *************** function _lg_hit_land *****************
  4470 ;; Defined at:
  4471 ;;		line 93 in file "../logic.h"
  4472 ;; Parameters:    Size  Location     Type
  4473 ;;  x               1    wreg     char 
  4474 ;;  y               1   21[BANK0 ] char 
  4475 ;;  matrix4x4       2   22[BANK0 ] PTR const struct .
  4476 ;;		 -> NULL(0), g_matrix4x4(96), 
  4477 ;;  matrix16x8      1   24[BANK0 ] PTR const struct .
  4478 ;;		 -> g_matrix16x8(16), 
  4479 ;; Auto vars:     Size  Location     Type
  4480 ;;  x               1   35[BANK0 ] char 
  4481 ;;  n               2   31[BANK0 ] int 
  4482 ;;  n               2   29[BANK0 ] int 
  4483 ;;  col             1   36[BANK0 ] char 
  4484 ;;  n               2   33[BANK0 ] int 
  4485 ;;  n               2   27[BANK0 ] int 
  4486 ;;  row             1   37[BANK0 ] char 
  4487 ;; Return value:  Size  Location     Type
  4488 ;;                  1    wreg      unsigned char 
  4489 ;; Registers used:
  4490 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  4491 ;; Tracked objects:
  4492 ;;		On entry : 0/0
  4493 ;;		On exit  : 0/0
  4494 ;;		Unchanged: 0/0
  4495 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4496 ;;      Params:         0       4       0       0       0
  4497 ;;      Locals:         0      11       0       0       0
  4498 ;;      Temps:          0       2       0       0       0
  4499 ;;      Totals:         0      17       0       0       0
  4500 ;;Total ram usage:       17 bytes
  4501 ;; Hardware stack levels used:    1
  4502 ;; Hardware stack levels required when called:    3
  4503 ;; This function calls:
  4504 ;;		_USARTWriteString
  4505 ;;		_get_matrix_bit
  4506 ;;		_sprintf
  4507 ;; This function is called by:
  4508 ;;		_main
  4509 ;; This function uses a non-reentrant model
  4510 ;;
  4511                           
  4512                           
  4513                           ;psect for function _lg_hit_land
  4514  131F                     _lg_hit_land:	
  4515                           
  4516                           ;incstack = 0
  4517                           ; Regs used in _lg_hit_land: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  4518                           ;lg_hit_land@x stored from wreg
  4519  131F  1283               	bcf	3,5	;RP0=0, select bank0
  4520  1320  1303               	bcf	3,6	;RP1=0, select bank0
  4521  1321  00C3               	movwf	lg_hit_land@x
  4522                           
  4523                           ;logic.h: 95: do { if(0) { int n = sprintf(g_debug, "==============hit_land============"
      +                          "\r\n"); if(n > 64) { USARTWriteString("ERROR: g_debug is overflowed\r\n"); do { ((void)
      +                          0); asm("ljmp $"); }while(0); } USARTWriteString(g_debug); } } while (0);;
  4524  1322  2B26               	goto	l5004
  4525  1323  160A  118A  2B1F   	ljmp	$	;# 
  4526  1326                     l5004:	
  4527                           
  4528                           ;logic.h: 97: for(int8_t row = 4 - 1; row >= 0; row--)
  4529  1326  3003               	movlw	3
  4530  1327  1283               	bcf	3,5	;RP0=0, select bank0
  4531  1328  1303               	bcf	3,6	;RP1=0, select bank0
  4532  1329  00B9               	movwf	??_lg_hit_land
  4533  132A  0839               	movf	??_lg_hit_land,w
  4534  132B  00C5               	movwf	lg_hit_land@row
  4535  132C                     L4:	
  4536  132C  1BC5               	btfsc	lg_hit_land@row,7
  4537  132D  2B99               	goto	l5056
  4538                           
  4539                           ;logic.h: 98: {
  4540                           ;logic.h: 99: for(int8_t col = 0; col < 4; col++)
  4541  132E  01C4               	clrf	lg_hit_land@col
  4542  132F  0844               	movf	lg_hit_land@col,w
  4543  1330  3A80               	xorlw	128
  4544  1331  3E7C               	addlw	-132
  4545  1332  1803               	btfsc	3,0
  4546  1333  2B91               	goto	l5046
  4547  1334                     l5016:	
  4548                           
  4549                           ;logic.h: 100: {
  4550                           ;logic.h: 101: if(get_matrix_bit((uint8_t*)matrix4x4->row, row, col) == 1)
  4551  1334  0836               	movf	lg_hit_land@matrix4x4,w
  4552  1335  00F7               	movwf	get_matrix_bit@byte
  4553  1336  0837               	movf	lg_hit_land@matrix4x4+1,w
  4554  1337  00F8               	movwf	get_matrix_bit@byte+1
  4555  1338  0845               	movf	lg_hit_land@row,w
  4556  1339  00B9               	movwf	??_lg_hit_land
  4557  133A  0839               	movf	??_lg_hit_land,w
  4558  133B  00F9               	movwf	get_matrix_bit@row
  4559  133C  0844               	movf	lg_hit_land@col,w
  4560  133D  00BA               	movwf	??_lg_hit_land+1
  4561  133E  083A               	movf	??_lg_hit_land+1,w
  4562  133F  00FA               	movwf	get_matrix_bit@col
  4563  1340  160A  158A  2198  160A  118A  	fcall	_get_matrix_bit
  4564  1345  3A01               	xorlw	1
  4565  1346  1D03               	skipz
  4566  1347  2B86               	goto	l5042
  4567                           
  4568                           ;logic.h: 102: {
  4569                           ;logic.h: 103: if((y + row) >= (16 - 1))
  4570  1348  1283               	bcf	3,5	;RP0=0, select bank0
  4571  1349  1303               	bcf	3,6	;RP1=0, select bank0
  4572  134A  0835               	movf	lg_hit_land@y,w
  4573  134B  0745               	addwf	lg_hit_land@row,w
  4574  134C  00B9               	movwf	??_lg_hit_land
  4575  134D  01BA               	clrf	??_lg_hit_land+1
  4576  134E  1803               	skipnc
  4577  134F  0ABA               	incf	??_lg_hit_land+1,f
  4578  1350  1BB5               	btfsc	lg_hit_land@y,7
  4579  1351  03BA               	decf	??_lg_hit_land+1,f
  4580  1352  1BC5               	btfsc	lg_hit_land@row,7
  4581  1353  03BA               	decf	??_lg_hit_land+1,f
  4582  1354  1283               	bcf	3,5	;RP0=0, select bank0
  4583  1355  1303               	bcf	3,6	;RP1=0, select bank0
  4584  1356  083A               	movf	??_lg_hit_land+1,w
  4585  1357  3A80               	xorlw	128
  4586  1358  00FF               	movwf	127
  4587  1359  3080               	movlw	128
  4588  135A  027F               	subwf	127,w
  4589  135B  1D03               	skipz
  4590  135C  2B5F               	goto	u6255
  4591  135D  300F               	movlw	15
  4592  135E  0239               	subwf	??_lg_hit_land,w
  4593  135F                     u6255:	
  4594  135F  1803               	btfsc	3,0
  4595  1360  2B65               	goto	l5026
  4596  1361  2B67               	goto	l5030
  4597                           
  4598                           ;logic.h: 104: {
  4599                           ;logic.h: 105: do { if(0) { int n = sprintf(g_debug, "hit1 row = %d, col = %d""\r\n", ro
      +                          w, col); if(n > 64) { USARTWriteString("ERROR: g_debug is overflowed\r\n"); do { ((void)
      +                          0); asm("ljmp $"); }while(0); } USARTWriteString(g_debug); } } while (0);;
  4600  1362  160A  118A  2B1F   	ljmp	$	;# 
  4601  1365                     l5026:	
  4602                           
  4603                           ;logic.h: 106: return 1;
  4604  1365  3001               	movlw	1
  4605  1366  0008               	return
  4606  1367                     l5030:	
  4607                           
  4608                           ;logic.h: 107: }
  4609                           ;logic.h: 109: if(get_matrix_bit((uint8_t*)matrix16x8->row, y + row + 1, x + col) == 1)
  4610  1367  1283               	bcf	3,5	;RP0=0, select bank0
  4611  1368  1303               	bcf	3,6	;RP1=0, select bank0
  4612  1369  0838               	movf	lg_hit_land@matrix16x8,w
  4613  136A  00F7               	movwf	get_matrix_bit@byte
  4614  136B  3000               	movlw	0
  4615  136C  00F8               	movwf	get_matrix_bit@byte+1
  4616  136D  0845               	movf	lg_hit_land@row,w
  4617  136E  0735               	addwf	lg_hit_land@y,w
  4618  136F  3E01               	addlw	1
  4619  1370  00B9               	movwf	??_lg_hit_land
  4620  1371  0839               	movf	??_lg_hit_land,w
  4621  1372  00F9               	movwf	get_matrix_bit@row
  4622  1373  0844               	movf	lg_hit_land@col,w
  4623  1374  0743               	addwf	lg_hit_land@x,w
  4624  1375  00BA               	movwf	??_lg_hit_land+1
  4625  1376  083A               	movf	??_lg_hit_land+1,w
  4626  1377  00FA               	movwf	get_matrix_bit@col
  4627  1378  160A  158A  2198  160A  118A  	fcall	_get_matrix_bit
  4628  137D  3A01               	xorlw	1
  4629  137E  1903               	btfsc	3,2
  4630  137F  2B84               	goto	l5038
  4631  1380  2B86               	goto	l5042
  4632                           
  4633                           ;logic.h: 110: {
  4634                           ;logic.h: 111: do { if(0) { int n = sprintf(g_debug, "hit2 row = %d, col = %d""\r\n", ro
      +                          w, col); if(n > 64) { USARTWriteString("ERROR: g_debug is overflowed\r\n"); do { ((void)
      +                          0); asm("ljmp $"); }while(0); } USARTWriteString(g_debug); } } while (0);;
  4635  1381  160A  118A  2B1F   	ljmp	$	;# 
  4636  1384                     l5038:	
  4637                           
  4638                           ;logic.h: 112: return 1;
  4639  1384  3001               	movlw	1
  4640  1385  0008               	return
  4641  1386                     l5042:	
  4642  1386  3001               	movlw	1
  4643  1387  1283               	bcf	3,5	;RP0=0, select bank0
  4644  1388  1303               	bcf	3,6	;RP1=0, select bank0
  4645  1389  00B9               	movwf	??_lg_hit_land
  4646  138A  0839               	movf	??_lg_hit_land,w
  4647  138B  07C4               	addwf	lg_hit_land@col,f
  4648  138C  0844               	movf	lg_hit_land@col,w
  4649  138D  3A80               	xorlw	128
  4650  138E  3E7C               	addlw	-132
  4651  138F  1C03               	skipc
  4652  1390  2B34               	goto	l5016
  4653  1391                     l5046:	
  4654  1391  30FF               	movlw	255
  4655  1392  00B9               	movwf	??_lg_hit_land
  4656  1393  0839               	movf	??_lg_hit_land,w
  4657  1394  07C5               	addwf	lg_hit_land@row,f
  4658  1395  2B2C               	goto	L4
  4659                           
  4660                           ;logic.h: 113: }
  4661                           ;logic.h: 114: }
  4662                           ;logic.h: 115: }
  4663                           ;logic.h: 116: }
  4664                           ;logic.h: 117: do { if(0) { int n = sprintf(g_debug, "not hit""\r\n"); if(n > 64) { USAR
      +                          TWriteString("ERROR: g_debug is overflowed\r\n"); do { ((void)0); asm("ljmp $"); }while(
      +                          0); } USARTWriteString(g_debug); } } while (0);;
  4665  1396  160A  118A  2B1F   	ljmp	$	;# 
  4666  1399                     l5056:	
  4667                           
  4668                           ;logic.h: 118: return 0;
  4669  1399  3000               	movlw	0
  4670  139A  0008               	return
  4671  139B                     __end_of_lg_hit_land:	
  4672                           
  4673                           	psect	text10
  4674  04A3                     __ptext10:	
  4675 ;; *************** function _lg_find_best_solution *****************
  4676 ;; Defined at:
  4677 ;;		line 478 in file "../logic.h"
  4678 ;; Parameters:    Size  Location     Type
  4679 ;;		None
  4680 ;; Auto vars:     Size  Location     Type
  4681 ;;  n               2   24[BANK1 ] int 
  4682 ;;  n               2   26[BANK1 ] int 
  4683 ;;  n               2   22[BANK1 ] int 
  4684 ;;  n               2   20[BANK1 ] int 
  4685 ;;  n               2   30[BANK1 ] int 
  4686 ;;  n               2   28[BANK1 ] int 
  4687 ;;  temp_x          1   45[BANK1 ] char 
  4688 ;;  n               2   18[BANK1 ] int 
  4689 ;;  tem_sub_inde    1   39[BANK1 ] unsigned char 
  4690 ;;  temp_risk       2   43[BANK1 ] int 
  4691 ;;  temp_pre_ris    2   41[BANK1 ] int 
  4692 ;;  temp_high       2   35[BANK1 ] unsigned int 
  4693 ;;  temp_y          1   40[BANK1 ] char 
  4694 ;;  tem_pre_sub_    1   38[BANK1 ] char 
  4695 ;;  temp_pre_x      1   37[BANK1 ] char 
  4696 ;;  res             1   34[BANK1 ] unsigned char 
  4697 ;;  right_most_i    1   33[BANK1 ] char 
  4698 ;;  left_most_in    1   32[BANK1 ] char 
  4699 ;; Return value:  Size  Location     Type
  4700 ;;                  1    wreg      unsigned char 
  4701 ;; Registers used:
  4702 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  4703 ;; Tracked objects:
  4704 ;;		On entry : 0/0
  4705 ;;		On exit  : 0/0
  4706 ;;		Unchanged: 0/0
  4707 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4708 ;;      Params:         0       0       0       0       0
  4709 ;;      Locals:         0       0      28       0       0
  4710 ;;      Temps:          0       0      18       0       0
  4711 ;;      Totals:         0       0      46       0       0
  4712 ;;Total ram usage:       46 bytes
  4713 ;; Hardware stack levels used:    1
  4714 ;; Hardware stack levels required when called:    6
  4715 ;; This function calls:
  4716 ;;		_USARTWriteString
  4717 ;;		___wmul
  4718 ;;		_dbg_print_MATRIX16x8
  4719 ;;		_dbg_print_MATRIX4x4
  4720 ;;		_dbg_print_Screen
  4721 ;;		_dbg_print_cur_MATRIX4x4
  4722 ;;		_lg_fall_off
  4723 ;;		_lg_get_height
  4724 ;;		_lg_get_height_after_merge
  4725 ;;		_lg_get_holes_after_merge
  4726 ;;		_lg_get_num_of_orphan
  4727 ;;		_lg_get_num_removed_rows
  4728 ;;		_lg_get_weight
  4729 ;;		_lg_is_valid
  4730 ;;		_lg_left_most
  4731 ;;		_lg_merge1
  4732 ;;		_lg_right_most
  4733 ;;		_sprintf
  4734 ;; This function is called by:
  4735 ;;		_main
  4736 ;; This function uses a non-reentrant model
  4737 ;;
  4738                           
  4739                           
  4740                           ;psect for function _lg_find_best_solution
  4741  04A3                     _lg_find_best_solution:	
  4742                           
  4743                           ;logic.h: 482: uint8_t res = 0;
  4744                           
  4745                           ;incstack = 0
  4746                           ; Regs used in _lg_find_best_solution: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+csta
      +                          ck]
  4747                           ;logic.h: 480: do { if(0) { int n = sprintf(g_debug, "===find_best_solution===""\r\n"); 
      +                          if(n > 64) { USARTWriteString("ERROR: g_debug is overflowed\r\n"); do { ((void)0); asm("
      +                          ljmp $"); }while(0); } USARTWriteString(g_debug); } } while (0);;
  4748  04A3  1683               	bsf	3,5	;RP0=1, select bank1
  4749  04A4  1303               	bcf	3,6	;RP1=0, select bank1
  4750  04A5  01C2               	clrf	lg_find_best_solution@res^(0+128)
  4751                           
  4752                           ;logic.h: 483: int8_t left_most_index, right_most_index;
  4753                           ;logic.h: 485: int8_t temp_pre_x = 0xF, tem_pre_sub_index = 0xF;
  4754  04A6  300F               	movlw	15
  4755  04A7  00A0               	movwf	??_lg_find_best_solution^(0+128)
  4756  04A8  0820               	movf	??_lg_find_best_solution^(0+128),w
  4757  04A9  00C5               	movwf	lg_find_best_solution@temp_pre_x^(0+128)
  4758  04AA  300F               	movlw	15
  4759  04AB  00A0               	movwf	??_lg_find_best_solution^(0+128)
  4760  04AC  0820               	movf	??_lg_find_best_solution^(0+128),w
  4761  04AD  00C6               	movwf	lg_find_best_solution@tem_pre_sub_index^(0+128)
  4762                           
  4763                           ;logic.h: 486: int16_t temp_pre_risk = -30000;
  4764  04AE  30D0               	movlw	208
  4765  04AF  00C9               	movwf	lg_find_best_solution@temp_pre_risk^(0+128)
  4766  04B0  308A               	movlw	138
  4767  04B1  00CA               	movwf	(lg_find_best_solution@temp_pre_risk^(0+128)+1)
  4768                           
  4769                           ;logic.h: 487: int8_t temp_y;
  4770                           ;logic.h: 488: int16_t temp_risk;
  4771                           ;logic.h: 489: uint16_t temp_high;
  4772                           ;logic.h: 491: for(uint8_t tem_sub_index = 0; tem_sub_index < g_char_info[g_char_info_in
      +                          dex].num; tem_sub_index++)
  4773  04B2  01C7               	clrf	lg_find_best_solution@tem_sub_index^(0+128)
  4774  04B3                     l5666:	
  4775  04B3  1403               	setc
  4776  04B4  1283               	bcf	3,5	;RP0=0, select bank0
  4777  04B5  1303               	bcf	3,6	;RP1=0, select bank0
  4778  04B6  0D6E               	rlf	_g_char_info_index,w
  4779  04B7  3E10               	addlw	(low (_g_char_info| (0+256)))& (0+255)
  4780  04B8  0084               	movwf	4
  4781  04B9  1783               	bsf	3,7	;select IRP bank2
  4782  04BA  0800               	movf	0,w
  4783  04BB  1683               	bsf	3,5	;RP0=1, select bank1
  4784  04BC  1303               	bcf	3,6	;RP1=0, select bank1
  4785  04BD  0247               	subwf	lg_find_best_solution@tem_sub_index^(0+128),w
  4786  04BE  1803               	btfsc	3,0
  4787  04BF  2F97               	goto	l5668
  4788                           
  4789                           ;logic.h: 492: {
  4790                           ;logic.h: 493: temp_cur_matrix4x4 = &g_matrix4x4[g_char_info[g_char_info_index].start_in
      +                          dex + tem_sub_index];
  4791  04C0  1283               	bcf	3,5	;RP0=0, select bank0
  4792  04C1  1303               	bcf	3,6	;RP1=0, select bank0
  4793  04C2  086E               	movf	_g_char_info_index,w
  4794  04C3  1683               	bsf	3,5	;RP0=1, select bank1
  4795  04C4  1303               	bcf	3,6	;RP1=0, select bank1
  4796  04C5  00A0               	movwf	??_lg_find_best_solution^(0+128)
  4797  04C6  0720               	addwf	??_lg_find_best_solution^(0+128),w
  4798  04C7  3E10               	addlw	(low (_g_char_info| (0+256)))& (0+255)
  4799  04C8  0084               	movwf	4
  4800  04C9  0847               	movf	lg_find_best_solution@tem_sub_index^(0+128),w
  4801  04CA  1783               	bsf	3,7	;select IRP bank2
  4802  04CB  0700               	addwf	0,w
  4803  04CC  00A1               	movwf	(??_lg_find_best_solution+1)^(0+128)
  4804  04CD  3001               	movlw	1
  4805  04CE                     u7105:	
  4806  04CE  1003               	clrc
  4807  04CF  0DA1               	rlf	(??_lg_find_best_solution+1)^(0+128),f
  4808  04D0  3EFF               	addlw	-1
  4809  04D1  1D03               	skipz
  4810  04D2  2CCE               	goto	u7105
  4811  04D3  1003               	clrc
  4812  04D4  0D21               	rlf	(??_lg_find_best_solution+1)^(0+128),w
  4813  04D5  3E24               	addlw	low (_g_matrix4x4| (0+32768))
  4814  04D6  00A2               	movwf	(??_lg_find_best_solution+2)^(0+128)
  4815  04D7  3088               	movlw	high (_g_matrix4x4| (0+32768))
  4816  04D8  1803               	skipnc
  4817  04D9  3E01               	addlw	1
  4818  04DA  00A3               	movwf	((??_lg_find_best_solution+2)^(0+128)+1)
  4819  04DB  0822               	movf	(??_lg_find_best_solution+2)^(0+128),w
  4820  04DC  00D5               	movwf	_temp_cur_matrix4x4^(0+128)
  4821  04DD  0823               	movf	((??_lg_find_best_solution+2)^(0+128)+1),w
  4822  04DE  00D6               	movwf	(_temp_cur_matrix4x4+1)^(0+128)
  4823                           
  4824                           ;logic.h: 494: left_most_index = lg_left_most(cur_x, temp_cur_matrix4x4, &g_matrix16x8);
  4825  04DF  0855               	movf	_temp_cur_matrix4x4^(0+128),w
  4826  04E0  1283               	bcf	3,5	;RP0=0, select bank0
  4827  04E1  1303               	bcf	3,6	;RP1=0, select bank0
  4828  04E2  00C2               	movwf	lg_left_most@matrix4x4
  4829  04E3  1683               	bsf	3,5	;RP0=1, select bank1
  4830  04E4  1303               	bcf	3,6	;RP1=0, select bank1
  4831  04E5  0856               	movf	(_temp_cur_matrix4x4+1)^(0+128),w
  4832  04E6  1283               	bcf	3,5	;RP0=0, select bank0
  4833  04E7  1303               	bcf	3,6	;RP1=0, select bank0
  4834  04E8  00C3               	movwf	lg_left_most@matrix4x4+1
  4835  04E9  30D8               	movlw	(low (_g_matrix16x8| 0))& (0+255)
  4836  04EA  1683               	bsf	3,5	;RP0=1, select bank1
  4837  04EB  1303               	bcf	3,6	;RP1=0, select bank1
  4838  04EC  00A0               	movwf	??_lg_find_best_solution^(0+128)
  4839  04ED  0820               	movf	??_lg_find_best_solution^(0+128),w
  4840  04EE  1283               	bcf	3,5	;RP0=0, select bank0
  4841  04EF  1303               	bcf	3,6	;RP1=0, select bank0
  4842  04F0  00C4               	movwf	lg_left_most@matrix16x8
  4843  04F1  1683               	bsf	3,5	;RP0=1, select bank1
  4844  04F2  1303               	bcf	3,6	;RP1=0, select bank1
  4845  04F3  086C               	movf	_cur_x^(0+128),w
  4846  04F4  160A  158A  240F  120A  118A  	fcall	_lg_left_most
  4847  04F9  1683               	bsf	3,5	;RP0=1, select bank1
  4848  04FA  1303               	bcf	3,6	;RP1=0, select bank1
  4849  04FB  00A1               	movwf	(??_lg_find_best_solution+1)^(0+128)
  4850  04FC  0821               	movf	(??_lg_find_best_solution+1)^(0+128),w
  4851  04FD  00C0               	movwf	lg_find_best_solution@left_most_index^(0+128)
  4852                           
  4853                           ;logic.h: 495: right_most_index = lg_right_most(cur_x, temp_cur_matrix4x4, &g_matrix16x8
      +                          );
  4854  04FE  0855               	movf	_temp_cur_matrix4x4^(0+128),w
  4855  04FF  1283               	bcf	3,5	;RP0=0, select bank0
  4856  0500  1303               	bcf	3,6	;RP1=0, select bank0
  4857  0501  00BF               	movwf	lg_right_most@matrix4x4
  4858  0502  1683               	bsf	3,5	;RP0=1, select bank1
  4859  0503  1303               	bcf	3,6	;RP1=0, select bank1
  4860  0504  0856               	movf	(_temp_cur_matrix4x4+1)^(0+128),w
  4861  0505  1283               	bcf	3,5	;RP0=0, select bank0
  4862  0506  1303               	bcf	3,6	;RP1=0, select bank0
  4863  0507  00C0               	movwf	lg_right_most@matrix4x4+1
  4864  0508  30D8               	movlw	(low (_g_matrix16x8| 0))& (0+255)
  4865  0509  1683               	bsf	3,5	;RP0=1, select bank1
  4866  050A  1303               	bcf	3,6	;RP1=0, select bank1
  4867  050B  00A0               	movwf	??_lg_find_best_solution^(0+128)
  4868  050C  0820               	movf	??_lg_find_best_solution^(0+128),w
  4869  050D  1283               	bcf	3,5	;RP0=0, select bank0
  4870  050E  1303               	bcf	3,6	;RP1=0, select bank0
  4871  050F  00C1               	movwf	lg_right_most@matrix16x8
  4872  0510  1683               	bsf	3,5	;RP0=1, select bank1
  4873  0511  1303               	bcf	3,6	;RP1=0, select bank1
  4874  0512  086C               	movf	_cur_x^(0+128),w
  4875  0513  160A  158A  243D  120A  118A  	fcall	_lg_right_most
  4876  0518  1683               	bsf	3,5	;RP0=1, select bank1
  4877  0519  1303               	bcf	3,6	;RP1=0, select bank1
  4878  051A  00A1               	movwf	(??_lg_find_best_solution+1)^(0+128)
  4879  051B  0821               	movf	(??_lg_find_best_solution+1)^(0+128),w
  4880  051C  00C1               	movwf	lg_find_best_solution@right_most_index^(0+128)
  4881                           
  4882                           ;logic.h: 497: for(int8_t temp_x = left_most_index; temp_x <= right_most_index; temp_x++
      +                          )
  4883  051D  0840               	movf	lg_find_best_solution@left_most_index^(0+128),w
  4884  051E  00A0               	movwf	??_lg_find_best_solution^(0+128)
  4885  051F  0820               	movf	??_lg_find_best_solution^(0+128),w
  4886  0520  00CD               	movwf	lg_find_best_solution@temp_x^(0+128)
  4887  0521                     l5662:	
  4888  0521  0841               	movf	lg_find_best_solution@right_most_index^(0+128),w
  4889  0522  3A80               	xorlw	128
  4890  0523  00A0               	movwf	??_lg_find_best_solution^(0+128)
  4891  0524  084D               	movf	lg_find_best_solution@temp_x^(0+128),w
  4892  0525  3A80               	xorlw	128
  4893  0526  02A0               	subwf	??_lg_find_best_solution^(0+128),f
  4894  0527  1C03               	btfss	3,0
  4895  0528  2F8F               	goto	l5664
  4896                           
  4897                           ;logic.h: 498: {
  4898                           ;logic.h: 499: temp_y = lg_fall_off(temp_x, cur_y, temp_cur_matrix4x4, &g_matrix16x8);
  4899  0529  0857               	movf	_cur_y^(0+128),w
  4900  052A  00A0               	movwf	??_lg_find_best_solution^(0+128)
  4901  052B  0820               	movf	??_lg_find_best_solution^(0+128),w
  4902  052C  1283               	bcf	3,5	;RP0=0, select bank0
  4903  052D  1303               	bcf	3,6	;RP1=0, select bank0
  4904  052E  00B5               	movwf	lg_fall_off@y
  4905  052F  1683               	bsf	3,5	;RP0=1, select bank1
  4906  0530  1303               	bcf	3,6	;RP1=0, select bank1
  4907  0531  0855               	movf	_temp_cur_matrix4x4^(0+128),w
  4908  0532  1283               	bcf	3,5	;RP0=0, select bank0
  4909  0533  1303               	bcf	3,6	;RP1=0, select bank0
  4910  0534  00B6               	movwf	lg_fall_off@matrix4x4
  4911  0535  1683               	bsf	3,5	;RP0=1, select bank1
  4912  0536  1303               	bcf	3,6	;RP1=0, select bank1
  4913  0537  0856               	movf	(_temp_cur_matrix4x4+1)^(0+128),w
  4914  0538  1283               	bcf	3,5	;RP0=0, select bank0
  4915  0539  1303               	bcf	3,6	;RP1=0, select bank0
  4916  053A  00B7               	movwf	lg_fall_off@matrix4x4+1
  4917  053B  30D8               	movlw	(low (_g_matrix16x8| 0))& (0+255)
  4918  053C  1683               	bsf	3,5	;RP0=1, select bank1
  4919  053D  1303               	bcf	3,6	;RP1=0, select bank1
  4920  053E  00A1               	movwf	(??_lg_find_best_solution+1)^(0+128)
  4921  053F  0821               	movf	(??_lg_find_best_solution+1)^(0+128),w
  4922  0540  1283               	bcf	3,5	;RP0=0, select bank0
  4923  0541  1303               	bcf	3,6	;RP1=0, select bank0
  4924  0542  00B8               	movwf	lg_fall_off@matrix16x8
  4925  0543  1683               	bsf	3,5	;RP0=1, select bank1
  4926  0544  1303               	bcf	3,6	;RP1=0, select bank1
  4927  0545  084D               	movf	lg_find_best_solution@temp_x^(0+128),w
  4928  0546  160A  118A  249E  120A  118A  	fcall	_lg_fall_off
  4929  054B  1683               	bsf	3,5	;RP0=1, select bank1
  4930  054C  1303               	bcf	3,6	;RP1=0, select bank1
  4931  054D  00A2               	movwf	(??_lg_find_best_solution+2)^(0+128)
  4932  054E  0822               	movf	(??_lg_find_best_solution+2)^(0+128),w
  4933  054F  00C8               	movwf	lg_find_best_solution@temp_y^(0+128)
  4934                           
  4935                           ;logic.h: 501: dbg_print_MATRIX4x4(0, "After fall off", temp_x, temp_y, temp_cur_matrix4
      +                          x4);
  4936  0550  302F               	movlw	low (STR_128| (0+32768))
  4937  0551  1283               	bcf	3,5	;RP0=0, select bank0
  4938  0552  1303               	bcf	3,6	;RP1=0, select bank0
  4939  0553  00B5               	movwf	dbg_print_MATRIX4x4@lable
  4940  0554  308C               	movlw	high (STR_128| (0+32768))
  4941  0555  00B6               	movwf	dbg_print_MATRIX4x4@lable+1
  4942  0556  1683               	bsf	3,5	;RP0=1, select bank1
  4943  0557  1303               	bcf	3,6	;RP1=0, select bank1
  4944  0558  084D               	movf	lg_find_best_solution@temp_x^(0+128),w
  4945  0559  00A0               	movwf	??_lg_find_best_solution^(0+128)
  4946  055A  0820               	movf	??_lg_find_best_solution^(0+128),w
  4947  055B  1283               	bcf	3,5	;RP0=0, select bank0
  4948  055C  1303               	bcf	3,6	;RP1=0, select bank0
  4949  055D  00B7               	movwf	dbg_print_MATRIX4x4@x
  4950  055E  1683               	bsf	3,5	;RP0=1, select bank1
  4951  055F  1303               	bcf	3,6	;RP1=0, select bank1
  4952  0560  0848               	movf	lg_find_best_solution@temp_y^(0+128),w
  4953  0561  00A1               	movwf	(??_lg_find_best_solution+1)^(0+128)
  4954  0562  0821               	movf	(??_lg_find_best_solution+1)^(0+128),w
  4955  0563  1283               	bcf	3,5	;RP0=0, select bank0
  4956  0564  1303               	bcf	3,6	;RP1=0, select bank0
  4957  0565  00B8               	movwf	dbg_print_MATRIX4x4@y
  4958  0566  1683               	bsf	3,5	;RP0=1, select bank1
  4959  0567  1303               	bcf	3,6	;RP1=0, select bank1
  4960  0568  0855               	movf	_temp_cur_matrix4x4^(0+128),w
  4961  0569  1283               	bcf	3,5	;RP0=0, select bank0
  4962  056A  1303               	bcf	3,6	;RP1=0, select bank0
  4963  056B  00B9               	movwf	dbg_print_MATRIX4x4@matrix
  4964  056C  1683               	bsf	3,5	;RP0=1, select bank1
  4965  056D  1303               	bcf	3,6	;RP1=0, select bank1
  4966  056E  0856               	movf	(_temp_cur_matrix4x4+1)^(0+128),w
  4967  056F  1283               	bcf	3,5	;RP0=0, select bank0
  4968  0570  1303               	bcf	3,6	;RP1=0, select bank0
  4969  0571  00BA               	movwf	dbg_print_MATRIX4x4@matrix+1
  4970  0572  3000               	movlw	0
  4971  0573  120A  118A  2294  120A  118A  	fcall	_dbg_print_MATRIX4x4
  4972                           
  4973                           ;logic.h: 502: dbg_print_Screen(0, "After fall off");
  4974  0578  302F               	movlw	low (STR_128| (0+32768))
  4975  0579  1283               	bcf	3,5	;RP0=0, select bank0
  4976  057A  1303               	bcf	3,6	;RP1=0, select bank0
  4977  057B  00CC               	movwf	dbg_print_Screen@lable
  4978  057C  308C               	movlw	high (STR_128| (0+32768))
  4979  057D  00CD               	movwf	dbg_print_Screen@lable+1
  4980  057E  3000               	movlw	0
  4981  057F  160A  118A  22A5  120A  118A  	fcall	_dbg_print_Screen
  4982                           
  4983                           ;logic.h: 504: if(lg_is_valid(temp_x, temp_y, temp_cur_matrix4x4, &g_matrix16x8) == 0)
  4984  0584  1683               	bsf	3,5	;RP0=1, select bank1
  4985  0585  1303               	bcf	3,6	;RP1=0, select bank1
  4986  0586  0848               	movf	lg_find_best_solution@temp_y^(0+128),w
  4987  0587  00A0               	movwf	??_lg_find_best_solution^(0+128)
  4988  0588  0820               	movf	??_lg_find_best_solution^(0+128),w
  4989  0589  1283               	bcf	3,5	;RP0=0, select bank0
  4990  058A  1303               	bcf	3,6	;RP1=0, select bank0
  4991  058B  00B5               	movwf	lg_is_valid@y
  4992  058C  1683               	bsf	3,5	;RP0=1, select bank1
  4993  058D  1303               	bcf	3,6	;RP1=0, select bank1
  4994  058E  0855               	movf	_temp_cur_matrix4x4^(0+128),w
  4995  058F  1283               	bcf	3,5	;RP0=0, select bank0
  4996  0590  1303               	bcf	3,6	;RP1=0, select bank0
  4997  0591  00B6               	movwf	lg_is_valid@matrix4x4
  4998  0592  1683               	bsf	3,5	;RP0=1, select bank1
  4999  0593  1303               	bcf	3,6	;RP1=0, select bank1
  5000  0594  0856               	movf	(_temp_cur_matrix4x4+1)^(0+128),w
  5001  0595  1283               	bcf	3,5	;RP0=0, select bank0
  5002  0596  1303               	bcf	3,6	;RP1=0, select bank0
  5003  0597  00B7               	movwf	lg_is_valid@matrix4x4+1
  5004  0598  30D8               	movlw	(low (_g_matrix16x8| 0))& (0+255)
  5005  0599  1683               	bsf	3,5	;RP0=1, select bank1
  5006  059A  1303               	bcf	3,6	;RP1=0, select bank1
  5007  059B  00A1               	movwf	(??_lg_find_best_solution+1)^(0+128)
  5008  059C  0821               	movf	(??_lg_find_best_solution+1)^(0+128),w
  5009  059D  1283               	bcf	3,5	;RP0=0, select bank0
  5010  059E  1303               	bcf	3,6	;RP1=0, select bank0
  5011  059F  00B8               	movwf	lg_is_valid@matrix16x8
  5012  05A0  1683               	bsf	3,5	;RP0=1, select bank1
  5013  05A1  1303               	bcf	3,6	;RP1=0, select bank1
  5014  05A2  084D               	movf	lg_find_best_solution@temp_x^(0+128),w
  5015  05A3  120A  118A  2056  120A  118A  	fcall	_lg_is_valid
  5016  05A8  3A00               	xorlw	0
  5017  05A9  1903               	btfsc	3,2
  5018  05AA  2F85               	goto	l5660
  5019                           
  5020                           ;logic.h: 507: }
  5021                           ;logic.h: 508: res = 1;
  5022                           
  5023                           ;logic.h: 505: {
  5024                           ;logic.h: 506: continue;
  5025  05AB  1683               	bsf	3,5	;RP0=1, select bank1
  5026  05AC  1303               	bcf	3,6	;RP1=0, select bank1
  5027  05AD  01C2               	clrf	lg_find_best_solution@res^(0+128)
  5028  05AE  0AC2               	incf	lg_find_best_solution@res^(0+128),f
  5029                           
  5030                           ;logic.h: 509: lg_merge1(temp_x, temp_y, temp_cur_matrix4x4, &g_matrix16x8, &temp_matrix
      +                          16x8);
  5031  05AF  0848               	movf	lg_find_best_solution@temp_y^(0+128),w
  5032  05B0  00A0               	movwf	??_lg_find_best_solution^(0+128)
  5033  05B1  0820               	movf	??_lg_find_best_solution^(0+128),w
  5034  05B2  1283               	bcf	3,5	;RP0=0, select bank0
  5035  05B3  1303               	bcf	3,6	;RP1=0, select bank0
  5036  05B4  00A0               	movwf	lg_merge1@y
  5037  05B5  1683               	bsf	3,5	;RP0=1, select bank1
  5038  05B6  1303               	bcf	3,6	;RP1=0, select bank1
  5039  05B7  0855               	movf	_temp_cur_matrix4x4^(0+128),w
  5040  05B8  1283               	bcf	3,5	;RP0=0, select bank0
  5041  05B9  1303               	bcf	3,6	;RP1=0, select bank0
  5042  05BA  00A1               	movwf	lg_merge1@matrix4x4
  5043  05BB  1683               	bsf	3,5	;RP0=1, select bank1
  5044  05BC  1303               	bcf	3,6	;RP1=0, select bank1
  5045  05BD  0856               	movf	(_temp_cur_matrix4x4+1)^(0+128),w
  5046  05BE  1283               	bcf	3,5	;RP0=0, select bank0
  5047  05BF  1303               	bcf	3,6	;RP1=0, select bank0
  5048  05C0  00A2               	movwf	lg_merge1@matrix4x4+1
  5049  05C1  30D8               	movlw	(low (_g_matrix16x8| 0))& (0+255)
  5050  05C2  1683               	bsf	3,5	;RP0=1, select bank1
  5051  05C3  1303               	bcf	3,6	;RP1=0, select bank1
  5052  05C4  00A1               	movwf	(??_lg_find_best_solution+1)^(0+128)
  5053  05C5  0821               	movf	(??_lg_find_best_solution+1)^(0+128),w
  5054  05C6  1283               	bcf	3,5	;RP0=0, select bank0
  5055  05C7  1303               	bcf	3,6	;RP1=0, select bank0
  5056  05C8  00A3               	movwf	lg_merge1@matrix16x8_in
  5057  05C9  30D0               	movlw	(low (_temp_matrix16x8| (0+256)))& (0+255)
  5058  05CA  1683               	bsf	3,5	;RP0=1, select bank1
  5059  05CB  1303               	bcf	3,6	;RP1=0, select bank1
  5060  05CC  00A2               	movwf	(??_lg_find_best_solution+2)^(0+128)
  5061  05CD  0822               	movf	(??_lg_find_best_solution+2)^(0+128),w
  5062  05CE  1283               	bcf	3,5	;RP0=0, select bank0
  5063  05CF  1303               	bcf	3,6	;RP1=0, select bank0
  5064  05D0  00A4               	movwf	lg_merge1@matrix16x8_out
  5065  05D1  1683               	bsf	3,5	;RP0=1, select bank1
  5066  05D2  1303               	bcf	3,6	;RP1=0, select bank1
  5067  05D3  084D               	movf	lg_find_best_solution@temp_x^(0+128),w
  5068  05D4  160A  118A  204F  120A  118A  	fcall	_lg_merge1
  5069                           
  5070                           ;logic.h: 510: temp_high = lg_get_height_after_merge(temp_y, temp_cur_matrix4x4);
  5071  05D9  1683               	bsf	3,5	;RP0=1, select bank1
  5072  05DA  1303               	bcf	3,6	;RP1=0, select bank1
  5073  05DB  0855               	movf	_temp_cur_matrix4x4^(0+128),w
  5074  05DC  1283               	bcf	3,5	;RP0=0, select bank0
  5075  05DD  1303               	bcf	3,6	;RP1=0, select bank0
  5076  05DE  00B5               	movwf	lg_get_height_after_merge@matrix
  5077  05DF  1683               	bsf	3,5	;RP0=1, select bank1
  5078  05E0  1303               	bcf	3,6	;RP1=0, select bank1
  5079  05E1  0856               	movf	(_temp_cur_matrix4x4+1)^(0+128),w
  5080  05E2  1283               	bcf	3,5	;RP0=0, select bank0
  5081  05E3  1303               	bcf	3,6	;RP1=0, select bank0
  5082  05E4  00B6               	movwf	lg_get_height_after_merge@matrix+1
  5083  05E5  1683               	bsf	3,5	;RP0=1, select bank1
  5084  05E6  1303               	bcf	3,6	;RP1=0, select bank1
  5085  05E7  0848               	movf	lg_find_best_solution@temp_y^(0+128),w
  5086  05E8  160A  158A  26B2  120A  118A  	fcall	_lg_get_height_after_merge
  5087  05ED  1683               	bsf	3,5	;RP0=1, select bank1
  5088  05EE  1303               	bcf	3,6	;RP1=0, select bank1
  5089  05EF  00A0               	movwf	??_lg_find_best_solution^(0+128)
  5090  05F0  01A1               	clrf	(??_lg_find_best_solution^(0+128)+1)
  5091  05F1  0820               	movf	??_lg_find_best_solution^(0+128),w
  5092  05F2  00C3               	movwf	lg_find_best_solution@temp_high^(0+128)
  5093  05F3  0821               	movf	(??_lg_find_best_solution+1)^(0+128),w
  5094  05F4  00C4               	movwf	(lg_find_best_solution@temp_high+1)^(0+128)
  5095                           
  5096                           ;logic.h: 511: if((lg_get_height(&g_matrix16x8) <= 16/2 + 1)
  5097                           ;logic.h: 512: && (temp_high <= 16/2 + 1))
  5098  05F5  30D8               	movlw	(low (_g_matrix16x8| 0))& (0+255)
  5099  05F6  160A  158A  23B5  120A  118A  	fcall	_lg_get_height
  5100  05FB  1683               	bsf	3,5	;RP0=1, select bank1
  5101  05FC  1303               	bcf	3,6	;RP1=0, select bank1
  5102  05FD  00A0               	movwf	??_lg_find_best_solution^(0+128)
  5103  05FE  300A               	movlw	10
  5104  05FF  0220               	subwf	??_lg_find_best_solution^(0+128),w
  5105  0600  1803               	skipnc
  5106  0601  2EA3               	goto	l5626
  5107  0602  3000               	movlw	0
  5108  0603  0244               	subwf	(lg_find_best_solution@temp_high+1)^(0+128),w
  5109  0604  300A               	movlw	10
  5110  0605  1903               	skipnz
  5111  0606  0243               	subwf	lg_find_best_solution@temp_high^(0+128),w
  5112  0607  1803               	skipnc
  5113  0608  2EA3               	goto	l5626
  5114                           
  5115                           ;logic.h: 513: {
  5116                           ;logic.h: 514: temp_risk = (((int16_t)lg_get_num_removed_rows(&temp_matrix16x8)) << 10)
  5117                           ;logic.h: 515: - lg_get_num_of_orphan(&temp_matrix16x8)*4
  5118                           ;logic.h: 516: - temp_high*3
  5119                           ;logic.h: 517: - lg_get_holes_after_merge(&temp_matrix16x8)*2
  5120                           ;logic.h: 518: - lg_get_weight(&temp_matrix16x8);
  5121  0609  30D0               	movlw	(low (_temp_matrix16x8| (0+256)))& (0+255)
  5122  060A  160A  118A  241A  120A  118A  	fcall	_lg_get_weight
  5123  060F  1283               	bcf	3,5	;RP0=0, select bank0
  5124  0610  1303               	bcf	3,6	;RP1=0, select bank0
  5125  0611  0935               	comf	?_lg_get_weight,w
  5126  0612  1683               	bsf	3,5	;RP0=1, select bank1
  5127  0613  1303               	bcf	3,6	;RP1=0, select bank1
  5128  0614  00A0               	movwf	??_lg_find_best_solution^(0+128)
  5129  0615  1283               	bcf	3,5	;RP0=0, select bank0
  5130  0616  1303               	bcf	3,6	;RP1=0, select bank0
  5131  0617  0936               	comf	?_lg_get_weight+1,w
  5132  0618  1683               	bsf	3,5	;RP0=1, select bank1
  5133  0619  1303               	bcf	3,6	;RP1=0, select bank1
  5134  061A  00A1               	movwf	(??_lg_find_best_solution^(0+128)+1)
  5135  061B  0AA0               	incf	??_lg_find_best_solution^(0+128),f
  5136  061C  1903               	skipnz
  5137  061D  0AA1               	incf	(??_lg_find_best_solution^(0+128)+1),f
  5138  061E  30D0               	movlw	(low (_temp_matrix16x8| (0+256)))& (0+255)
  5139  061F  160A  118A  26E7  120A  118A  	fcall	_lg_get_holes_after_merge
  5140  0624  1683               	bsf	3,5	;RP0=1, select bank1
  5141  0625  1303               	bcf	3,6	;RP1=0, select bank1
  5142  0626  00A2               	movwf	(??_lg_find_best_solution+2)^(0+128)
  5143  0627  01A3               	clrf	((??_lg_find_best_solution+2)^(0+128)+1)
  5144  0628  1003               	clrc
  5145  0629  0DA2               	rlf	(??_lg_find_best_solution+2)^(0+128),f
  5146  062A  0DA3               	rlf	((??_lg_find_best_solution+2)^(0+128)+1),f
  5147  062B  09A2               	comf	(??_lg_find_best_solution+2)^(0+128),f
  5148  062C  09A3               	comf	((??_lg_find_best_solution+2)^(0+128)+1),f
  5149  062D  0AA2               	incf	(??_lg_find_best_solution+2)^(0+128),f
  5150  062E  1903               	skipnz
  5151  062F  0AA3               	incf	((??_lg_find_best_solution+2)^(0+128)+1),f
  5152  0630  0844               	movf	(lg_find_best_solution@temp_high+1)^(0+128),w
  5153  0631  1283               	bcf	3,5	;RP0=0, select bank0
  5154  0632  1303               	bcf	3,6	;RP1=0, select bank0
  5155  0633  00CA               	movwf	___wmul@multiplier+1
  5156  0634  1683               	bsf	3,5	;RP0=1, select bank1
  5157  0635  1303               	bcf	3,6	;RP1=0, select bank1
  5158  0636  0843               	movf	lg_find_best_solution@temp_high^(0+128),w
  5159  0637  1283               	bcf	3,5	;RP0=0, select bank0
  5160  0638  1303               	bcf	3,6	;RP1=0, select bank0
  5161  0639  00C9               	movwf	___wmul@multiplier
  5162  063A  3003               	movlw	3
  5163  063B  00CB               	movwf	___wmul@multiplicand
  5164  063C  3000               	movlw	0
  5165  063D  00CC               	movwf	___wmul@multiplicand+1
  5166  063E  160A  158A  2256  120A  118A  	fcall	___wmul
  5167  0643  1283               	bcf	3,5	;RP0=0, select bank0
  5168  0644  1303               	bcf	3,6	;RP1=0, select bank0
  5169  0645  0949               	comf	?___wmul,w
  5170  0646  1683               	bsf	3,5	;RP0=1, select bank1
  5171  0647  1303               	bcf	3,6	;RP1=0, select bank1
  5172  0648  00A4               	movwf	(??_lg_find_best_solution+4)^(0+128)
  5173  0649  1283               	bcf	3,5	;RP0=0, select bank0
  5174  064A  1303               	bcf	3,6	;RP1=0, select bank0
  5175  064B  094A               	comf	?___wmul+1,w
  5176  064C  1683               	bsf	3,5	;RP0=1, select bank1
  5177  064D  1303               	bcf	3,6	;RP1=0, select bank1
  5178  064E  00A5               	movwf	((??_lg_find_best_solution+4)^(0+128)+1)
  5179  064F  0AA4               	incf	(??_lg_find_best_solution+4)^(0+128),f
  5180  0650  1903               	skipnz
  5181  0651  0AA5               	incf	((??_lg_find_best_solution+4)^(0+128)+1),f
  5182  0652  30D0               	movlw	(low (_temp_matrix16x8| (0+256)))& (0+255)
  5183  0653  160A  118A  21C6  120A  118A  	fcall	_lg_get_num_of_orphan
  5184  0658  1283               	bcf	3,5	;RP0=0, select bank0
  5185  0659  1303               	bcf	3,6	;RP1=0, select bank0
  5186  065A  0835               	movf	?_lg_get_num_of_orphan,w
  5187  065B  1683               	bsf	3,5	;RP0=1, select bank1
  5188  065C  1303               	bcf	3,6	;RP1=0, select bank1
  5189  065D  00A6               	movwf	(??_lg_find_best_solution+6)^(0+128)
  5190  065E  1283               	bcf	3,5	;RP0=0, select bank0
  5191  065F  1303               	bcf	3,6	;RP1=0, select bank0
  5192  0660  0836               	movf	?_lg_get_num_of_orphan+1,w
  5193  0661  1683               	bsf	3,5	;RP0=1, select bank1
  5194  0662  1303               	bcf	3,6	;RP1=0, select bank1
  5195  0663  00A7               	movwf	((??_lg_find_best_solution+6)^(0+128)+1)
  5196  0664  1003               	clrc
  5197  0665  0DA6               	rlf	(??_lg_find_best_solution+6)^(0+128),f
  5198  0666  0DA7               	rlf	((??_lg_find_best_solution+6)^(0+128)+1),f
  5199  0667  1003               	clrc
  5200  0668  0DA6               	rlf	(??_lg_find_best_solution+6)^(0+128),f
  5201  0669  0DA7               	rlf	((??_lg_find_best_solution+6)^(0+128)+1),f
  5202  066A  09A6               	comf	(??_lg_find_best_solution+6)^(0+128),f
  5203  066B  09A7               	comf	((??_lg_find_best_solution+6)^(0+128)+1),f
  5204  066C  0AA6               	incf	(??_lg_find_best_solution+6)^(0+128),f
  5205  066D  1903               	skipnz
  5206  066E  0AA7               	incf	((??_lg_find_best_solution+6)^(0+128)+1),f
  5207  066F  30D0               	movlw	(low (_temp_matrix16x8| (0+256)))& (0+255)
  5208  0670  160A  158A  23E1  120A  118A  	fcall	_lg_get_num_removed_rows
  5209  0675  1683               	bsf	3,5	;RP0=1, select bank1
  5210  0676  1303               	bcf	3,6	;RP1=0, select bank1
  5211  0677  00A8               	movwf	(??_lg_find_best_solution+8)^(0+128)
  5212  0678  01A9               	clrf	((??_lg_find_best_solution+8)^(0+128)+1)
  5213  0679  300A               	movlw	10
  5214  067A  00FF               	movwf	127
  5215  067B                     u7145:	
  5216  067B  1003               	clrc
  5217  067C  0DA8               	rlf	(??_lg_find_best_solution+8)^(0+128),f
  5218  067D  0DA9               	rlf	((??_lg_find_best_solution+8)^(0+128)+1),f
  5219  067E  0BFF               	decfsz	127,f
  5220  067F  2E7B               	goto	u7145
  5221  0680  0826               	movf	(??_lg_find_best_solution+6)^(0+128),w
  5222  0681  0728               	addwf	(??_lg_find_best_solution+8)^(0+128),w
  5223  0682  00AA               	movwf	(??_lg_find_best_solution+10)^(0+128)
  5224  0683  0827               	movf	(??_lg_find_best_solution+7)^(0+128),w
  5225  0684  1803               	skipnc
  5226  0685  0A27               	incf	(??_lg_find_best_solution+7)^(0+128),w
  5227  0686  0729               	addwf	(??_lg_find_best_solution+9)^(0+128),w
  5228  0687  00AB               	movwf	(??_lg_find_best_solution+11)^(0+128)
  5229  0688  0824               	movf	(??_lg_find_best_solution+4)^(0+128),w
  5230  0689  072A               	addwf	(??_lg_find_best_solution+10)^(0+128),w
  5231  068A  00AC               	movwf	(??_lg_find_best_solution+12)^(0+128)
  5232  068B  0825               	movf	(??_lg_find_best_solution+5)^(0+128),w
  5233  068C  1803               	skipnc
  5234  068D  0A25               	incf	(??_lg_find_best_solution+5)^(0+128),w
  5235  068E  072B               	addwf	(??_lg_find_best_solution+11)^(0+128),w
  5236  068F  00AD               	movwf	(??_lg_find_best_solution+13)^(0+128)
  5237  0690  0822               	movf	(??_lg_find_best_solution+2)^(0+128),w
  5238  0691  072C               	addwf	(??_lg_find_best_solution+12)^(0+128),w
  5239  0692  00AE               	movwf	(??_lg_find_best_solution+14)^(0+128)
  5240  0693  0823               	movf	(??_lg_find_best_solution+3)^(0+128),w
  5241  0694  1803               	skipnc
  5242  0695  0A23               	incf	(??_lg_find_best_solution+3)^(0+128),w
  5243  0696  072D               	addwf	(??_lg_find_best_solution+13)^(0+128),w
  5244  0697  00AF               	movwf	(??_lg_find_best_solution+15)^(0+128)
  5245  0698  0820               	movf	??_lg_find_best_solution^(0+128),w
  5246  0699  072E               	addwf	(??_lg_find_best_solution+14)^(0+128),w
  5247  069A  00CB               	movwf	lg_find_best_solution@temp_risk^(0+128)
  5248  069B  0821               	movf	(??_lg_find_best_solution+1)^(0+128),w
  5249  069C  1803               	skipnc
  5250  069D  0A21               	incf	(??_lg_find_best_solution+1)^(0+128),w
  5251  069E  072F               	addwf	(??_lg_find_best_solution+15)^(0+128),w
  5252  069F  2F50               	goto	L5
  5253  06A0  120A  118A  2CA3   	ljmp	$	;# 
  5254  06A3                     l5626:	
  5255                           ;logic.h: 519: }
  5256                           
  5257                           
  5258                           ;logic.h: 520: else
  5259                           ;logic.h: 521: {
  5260                           ;logic.h: 522: temp_risk = (((int16_t)lg_get_num_removed_rows(&temp_matrix16x8)) << 10)
  5261                           ;logic.h: 523: - lg_get_num_of_orphan(&temp_matrix16x8)*2
  5262                           ;logic.h: 524: - temp_high*5
  5263                           ;logic.h: 525: - lg_get_holes_after_merge(&temp_matrix16x8)*3
  5264                           ;logic.h: 526: - lg_get_weight(&temp_matrix16x8);
  5265  06A3  30D0               	movlw	(low (_temp_matrix16x8| (0+256)))& (0+255)
  5266  06A4  160A  118A  241A  120A  118A  	fcall	_lg_get_weight
  5267  06A9  1283               	bcf	3,5	;RP0=0, select bank0
  5268  06AA  1303               	bcf	3,6	;RP1=0, select bank0
  5269  06AB  0935               	comf	?_lg_get_weight,w
  5270  06AC  1683               	bsf	3,5	;RP0=1, select bank1
  5271  06AD  1303               	bcf	3,6	;RP1=0, select bank1
  5272  06AE  00A0               	movwf	??_lg_find_best_solution^(0+128)
  5273  06AF  1283               	bcf	3,5	;RP0=0, select bank0
  5274  06B0  1303               	bcf	3,6	;RP1=0, select bank0
  5275  06B1  0936               	comf	?_lg_get_weight+1,w
  5276  06B2  1683               	bsf	3,5	;RP0=1, select bank1
  5277  06B3  1303               	bcf	3,6	;RP1=0, select bank1
  5278  06B4  00A1               	movwf	(??_lg_find_best_solution^(0+128)+1)
  5279  06B5  0AA0               	incf	??_lg_find_best_solution^(0+128),f
  5280  06B6  1903               	skipnz
  5281  06B7  0AA1               	incf	(??_lg_find_best_solution^(0+128)+1),f
  5282  06B8  30D0               	movlw	(low (_temp_matrix16x8| (0+256)))& (0+255)
  5283  06B9  160A  118A  26E7  120A  118A  	fcall	_lg_get_holes_after_merge
  5284  06BE  1683               	bsf	3,5	;RP0=1, select bank1
  5285  06BF  1303               	bcf	3,6	;RP1=0, select bank1
  5286  06C0  00A2               	movwf	(??_lg_find_best_solution+2)^(0+128)
  5287  06C1  01A3               	clrf	((??_lg_find_best_solution+2)^(0+128)+1)
  5288  06C2  0822               	movf	(??_lg_find_best_solution+2)^(0+128),w
  5289  06C3  1283               	bcf	3,5	;RP0=0, select bank0
  5290  06C4  1303               	bcf	3,6	;RP1=0, select bank0
  5291  06C5  00C9               	movwf	___wmul@multiplier
  5292  06C6  1683               	bsf	3,5	;RP0=1, select bank1
  5293  06C7  1303               	bcf	3,6	;RP1=0, select bank1
  5294  06C8  0823               	movf	(??_lg_find_best_solution+3)^(0+128),w
  5295  06C9  1283               	bcf	3,5	;RP0=0, select bank0
  5296  06CA  1303               	bcf	3,6	;RP1=0, select bank0
  5297  06CB  00CA               	movwf	___wmul@multiplier+1
  5298  06CC  3003               	movlw	3
  5299  06CD  00CB               	movwf	___wmul@multiplicand
  5300  06CE  3000               	movlw	0
  5301  06CF  00CC               	movwf	___wmul@multiplicand+1
  5302  06D0  160A  158A  2256  120A  118A  	fcall	___wmul
  5303  06D5  1283               	bcf	3,5	;RP0=0, select bank0
  5304  06D6  1303               	bcf	3,6	;RP1=0, select bank0
  5305  06D7  0949               	comf	?___wmul,w
  5306  06D8  1683               	bsf	3,5	;RP0=1, select bank1
  5307  06D9  1303               	bcf	3,6	;RP1=0, select bank1
  5308  06DA  00A4               	movwf	(??_lg_find_best_solution+4)^(0+128)
  5309  06DB  1283               	bcf	3,5	;RP0=0, select bank0
  5310  06DC  1303               	bcf	3,6	;RP1=0, select bank0
  5311  06DD  094A               	comf	?___wmul+1,w
  5312  06DE  1683               	bsf	3,5	;RP0=1, select bank1
  5313  06DF  1303               	bcf	3,6	;RP1=0, select bank1
  5314  06E0  00A5               	movwf	((??_lg_find_best_solution+4)^(0+128)+1)
  5315  06E1  0AA4               	incf	(??_lg_find_best_solution+4)^(0+128),f
  5316  06E2  1903               	skipnz
  5317  06E3  0AA5               	incf	((??_lg_find_best_solution+4)^(0+128)+1),f
  5318  06E4  0844               	movf	(lg_find_best_solution@temp_high+1)^(0+128),w
  5319  06E5  1283               	bcf	3,5	;RP0=0, select bank0
  5320  06E6  1303               	bcf	3,6	;RP1=0, select bank0
  5321  06E7  00CA               	movwf	___wmul@multiplier+1
  5322  06E8  1683               	bsf	3,5	;RP0=1, select bank1
  5323  06E9  1303               	bcf	3,6	;RP1=0, select bank1
  5324  06EA  0843               	movf	lg_find_best_solution@temp_high^(0+128),w
  5325  06EB  1283               	bcf	3,5	;RP0=0, select bank0
  5326  06EC  1303               	bcf	3,6	;RP1=0, select bank0
  5327  06ED  00C9               	movwf	___wmul@multiplier
  5328  06EE  3005               	movlw	5
  5329  06EF  00CB               	movwf	___wmul@multiplicand
  5330  06F0  3000               	movlw	0
  5331  06F1  00CC               	movwf	___wmul@multiplicand+1
  5332  06F2  160A  158A  2256  120A  118A  	fcall	___wmul
  5333  06F7  1283               	bcf	3,5	;RP0=0, select bank0
  5334  06F8  1303               	bcf	3,6	;RP1=0, select bank0
  5335  06F9  0949               	comf	?___wmul,w
  5336  06FA  1683               	bsf	3,5	;RP0=1, select bank1
  5337  06FB  1303               	bcf	3,6	;RP1=0, select bank1
  5338  06FC  00A6               	movwf	(??_lg_find_best_solution+6)^(0+128)
  5339  06FD  1283               	bcf	3,5	;RP0=0, select bank0
  5340  06FE  1303               	bcf	3,6	;RP1=0, select bank0
  5341  06FF  094A               	comf	?___wmul+1,w
  5342  0700  1683               	bsf	3,5	;RP0=1, select bank1
  5343  0701  1303               	bcf	3,6	;RP1=0, select bank1
  5344  0702  00A7               	movwf	((??_lg_find_best_solution+6)^(0+128)+1)
  5345  0703  0AA6               	incf	(??_lg_find_best_solution+6)^(0+128),f
  5346  0704  1903               	skipnz
  5347  0705  0AA7               	incf	((??_lg_find_best_solution+6)^(0+128)+1),f
  5348  0706  30D0               	movlw	(low (_temp_matrix16x8| (0+256)))& (0+255)
  5349  0707  160A  118A  21C6  120A  118A  	fcall	_lg_get_num_of_orphan
  5350  070C  1283               	bcf	3,5	;RP0=0, select bank0
  5351  070D  1303               	bcf	3,6	;RP1=0, select bank0
  5352  070E  0835               	movf	?_lg_get_num_of_orphan,w
  5353  070F  1683               	bsf	3,5	;RP0=1, select bank1
  5354  0710  1303               	bcf	3,6	;RP1=0, select bank1
  5355  0711  00A8               	movwf	(??_lg_find_best_solution+8)^(0+128)
  5356  0712  1283               	bcf	3,5	;RP0=0, select bank0
  5357  0713  1303               	bcf	3,6	;RP1=0, select bank0
  5358  0714  0836               	movf	?_lg_get_num_of_orphan+1,w
  5359  0715  1683               	bsf	3,5	;RP0=1, select bank1
  5360  0716  1303               	bcf	3,6	;RP1=0, select bank1
  5361  0717  00A9               	movwf	((??_lg_find_best_solution+8)^(0+128)+1)
  5362  0718  1003               	clrc
  5363  0719  0DA8               	rlf	(??_lg_find_best_solution+8)^(0+128),f
  5364  071A  0DA9               	rlf	((??_lg_find_best_solution+8)^(0+128)+1),f
  5365  071B  09A8               	comf	(??_lg_find_best_solution+8)^(0+128),f
  5366  071C  09A9               	comf	((??_lg_find_best_solution+8)^(0+128)+1),f
  5367  071D  0AA8               	incf	(??_lg_find_best_solution+8)^(0+128),f
  5368  071E  1903               	skipnz
  5369  071F  0AA9               	incf	((??_lg_find_best_solution+8)^(0+128)+1),f
  5370  0720  30D0               	movlw	(low (_temp_matrix16x8| (0+256)))& (0+255)
  5371  0721  160A  158A  23E1  120A  118A  	fcall	_lg_get_num_removed_rows
  5372  0726  1683               	bsf	3,5	;RP0=1, select bank1
  5373  0727  1303               	bcf	3,6	;RP1=0, select bank1
  5374  0728  00AA               	movwf	(??_lg_find_best_solution+10)^(0+128)
  5375  0729  01AB               	clrf	((??_lg_find_best_solution+10)^(0+128)+1)
  5376  072A  300A               	movlw	10
  5377  072B  00FF               	movwf	127
  5378  072C                     u7155:	
  5379  072C  1003               	clrc
  5380  072D  0DAA               	rlf	(??_lg_find_best_solution+10)^(0+128),f
  5381  072E  0DAB               	rlf	((??_lg_find_best_solution+10)^(0+128)+1),f
  5382  072F  0BFF               	decfsz	127,f
  5383  0730  2F2C               	goto	u7155
  5384  0731  0828               	movf	(??_lg_find_best_solution+8)^(0+128),w
  5385  0732  072A               	addwf	(??_lg_find_best_solution+10)^(0+128),w
  5386  0733  00AC               	movwf	(??_lg_find_best_solution+12)^(0+128)
  5387  0734  0829               	movf	(??_lg_find_best_solution+9)^(0+128),w
  5388  0735  1803               	skipnc
  5389  0736  0A29               	incf	(??_lg_find_best_solution+9)^(0+128),w
  5390  0737  072B               	addwf	(??_lg_find_best_solution+11)^(0+128),w
  5391  0738  00AD               	movwf	(??_lg_find_best_solution+13)^(0+128)
  5392  0739  0826               	movf	(??_lg_find_best_solution+6)^(0+128),w
  5393  073A  072C               	addwf	(??_lg_find_best_solution+12)^(0+128),w
  5394  073B  00AE               	movwf	(??_lg_find_best_solution+14)^(0+128)
  5395  073C  0827               	movf	(??_lg_find_best_solution+7)^(0+128),w
  5396  073D  1803               	skipnc
  5397  073E  0A27               	incf	(??_lg_find_best_solution+7)^(0+128),w
  5398  073F  072D               	addwf	(??_lg_find_best_solution+13)^(0+128),w
  5399  0740  00AF               	movwf	(??_lg_find_best_solution+15)^(0+128)
  5400  0741  0824               	movf	(??_lg_find_best_solution+4)^(0+128),w
  5401  0742  072E               	addwf	(??_lg_find_best_solution+14)^(0+128),w
  5402  0743  00B0               	movwf	(??_lg_find_best_solution+16)^(0+128)
  5403  0744  0825               	movf	(??_lg_find_best_solution+5)^(0+128),w
  5404  0745  1803               	skipnc
  5405  0746  0A25               	incf	(??_lg_find_best_solution+5)^(0+128),w
  5406  0747  072F               	addwf	(??_lg_find_best_solution+15)^(0+128),w
  5407  0748  00B1               	movwf	(??_lg_find_best_solution+17)^(0+128)
  5408  0749  0820               	movf	??_lg_find_best_solution^(0+128),w
  5409  074A  0730               	addwf	(??_lg_find_best_solution+16)^(0+128),w
  5410  074B  00CB               	movwf	lg_find_best_solution@temp_risk^(0+128)
  5411  074C  0821               	movf	(??_lg_find_best_solution+1)^(0+128),w
  5412  074D  1803               	skipnc
  5413  074E  0A21               	incf	(??_lg_find_best_solution+1)^(0+128),w
  5414  074F  0731               	addwf	(??_lg_find_best_solution+17)^(0+128),w
  5415  0750                     L5:	
  5416  0750  00CC               	movwf	(lg_find_best_solution@temp_risk+1)^(0+128)
  5417                           
  5418                           ;logic.h: 527: }
  5419                           ;logic.h: 528: dbg_print_MATRIX16x8(0, "Valid instance", &temp_matrix16x8);
  5420  0751  3020               	movlw	low (STR_130| (0+32768))
  5421  0752  1283               	bcf	3,5	;RP0=0, select bank0
  5422  0753  1303               	bcf	3,6	;RP1=0, select bank0
  5423  0754  00B5               	movwf	dbg_print_MATRIX16x8@lable
  5424  0755  308C               	movlw	high (STR_130| (0+32768))
  5425  0756  00B6               	movwf	dbg_print_MATRIX16x8@lable+1
  5426  0757  30D0               	movlw	(low (_temp_matrix16x8| (0+256)))& (0+255)
  5427  0758  00B7               	movwf	dbg_print_MATRIX16x8@matrix
  5428  0759  3001               	movlw	1
  5429  075A  00B8               	movwf	dbg_print_MATRIX16x8@matrix+1
  5430  075B  3000               	movlw	0
  5431  075C  120A  118A  2107  120A  118A  	fcall	_dbg_print_MATRIX16x8
  5432                           
  5433                           ;logic.h: 529: do { if(0) { int n = sprintf(g_debug, "Start evaluation""\r\n"); if(n > 6
      +                          4) { USARTWriteString("ERROR: g_debug is overflowed\r\n"); do { ((void)0); asm("ljmp $")
      +                          ; }while(0); } USARTWriteString(g_debug); } } while (0);;
  5434  0761  2F65               	goto	l5640
  5435  0762  120A  118A  2CA3   	ljmp	$	;# 
  5436  0765                     l5640:	
  5437                           
  5438                           ;logic.h: 531: if(temp_risk > temp_pre_risk)
  5439  0765  1683               	bsf	3,5	;RP0=1, select bank1
  5440  0766  1303               	bcf	3,6	;RP1=0, select bank1
  5441  0767  084A               	movf	(lg_find_best_solution@temp_pre_risk+1)^(0+128),w
  5442  0768  3A80               	xorlw	128
  5443  0769  00A0               	movwf	??_lg_find_best_solution^(0+128)
  5444  076A  084C               	movf	(lg_find_best_solution@temp_risk+1)^(0+128),w
  5445  076B  3A80               	xorlw	128
  5446  076C  0220               	subwf	??_lg_find_best_solution^(0+128),w
  5447  076D  1D03               	skipz
  5448  076E  2F71               	goto	u7185
  5449  076F  084B               	movf	lg_find_best_solution@temp_risk^(0+128),w
  5450  0770  0249               	subwf	lg_find_best_solution@temp_pre_risk^(0+128),w
  5451  0771                     u7185:	
  5452  0771  1C03               	btfss	3,0
  5453  0772  2F77               	goto	l5648
  5454  0773  2F85               	goto	l5660
  5455                           
  5456                           ;logic.h: 532: {
  5457                           ;logic.h: 533: do { if(0) { int n = sprintf(g_debug, "risk: (%d) > (%d)""\r\n", temp_ris
      +                          k, temp_pre_risk); if(n > 64) { USARTWriteString("ERROR: g_debug is overflowed\r\n"); do
      +                           { ((void)0); asm("ljmp $"); }while(0); } USARTWriteString(g_debug); } } while (0);;
  5458  0774  120A  118A  2CA3   	ljmp	$	;# 
  5459  0777                     l5648:	
  5460                           
  5461                           ;logic.h: 534: temp_pre_risk = temp_risk;
  5462  0777  1683               	bsf	3,5	;RP0=1, select bank1
  5463  0778  1303               	bcf	3,6	;RP1=0, select bank1
  5464  0779  084C               	movf	(lg_find_best_solution@temp_risk+1)^(0+128),w
  5465  077A  00CA               	movwf	(lg_find_best_solution@temp_pre_risk+1)^(0+128)
  5466  077B  084B               	movf	lg_find_best_solution@temp_risk^(0+128),w
  5467  077C  00C9               	movwf	lg_find_best_solution@temp_pre_risk^(0+128)
  5468                           
  5469                           ;logic.h: 535: tem_pre_sub_index = tem_sub_index;
  5470  077D  0847               	movf	lg_find_best_solution@tem_sub_index^(0+128),w
  5471  077E  00A0               	movwf	??_lg_find_best_solution^(0+128)
  5472  077F  0820               	movf	??_lg_find_best_solution^(0+128),w
  5473  0780  00C6               	movwf	lg_find_best_solution@tem_pre_sub_index^(0+128)
  5474                           
  5475                           ;logic.h: 536: temp_pre_x = temp_x;
  5476  0781  084D               	movf	lg_find_best_solution@temp_x^(0+128),w
  5477  0782  00A0               	movwf	??_lg_find_best_solution^(0+128)
  5478  0783  0820               	movf	??_lg_find_best_solution^(0+128),w
  5479  0784  00C5               	movwf	lg_find_best_solution@temp_pre_x^(0+128)
  5480  0785                     l5660:	
  5481                           ;logic.h: 537: }
  5482                           ;logic.h: 540: do { if(0) { int n = sprintf(g_debug, "sub_index = %d, temp_pre_x = %d, t
      +                          emp_pre_risk = %d""\r\n", tem_pre_sub_index, temp_pre_x, temp_pre_risk); if(n > 64) { US
      +                          ARTWriteString("ERROR: g_debug is overflowed\r\n"); do { ((void)0); asm("ljmp $"); }whil
      +                          e
  5483                           
  5484  0785  3001               	movlw	1
  5485  0786  1683               	bsf	3,5	;RP0=1, select bank1
  5486  0787  1303               	bcf	3,6	;RP1=0, select bank1
  5487  0788  00A0               	movwf	??_lg_find_best_solution^(0+128)
  5488  0789  0820               	movf	??_lg_find_best_solution^(0+128),w
  5489  078A  07CD               	addwf	lg_find_best_solution@temp_x^(0+128),f
  5490  078B  2D21               	goto	l5662
  5491                           
  5492                           ;logic.h: 530: do { if(0) { int n = sprintf(g_debug, "temp_risk = %d""\r\n", temp_risk);
      +                           if(n > 64) { USARTWriteString("ERROR: g_debug is overflowed\r\n"); do { ((void)0); asm(
      +                          "ljmp $"); }while(0); } USARTWriteString(g_debug); } } while (0);;
  5493  078C  120A  118A  2CA3   	ljmp	$	;# 
  5494  078F                     l5664:	
  5495  078F  3001               	movlw	1
  5496  0790  00A0               	movwf	??_lg_find_best_solution^(0+128)
  5497  0791  0820               	movf	??_lg_find_best_solution^(0+128),w
  5498  0792  07C7               	addwf	lg_find_best_solution@tem_sub_index^(0+128),f
  5499  0793  2CB3               	goto	l5666
  5500  0794  120A  118A  2CA3   	ljmp	$	;# 
  5501  0797                     l5668:	
  5502                           
  5503                           ;logic.h: 549: }
  5504                           ;logic.h: 550: }
  5505                           ;logic.h: 551: if(res == 1)
  5506  0797  0342               	decf	lg_find_best_solution@res^(0+128),w
  5507  0798  1D03               	btfss	3,2
  5508  0799  2FC6               	goto	l5686
  5509                           
  5510                           ;logic.h: 552: {
  5511                           ;logic.h: 553: g_char_info_sub_index = tem_pre_sub_index;
  5512  079A  0846               	movf	lg_find_best_solution@tem_pre_sub_index^(0+128),w
  5513  079B  00A0               	movwf	??_lg_find_best_solution^(0+128)
  5514  079C  0820               	movf	??_lg_find_best_solution^(0+128),w
  5515  079D  1283               	bcf	3,5	;RP0=0, select bank0
  5516  079E  1303               	bcf	3,6	;RP1=0, select bank0
  5517  079F  00EF               	movwf	_g_char_info_sub_index
  5518                           
  5519                           ;logic.h: 554: cur_x = temp_pre_x;
  5520  07A0  1683               	bsf	3,5	;RP0=1, select bank1
  5521  07A1  1303               	bcf	3,6	;RP1=0, select bank1
  5522  07A2  0845               	movf	lg_find_best_solution@temp_pre_x^(0+128),w
  5523  07A3  00A0               	movwf	??_lg_find_best_solution^(0+128)
  5524  07A4  0820               	movf	??_lg_find_best_solution^(0+128),w
  5525  07A5  00EC               	movwf	_cur_x^(0+128)
  5526                           
  5527                           ;logic.h: 555: dbg_print_cur_MATRIX4x4(0, "Chosen", cur_x, cur_y);
  5528  07A6  30E2               	movlw	low (STR_139| (0+32768))
  5529  07A7  1283               	bcf	3,5	;RP0=0, select bank0
  5530  07A8  1303               	bcf	3,6	;RP1=0, select bank0
  5531  07A9  00D2               	movwf	dbg_print_cur_MATRIX4x4@lable
  5532  07AA  308C               	movlw	high (STR_139| (0+32768))
  5533  07AB  00D3               	movwf	dbg_print_cur_MATRIX4x4@lable+1
  5534  07AC  1683               	bsf	3,5	;RP0=1, select bank1
  5535  07AD  1303               	bcf	3,6	;RP1=0, select bank1
  5536  07AE  086C               	movf	_cur_x^(0+128),w
  5537  07AF  00A0               	movwf	??_lg_find_best_solution^(0+128)
  5538  07B0  0820               	movf	??_lg_find_best_solution^(0+128),w
  5539  07B1  1283               	bcf	3,5	;RP0=0, select bank0
  5540  07B2  1303               	bcf	3,6	;RP1=0, select bank0
  5541  07B3  00D4               	movwf	dbg_print_cur_MATRIX4x4@x
  5542  07B4  1683               	bsf	3,5	;RP0=1, select bank1
  5543  07B5  1303               	bcf	3,6	;RP1=0, select bank1
  5544  07B6  0857               	movf	_cur_y^(0+128),w
  5545  07B7  00A1               	movwf	(??_lg_find_best_solution+1)^(0+128)
  5546  07B8  0821               	movf	(??_lg_find_best_solution+1)^(0+128),w
  5547  07B9  1283               	bcf	3,5	;RP0=0, select bank0
  5548  07BA  1303               	bcf	3,6	;RP1=0, select bank0
  5549  07BB  00D5               	movwf	dbg_print_cur_MATRIX4x4@y
  5550  07BC  3000               	movlw	0
  5551  07BD  160A  118A  264A  120A  118A  	fcall	_dbg_print_cur_MATRIX4x4
  5552                           
  5553                           ;logic.h: 557: do { if(0) { int n = sprintf(g_debug, "chosen sub_index = %d, temp_pre_x 
      +                          = %d, temp_pre_risk = %d""\r\n", tem_pre_sub_index, temp_pre_x, temp_pre_risk); if(n > 6
      +                          4) { USARTWriteString("ERROR: g_debug is overflowed\r\n"); do { ((void)0); asm("ljmp $")
      +                          ;
  5554  07C2  2FC6               	goto	l5686
  5555  07C3  120A  118A  2CA3   	ljmp	$	;# 
  5556  07C6                     l5686:	
  5557                           
  5558                           ;logic.h: 569: }
  5559                           ;logic.h: 570: return res;
  5560  07C6  1683               	bsf	3,5	;RP0=1, select bank1
  5561  07C7  1303               	bcf	3,6	;RP1=0, select bank1
  5562  07C8  0842               	movf	lg_find_best_solution@res^(0+128),w
  5563  07C9  0008               	return
  5564                           
  5565                           ;logic.h: 566: else
  5566                           ;logic.h: 567: {
  5567                           ;logic.h: 568: do { if(0) { int n = sprintf(g_debug, "GAME OVER!!!""\r\n"); if(n > 64) {
      +                           USARTWriteString("ERROR: g_debug is overflowed\r\n"); do { ((void)0); asm("ljmp $"); }w
      +                          hile(0); } USARTWriteString(g_debug); } } while (0);;
  5568                           
  5569                           ;logic.h: 565: }
  5570  07CA  120A  118A  2CA3   	ljmp	$	;# 
  5571  07CD                     __end_of_lg_find_best_solution:	
  5572                           
  5573                           	psect	text11
  5574  1C3D                     __ptext11:	
  5575 ;; *************** function _lg_right_most *****************
  5576 ;; Defined at:
  5577 ;;		line 362 in file "../logic.h"
  5578 ;; Parameters:    Size  Location     Type
  5579 ;;  x               1    wreg     char 
  5580 ;;  matrix4x4       2   31[BANK0 ] PTR const struct .
  5581 ;;		 -> NULL(0), g_matrix4x4(96), 
  5582 ;;  matrix16x8      1   33[BANK0 ] PTR const struct .
  5583 ;;		 -> g_matrix16x8(16), 
  5584 ;; Auto vars:     Size  Location     Type
  5585 ;;  x               1   38[BANK0 ] char 
  5586 ;;  n               2   36[BANK0 ] int 
  5587 ;; Return value:  Size  Location     Type
  5588 ;;                  1    wreg      char 
  5589 ;; Registers used:
  5590 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  5591 ;; Tracked objects:
  5592 ;;		On entry : 0/0
  5593 ;;		On exit  : 0/0
  5594 ;;		Unchanged: 0/0
  5595 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5596 ;;      Params:         0       3       0       0       0
  5597 ;;      Locals:         0       3       0       0       0
  5598 ;;      Temps:          0       2       0       0       0
  5599 ;;      Totals:         0       8       0       0       0
  5600 ;;Total ram usage:        8 bytes
  5601 ;; Hardware stack levels used:    1
  5602 ;; Hardware stack levels required when called:    4
  5603 ;; This function calls:
  5604 ;;		_USARTWriteString
  5605 ;;		_lg_is_right_boundary
  5606 ;;		_sprintf
  5607 ;; This function is called by:
  5608 ;;		_lg_find_best_solution
  5609 ;; This function uses a non-reentrant model
  5610 ;;
  5611                           
  5612                           
  5613                           ;psect for function _lg_right_most
  5614  1C3D                     _lg_right_most:	
  5615                           
  5616                           ;incstack = 0
  5617                           ; Regs used in _lg_right_most: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  5618                           ;lg_right_most@x stored from wreg
  5619  1C3D  1283               	bcf	3,5	;RP0=0, select bank0
  5620  1C3E  1303               	bcf	3,6	;RP1=0, select bank0
  5621  1C3F  00C6               	movwf	lg_right_most@x
  5622  1C40                     l665:	
  5623                           ;logic.h: 364: while(1)
  5624                           
  5625                           
  5626                           ;logic.h: 365: {
  5627                           ;logic.h: 367: Seed++;
  5628  1C40  3001               	movlw	1
  5629  1C41  1683               	bsf	3,5	;RP0=1, select bank1
  5630  1C42  1303               	bcf	3,6	;RP1=0, select bank1
  5631  1C43  07D3               	addwf	_Seed^(0+128),f
  5632  1C44  1803               	skipnc
  5633  1C45  0AD4               	incf	(_Seed+1)^(0+128),f
  5634  1C46  3000               	movlw	0
  5635  1C47  07D4               	addwf	(_Seed+1)^(0+128),f
  5636                           
  5637                           ;logic.h: 369: if(lg_is_right_boundary(x, matrix4x4, matrix16x8) == ALIGN_RIGHT_OVER_BOU
      +                          NDARY)
  5638  1C48  1283               	bcf	3,5	;RP0=0, select bank0
  5639  1C49  1303               	bcf	3,6	;RP1=0, select bank0
  5640  1C4A  083F               	movf	lg_right_most@matrix4x4,w
  5641  1C4B  00B5               	movwf	lg_is_right_boundary@matrix4x4
  5642  1C4C  0840               	movf	lg_right_most@matrix4x4+1,w
  5643  1C4D  00B6               	movwf	lg_is_right_boundary@matrix4x4+1
  5644  1C4E  0841               	movf	lg_right_most@matrix16x8,w
  5645  1C4F  00C2               	movwf	??_lg_right_most
  5646  1C50  0842               	movf	??_lg_right_most,w
  5647  1C51  00B7               	movwf	lg_is_right_boundary@matrix16x8
  5648  1C52  0846               	movf	lg_right_most@x,w
  5649  1C53  160A  158A  2752  160A  158A  	fcall	_lg_is_right_boundary
  5650  1C58  3A02               	xorlw	2
  5651  1C59  1903               	btfsc	3,2
  5652  1C5A  2C5F               	goto	l4712
  5653  1C5B  2C64               	goto	l4716
  5654                           
  5655                           ;logic.h: 370: {
  5656                           ;logic.h: 371: do { if(0) { int n = sprintf(g_debug, "right_most = %d""\r\n", x - 1); if
      +                          (n > 64) { USARTWriteString("ERROR: g_debug is overflowed\r\n"); do { ((void)0); asm("lj
      +                          mp $"); }while(0); } USARTWriteString(g_debug); } } while (0);;
  5657  1C5C  160A  158A  2C3D   	ljmp	$	;# 
  5658  1C5F                     l4712:	
  5659                           
  5660                           ;logic.h: 372: return x - 1;
  5661  1C5F  1283               	bcf	3,5	;RP0=0, select bank0
  5662  1C60  1303               	bcf	3,6	;RP1=0, select bank0
  5663  1C61  0846               	movf	lg_right_most@x,w
  5664  1C62  3EFF               	addlw	-1
  5665  1C63  0008               	return
  5666  1C64                     l4716:	
  5667                           
  5668                           ;logic.h: 373: }
  5669                           ;logic.h: 374: x++;
  5670  1C64  3001               	movlw	1
  5671  1C65  1283               	bcf	3,5	;RP0=0, select bank0
  5672  1C66  1303               	bcf	3,6	;RP1=0, select bank0
  5673  1C67  00C2               	movwf	??_lg_right_most
  5674  1C68  0842               	movf	??_lg_right_most,w
  5675  1C69  07C6               	addwf	lg_right_most@x,f
  5676  1C6A  2C40               	goto	l665
  5677  1C6B                     __end_of_lg_right_most:	
  5678                           
  5679                           	psect	text12
  5680  1F52                     __ptext12:	
  5681 ;; *************** function _lg_is_right_boundary *****************
  5682 ;; Defined at:
  5683 ;;		line 172 in file "../logic.h"
  5684 ;; Parameters:    Size  Location     Type
  5685 ;;  x               1    wreg     char 
  5686 ;;  matrix4x4       2   21[BANK0 ] PTR const struct .
  5687 ;;		 -> NULL(0), g_matrix4x4(96), 
  5688 ;;  matrix16x8      1   23[BANK0 ] PTR const struct .
  5689 ;;		 -> g_matrix16x8(16), 
  5690 ;; Auto vars:     Size  Location     Type
  5691 ;;  x               1   28[BANK0 ] char 
  5692 ;;  n               2   26[BANK0 ] int 
  5693 ;;  col             1   30[BANK0 ] char 
  5694 ;;  row             1   29[BANK0 ] char 
  5695 ;; Return value:  Size  Location     Type
  5696 ;;                  1    wreg      unsigned char 
  5697 ;; Registers used:
  5698 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  5699 ;; Tracked objects:
  5700 ;;		On entry : 0/0
  5701 ;;		On exit  : 0/0
  5702 ;;		Unchanged: 0/0
  5703 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5704 ;;      Params:         0       3       0       0       0
  5705 ;;      Locals:         0       5       0       0       0
  5706 ;;      Temps:          0       2       0       0       0
  5707 ;;      Totals:         0      10       0       0       0
  5708 ;;Total ram usage:       10 bytes
  5709 ;; Hardware stack levels used:    1
  5710 ;; Hardware stack levels required when called:    3
  5711 ;; This function calls:
  5712 ;;		_USARTWriteString
  5713 ;;		_get_matrix_bit
  5714 ;;		_sprintf
  5715 ;; This function is called by:
  5716 ;;		_lg_right_most
  5717 ;; This function uses a non-reentrant model
  5718 ;;
  5719                           
  5720                           
  5721                           ;psect for function _lg_is_right_boundary
  5722  1F52                     _lg_is_right_boundary:	
  5723                           
  5724                           ;incstack = 0
  5725                           ; Regs used in _lg_is_right_boundary: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstac
      +                          k]
  5726                           ;lg_is_right_boundary@x stored from wreg
  5727  1F52  1283               	bcf	3,5	;RP0=0, select bank0
  5728  1F53  1303               	bcf	3,6	;RP1=0, select bank0
  5729  1F54  00BC               	movwf	lg_is_right_boundary@x
  5730                           
  5731                           ;logic.h: 174: for(int8_t row = 4 - 1; row >= 0; row--)
  5732  1F55  3003               	movlw	3
  5733  1F56  00B8               	movwf	??_lg_is_right_boundary
  5734  1F57  0838               	movf	??_lg_is_right_boundary,w
  5735  1F58  00BD               	movwf	lg_is_right_boundary@row
  5736  1F59  1BBD               	btfsc	lg_is_right_boundary@row,7
  5737  1F5A  2FA5               	goto	l4254
  5738  1F5B                     l4226:	
  5739                           
  5740                           ;logic.h: 175: {
  5741                           ;logic.h: 176: for(int8_t col = 0; col < 4; col++)
  5742  1F5B  01BE               	clrf	lg_is_right_boundary@col
  5743  1F5C  083E               	movf	lg_is_right_boundary@col,w
  5744  1F5D  3A80               	xorlw	128
  5745  1F5E  3E7C               	addlw	-132
  5746  1F5F  1803               	btfsc	3,0
  5747  1F60  2F9F               	goto	l4250
  5748  1F61                     l4232:	
  5749                           
  5750                           ;logic.h: 177: {
  5751                           ;logic.h: 178: if(get_matrix_bit((uint8_t*)matrix4x4->row, row, col) == 1)
  5752  1F61  0835               	movf	lg_is_right_boundary@matrix4x4,w
  5753  1F62  00F7               	movwf	get_matrix_bit@byte
  5754  1F63  0836               	movf	lg_is_right_boundary@matrix4x4+1,w
  5755  1F64  00F8               	movwf	get_matrix_bit@byte+1
  5756  1F65  083D               	movf	lg_is_right_boundary@row,w
  5757  1F66  00B8               	movwf	??_lg_is_right_boundary
  5758  1F67  0838               	movf	??_lg_is_right_boundary,w
  5759  1F68  00F9               	movwf	get_matrix_bit@row
  5760  1F69  083E               	movf	lg_is_right_boundary@col,w
  5761  1F6A  00B9               	movwf	??_lg_is_right_boundary+1
  5762  1F6B  0839               	movf	??_lg_is_right_boundary+1,w
  5763  1F6C  00FA               	movwf	get_matrix_bit@col
  5764  1F6D  160A  158A  2198  160A  158A  	fcall	_get_matrix_bit
  5765  1F72  3A01               	xorlw	1
  5766  1F73  1D03               	skipz
  5767  1F74  2F94               	goto	l4246
  5768                           
  5769                           ;logic.h: 179: {
  5770                           ;logic.h: 180: if(x + col > 8 - 1)
  5771  1F75  1283               	bcf	3,5	;RP0=0, select bank0
  5772  1F76  1303               	bcf	3,6	;RP1=0, select bank0
  5773  1F77  083C               	movf	lg_is_right_boundary@x,w
  5774  1F78  073E               	addwf	lg_is_right_boundary@col,w
  5775  1F79  00B8               	movwf	??_lg_is_right_boundary
  5776  1F7A  01B9               	clrf	??_lg_is_right_boundary+1
  5777  1F7B  1803               	skipnc
  5778  1F7C  0AB9               	incf	??_lg_is_right_boundary+1,f
  5779  1F7D  1BBC               	btfsc	lg_is_right_boundary@x,7
  5780  1F7E  03B9               	decf	??_lg_is_right_boundary+1,f
  5781  1F7F  1BBE               	btfsc	lg_is_right_boundary@col,7
  5782  1F80  03B9               	decf	??_lg_is_right_boundary+1,f
  5783  1F81  1283               	bcf	3,5	;RP0=0, select bank0
  5784  1F82  1303               	bcf	3,6	;RP1=0, select bank0
  5785  1F83  0839               	movf	??_lg_is_right_boundary+1,w
  5786  1F84  3A80               	xorlw	128
  5787  1F85  00FF               	movwf	127
  5788  1F86  3080               	movlw	128
  5789  1F87  027F               	subwf	127,w
  5790  1F88  1D03               	skipz
  5791  1F89  2F8C               	goto	u4685
  5792  1F8A  3008               	movlw	8
  5793  1F8B  0238               	subwf	??_lg_is_right_boundary,w
  5794  1F8C                     u4685:	
  5795  1F8C  1803               	btfsc	3,0
  5796  1F8D  2F92               	goto	l4242
  5797  1F8E  2F94               	goto	l4246
  5798                           
  5799                           ;logic.h: 181: {
  5800                           ;logic.h: 182: do { if(0) { int n = sprintf(g_debug, "ALIGN_RIGHT_OVER_BOUNDARY""\r\n");
      +                           if(n > 64) { USARTWriteString("ERROR: g_debug is overflowed\r\n"); do { ((void)0); asm(
      +                          "ljmp $"); }while(0); } USARTWriteString(g_debug); } } while (0);;
  5801  1F8F  160A  158A  2F52   	ljmp	$	;# 
  5802  1F92                     l4242:	
  5803                           
  5804                           ;logic.h: 183: return ALIGN_RIGHT_OVER_BOUNDARY;
  5805  1F92  3002               	movlw	2
  5806  1F93  0008               	return
  5807  1F94                     l4246:	
  5808  1F94  3001               	movlw	1
  5809  1F95  1283               	bcf	3,5	;RP0=0, select bank0
  5810  1F96  1303               	bcf	3,6	;RP1=0, select bank0
  5811  1F97  00B8               	movwf	??_lg_is_right_boundary
  5812  1F98  0838               	movf	??_lg_is_right_boundary,w
  5813  1F99  07BE               	addwf	lg_is_right_boundary@col,f
  5814  1F9A  083E               	movf	lg_is_right_boundary@col,w
  5815  1F9B  3A80               	xorlw	128
  5816  1F9C  3E7C               	addlw	-132
  5817  1F9D  1C03               	skipc
  5818  1F9E  2F61               	goto	l4232
  5819  1F9F                     l4250:	
  5820  1F9F  30FF               	movlw	255
  5821  1FA0  00B8               	movwf	??_lg_is_right_boundary
  5822  1FA1  0838               	movf	??_lg_is_right_boundary,w
  5823  1FA2  07BD               	addwf	lg_is_right_boundary@row,f
  5824  1FA3  1FBD               	btfss	lg_is_right_boundary@row,7
  5825  1FA4  2F5B               	goto	l4226
  5826  1FA5                     l4254:	
  5827                           
  5828                           ;logic.h: 184: }
  5829                           ;logic.h: 185: }
  5830                           ;logic.h: 186: }
  5831                           ;logic.h: 187: }
  5832                           ;logic.h: 188: return ALIGN_OK;
  5833  1FA5  3000               	movlw	0
  5834  1FA6  0008               	return
  5835  1FA7                     __end_of_lg_is_right_boundary:	
  5836                           
  5837                           	psect	text13
  5838  104F                     __ptext13:	
  5839 ;; *************** function _lg_merge1 *****************
  5840 ;; Defined at:
  5841 ;;		line 251 in file "../logic.h"
  5842 ;; Parameters:    Size  Location     Type
  5843 ;;  x               1    wreg     char 
  5844 ;;  y               1    0[BANK0 ] char 
  5845 ;;  matrix4x4       2    1[BANK0 ] PTR const struct .
  5846 ;;		 -> NULL(0), g_matrix4x4(96), 
  5847 ;;  matrix16x8_i    1    3[BANK0 ] PTR const struct .
  5848 ;;		 -> g_matrix16x8(16), 
  5849 ;;  matrix16x8_o    1    4[BANK0 ] PTR struct .
  5850 ;;		 -> temp_matrix16x8(16), 
  5851 ;; Auto vars:     Size  Location     Type
  5852 ;;  x               1    7[BANK0 ] char 
  5853 ;;  col             1   11[BANK0 ] unsigned char 
  5854 ;;  row             1   10[BANK0 ] unsigned char 
  5855 ;;  len             2    8[BANK0 ] unsigned int 
  5856 ;; Return value:  Size  Location     Type
  5857 ;;                  1    wreg      void 
  5858 ;; Registers used:
  5859 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  5860 ;; Tracked objects:
  5861 ;;		On entry : 0/0
  5862 ;;		On exit  : 0/0
  5863 ;;		Unchanged: 0/0
  5864 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5865 ;;      Params:         0       5       0       0       0
  5866 ;;      Locals:         0       5       0       0       0
  5867 ;;      Temps:          0       2       0       0       0
  5868 ;;      Totals:         0      12       0       0       0
  5869 ;;Total ram usage:       12 bytes
  5870 ;; Hardware stack levels used:    1
  5871 ;; Hardware stack levels required when called:    3
  5872 ;; This function calls:
  5873 ;;		_get_matrix_bit
  5874 ;;		_memcpy
  5875 ;;		_set_matrix_bit
  5876 ;; This function is called by:
  5877 ;;		_lg_find_best_solution
  5878 ;; This function uses a non-reentrant model
  5879 ;;
  5880                           
  5881                           
  5882                           ;psect for function _lg_merge1
  5883  104F                     _lg_merge1:	
  5884                           
  5885                           ;incstack = 0
  5886                           ; Regs used in _lg_merge1: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  5887                           ;lg_merge1@x stored from wreg
  5888  104F  1283               	bcf	3,5	;RP0=0, select bank0
  5889  1050  1303               	bcf	3,6	;RP1=0, select bank0
  5890  1051  00A7               	movwf	lg_merge1@x
  5891                           
  5892                           ;logic.h: 254: size_t len;
  5893                           ;logic.h: 258: len = sizeof(MATRIX16x8);
  5894  1052  3010               	movlw	16
  5895  1053  00A8               	movwf	lg_merge1@len
  5896  1054  3000               	movlw	0
  5897  1055  00A9               	movwf	lg_merge1@len+1
  5898                           
  5899                           ;logic.h: 259: memcpy(matrix16x8_out, matrix16x8_in, len);
  5900  1056  0823               	movf	lg_merge1@matrix16x8_in,w
  5901  1057  00A5               	movwf	??_lg_merge1
  5902  1058  0825               	movf	??_lg_merge1,w
  5903  1059  00F0               	movwf	memcpy@s1
  5904  105A  0829               	movf	lg_merge1@len+1,w
  5905  105B  00F2               	movwf	memcpy@n+1
  5906  105C  0828               	movf	lg_merge1@len,w
  5907  105D  00F1               	movwf	memcpy@n
  5908  105E  0824               	movf	lg_merge1@matrix16x8_out,w
  5909  105F  160A  158A  22E7  160A  118A  	fcall	_memcpy
  5910                           
  5911                           ;logic.h: 261: for(uint8_t row = 0; row < 4; row++)
  5912  1064  1283               	bcf	3,5	;RP0=0, select bank0
  5913  1065  1303               	bcf	3,6	;RP1=0, select bank0
  5914  1066  01AA               	clrf	lg_merge1@row
  5915  1067                     L6:	
  5916  1067  3004               	movlw	4
  5917  1068  022A               	subwf	lg_merge1@row,w
  5918  1069  1803               	btfsc	3,0
  5919  106A  0008               	return
  5920                           
  5921                           ;logic.h: 262: {
  5922                           ;logic.h: 263: for(uint8_t col = 0; col < 4; col++)
  5923  106B  01AB               	clrf	lg_merge1@col
  5924  106C  3004               	movlw	4
  5925  106D  022B               	subwf	lg_merge1@col,w
  5926  106E  1803               	btfsc	3,0
  5927  106F  28A5               	goto	l5564
  5928  1070                     l5556:	
  5929                           
  5930                           ;logic.h: 264: {
  5931                           ;logic.h: 265: if(get_matrix_bit((uint8_t*)matrix4x4->row, row, col) == 1)
  5932  1070  0821               	movf	lg_merge1@matrix4x4,w
  5933  1071  00F7               	movwf	get_matrix_bit@byte
  5934  1072  0822               	movf	lg_merge1@matrix4x4+1,w
  5935  1073  00F8               	movwf	get_matrix_bit@byte+1
  5936  1074  082A               	movf	lg_merge1@row,w
  5937  1075  00A5               	movwf	??_lg_merge1
  5938  1076  0825               	movf	??_lg_merge1,w
  5939  1077  00F9               	movwf	get_matrix_bit@row
  5940  1078  082B               	movf	lg_merge1@col,w
  5941  1079  00A6               	movwf	??_lg_merge1+1
  5942  107A  0826               	movf	??_lg_merge1+1,w
  5943  107B  00FA               	movwf	get_matrix_bit@col
  5944  107C  160A  158A  2198  160A  118A  	fcall	_get_matrix_bit
  5945  1081  3A01               	xorlw	1
  5946  1082  1D03               	skipz
  5947  1083  289B               	goto	l5560
  5948                           
  5949                           ;logic.h: 266: {
  5950                           ;logic.h: 267: set_matrix_bit((uint8_t*)matrix16x8_out->row, y + row, x + col, 1);
  5951  1084  1283               	bcf	3,5	;RP0=0, select bank0
  5952  1085  1303               	bcf	3,6	;RP1=0, select bank0
  5953  1086  0824               	movf	lg_merge1@matrix16x8_out,w
  5954  1087  00F6               	movwf	set_matrix_bit@byte
  5955  1088  3001               	movlw	1
  5956  1089  00F7               	movwf	set_matrix_bit@byte+1
  5957  108A  082A               	movf	lg_merge1@row,w
  5958  108B  0720               	addwf	lg_merge1@y,w
  5959  108C  00A5               	movwf	??_lg_merge1
  5960  108D  0825               	movf	??_lg_merge1,w
  5961  108E  00F8               	movwf	set_matrix_bit@row
  5962  108F  082B               	movf	lg_merge1@col,w
  5963  1090  0727               	addwf	lg_merge1@x,w
  5964  1091  00A6               	movwf	??_lg_merge1+1
  5965  1092  0826               	movf	??_lg_merge1+1,w
  5966  1093  00F9               	movwf	set_matrix_bit@col
  5967  1094  01FA               	clrf	set_matrix_bit@value
  5968  1095  0AFA               	incf	set_matrix_bit@value,f
  5969  1096  160A  158A  21ED  160A  118A  	fcall	_set_matrix_bit
  5970  109B                     l5560:	
  5971  109B  3001               	movlw	1
  5972  109C  1283               	bcf	3,5	;RP0=0, select bank0
  5973  109D  1303               	bcf	3,6	;RP1=0, select bank0
  5974  109E  00A5               	movwf	??_lg_merge1
  5975  109F  0825               	movf	??_lg_merge1,w
  5976  10A0  07AB               	addwf	lg_merge1@col,f
  5977  10A1  3004               	movlw	4
  5978  10A2  022B               	subwf	lg_merge1@col,w
  5979  10A3  1C03               	skipc
  5980  10A4  2870               	goto	l5556
  5981  10A5                     l5564:	
  5982  10A5  3001               	movlw	1
  5983  10A6  00A5               	movwf	??_lg_merge1
  5984  10A7  0825               	movf	??_lg_merge1,w
  5985  10A8  07AA               	addwf	lg_merge1@row,f
  5986  10A9  2867               	goto	L6
  5987  10AA                     __end_of_lg_merge1:	
  5988                           
  5989                           	psect	text14
  5990  1AE7                     __ptext14:	
  5991 ;; *************** function _memcpy *****************
  5992 ;; Defined at:
  5993 ;;		line 11 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\memcpy.c"
  5994 ;; Parameters:    Size  Location     Type
  5995 ;;  d1              1    wreg     PTR void 
  5996 ;;		 -> temp_matrix16x8(16), 
  5997 ;;  s1              1    0[COMMON] PTR const void 
  5998 ;;		 -> g_matrix16x8(16), 
  5999 ;;  n               2    1[COMMON] unsigned int 
  6000 ;; Auto vars:     Size  Location     Type
  6001 ;;  d1              1    4[COMMON] PTR void 
  6002 ;;		 -> temp_matrix16x8(16), 
  6003 ;;  s               1    6[COMMON] PTR const unsigned char 
  6004 ;;		 -> g_matrix16x8(16), 
  6005 ;;  d               1    5[COMMON] PTR unsigned char 
  6006 ;;		 -> temp_matrix16x8(16), 
  6007 ;; Return value:  Size  Location     Type
  6008 ;;                  1    wreg      PTR void 
  6009 ;; Registers used:
  6010 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  6011 ;; Tracked objects:
  6012 ;;		On entry : 0/0
  6013 ;;		On exit  : 0/0
  6014 ;;		Unchanged: 0/0
  6015 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6016 ;;      Params:         3       0       0       0       0
  6017 ;;      Locals:         3       0       0       0       0
  6018 ;;      Temps:          1       0       0       0       0
  6019 ;;      Totals:         7       0       0       0       0
  6020 ;;Total ram usage:        7 bytes
  6021 ;; Hardware stack levels used:    1
  6022 ;; This function calls:
  6023 ;;		Nothing
  6024 ;; This function is called by:
  6025 ;;		_lg_merge1
  6026 ;; This function uses a non-reentrant model
  6027 ;;
  6028                           
  6029                           
  6030                           ;psect for function _memcpy
  6031  1AE7                     _memcpy:	
  6032                           
  6033                           ;incstack = 0
  6034                           ; Regs used in _memcpy: [wreg-fsr0h+status,2+status,0]
  6035                           ;memcpy@d1 stored from wreg
  6036  1AE7  00F4               	movwf	memcpy@d1
  6037  1AE8  0870               	movf	memcpy@s1,w
  6038  1AE9  00F3               	movwf	??_memcpy
  6039  1AEA  0873               	movf	??_memcpy,w
  6040  1AEB  00F6               	movwf	memcpy@s
  6041  1AEC  0874               	movf	memcpy@d1,w
  6042  1AED  00F3               	movwf	??_memcpy
  6043  1AEE  0873               	movf	??_memcpy,w
  6044  1AEF  00F5               	movwf	memcpy@d
  6045  1AF0                     l4266:	
  6046  1AF0  3001               	movlw	1
  6047  1AF1  02F1               	subwf	memcpy@n,f
  6048  1AF2  3000               	movlw	0
  6049  1AF3  1C03               	skipc
  6050  1AF4  03F2               	decf	memcpy@n+1,f
  6051  1AF5  02F2               	subwf	memcpy@n+1,f
  6052  1AF6  0A71               	incf	memcpy@n,w
  6053  1AF7  1903               	btfsc	3,2
  6054  1AF8  0A72               	incf	memcpy@n+1,w
  6055  1AF9  1903               	btfsc	3,2
  6056  1AFA  0008               	return
  6057  1AFB  0876               	movf	memcpy@s,w
  6058  1AFC  0084               	movwf	4
  6059  1AFD  1383               	bcf	3,7	;select IRP bank0
  6060  1AFE  0800               	movf	0,w
  6061  1AFF  00F3               	movwf	??_memcpy
  6062  1B00  0875               	movf	memcpy@d,w
  6063  1B01  0084               	movwf	4
  6064  1B02  0873               	movf	??_memcpy,w
  6065  1B03  1783               	bsf	3,7	;select IRP bank2
  6066  1B04  0080               	movwf	0
  6067  1B05  3001               	movlw	1
  6068  1B06  00F3               	movwf	??_memcpy
  6069  1B07  0873               	movf	??_memcpy,w
  6070  1B08  07F6               	addwf	memcpy@s,f
  6071  1B09  3001               	movlw	1
  6072  1B0A  00F3               	movwf	??_memcpy
  6073  1B0B  0873               	movf	??_memcpy,w
  6074  1B0C  07F5               	addwf	memcpy@d,f
  6075  1B0D  2AF0               	goto	l4266
  6076  1B0E                     __end_of_memcpy:	
  6077                           ;	Return value of _memcpy is never used
  6078                           
  6079                           
  6080                           	psect	text15
  6081  1C0F                     __ptext15:	
  6082 ;; *************** function _lg_left_most *****************
  6083 ;; Defined at:
  6084 ;;		line 347 in file "../logic.h"
  6085 ;; Parameters:    Size  Location     Type
  6086 ;;  x               1    wreg     char 
  6087 ;;  matrix4x4       2   34[BANK0 ] PTR const struct .
  6088 ;;		 -> NULL(0), g_matrix4x4(96), 
  6089 ;;  matrix16x8      1   36[BANK0 ] PTR const struct .
  6090 ;;		 -> g_matrix16x8(16), 
  6091 ;; Auto vars:     Size  Location     Type
  6092 ;;  x               1   40[BANK0 ] char 
  6093 ;;  n               2   38[BANK0 ] int 
  6094 ;; Return value:  Size  Location     Type
  6095 ;;                  1    wreg      char 
  6096 ;; Registers used:
  6097 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  6098 ;; Tracked objects:
  6099 ;;		On entry : 0/0
  6100 ;;		On exit  : 0/0
  6101 ;;		Unchanged: 0/0
  6102 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6103 ;;      Params:         0       3       0       0       0
  6104 ;;      Locals:         0       3       0       0       0
  6105 ;;      Temps:          0       1       0       0       0
  6106 ;;      Totals:         0       7       0       0       0
  6107 ;;Total ram usage:        7 bytes
  6108 ;; Hardware stack levels used:    1
  6109 ;; Hardware stack levels required when called:    4
  6110 ;; This function calls:
  6111 ;;		_USARTWriteString
  6112 ;;		_lg_is_left_boundary
  6113 ;;		_sprintf
  6114 ;; This function is called by:
  6115 ;;		_lg_find_best_solution
  6116 ;; This function uses a non-reentrant model
  6117 ;;
  6118                           
  6119                           
  6120                           ;psect for function _lg_left_most
  6121  1C0F                     _lg_left_most:	
  6122                           
  6123                           ;incstack = 0
  6124                           ; Regs used in _lg_left_most: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  6125                           ;lg_left_most@x stored from wreg
  6126  1C0F  1283               	bcf	3,5	;RP0=0, select bank0
  6127  1C10  1303               	bcf	3,6	;RP1=0, select bank0
  6128  1C11  00C8               	movwf	lg_left_most@x
  6129  1C12                     l652:	
  6130                           ;logic.h: 349: while(1)
  6131                           
  6132                           
  6133                           ;logic.h: 350: {
  6134                           ;logic.h: 352: Seed++;
  6135  1C12  3001               	movlw	1
  6136  1C13  1683               	bsf	3,5	;RP0=1, select bank1
  6137  1C14  1303               	bcf	3,6	;RP1=0, select bank1
  6138  1C15  07D3               	addwf	_Seed^(0+128),f
  6139  1C16  1803               	skipnc
  6140  1C17  0AD4               	incf	(_Seed+1)^(0+128),f
  6141  1C18  3000               	movlw	0
  6142  1C19  07D4               	addwf	(_Seed+1)^(0+128),f
  6143                           
  6144                           ;logic.h: 354: if(lg_is_left_boundary(x, matrix4x4, matrix16x8) == ALIGN_LEFT_OVER_BOUND
      +                          ARY)
  6145  1C1A  1283               	bcf	3,5	;RP0=0, select bank0
  6146  1C1B  1303               	bcf	3,6	;RP1=0, select bank0
  6147  1C1C  0842               	movf	lg_left_most@matrix4x4,w
  6148  1C1D  00B5               	movwf	lg_is_left_boundary@matrix4x4
  6149  1C1E  0843               	movf	lg_left_most@matrix4x4+1,w
  6150  1C1F  00B6               	movwf	lg_is_left_boundary@matrix4x4+1
  6151  1C20  0844               	movf	lg_left_most@matrix16x8,w
  6152  1C21  00C5               	movwf	??_lg_left_most
  6153  1C22  0845               	movf	??_lg_left_most,w
  6154  1C23  00B7               	movwf	lg_is_left_boundary@matrix16x8
  6155  1C24  0848               	movf	lg_left_most@x,w
  6156  1C25  120A  118A  2005  160A  158A  	fcall	_lg_is_left_boundary
  6157  1C2A  3A01               	xorlw	1
  6158  1C2B  1903               	btfsc	3,2
  6159  1C2C  2C31               	goto	l4696
  6160  1C2D  2C36               	goto	l4700
  6161                           
  6162                           ;logic.h: 355: {
  6163                           ;logic.h: 356: do { if(0) { int n = sprintf(g_debug, "left_most = %d""\r\n", x + 1); if(
      +                          n > 64) { USARTWriteString("ERROR: g_debug is overflowed\r\n"); do { ((void)0); asm("ljm
      +                          p $"); }while(0); } USARTWriteString(g_debug); } } while (0);;
  6164  1C2E  160A  158A  2C0F   	ljmp	$	;# 
  6165  1C31                     l4696:	
  6166                           
  6167                           ;logic.h: 357: return x + 1;
  6168  1C31  1283               	bcf	3,5	;RP0=0, select bank0
  6169  1C32  1303               	bcf	3,6	;RP1=0, select bank0
  6170  1C33  0848               	movf	lg_left_most@x,w
  6171  1C34  3E01               	addlw	1
  6172  1C35  0008               	return
  6173  1C36                     l4700:	
  6174                           
  6175                           ;logic.h: 358: }
  6176                           ;logic.h: 359: x--;
  6177  1C36  30FF               	movlw	255
  6178  1C37  1283               	bcf	3,5	;RP0=0, select bank0
  6179  1C38  1303               	bcf	3,6	;RP1=0, select bank0
  6180  1C39  00C5               	movwf	??_lg_left_most
  6181  1C3A  0845               	movf	??_lg_left_most,w
  6182  1C3B  07C8               	addwf	lg_left_most@x,f
  6183  1C3C  2C12               	goto	l652
  6184  1C3D                     __end_of_lg_left_most:	
  6185                           
  6186                           	psect	text16
  6187  0005                     __ptext16:	
  6188 ;; *************** function _lg_is_left_boundary *****************
  6189 ;; Defined at:
  6190 ;;		line 154 in file "../logic.h"
  6191 ;; Parameters:    Size  Location     Type
  6192 ;;  x               1    wreg     char 
  6193 ;;  matrix4x4       2   21[BANK0 ] PTR const struct .
  6194 ;;		 -> NULL(0), g_matrix4x4(96), 
  6195 ;;  matrix16x8      1   23[BANK0 ] PTR const struct .
  6196 ;;		 -> g_matrix16x8(16), 
  6197 ;; Auto vars:     Size  Location     Type
  6198 ;;  x               1   31[BANK0 ] char 
  6199 ;;  n               2   29[BANK0 ] int 
  6200 ;;  col             1   33[BANK0 ] char 
  6201 ;;  row             1   32[BANK0 ] char 
  6202 ;; Return value:  Size  Location     Type
  6203 ;;                  1    wreg      unsigned char 
  6204 ;; Registers used:
  6205 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  6206 ;; Tracked objects:
  6207 ;;		On entry : 0/0
  6208 ;;		On exit  : 0/0
  6209 ;;		Unchanged: 0/0
  6210 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6211 ;;      Params:         0       3       0       0       0
  6212 ;;      Locals:         0       5       0       0       0
  6213 ;;      Temps:          0       5       0       0       0
  6214 ;;      Totals:         0      13       0       0       0
  6215 ;;Total ram usage:       13 bytes
  6216 ;; Hardware stack levels used:    1
  6217 ;; Hardware stack levels required when called:    3
  6218 ;; This function calls:
  6219 ;;		_USARTWriteString
  6220 ;;		_get_matrix_bit
  6221 ;;		_sprintf
  6222 ;; This function is called by:
  6223 ;;		_lg_left_most
  6224 ;; This function uses a non-reentrant model
  6225 ;;
  6226                           
  6227                           
  6228                           ;psect for function _lg_is_left_boundary
  6229  0005                     _lg_is_left_boundary:	
  6230                           
  6231                           ;incstack = 0
  6232                           ; Regs used in _lg_is_left_boundary: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack
      +                          ]
  6233                           ;lg_is_left_boundary@x stored from wreg
  6234  0005  1283               	bcf	3,5	;RP0=0, select bank0
  6235  0006  1303               	bcf	3,6	;RP1=0, select bank0
  6236  0007  00BF               	movwf	lg_is_left_boundary@x
  6237                           
  6238                           ;logic.h: 156: for(int8_t row = 4 - 1; row >= 0; row--)
  6239  0008  3003               	movlw	3
  6240  0009  00B8               	movwf	??_lg_is_left_boundary
  6241  000A  0838               	movf	??_lg_is_left_boundary,w
  6242  000B  00C0               	movwf	lg_is_left_boundary@row
  6243  000C  1BC0               	btfsc	lg_is_left_boundary@row,7
  6244  000D  2854               	goto	l4216
  6245  000E                     l4188:	
  6246                           
  6247                           ;logic.h: 157: {
  6248                           ;logic.h: 158: for(int8_t col = 0; col < 4; col++)
  6249  000E  01C1               	clrf	lg_is_left_boundary@col
  6250  000F  0841               	movf	lg_is_left_boundary@col,w
  6251  0010  3A80               	xorlw	128
  6252  0011  3E7C               	addlw	-132
  6253  0012  1803               	btfsc	3,0
  6254  0013  284E               	goto	l4212
  6255  0014                     l4194:	
  6256                           
  6257                           ;logic.h: 159: {
  6258                           ;logic.h: 160: if(get_matrix_bit((uint8_t*)matrix4x4->row, row, col) == 1)
  6259  0014  0835               	movf	lg_is_left_boundary@matrix4x4,w
  6260  0015  00F7               	movwf	get_matrix_bit@byte
  6261  0016  0836               	movf	lg_is_left_boundary@matrix4x4+1,w
  6262  0017  00F8               	movwf	get_matrix_bit@byte+1
  6263  0018  0840               	movf	lg_is_left_boundary@row,w
  6264  0019  00B8               	movwf	??_lg_is_left_boundary
  6265  001A  0838               	movf	??_lg_is_left_boundary,w
  6266  001B  00F9               	movwf	get_matrix_bit@row
  6267  001C  0841               	movf	lg_is_left_boundary@col,w
  6268  001D  00B9               	movwf	??_lg_is_left_boundary+1
  6269  001E  0839               	movf	??_lg_is_left_boundary+1,w
  6270  001F  00FA               	movwf	get_matrix_bit@col
  6271  0020  160A  158A  2198  120A  118A  	fcall	_get_matrix_bit
  6272  0025  3A01               	xorlw	1
  6273  0026  1D03               	skipz
  6274  0027  2843               	goto	l4208
  6275                           
  6276                           ;logic.h: 161: {
  6277                           ;logic.h: 162: if( x + col < 0)
  6278  0028  1283               	bcf	3,5	;RP0=0, select bank0
  6279  0029  1303               	bcf	3,6	;RP1=0, select bank0
  6280  002A  0841               	movf	lg_is_left_boundary@col,w
  6281  002B  00B8               	movwf	??_lg_is_left_boundary
  6282  002C  01B9               	clrf	??_lg_is_left_boundary+1
  6283  002D  1BB8               	btfsc	??_lg_is_left_boundary,7
  6284  002E  03B9               	decf	??_lg_is_left_boundary+1,f
  6285  002F  083F               	movf	lg_is_left_boundary@x,w
  6286  0030  00BA               	movwf	??_lg_is_left_boundary+2
  6287  0031  01BB               	clrf	??_lg_is_left_boundary+3
  6288  0032  1BBA               	btfsc	??_lg_is_left_boundary+2,7
  6289  0033  03BB               	decf	??_lg_is_left_boundary+3,f
  6290  0034  0838               	movf	??_lg_is_left_boundary,w
  6291  0035  073A               	addwf	??_lg_is_left_boundary+2,w
  6292  0036  083B               	movf	??_lg_is_left_boundary+3,w
  6293  0037  1803               	skipnc
  6294  0038  0A3B               	incf	??_lg_is_left_boundary+3,w
  6295  0039  0739               	addwf	??_lg_is_left_boundary+1,w
  6296  003A  00BC               	movwf	??_lg_is_left_boundary+4
  6297  003B  1BBC               	btfsc	??_lg_is_left_boundary+4,7
  6298  003C  2841               	goto	l4204
  6299  003D  2843               	goto	l4208
  6300                           
  6301                           ;logic.h: 163: {
  6302                           ;logic.h: 164: do { if(0) { int n = sprintf(g_debug, "ALIGN_LEFT_OVER_BOUNDARY""\r\n"); 
      +                          if(n > 64) { USARTWriteString("ERROR: g_debug is overflowed\r\n"); do { ((void)0); asm("
      +                          ljmp $"); }while(0); } USARTWriteString(g_debug); } } while (0);;
  6303  003E  120A  118A  2805   	ljmp	$	;# 
  6304  0041                     l4204:	
  6305                           
  6306                           ;logic.h: 165: return ALIGN_LEFT_OVER_BOUNDARY;
  6307  0041  3001               	movlw	1
  6308  0042  0008               	return
  6309  0043                     l4208:	
  6310  0043  3001               	movlw	1
  6311  0044  1283               	bcf	3,5	;RP0=0, select bank0
  6312  0045  1303               	bcf	3,6	;RP1=0, select bank0
  6313  0046  00B8               	movwf	??_lg_is_left_boundary
  6314  0047  0838               	movf	??_lg_is_left_boundary,w
  6315  0048  07C1               	addwf	lg_is_left_boundary@col,f
  6316  0049  0841               	movf	lg_is_left_boundary@col,w
  6317  004A  3A80               	xorlw	128
  6318  004B  3E7C               	addlw	-132
  6319  004C  1C03               	skipc
  6320  004D  2814               	goto	l4194
  6321  004E                     l4212:	
  6322  004E  30FF               	movlw	255
  6323  004F  00B8               	movwf	??_lg_is_left_boundary
  6324  0050  0838               	movf	??_lg_is_left_boundary,w
  6325  0051  07C0               	addwf	lg_is_left_boundary@row,f
  6326  0052  1FC0               	btfss	lg_is_left_boundary@row,7
  6327  0053  280E               	goto	l4188
  6328  0054                     l4216:	
  6329                           
  6330                           ;logic.h: 166: }
  6331                           ;logic.h: 167: }
  6332                           ;logic.h: 168: }
  6333                           ;logic.h: 169: }
  6334                           ;logic.h: 170: return ALIGN_OK;
  6335  0054  3000               	movlw	0
  6336  0055  0008               	return
  6337  0056                     __end_of_lg_is_left_boundary:	
  6338                           
  6339                           	psect	text17
  6340  0056                     __ptext17:	
  6341 ;; *************** function _lg_is_valid *****************
  6342 ;; Defined at:
  6343 ;;		line 120 in file "../logic.h"
  6344 ;; Parameters:    Size  Location     Type
  6345 ;;  x               1    wreg     char 
  6346 ;;  y               1   21[BANK0 ] char 
  6347 ;;  matrix4x4       2   22[BANK0 ] PTR const struct .
  6348 ;;		 -> NULL(0), g_matrix4x4(96), 
  6349 ;;  matrix16x8      1   24[BANK0 ] PTR const struct .
  6350 ;;		 -> g_matrix16x8(16), 
  6351 ;; Auto vars:     Size  Location     Type
  6352 ;;  x               1   43[BANK0 ] char 
  6353 ;;  n               2   39[BANK0 ] int 
  6354 ;;  n               2   37[BANK0 ] int 
  6355 ;;  n               2   35[BANK0 ] int 
  6356 ;;  n               2   33[BANK0 ] int 
  6357 ;;  n               2   31[BANK0 ] int 
  6358 ;;  n               2   29[BANK0 ] int 
  6359 ;;  col             1   45[BANK0 ] char 
  6360 ;;  n               2   41[BANK0 ] int 
  6361 ;;  n               2   27[BANK0 ] int 
  6362 ;;  row             1   44[BANK0 ] char 
  6363 ;; Return value:  Size  Location     Type
  6364 ;;                  1    wreg      unsigned char 
  6365 ;; Registers used:
  6366 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  6367 ;; Tracked objects:
  6368 ;;		On entry : 0/0
  6369 ;;		On exit  : 0/0
  6370 ;;		Unchanged: 0/0
  6371 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6372 ;;      Params:         0       4       0       0       0
  6373 ;;      Locals:         0      19       0       0       0
  6374 ;;      Temps:          0       2       0       0       0
  6375 ;;      Totals:         0      25       0       0       0
  6376 ;;Total ram usage:       25 bytes
  6377 ;; Hardware stack levels used:    1
  6378 ;; Hardware stack levels required when called:    3
  6379 ;; This function calls:
  6380 ;;		_USARTWriteString
  6381 ;;		_get_matrix_bit
  6382 ;;		_sprintf
  6383 ;; This function is called by:
  6384 ;;		_lg_find_best_solution
  6385 ;; This function uses a non-reentrant model
  6386 ;;
  6387                           
  6388                           
  6389                           ;psect for function _lg_is_valid
  6390  0056                     _lg_is_valid:	
  6391                           
  6392                           ;incstack = 0
  6393                           ; Regs used in _lg_is_valid: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  6394                           ;lg_is_valid@x stored from wreg
  6395  0056  1283               	bcf	3,5	;RP0=0, select bank0
  6396  0057  1303               	bcf	3,6	;RP1=0, select bank0
  6397  0058  00CB               	movwf	lg_is_valid@x
  6398                           
  6399                           ;logic.h: 122: do { if(0) { int n = sprintf(g_debug, "==============is_valid============
      +                          ""\r\n"); if(n > 64) { USARTWriteString("ERROR: g_debug is overflowed\r\n"); do { ((void
      +                          )0); asm("ljmp $"); }while(0); } USARTWriteString(g_debug); } } while (0);;
  6400  0059  285D               	goto	l4404
  6401  005A  120A  118A  2856   	ljmp	$	;# 
  6402  005D                     l4404:	
  6403                           
  6404                           ;logic.h: 123: for(int8_t row = 4 - 1; row >= 0; row--)
  6405  005D  3003               	movlw	3
  6406  005E  1283               	bcf	3,5	;RP0=0, select bank0
  6407  005F  1303               	bcf	3,6	;RP1=0, select bank0
  6408  0060  00B9               	movwf	??_lg_is_valid
  6409  0061  0839               	movf	??_lg_is_valid,w
  6410  0062  00CC               	movwf	lg_is_valid@row
  6411  0063                     L7:	
  6412  0063  1BCC               	btfsc	lg_is_valid@row,7
  6413  0064  2905               	goto	l4488
  6414                           
  6415                           ;logic.h: 124: {
  6416                           ;logic.h: 125: for(int8_t col = 0; col < 4; col++)
  6417  0065  01CD               	clrf	lg_is_valid@col
  6418  0066  084D               	movf	lg_is_valid@col,w
  6419  0067  3A80               	xorlw	128
  6420  0068  3E7C               	addlw	-132
  6421  0069  1803               	btfsc	3,0
  6422  006A  28FD               	goto	l4478
  6423  006B                     l4416:	
  6424                           
  6425                           ;logic.h: 126: {
  6426                           ;logic.h: 127: if(get_matrix_bit((uint8_t*)matrix4x4->row, row, col) == 1)
  6427  006B  0836               	movf	lg_is_valid@matrix4x4,w
  6428  006C  00F7               	movwf	get_matrix_bit@byte
  6429  006D  0837               	movf	lg_is_valid@matrix4x4+1,w
  6430  006E  00F8               	movwf	get_matrix_bit@byte+1
  6431  006F  084C               	movf	lg_is_valid@row,w
  6432  0070  00B9               	movwf	??_lg_is_valid
  6433  0071  0839               	movf	??_lg_is_valid,w
  6434  0072  00F9               	movwf	get_matrix_bit@row
  6435  0073  084D               	movf	lg_is_valid@col,w
  6436  0074  00BA               	movwf	??_lg_is_valid+1
  6437  0075  083A               	movf	??_lg_is_valid+1,w
  6438  0076  00FA               	movwf	get_matrix_bit@col
  6439  0077  160A  158A  2198  120A  118A  	fcall	_get_matrix_bit
  6440  007C  3A01               	xorlw	1
  6441  007D  1D03               	skipz
  6442  007E  28F2               	goto	l4474
  6443                           
  6444                           ;logic.h: 128: {
  6445                           ;logic.h: 129: if(get_matrix_bit((uint8_t*)matrix16x8->row, y + row, x + col) == 1)
  6446  007F  1283               	bcf	3,5	;RP0=0, select bank0
  6447  0080  1303               	bcf	3,6	;RP1=0, select bank0
  6448  0081  0838               	movf	lg_is_valid@matrix16x8,w
  6449  0082  00F7               	movwf	get_matrix_bit@byte
  6450  0083  3000               	movlw	0
  6451  0084  00F8               	movwf	get_matrix_bit@byte+1
  6452  0085  084C               	movf	lg_is_valid@row,w
  6453  0086  0735               	addwf	lg_is_valid@y,w
  6454  0087  00B9               	movwf	??_lg_is_valid
  6455  0088  0839               	movf	??_lg_is_valid,w
  6456  0089  00F9               	movwf	get_matrix_bit@row
  6457  008A  084D               	movf	lg_is_valid@col,w
  6458  008B  074B               	addwf	lg_is_valid@x,w
  6459  008C  00BA               	movwf	??_lg_is_valid+1
  6460  008D  083A               	movf	??_lg_is_valid+1,w
  6461  008E  00FA               	movwf	get_matrix_bit@col
  6462  008F  160A  158A  2198  120A  118A  	fcall	_get_matrix_bit
  6463  0094  3A01               	xorlw	1
  6464  0095  1903               	btfsc	3,2
  6465  0096  289B               	goto	l4432
  6466  0097  28A0               	goto	l4436
  6467                           
  6468                           ;logic.h: 130: {
  6469                           ;logic.h: 131: do { if(0) { int n = sprintf(g_debug, "not valid1""\r\n"); if(n > 64) { U
      +                          SARTWriteString("ERROR: g_debug is overflowed\r\n"); do { ((void)0); asm("ljmp $"); }whi
      +                          le(0); } USARTWriteString(g_debug); } } while (0);;
  6470  0098  120A  118A  2856   	ljmp	$	;# 
  6471  009B                     l4432:	
  6472                           
  6473                           ;logic.h: 133: return 0;
  6474  009B  3000               	movlw	0
  6475  009C  0008               	return
  6476                           
  6477                           ;logic.h: 132: do { if(0) { int n = sprintf(g_debug, "row = %d, col = %d""\r\n", row, co
      +                          l); if(n > 64) { USARTWriteString("ERROR: g_debug is overflowed\r\n"); do { ((void)0); a
      +                          sm("ljmp $"); }while(0); } USARTWriteString(g_debug); } } while (0);;
  6478  009D  120A  118A  2856   	ljmp	$	;# 
  6479  00A0                     l4436:	
  6480                           
  6481                           ;logic.h: 134: }
  6482                           ;logic.h: 136: if(( x + col < 0) || (x + col >= 8))
  6483  00A0  1283               	bcf	3,5	;RP0=0, select bank0
  6484  00A1  1303               	bcf	3,6	;RP1=0, select bank0
  6485  00A2  084B               	movf	lg_is_valid@x,w
  6486  00A3  074D               	addwf	lg_is_valid@col,w
  6487  00A4  00B9               	movwf	??_lg_is_valid
  6488  00A5  01BA               	clrf	??_lg_is_valid+1
  6489  00A6  1803               	skipnc
  6490  00A7  0ABA               	incf	??_lg_is_valid+1,f
  6491  00A8  1BCB               	btfsc	lg_is_valid@x,7
  6492  00A9  03BA               	decf	??_lg_is_valid+1,f
  6493  00AA  1BCD               	btfsc	lg_is_valid@col,7
  6494  00AB  03BA               	decf	??_lg_is_valid+1,f
  6495  00AC  1283               	bcf	3,5	;RP0=0, select bank0
  6496  00AD  1303               	bcf	3,6	;RP1=0, select bank0
  6497  00AE  1BBA               	btfsc	??_lg_is_valid+1,7
  6498  00AF  28CB               	goto	l4452
  6499  00B0  084B               	movf	lg_is_valid@x,w
  6500  00B1  074D               	addwf	lg_is_valid@col,w
  6501  00B2  00B9               	movwf	??_lg_is_valid
  6502  00B3  01BA               	clrf	??_lg_is_valid+1
  6503  00B4  1803               	skipnc
  6504  00B5  0ABA               	incf	??_lg_is_valid+1,f
  6505  00B6  1BCB               	btfsc	lg_is_valid@x,7
  6506  00B7  03BA               	decf	??_lg_is_valid+1,f
  6507  00B8  1BCD               	btfsc	lg_is_valid@col,7
  6508  00B9  03BA               	decf	??_lg_is_valid+1,f
  6509  00BA  1283               	bcf	3,5	;RP0=0, select bank0
  6510  00BB  1303               	bcf	3,6	;RP1=0, select bank0
  6511  00BC  083A               	movf	??_lg_is_valid+1,w
  6512  00BD  3A80               	xorlw	128
  6513  00BE  00FF               	movwf	127
  6514  00BF  3080               	movlw	128
  6515  00C0  027F               	subwf	127,w
  6516  00C1  1D03               	skipz
  6517  00C2  28C5               	goto	u5095
  6518  00C3  3008               	movlw	8
  6519  00C4  0239               	subwf	??_lg_is_valid,w
  6520  00C5                     u5095:	
  6521  00C5  1803               	btfsc	3,0
  6522  00C6  28CB               	goto	l4452
  6523  00C7  28D0               	goto	l4456
  6524                           
  6525                           ;logic.h: 137: {
  6526                           ;logic.h: 138: do { if(0) { int n = sprintf(g_debug, "not valid2""\r\n"); if(n > 64) { U
      +                          SARTWriteString("ERROR: g_debug is overflowed\r\n"); do { ((void)0); asm("ljmp $"); }whi
      +                          le(0); } USARTWriteString(g_debug); } } while (0);;
  6527  00C8  120A  118A  2856   	ljmp	$	;# 
  6528  00CB                     l4452:	
  6529                           
  6530                           ;logic.h: 140: return 0;
  6531  00CB  3000               	movlw	0
  6532  00CC  0008               	return
  6533                           
  6534                           ;logic.h: 139: do { if(0) { int n = sprintf(g_debug, "row = %d, col = %d""\r\n", row, co
      +                          l); if(n > 64) { USARTWriteString("ERROR: g_debug is overflowed\r\n"); do { ((void)0); a
      +                          sm("ljmp $"); }while(0); } USARTWriteString(g_debug); } } while (0);;
  6535  00CD  120A  118A  2856   	ljmp	$	;# 
  6536  00D0                     l4456:	
  6537                           
  6538                           ;logic.h: 141: }
  6539                           ;logic.h: 142: if((y + row) > (16 - 1))
  6540  00D0  1283               	bcf	3,5	;RP0=0, select bank0
  6541  00D1  1303               	bcf	3,6	;RP1=0, select bank0
  6542  00D2  0835               	movf	lg_is_valid@y,w
  6543  00D3  074C               	addwf	lg_is_valid@row,w
  6544  00D4  00B9               	movwf	??_lg_is_valid
  6545  00D5  01BA               	clrf	??_lg_is_valid+1
  6546  00D6  1803               	skipnc
  6547  00D7  0ABA               	incf	??_lg_is_valid+1,f
  6548  00D8  1BB5               	btfsc	lg_is_valid@y,7
  6549  00D9  03BA               	decf	??_lg_is_valid+1,f
  6550  00DA  1BCC               	btfsc	lg_is_valid@row,7
  6551  00DB  03BA               	decf	??_lg_is_valid+1,f
  6552  00DC  1283               	bcf	3,5	;RP0=0, select bank0
  6553  00DD  1303               	bcf	3,6	;RP1=0, select bank0
  6554  00DE  083A               	movf	??_lg_is_valid+1,w
  6555  00DF  3A80               	xorlw	128
  6556  00E0  00FF               	movwf	127
  6557  00E1  3080               	movlw	128
  6558  00E2  027F               	subwf	127,w
  6559  00E3  1D03               	skipz
  6560  00E4  28E7               	goto	u5135
  6561  00E5  3010               	movlw	16
  6562  00E6  0239               	subwf	??_lg_is_valid,w
  6563  00E7                     u5135:	
  6564  00E7  1803               	btfsc	3,0
  6565  00E8  28ED               	goto	l4470
  6566  00E9  28F2               	goto	l4474
  6567                           
  6568                           ;logic.h: 143: {
  6569                           ;logic.h: 144: do { if(0) { int n = sprintf(g_debug, "not valid3""\r\n"); if(n > 64) { U
      +                          SARTWriteString("ERROR: g_debug is overflowed\r\n"); do { ((void)0); asm("ljmp $"); }whi
      +                          le(0); } USARTWriteString(g_debug); } } while (0);;
  6570  00EA  120A  118A  2856   	ljmp	$	;# 
  6571  00ED                     l4470:	
  6572                           
  6573                           ;logic.h: 146: return 0;
  6574  00ED  3000               	movlw	0
  6575  00EE  0008               	return
  6576                           
  6577                           ;logic.h: 145: do { if(0) { int n = sprintf(g_debug, "row = %d, col = %d""\r\n", row, co
      +                          l); if(n > 64) { USARTWriteString("ERROR: g_debug is overflowed\r\n"); do { ((void)0); a
      +                          sm("ljmp $"); }while(0); } USARTWriteString(g_debug); } } while (0);;
  6578  00EF  120A  118A  2856   	ljmp	$	;# 
  6579  00F2                     l4474:	
  6580  00F2  3001               	movlw	1
  6581  00F3  1283               	bcf	3,5	;RP0=0, select bank0
  6582  00F4  1303               	bcf	3,6	;RP1=0, select bank0
  6583  00F5  00B9               	movwf	??_lg_is_valid
  6584  00F6  0839               	movf	??_lg_is_valid,w
  6585  00F7  07CD               	addwf	lg_is_valid@col,f
  6586  00F8  084D               	movf	lg_is_valid@col,w
  6587  00F9  3A80               	xorlw	128
  6588  00FA  3E7C               	addlw	-132
  6589  00FB  1C03               	skipc
  6590  00FC  286B               	goto	l4416
  6591  00FD                     l4478:	
  6592  00FD  30FF               	movlw	255
  6593  00FE  00B9               	movwf	??_lg_is_valid
  6594  00FF  0839               	movf	??_lg_is_valid,w
  6595  0100  07CC               	addwf	lg_is_valid@row,f
  6596  0101  2863               	goto	L7
  6597                           
  6598                           ;logic.h: 147: }
  6599                           ;logic.h: 148: }
  6600                           ;logic.h: 149: }
  6601                           ;logic.h: 150: }
  6602                           ;logic.h: 151: do { if(0) { int n = sprintf(g_debug, "valid""\r\n"); if(n > 64) { USARTW
      +                          riteString("ERROR: g_debug is overflowed\r\n"); do { ((void)0); asm("ljmp $"); }while(0)
      +                          ; } USARTWriteString(g_debug); } } while (0);;
  6603  0102  120A  118A  2856   	ljmp	$	;# 
  6604  0105                     l4488:	
  6605                           
  6606                           ;logic.h: 152: return 1;
  6607  0105  3001               	movlw	1
  6608  0106  0008               	return
  6609  0107                     __end_of_lg_is_valid:	
  6610                           
  6611                           	psect	text18
  6612  141A                     __ptext18:	
  6613 ;; *************** function _lg_get_weight *****************
  6614 ;; Defined at:
  6615 ;;		line 302 in file "../logic.h"
  6616 ;; Parameters:    Size  Location     Type
  6617 ;;  matrix          1    wreg     PTR const struct .
  6618 ;;		 -> temp_matrix16x8(16), 
  6619 ;; Auto vars:     Size  Location     Type
  6620 ;;  matrix          1   31[BANK0 ] PTR const struct .
  6621 ;;		 -> temp_matrix16x8(16), 
  6622 ;;  row             1   34[BANK0 ] char 
  6623 ;;  n               2   26[BANK0 ] int 
  6624 ;;  col             1   33[BANK0 ] unsigned char 
  6625 ;;  risk            2   29[BANK0 ] unsigned int 
  6626 ;;  pre             1   32[BANK0 ] unsigned char 
  6627 ;;  start           1   28[BANK0 ] unsigned char 
  6628 ;; Return value:  Size  Location     Type
  6629 ;;                  2   21[BANK0 ] unsigned int 
  6630 ;; Registers used:
  6631 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  6632 ;; Tracked objects:
  6633 ;;		On entry : 0/0
  6634 ;;		On exit  : 0/0
  6635 ;;		Unchanged: 0/0
  6636 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6637 ;;      Params:         0       2       0       0       0
  6638 ;;      Locals:         0       9       0       0       0
  6639 ;;      Temps:          0       3       0       0       0
  6640 ;;      Totals:         0      14       0       0       0
  6641 ;;Total ram usage:       14 bytes
  6642 ;; Hardware stack levels used:    1
  6643 ;; Hardware stack levels required when called:    3
  6644 ;; This function calls:
  6645 ;;		_USARTWriteString
  6646 ;;		_get_matrix_bit
  6647 ;;		_sprintf
  6648 ;; This function is called by:
  6649 ;;		_lg_find_best_solution
  6650 ;; This function uses a non-reentrant model
  6651 ;;
  6652                           
  6653                           
  6654                           ;psect for function _lg_get_weight
  6655  141A                     _lg_get_weight:	
  6656                           
  6657                           ;incstack = 0
  6658                           ; Regs used in _lg_get_weight: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  6659                           ;lg_get_weight@matrix stored from wreg
  6660  141A  1283               	bcf	3,5	;RP0=0, select bank0
  6661  141B  1303               	bcf	3,6	;RP1=0, select bank0
  6662  141C  00BF               	movwf	lg_get_weight@matrix
  6663                           
  6664                           ;logic.h: 304: uint8_t start;
  6665                           ;logic.h: 305: uint16_t risk = 0;
  6666  141D  01BD               	clrf	lg_get_weight@risk
  6667  141E  01BE               	clrf	lg_get_weight@risk+1
  6668                           
  6669                           ;logic.h: 306: uint8_t pre = 0xFF;
  6670  141F  30FF               	movlw	255
  6671  1420  00B7               	movwf	??_lg_get_weight
  6672  1421  0837               	movf	??_lg_get_weight,w
  6673  1422  00C0               	movwf	lg_get_weight@pre
  6674                           
  6675                           ;logic.h: 307: for(uint8_t col = 0; col < 8; col++)
  6676  1423  01C1               	clrf	lg_get_weight@col
  6677  1424                     L8:	
  6678  1424  3008               	movlw	8
  6679  1425  0241               	subwf	lg_get_weight@col,w
  6680  1426  1803               	btfsc	3,0
  6681  1427  2C97               	goto	l4674
  6682                           
  6683                           ;logic.h: 308: {
  6684                           ;logic.h: 309: pre = 0xFF;
  6685  1428  30FF               	movlw	255
  6686  1429  00B7               	movwf	??_lg_get_weight
  6687  142A  0837               	movf	??_lg_get_weight,w
  6688  142B  00C0               	movwf	lg_get_weight@pre
  6689                           
  6690                           ;logic.h: 310: start = 0;
  6691  142C  01BC               	clrf	lg_get_weight@start
  6692                           
  6693                           ;logic.h: 311: for(int8_t row = 16 - 1; row >= 0; row--)
  6694  142D  300F               	movlw	15
  6695  142E  00B7               	movwf	??_lg_get_weight
  6696  142F  0837               	movf	??_lg_get_weight,w
  6697  1430  00C2               	movwf	lg_get_weight@row
  6698  1431  1BC2               	btfsc	lg_get_weight@row,7
  6699  1432  2C8F               	goto	l4664
  6700  1433                     l4644:	
  6701                           
  6702                           ;logic.h: 312: {
  6703                           ;logic.h: 313: if(pre == 0xFF)
  6704  1433  0A40               	incf	lg_get_weight@pre,w
  6705  1434  1D03               	btfss	3,2
  6706  1435  2C4D               	goto	l4648
  6707                           
  6708                           ;logic.h: 314: {
  6709                           ;logic.h: 315: pre = get_matrix_bit((uint8_t*)matrix->row, row, col);
  6710  1436  083F               	movf	lg_get_weight@matrix,w
  6711  1437  00F7               	movwf	get_matrix_bit@byte
  6712  1438  3001               	movlw	1
  6713  1439  00F8               	movwf	get_matrix_bit@byte+1
  6714  143A  0842               	movf	lg_get_weight@row,w
  6715  143B  00B7               	movwf	??_lg_get_weight
  6716  143C  0837               	movf	??_lg_get_weight,w
  6717  143D  00F9               	movwf	get_matrix_bit@row
  6718  143E  0841               	movf	lg_get_weight@col,w
  6719  143F  00B8               	movwf	??_lg_get_weight+1
  6720  1440  0838               	movf	??_lg_get_weight+1,w
  6721  1441  00FA               	movwf	get_matrix_bit@col
  6722  1442  160A  158A  2198  160A  118A  	fcall	_get_matrix_bit
  6723  1447  1283               	bcf	3,5	;RP0=0, select bank0
  6724  1448  1303               	bcf	3,6	;RP1=0, select bank0
  6725  1449  00B9               	movwf	??_lg_get_weight+2
  6726  144A  0839               	movf	??_lg_get_weight+2,w
  6727  144B  00C0               	movwf	lg_get_weight@pre
  6728                           
  6729                           ;logic.h: 316: }
  6730  144C  2C89               	goto	l4660
  6731  144D                     l4648:	
  6732                           
  6733                           ;logic.h: 317: else
  6734                           ;logic.h: 318: {
  6735                           ;logic.h: 319: if(pre != get_matrix_bit((uint8_t*)matrix->row, row, col))
  6736  144D  083F               	movf	lg_get_weight@matrix,w
  6737  144E  00F7               	movwf	get_matrix_bit@byte
  6738  144F  3001               	movlw	1
  6739  1450  00F8               	movwf	get_matrix_bit@byte+1
  6740  1451  0842               	movf	lg_get_weight@row,w
  6741  1452  00B7               	movwf	??_lg_get_weight
  6742  1453  0837               	movf	??_lg_get_weight,w
  6743  1454  00F9               	movwf	get_matrix_bit@row
  6744  1455  0841               	movf	lg_get_weight@col,w
  6745  1456  00B8               	movwf	??_lg_get_weight+1
  6746  1457  0838               	movf	??_lg_get_weight+1,w
  6747  1458  00FA               	movwf	get_matrix_bit@col
  6748  1459  160A  158A  2198  160A  118A  	fcall	_get_matrix_bit
  6749  145E  1283               	bcf	3,5	;RP0=0, select bank0
  6750  145F  1303               	bcf	3,6	;RP1=0, select bank0
  6751  1460  0640               	xorwf	lg_get_weight@pre,w
  6752  1461  1903               	skipnz
  6753  1462  2C80               	goto	l4656
  6754                           
  6755                           ;logic.h: 320: {
  6756                           ;logic.h: 321: pre = get_matrix_bit((uint8_t*)matrix->row, row, col);
  6757  1463  083F               	movf	lg_get_weight@matrix,w
  6758  1464  00F7               	movwf	get_matrix_bit@byte
  6759  1465  3001               	movlw	1
  6760  1466  00F8               	movwf	get_matrix_bit@byte+1
  6761  1467  0842               	movf	lg_get_weight@row,w
  6762  1468  00B7               	movwf	??_lg_get_weight
  6763  1469  0837               	movf	??_lg_get_weight,w
  6764  146A  00F9               	movwf	get_matrix_bit@row
  6765  146B  0841               	movf	lg_get_weight@col,w
  6766  146C  00B8               	movwf	??_lg_get_weight+1
  6767  146D  0838               	movf	??_lg_get_weight+1,w
  6768  146E  00FA               	movwf	get_matrix_bit@col
  6769  146F  160A  158A  2198  160A  118A  	fcall	_get_matrix_bit
  6770  1474  1283               	bcf	3,5	;RP0=0, select bank0
  6771  1475  1303               	bcf	3,6	;RP1=0, select bank0
  6772  1476  00B9               	movwf	??_lg_get_weight+2
  6773  1477  0839               	movf	??_lg_get_weight+2,w
  6774  1478  00C0               	movwf	lg_get_weight@pre
  6775                           
  6776                           ;logic.h: 322: if(pre == 0)
  6777  1479  0840               	movf	lg_get_weight@pre,w
  6778  147A  1D03               	btfss	3,2
  6779  147B  2C7E               	goto	l637
  6780                           
  6781                           ;logic.h: 323: {
  6782                           ;logic.h: 324: start = 0;
  6783  147C  01BC               	clrf	lg_get_weight@start
  6784                           
  6785                           ;logic.h: 325: }
  6786  147D  2C80               	goto	l4656
  6787  147E                     l637:	
  6788                           
  6789                           ;logic.h: 326: else
  6790                           ;logic.h: 327: {
  6791                           ;logic.h: 328: start = 1;
  6792  147E  01BC               	clrf	lg_get_weight@start
  6793  147F  0ABC               	incf	lg_get_weight@start,f
  6794  1480                     l4656:	
  6795                           
  6796                           ;logic.h: 329: }
  6797                           ;logic.h: 330: }
  6798                           ;logic.h: 331: if(start == 1)
  6799  1480  033C               	decf	lg_get_weight@start,w
  6800  1481  1D03               	btfss	3,2
  6801  1482  2C89               	goto	l4660
  6802                           
  6803                           ;logic.h: 332: {
  6804                           ;logic.h: 333: risk++;
  6805  1483  3001               	movlw	1
  6806  1484  07BD               	addwf	lg_get_weight@risk,f
  6807  1485  1803               	skipnc
  6808  1486  0ABE               	incf	lg_get_weight@risk+1,f
  6809  1487  3000               	movlw	0
  6810  1488  07BE               	addwf	lg_get_weight@risk+1,f
  6811  1489                     l4660:	
  6812  1489  30FF               	movlw	255
  6813  148A  00B7               	movwf	??_lg_get_weight
  6814  148B  0837               	movf	??_lg_get_weight,w
  6815  148C  07C2               	addwf	lg_get_weight@row,f
  6816  148D  1FC2               	btfss	lg_get_weight@row,7
  6817  148E  2C33               	goto	l4644
  6818  148F                     l4664:	
  6819  148F  3001               	movlw	1
  6820  1490  00B7               	movwf	??_lg_get_weight
  6821  1491  0837               	movf	??_lg_get_weight,w
  6822  1492  07C1               	addwf	lg_get_weight@col,f
  6823  1493  2C24               	goto	L8
  6824                           
  6825                           ;logic.h: 334: }
  6826                           ;logic.h: 335: }
  6827                           ;logic.h: 336: }
  6828                           ;logic.h: 337: }
  6829                           ;logic.h: 338: do { if(0) { int n = sprintf(g_debug, "risk = %d""\r\n", risk); if(n > 64
      +                          ) { USARTWriteString("ERROR: g_debug is overflowed\r\n"); do { ((void)0); asm("ljmp $");
      +                           }while(0); } USARTWriteString(g_debug); } } while (0);;
  6830  1494  160A  118A  2C1A   	ljmp	$	;# 
  6831  1497                     l4674:	
  6832                           
  6833                           ;logic.h: 340: return risk;
  6834  1497  1283               	bcf	3,5	;RP0=0, select bank0
  6835  1498  1303               	bcf	3,6	;RP1=0, select bank0
  6836  1499  083E               	movf	lg_get_weight@risk+1,w
  6837  149A  00B6               	movwf	?_lg_get_weight+1
  6838  149B  083D               	movf	lg_get_weight@risk,w
  6839  149C  00B5               	movwf	?_lg_get_weight
  6840  149D  0008               	return
  6841  149E                     __end_of_lg_get_weight:	
  6842                           
  6843                           	psect	text19
  6844  1BE1                     __ptext19:	
  6845 ;; *************** function _lg_get_num_removed_rows *****************
  6846 ;; Defined at:
  6847 ;;		line 71 in file "../logic.h"
  6848 ;; Parameters:    Size  Location     Type
  6849 ;;  matrix          1    wreg     PTR struct .
  6850 ;;		 -> temp_matrix16x8(16), 
  6851 ;; Auto vars:     Size  Location     Type
  6852 ;;  matrix          1   59[BANK0 ] PTR struct .
  6853 ;;		 -> temp_matrix16x8(16), 
  6854 ;;  n               2   57[BANK0 ] int 
  6855 ;;  row             1   61[BANK0 ] char 
  6856 ;;  count           1   60[BANK0 ] unsigned char 
  6857 ;; Return value:  Size  Location     Type
  6858 ;;                  1    wreg      unsigned char 
  6859 ;; Registers used:
  6860 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  6861 ;; Tracked objects:
  6862 ;;		On entry : 0/0
  6863 ;;		On exit  : 0/0
  6864 ;;		Unchanged: 0/0
  6865 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6866 ;;      Params:         0       0       0       0       0
  6867 ;;      Locals:         0       5       0       0       0
  6868 ;;      Temps:          0       2       0       0       0
  6869 ;;      Totals:         0       7       0       0       0
  6870 ;;Total ram usage:        7 bytes
  6871 ;; Hardware stack levels used:    1
  6872 ;; Hardware stack levels required when called:    5
  6873 ;; This function calls:
  6874 ;;		_USARTWriteString
  6875 ;;		_lg_is_row_full
  6876 ;;		_sprintf
  6877 ;; This function is called by:
  6878 ;;		_lg_find_best_solution
  6879 ;; This function uses a non-reentrant model
  6880 ;;
  6881                           
  6882                           
  6883                           ;psect for function _lg_get_num_removed_rows
  6884  1BE1                     _lg_get_num_removed_rows:	
  6885                           
  6886                           ;incstack = 0
  6887                           ; Regs used in _lg_get_num_removed_rows: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cs
      +                          tack]
  6888                           ;lg_get_num_removed_rows@matrix stored from wreg
  6889  1BE1  1283               	bcf	3,5	;RP0=0, select bank0
  6890  1BE2  1303               	bcf	3,6	;RP1=0, select bank0
  6891  1BE3  00DB               	movwf	lg_get_num_removed_rows@matrix
  6892                           
  6893                           ;logic.h: 73: uint8_t count = 0;
  6894  1BE4  01DC               	clrf	lg_get_num_removed_rows@count
  6895                           
  6896                           ;logic.h: 74: for(int8_t row = 0; row < 16; row++)
  6897  1BE5  01DD               	clrf	lg_get_num_removed_rows@row
  6898  1BE6                     L9:	
  6899  1BE6  085D               	movf	lg_get_num_removed_rows@row,w
  6900  1BE7  3A80               	xorlw	128
  6901  1BE8  3E70               	addlw	-144
  6902  1BE9  1803               	btfsc	3,0
  6903  1BEA  2C0B               	goto	l4394
  6904                           
  6905                           ;logic.h: 75: {
  6906                           ;logic.h: 76: if(lg_is_row_full(matrix, row) == 1)
  6907  1BEB  085B               	movf	lg_get_num_removed_rows@matrix,w
  6908  1BEC  00CC               	movwf	lg_is_row_full@matrix
  6909  1BED  3001               	movlw	1
  6910  1BEE  00CD               	movwf	lg_is_row_full@matrix+1
  6911  1BEF  085D               	movf	lg_get_num_removed_rows@row,w
  6912  1BF0  00D7               	movwf	??_lg_get_num_removed_rows
  6913  1BF1  0857               	movf	??_lg_get_num_removed_rows,w
  6914  1BF2  00CE               	movwf	lg_is_row_full@row
  6915  1BF3  160A  158A  2337  160A  158A  	fcall	_lg_is_row_full
  6916  1BF8  3A01               	xorlw	1
  6917  1BF9  1D03               	skipz
  6918  1BFA  2C01               	goto	l413
  6919                           
  6920                           ;logic.h: 77: {
  6921                           ;logic.h: 78: count++;
  6922  1BFB  3001               	movlw	1
  6923  1BFC  1283               	bcf	3,5	;RP0=0, select bank0
  6924  1BFD  1303               	bcf	3,6	;RP1=0, select bank0
  6925  1BFE  00D7               	movwf	??_lg_get_num_removed_rows
  6926  1BFF  0857               	movf	??_lg_get_num_removed_rows,w
  6927  1C00  07DC               	addwf	lg_get_num_removed_rows@count,f
  6928  1C01                     l413:	
  6929  1C01  3001               	movlw	1
  6930  1C02  1283               	bcf	3,5	;RP0=0, select bank0
  6931  1C03  1303               	bcf	3,6	;RP1=0, select bank0
  6932  1C04  00D7               	movwf	??_lg_get_num_removed_rows
  6933  1C05  0857               	movf	??_lg_get_num_removed_rows,w
  6934  1C06  07DD               	addwf	lg_get_num_removed_rows@row,f
  6935  1C07  2BE6               	goto	L9
  6936                           
  6937                           ;logic.h: 79: }
  6938                           ;logic.h: 80: }
  6939                           ;logic.h: 81: do { if(0) { int n = sprintf(g_debug, "num full rows = %d""\r\n", count); 
      +                          if(n > 64) { USARTWriteString("ERROR: g_debug is overflowed\r\n"); do { ((void)0); asm("
      +                          ljmp $"); }while(0); } USARTWriteString(g_debug); } } while (0);;
  6940  1C08  160A  158A  2BE1   	ljmp	$	;# 
  6941  1C0B                     l4394:	
  6942                           
  6943                           ;logic.h: 82: return count;
  6944  1C0B  1283               	bcf	3,5	;RP0=0, select bank0
  6945  1C0C  1303               	bcf	3,6	;RP1=0, select bank0
  6946  1C0D  085C               	movf	lg_get_num_removed_rows@count,w
  6947  1C0E  0008               	return
  6948  1C0F                     __end_of_lg_get_num_removed_rows:	
  6949                           
  6950                           	psect	text20
  6951  11C6                     __ptext20:	
  6952 ;; *************** function _lg_get_num_of_orphan *****************
  6953 ;; Defined at:
  6954 ;;		line 272 in file "../logic.h"
  6955 ;; Parameters:    Size  Location     Type
  6956 ;;  matrix          1    wreg     PTR const struct .
  6957 ;;		 -> temp_matrix16x8(16), 
  6958 ;; Auto vars:     Size  Location     Type
  6959 ;;  matrix          1   31[BANK0 ] PTR const struct .
  6960 ;;		 -> temp_matrix16x8(16), 
  6961 ;;  row             1   33[BANK0 ] char 
  6962 ;;  n               2   26[BANK0 ] int 
  6963 ;;  col             1   32[BANK0 ] unsigned char 
  6964 ;;  risk            2   28[BANK0 ] unsigned int 
  6965 ;;  full            1   30[BANK0 ] unsigned char 
  6966 ;; Return value:  Size  Location     Type
  6967 ;;                  2   21[BANK0 ] unsigned int 
  6968 ;; Registers used:
  6969 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  6970 ;; Tracked objects:
  6971 ;;		On entry : 0/0
  6972 ;;		On exit  : 0/0
  6973 ;;		Unchanged: 0/0
  6974 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6975 ;;      Params:         0       2       0       0       0
  6976 ;;      Locals:         0       8       0       0       0
  6977 ;;      Temps:          0       3       0       0       0
  6978 ;;      Totals:         0      13       0       0       0
  6979 ;;Total ram usage:       13 bytes
  6980 ;; Hardware stack levels used:    1
  6981 ;; Hardware stack levels required when called:    3
  6982 ;; This function calls:
  6983 ;;		_USARTWriteString
  6984 ;;		_get_matrix_bit
  6985 ;;		_sprintf
  6986 ;; This function is called by:
  6987 ;;		_lg_find_best_solution
  6988 ;; This function uses a non-reentrant model
  6989 ;;
  6990                           
  6991                           
  6992                           ;psect for function _lg_get_num_of_orphan
  6993  11C6                     _lg_get_num_of_orphan:	
  6994                           
  6995                           ;incstack = 0
  6996                           ; Regs used in _lg_get_num_of_orphan: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstac
      +                          k]
  6997                           ;lg_get_num_of_orphan@matrix stored from wreg
  6998  11C6  1283               	bcf	3,5	;RP0=0, select bank0
  6999  11C7  1303               	bcf	3,6	;RP1=0, select bank0
  7000  11C8  00BF               	movwf	lg_get_num_of_orphan@matrix
  7001                           
  7002                           ;logic.h: 274: uint16_t risk = 0;
  7003  11C9  01BC               	clrf	lg_get_num_of_orphan@risk
  7004  11CA  01BD               	clrf	lg_get_num_of_orphan@risk+1
  7005                           
  7006                           ;logic.h: 275: uint8_t full = 0xFF;
  7007  11CB  30FF               	movlw	255
  7008  11CC  00B7               	movwf	??_lg_get_num_of_orphan
  7009  11CD  0837               	movf	??_lg_get_num_of_orphan,w
  7010  11CE  00BE               	movwf	lg_get_num_of_orphan@full
  7011                           
  7012                           ;logic.h: 276: for(uint8_t col = 0; col < 8; col++)
  7013  11CF  01C0               	clrf	lg_get_num_of_orphan@col
  7014  11D0                     L12:	
  7015  11D0  3008               	movlw	8
  7016  11D1  0240               	subwf	lg_get_num_of_orphan@col,w
  7017  11D2  1803               	btfsc	3,0
  7018  11D3  2A26               	goto	l4622
  7019                           
  7020                           ;logic.h: 277: {
  7021                           ;logic.h: 278: full = 0xFF;
  7022  11D4  30FF               	movlw	255
  7023  11D5  00B7               	movwf	??_lg_get_num_of_orphan
  7024  11D6  0837               	movf	??_lg_get_num_of_orphan,w
  7025  11D7  00BE               	movwf	lg_get_num_of_orphan@full
  7026                           
  7027                           ;logic.h: 279: for(int8_t row = 16 - 1; row >= 0; row--)
  7028  11D8  300F               	movlw	15
  7029  11D9  00B7               	movwf	??_lg_get_num_of_orphan
  7030  11DA  0837               	movf	??_lg_get_num_of_orphan,w
  7031  11DB  00C1               	movwf	lg_get_num_of_orphan@row
  7032  11DC  1BC1               	btfsc	lg_get_num_of_orphan@row,7
  7033  11DD  2A1E               	goto	l4612
  7034  11DE                     l4596:	
  7035                           
  7036                           ;logic.h: 280: {
  7037                           ;logic.h: 281: if(full == 0xFF)
  7038  11DE  0A3E               	incf	lg_get_num_of_orphan@full,w
  7039  11DF  1903               	btfsc	3,2
  7040  11E0  2A02               	goto	L11
  7041                           
  7042                           ;logic.h: 285: else
  7043                           ;logic.h: 286: {
  7044                           ;logic.h: 287: if(get_matrix_bit((uint8_t*)matrix->row, row, col) == 1)
  7045                           
  7046                           ;logic.h: 284: }
  7047                           
  7048                           ;logic.h: 282: {
  7049                           ;logic.h: 283: full = get_matrix_bit((uint8_t*)matrix->row, row, col);
  7050  11E1  083F               	movf	lg_get_num_of_orphan@matrix,w
  7051  11E2  00F7               	movwf	get_matrix_bit@byte
  7052  11E3  3001               	movlw	1
  7053  11E4  00F8               	movwf	get_matrix_bit@byte+1
  7054  11E5  0841               	movf	lg_get_num_of_orphan@row,w
  7055  11E6  00B7               	movwf	??_lg_get_num_of_orphan
  7056  11E7  0837               	movf	??_lg_get_num_of_orphan,w
  7057  11E8  00F9               	movwf	get_matrix_bit@row
  7058  11E9  0840               	movf	lg_get_num_of_orphan@col,w
  7059  11EA  00B8               	movwf	??_lg_get_num_of_orphan+1
  7060  11EB  0838               	movf	??_lg_get_num_of_orphan+1,w
  7061  11EC  00FA               	movwf	get_matrix_bit@col
  7062  11ED  160A  158A  2198  160A  118A  	fcall	_get_matrix_bit
  7063  11F2  3A01               	xorlw	1
  7064  11F3  1D03               	skipz
  7065  11F4  2A00               	goto	l4606
  7066                           
  7067                           ;logic.h: 288: {
  7068                           ;logic.h: 289: if(full == 0)
  7069  11F5  1283               	bcf	3,5	;RP0=0, select bank0
  7070  11F6  1303               	bcf	3,6	;RP1=0, select bank0
  7071  11F7  083E               	movf	lg_get_num_of_orphan@full,w
  7072  11F8  1D03               	btfss	3,2
  7073  11F9  2A00               	goto	l4606
  7074                           
  7075                           ;logic.h: 290: {
  7076                           ;logic.h: 291: risk++;
  7077  11FA  3001               	movlw	1
  7078  11FB  07BC               	addwf	lg_get_num_of_orphan@risk,f
  7079  11FC  1803               	skipnc
  7080  11FD  0ABD               	incf	lg_get_num_of_orphan@risk+1,f
  7081  11FE  3000               	movlw	0
  7082  11FF  07BD               	addwf	lg_get_num_of_orphan@risk+1,f
  7083  1200                     l4606:	
  7084                           
  7085                           ;logic.h: 292: }
  7086                           ;logic.h: 293: }
  7087                           ;logic.h: 294: full = get_matrix_bit((uint8_t*)matrix->row, row, col);
  7088  1200  1283               	bcf	3,5	;RP0=0, select bank0
  7089  1201  1303               	bcf	3,6	;RP1=0, select bank0
  7090  1202                     L11:	
  7091  1202  083F               	movf	lg_get_num_of_orphan@matrix,w
  7092  1203  00F7               	movwf	get_matrix_bit@byte
  7093  1204  3001               	movlw	1
  7094  1205  00F8               	movwf	get_matrix_bit@byte+1
  7095  1206  0841               	movf	lg_get_num_of_orphan@row,w
  7096  1207  00B7               	movwf	??_lg_get_num_of_orphan
  7097  1208  0837               	movf	??_lg_get_num_of_orphan,w
  7098  1209  00F9               	movwf	get_matrix_bit@row
  7099  120A  0840               	movf	lg_get_num_of_orphan@col,w
  7100  120B  00B8               	movwf	??_lg_get_num_of_orphan+1
  7101  120C  0838               	movf	??_lg_get_num_of_orphan+1,w
  7102  120D  00FA               	movwf	get_matrix_bit@col
  7103  120E  160A  158A  2198  160A  118A  	fcall	_get_matrix_bit
  7104  1213  1283               	bcf	3,5	;RP0=0, select bank0
  7105  1214  1303               	bcf	3,6	;RP1=0, select bank0
  7106  1215  00B9               	movwf	??_lg_get_num_of_orphan+2
  7107  1216  0839               	movf	??_lg_get_num_of_orphan+2,w
  7108  1217  00BE               	movwf	lg_get_num_of_orphan@full
  7109  1218  30FF               	movlw	255
  7110  1219  00B7               	movwf	??_lg_get_num_of_orphan
  7111  121A  0837               	movf	??_lg_get_num_of_orphan,w
  7112  121B  07C1               	addwf	lg_get_num_of_orphan@row,f
  7113  121C  1FC1               	btfss	lg_get_num_of_orphan@row,7
  7114  121D  29DE               	goto	l4596
  7115  121E                     l4612:	
  7116  121E  3001               	movlw	1
  7117  121F  00B7               	movwf	??_lg_get_num_of_orphan
  7118  1220  0837               	movf	??_lg_get_num_of_orphan,w
  7119  1221  07C0               	addwf	lg_get_num_of_orphan@col,f
  7120  1222  29D0               	goto	L12
  7121                           
  7122                           ;logic.h: 295: }
  7123                           ;logic.h: 296: }
  7124                           ;logic.h: 297: }
  7125                           ;logic.h: 298: do { if(0) { int n = sprintf(g_debug, "risk = %d""\r\n", risk); if(n > 64
      +                          ) { USARTWriteString("ERROR: g_debug is overflowed\r\n"); do { ((void)0); asm("ljmp $");
      +                           }while(0); } USARTWriteString(g_debug); } } while (0);;
  7126  1223  160A  118A  29C6   	ljmp	$	;# 
  7127  1226                     l4622:	
  7128                           
  7129                           ;logic.h: 300: return risk;
  7130  1226  1283               	bcf	3,5	;RP0=0, select bank0
  7131  1227  1303               	bcf	3,6	;RP1=0, select bank0
  7132  1228  083D               	movf	lg_get_num_of_orphan@risk+1,w
  7133  1229  00B6               	movwf	?_lg_get_num_of_orphan+1
  7134  122A  083C               	movf	lg_get_num_of_orphan@risk,w
  7135  122B  00B5               	movwf	?_lg_get_num_of_orphan
  7136  122C  0008               	return
  7137  122D                     __end_of_lg_get_num_of_orphan:	
  7138                           
  7139                           	psect	text21
  7140  16E7                     __ptext21:	
  7141 ;; *************** function _lg_get_holes_after_merge *****************
  7142 ;; Defined at:
  7143 ;;		line 406 in file "../logic.h"
  7144 ;; Parameters:    Size  Location     Type
  7145 ;;  matrix          1    wreg     PTR struct .
  7146 ;;		 -> temp_matrix16x8(16), 
  7147 ;; Auto vars:     Size  Location     Type
  7148 ;;  matrix          1   38[BANK0 ] PTR struct .
  7149 ;;		 -> temp_matrix16x8(16), 
  7150 ;;  n               2   31[BANK0 ] int 
  7151 ;;  n               2   29[BANK0 ] int 
  7152 ;;  n               2   27[BANK0 ] int 
  7153 ;;  row             1   40[BANK0 ] char 
  7154 ;;  n               2   33[BANK0 ] int 
  7155 ;;  col             1   39[BANK0 ] char 
  7156 ;;  start           1   37[BANK0 ] char 
  7157 ;;  stop            1   36[BANK0 ] char 
  7158 ;;  num_hole        1   35[BANK0 ] unsigned char 
  7159 ;; Return value:  Size  Location     Type
  7160 ;;                  1    wreg      unsigned char 
  7161 ;; Registers used:
  7162 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  7163 ;; Tracked objects:
  7164 ;;		On entry : 0/0
  7165 ;;		On exit  : 0/0
  7166 ;;		Unchanged: 0/0
  7167 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7168 ;;      Params:         0       0       0       0       0
  7169 ;;      Locals:         0      14       0       0       0
  7170 ;;      Temps:          0       6       0       0       0
  7171 ;;      Totals:         0      20       0       0       0
  7172 ;;Total ram usage:       20 bytes
  7173 ;; Hardware stack levels used:    1
  7174 ;; Hardware stack levels required when called:    3
  7175 ;; This function calls:
  7176 ;;		_USARTWriteString
  7177 ;;		_get_matrix_bit
  7178 ;;		_sprintf
  7179 ;; This function is called by:
  7180 ;;		_lg_find_best_solution
  7181 ;; This function uses a non-reentrant model
  7182 ;;
  7183                           
  7184                           
  7185                           ;psect for function _lg_get_holes_after_merge
  7186  16E7                     _lg_get_holes_after_merge:	
  7187                           
  7188                           ;incstack = 0
  7189                           ; Regs used in _lg_get_holes_after_merge: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+c
      +                          stack]
  7190                           ;lg_get_holes_after_merge@matrix stored from wreg
  7191  16E7  1283               	bcf	3,5	;RP0=0, select bank0
  7192  16E8  1303               	bcf	3,6	;RP1=0, select bank0
  7193  16E9  00C6               	movwf	lg_get_holes_after_merge@matrix
  7194                           
  7195                           ;logic.h: 408: int8_t start = -1;
  7196  16EA  01C5               	clrf	lg_get_holes_after_merge@start
  7197  16EB  03C5               	decf	lg_get_holes_after_merge@start,f
  7198                           
  7199                           ;logic.h: 409: int8_t stop = -1;
  7200  16EC  01C4               	clrf	lg_get_holes_after_merge@stop
  7201  16ED  03C4               	decf	lg_get_holes_after_merge@stop,f
  7202                           
  7203                           ;logic.h: 410: uint8_t num_hole = 0;
  7204  16EE  01C3               	clrf	lg_get_holes_after_merge@num_hole
  7205                           
  7206                           ;logic.h: 411: for(int8_t col = 0; col < 8; col++)
  7207  16EF  01C7               	clrf	lg_get_holes_after_merge@col
  7208  16F0                     L14:	
  7209  16F0  0847               	movf	lg_get_holes_after_merge@col,w
  7210  16F1  3A80               	xorlw	128
  7211  16F2  3E78               	addlw	-136
  7212  16F3  1803               	btfsc	3,0
  7213  16F4  2FFC               	goto	l4890
  7214                           
  7215                           ;logic.h: 412: {
  7216                           ;logic.h: 413: start = stop = -1;
  7217  16F5  30FF               	movlw	255
  7218  16F6  00C4               	movwf	lg_get_holes_after_merge@stop
  7219  16F7  00B5               	movwf	??_lg_get_holes_after_merge
  7220  16F8  0835               	movf	??_lg_get_holes_after_merge,w
  7221  16F9  00C5               	movwf	lg_get_holes_after_merge@start
  7222                           
  7223                           ;logic.h: 414: for(int8_t row = 0; row < 16; row++)
  7224  16FA  01C8               	clrf	lg_get_holes_after_merge@row
  7225  16FB  0848               	movf	lg_get_holes_after_merge@row,w
  7226  16FC  3A80               	xorlw	128
  7227  16FD  3E70               	addlw	-144
  7228  16FE  1803               	btfsc	3,0
  7229  16FF  2FBD               	goto	l725
  7230  1700                     l4810:	
  7231                           
  7232                           ;logic.h: 415: {
  7233                           ;logic.h: 416: if(col == 0)
  7234  1700  0847               	movf	lg_get_holes_after_merge@col,w
  7235  1701  1D03               	btfss	3,2
  7236  1702  2F16               	goto	l4820
  7237                           
  7238                           ;logic.h: 417: {
  7239                           ;logic.h: 418: if((get_matrix_bit((uint8_t*)matrix->row, row, col) == 0) && (get_matrix_
      +                          bit((uint8_t*)matrix->row, row, col + 1) == 1))
  7240  1703  0846               	movf	lg_get_holes_after_merge@matrix,w
  7241  1704  00F7               	movwf	get_matrix_bit@byte
  7242  1705  3001               	movlw	1
  7243  1706  00F8               	movwf	get_matrix_bit@byte+1
  7244  1707  0848               	movf	lg_get_holes_after_merge@row,w
  7245  1708  00B5               	movwf	??_lg_get_holes_after_merge
  7246  1709  0835               	movf	??_lg_get_holes_after_merge,w
  7247  170A  00F9               	movwf	get_matrix_bit@row
  7248  170B  0847               	movf	lg_get_holes_after_merge@col,w
  7249  170C  00B6               	movwf	??_lg_get_holes_after_merge+1
  7250  170D  0836               	movf	??_lg_get_holes_after_merge+1,w
  7251  170E  00FA               	movwf	get_matrix_bit@col
  7252  170F  160A  158A  2198  160A  118A  	fcall	_get_matrix_bit
  7253  1714  3A00               	xorlw	0
  7254  1715  2F64               	goto	L15
  7255  1716                     l4820:	
  7256                           ;logic.h: 423: }
  7257                           ;logic.h: 424: }
  7258                           ;logic.h: 425: }
  7259                           
  7260                           ;logic.h: 421: {
  7261                           ;logic.h: 422: start = row;
  7262                           
  7263                           ;logic.h: 419: {
  7264                           ;logic.h: 420: if(start == -1)
  7265                           
  7266                           
  7267                           ;logic.h: 426: else if(col == 8 - 1)
  7268  1716  3007               	movlw	7
  7269  1717  0647               	xorwf	lg_get_holes_after_merge@col,w
  7270  1718  1D03               	btfss	3,2
  7271  1719  2F3B               	goto	l4830
  7272                           
  7273                           ;logic.h: 427: {
  7274                           ;logic.h: 428: if((get_matrix_bit((uint8_t*)matrix->row, row, col) == 0) && (get_matrix_
      +                          bit((uint8_t*)matrix->row, row, col - 1) == 1))
  7275  171A  0846               	movf	lg_get_holes_after_merge@matrix,w
  7276  171B  00F7               	movwf	get_matrix_bit@byte
  7277  171C  3001               	movlw	1
  7278  171D  00F8               	movwf	get_matrix_bit@byte+1
  7279  171E  0848               	movf	lg_get_holes_after_merge@row,w
  7280  171F  00B5               	movwf	??_lg_get_holes_after_merge
  7281  1720  0835               	movf	??_lg_get_holes_after_merge,w
  7282  1721  00F9               	movwf	get_matrix_bit@row
  7283  1722  0847               	movf	lg_get_holes_after_merge@col,w
  7284  1723  00B6               	movwf	??_lg_get_holes_after_merge+1
  7285  1724  0836               	movf	??_lg_get_holes_after_merge+1,w
  7286  1725  00FA               	movwf	get_matrix_bit@col
  7287  1726  160A  158A  2198  160A  118A  	fcall	_get_matrix_bit
  7288  172B  3A00               	xorlw	0
  7289  172C  1D03               	skipz
  7290  172D  2F86               	goto	l4840
  7291  172E  1283               	bcf	3,5	;RP0=0, select bank0
  7292  172F  1303               	bcf	3,6	;RP1=0, select bank0
  7293  1730  0846               	movf	lg_get_holes_after_merge@matrix,w
  7294  1731  00F7               	movwf	get_matrix_bit@byte
  7295  1732  3001               	movlw	1
  7296  1733  00F8               	movwf	get_matrix_bit@byte+1
  7297  1734  0848               	movf	lg_get_holes_after_merge@row,w
  7298  1735  00B5               	movwf	??_lg_get_holes_after_merge
  7299  1736  0835               	movf	??_lg_get_holes_after_merge,w
  7300  1737  00F9               	movwf	get_matrix_bit@row
  7301  1738  0847               	movf	lg_get_holes_after_merge@col,w
  7302  1739  3EFF               	addlw	255
  7303  173A  2F72               	goto	L16
  7304  173B                     l4830:	
  7305                           ;logic.h: 433: }
  7306                           ;logic.h: 434: }
  7307                           ;logic.h: 435: }
  7308                           
  7309                           ;logic.h: 431: {
  7310                           ;logic.h: 432: start = row;
  7311                           
  7312                           ;logic.h: 429: {
  7313                           ;logic.h: 430: if(start == -1)
  7314                           
  7315                           
  7316                           ;logic.h: 436: else
  7317                           ;logic.h: 437: {
  7318                           ;logic.h: 438: if((get_matrix_bit((uint8_t*)matrix->row, row, col) == 0) && (get_matrix_
      +                          bit((uint8_t*)matrix->row, row, col - 1) == 1) && (get_matrix_bit((uint8_t*)matrix->row,
      +                           row, col + 1) == 1))
  7319  173B  0846               	movf	lg_get_holes_after_merge@matrix,w
  7320  173C  00F7               	movwf	get_matrix_bit@byte
  7321  173D  3001               	movlw	1
  7322  173E  00F8               	movwf	get_matrix_bit@byte+1
  7323  173F  0848               	movf	lg_get_holes_after_merge@row,w
  7324  1740  00B5               	movwf	??_lg_get_holes_after_merge
  7325  1741  0835               	movf	??_lg_get_holes_after_merge,w
  7326  1742  00F9               	movwf	get_matrix_bit@row
  7327  1743  0847               	movf	lg_get_holes_after_merge@col,w
  7328  1744  00B6               	movwf	??_lg_get_holes_after_merge+1
  7329  1745  0836               	movf	??_lg_get_holes_after_merge+1,w
  7330  1746  00FA               	movwf	get_matrix_bit@col
  7331  1747  160A  158A  2198  160A  118A  	fcall	_get_matrix_bit
  7332  174C  3A00               	xorlw	0
  7333  174D  1D03               	skipz
  7334  174E  2F86               	goto	l4840
  7335  174F  1283               	bcf	3,5	;RP0=0, select bank0
  7336  1750  1303               	bcf	3,6	;RP1=0, select bank0
  7337  1751  0846               	movf	lg_get_holes_after_merge@matrix,w
  7338  1752  00F7               	movwf	get_matrix_bit@byte
  7339  1753  3001               	movlw	1
  7340  1754  00F8               	movwf	get_matrix_bit@byte+1
  7341  1755  0848               	movf	lg_get_holes_after_merge@row,w
  7342  1756  00B5               	movwf	??_lg_get_holes_after_merge
  7343  1757  0835               	movf	??_lg_get_holes_after_merge,w
  7344  1758  00F9               	movwf	get_matrix_bit@row
  7345  1759  0847               	movf	lg_get_holes_after_merge@col,w
  7346  175A  3EFF               	addlw	255
  7347  175B  00B6               	movwf	??_lg_get_holes_after_merge+1
  7348  175C  0836               	movf	??_lg_get_holes_after_merge+1,w
  7349  175D  00FA               	movwf	get_matrix_bit@col
  7350  175E  160A  158A  2198  160A  118A  	fcall	_get_matrix_bit
  7351  1763  3A01               	xorlw	1
  7352  1764                     L15:	
  7353  1764  1D03               	skipz
  7354  1765  2F86               	goto	l4840
  7355  1766  1283               	bcf	3,5	;RP0=0, select bank0
  7356  1767  1303               	bcf	3,6	;RP1=0, select bank0
  7357  1768  0846               	movf	lg_get_holes_after_merge@matrix,w
  7358  1769  00F7               	movwf	get_matrix_bit@byte
  7359  176A  3001               	movlw	1
  7360  176B  00F8               	movwf	get_matrix_bit@byte+1
  7361  176C  0848               	movf	lg_get_holes_after_merge@row,w
  7362  176D  00B5               	movwf	??_lg_get_holes_after_merge
  7363  176E  0835               	movf	??_lg_get_holes_after_merge,w
  7364  176F  00F9               	movwf	get_matrix_bit@row
  7365  1770  0847               	movf	lg_get_holes_after_merge@col,w
  7366  1771  3E01               	addlw	1
  7367  1772                     L16:	
  7368  1772  00B6               	movwf	??_lg_get_holes_after_merge+1
  7369  1773  0836               	movf	??_lg_get_holes_after_merge+1,w
  7370  1774  00FA               	movwf	get_matrix_bit@col
  7371  1775  160A  158A  2198  160A  118A  	fcall	_get_matrix_bit
  7372  177A  3A01               	xorlw	1
  7373  177B  1D03               	skipz
  7374  177C  2F86               	goto	l4840
  7375                           
  7376                           ;logic.h: 439: {
  7377                           ;logic.h: 440: if(start == -1)
  7378  177D  1283               	bcf	3,5	;RP0=0, select bank0
  7379  177E  1303               	bcf	3,6	;RP1=0, select bank0
  7380  177F  0A45               	incf	lg_get_holes_after_merge@start,w
  7381  1780  1D03               	btfss	3,2
  7382  1781  2F86               	goto	l4840
  7383                           
  7384                           ;logic.h: 441: {
  7385                           ;logic.h: 442: start = row;
  7386  1782  0848               	movf	lg_get_holes_after_merge@row,w
  7387  1783  00B5               	movwf	??_lg_get_holes_after_merge
  7388  1784  0835               	movf	??_lg_get_holes_after_merge,w
  7389  1785  00C5               	movwf	lg_get_holes_after_merge@start
  7390  1786                     l4840:	
  7391                           
  7392                           ;logic.h: 443: }
  7393                           ;logic.h: 444: }
  7394                           ;logic.h: 445: }
  7395                           ;logic.h: 446: if(start >= 0)
  7396  1786  1283               	bcf	3,5	;RP0=0, select bank0
  7397  1787  1303               	bcf	3,6	;RP1=0, select bank0
  7398  1788  1BC5               	btfsc	lg_get_holes_after_merge@start,7
  7399  1789  2FB2               	goto	l736
  7400                           
  7401                           ;logic.h: 447: {
  7402                           ;logic.h: 448: if(row == 16 - 1)
  7403  178A  300F               	movlw	15
  7404  178B  0648               	xorwf	lg_get_holes_after_merge@row,w
  7405  178C  1D03               	btfss	3,2
  7406  178D  2F93               	goto	l4848
  7407                           
  7408                           ;logic.h: 449: {
  7409                           ;logic.h: 450: if(stop == -1)
  7410  178E  0A44               	incf	lg_get_holes_after_merge@stop,w
  7411  178F  1D03               	btfss	3,2
  7412  1790  2FB2               	goto	l736
  7413                           
  7414                           ;logic.h: 451: {
  7415                           ;logic.h: 452: stop = 16;
  7416  1791  3010               	movlw	16
  7417  1792  2FAF               	goto	L13
  7418  1793                     l4848:	
  7419                           ;logic.h: 453: }
  7420                           ;logic.h: 454: }
  7421                           
  7422                           
  7423                           ;logic.h: 455: else if(get_matrix_bit((uint8_t*)matrix->row, row + 1, col) == 1)
  7424  1793  0846               	movf	lg_get_holes_after_merge@matrix,w
  7425  1794  00F7               	movwf	get_matrix_bit@byte
  7426  1795  3001               	movlw	1
  7427  1796  00F8               	movwf	get_matrix_bit@byte+1
  7428  1797  0848               	movf	lg_get_holes_after_merge@row,w
  7429  1798  3E01               	addlw	1
  7430  1799  00B5               	movwf	??_lg_get_holes_after_merge
  7431  179A  0835               	movf	??_lg_get_holes_after_merge,w
  7432  179B  00F9               	movwf	get_matrix_bit@row
  7433  179C  0847               	movf	lg_get_holes_after_merge@col,w
  7434  179D  00B6               	movwf	??_lg_get_holes_after_merge+1
  7435  179E  0836               	movf	??_lg_get_holes_after_merge+1,w
  7436  179F  00FA               	movwf	get_matrix_bit@col
  7437  17A0  160A  158A  2198  160A  118A  	fcall	_get_matrix_bit
  7438  17A5  3A01               	xorlw	1
  7439  17A6  1D03               	skipz
  7440  17A7  2FB2               	goto	l736
  7441                           
  7442                           ;logic.h: 456: {
  7443                           ;logic.h: 457: if(stop == -1)
  7444  17A8  1283               	bcf	3,5	;RP0=0, select bank0
  7445  17A9  1303               	bcf	3,6	;RP1=0, select bank0
  7446  17AA  0A44               	incf	lg_get_holes_after_merge@stop,w
  7447  17AB  1D03               	btfss	3,2
  7448  17AC  2FB2               	goto	l736
  7449                           
  7450                           ;logic.h: 458: {
  7451                           ;logic.h: 459: stop = row + 1;
  7452  17AD  0848               	movf	lg_get_holes_after_merge@row,w
  7453  17AE  3E01               	addlw	1
  7454  17AF                     L13:	
  7455  17AF  00B5               	movwf	??_lg_get_holes_after_merge
  7456  17B0  0835               	movf	??_lg_get_holes_after_merge,w
  7457  17B1  00C4               	movwf	lg_get_holes_after_merge@stop
  7458  17B2                     l736:	
  7459  17B2  3001               	movlw	1
  7460  17B3  1283               	bcf	3,5	;RP0=0, select bank0
  7461  17B4  1303               	bcf	3,6	;RP1=0, select bank0
  7462  17B5  00B5               	movwf	??_lg_get_holes_after_merge
  7463  17B6  0835               	movf	??_lg_get_holes_after_merge,w
  7464  17B7  07C8               	addwf	lg_get_holes_after_merge@row,f
  7465  17B8  0848               	movf	lg_get_holes_after_merge@row,w
  7466  17B9  3A80               	xorlw	128
  7467  17BA  3E70               	addlw	-144
  7468  17BB  1C03               	skipc
  7469  17BC  2F00               	goto	l4810
  7470  17BD                     l725:	
  7471                           
  7472                           ;logic.h: 460: }
  7473                           ;logic.h: 461: }
  7474                           ;logic.h: 462: }
  7475                           ;logic.h: 464: }
  7476                           ;logic.h: 465: if((start >= 0) && (stop >= 0) && (stop - start >= 3))
  7477  17BD  1FC5               	btfss	lg_get_holes_after_merge@start,7
  7478  17BE  1BC4               	btfsc	lg_get_holes_after_merge@stop,7
  7479  17BF  2FEC               	goto	l4880
  7480  17C0  0845               	movf	lg_get_holes_after_merge@start,w
  7481  17C1  00B5               	movwf	??_lg_get_holes_after_merge
  7482  17C2  01B6               	clrf	??_lg_get_holes_after_merge+1
  7483  17C3  1BB5               	btfsc	??_lg_get_holes_after_merge,7
  7484  17C4  03B6               	decf	??_lg_get_holes_after_merge+1,f
  7485  17C5  09B5               	comf	??_lg_get_holes_after_merge,f
  7486  17C6  09B6               	comf	??_lg_get_holes_after_merge+1,f
  7487  17C7  0AB5               	incf	??_lg_get_holes_after_merge,f
  7488  17C8  1903               	skipnz
  7489  17C9  0AB6               	incf	??_lg_get_holes_after_merge+1,f
  7490  17CA  0844               	movf	lg_get_holes_after_merge@stop,w
  7491  17CB  00B7               	movwf	??_lg_get_holes_after_merge+2
  7492  17CC  01B8               	clrf	??_lg_get_holes_after_merge+3
  7493  17CD  1BB7               	btfsc	??_lg_get_holes_after_merge+2,7
  7494  17CE  03B8               	decf	??_lg_get_holes_after_merge+3,f
  7495  17CF  0835               	movf	??_lg_get_holes_after_merge,w
  7496  17D0  0737               	addwf	??_lg_get_holes_after_merge+2,w
  7497  17D1  00B9               	movwf	??_lg_get_holes_after_merge+4
  7498  17D2  0836               	movf	??_lg_get_holes_after_merge+1,w
  7499  17D3  1803               	skipnc
  7500  17D4  0A36               	incf	??_lg_get_holes_after_merge+1,w
  7501  17D5  0738               	addwf	??_lg_get_holes_after_merge+3,w
  7502  17D6  00BA               	movwf	??_lg_get_holes_after_merge+5
  7503  17D7  083A               	movf	??_lg_get_holes_after_merge+5,w
  7504  17D8  3A80               	xorlw	128
  7505  17D9  00FF               	movwf	127
  7506  17DA  3080               	movlw	128
  7507  17DB  027F               	subwf	127,w
  7508  17DC  1D03               	skipz
  7509  17DD  2FE0               	goto	u5965
  7510  17DE  3003               	movlw	3
  7511  17DF  0239               	subwf	??_lg_get_holes_after_merge+4,w
  7512  17E0                     u5965:	
  7513  17E0  1803               	btfsc	3,0
  7514  17E1  2FE6               	goto	l4878
  7515  17E2  2FEC               	goto	l4880
  7516                           
  7517                           ;logic.h: 466: {
  7518                           ;logic.h: 467: do { if(0) { int n = sprintf(g_debug, "col = %d""\r\n", col); if(n > 64) 
      +                          { USARTWriteString("ERROR: g_debug is overflowed\r\n"); do { ((void)0); asm("ljmp $"); }
      +                          while(0); } USARTWriteString(g_debug); } } while (0);;
  7519  17E3  160A  118A  2EE7   	ljmp	$	;# 
  7520  17E6                     l4878:	
  7521                           
  7522                           ;logic.h: 470: num_hole++;
  7523  17E6  3001               	movlw	1
  7524  17E7  1283               	bcf	3,5	;RP0=0, select bank0
  7525  17E8  1303               	bcf	3,6	;RP1=0, select bank0
  7526  17E9  00B5               	movwf	??_lg_get_holes_after_merge
  7527  17EA  0835               	movf	??_lg_get_holes_after_merge,w
  7528  17EB  07C3               	addwf	lg_get_holes_after_merge@num_hole,f
  7529  17EC                     l4880:	
  7530  17EC  3001               	movlw	1
  7531  17ED  1283               	bcf	3,5	;RP0=0, select bank0
  7532  17EE  1303               	bcf	3,6	;RP1=0, select bank0
  7533  17EF  00B5               	movwf	??_lg_get_holes_after_merge
  7534  17F0  0835               	movf	??_lg_get_holes_after_merge,w
  7535  17F1  07C7               	addwf	lg_get_holes_after_merge@col,f
  7536  17F2  2EF0               	goto	L14
  7537                           
  7538                           ;logic.h: 468: do { if(0) { int n = sprintf(g_debug, "start = %d""\r\n", start); if(n > 
      +                          64) { USARTWriteString("ERROR: g_debug is overflowed\r\n"); do { ((void)0); asm("ljmp $"
      +                          ); }while(0); } USARTWriteString(g_debug); } } while (0);;
  7539  17F3  160A  118A  2EE7   	ljmp	$	;# 
  7540                           
  7541                           ;logic.h: 469: do { if(0) { int n = sprintf(g_debug, "stop = %d""\r\n", stop); if(n > 64
      +                          ) { USARTWriteString("ERROR: g_debug is overflowed\r\n"); do { ((void)0); asm("ljmp $");
      +                           }while(0); } USARTWriteString(g_debug); } } while (0);;
  7542  17F6  160A  118A  2EE7   	ljmp	$	;# 
  7543                           
  7544                           ;logic.h: 471: }
  7545                           ;logic.h: 472: }
  7546                           ;logic.h: 473: do { if(0) { int n = sprintf(g_debug, "num_hole = %d""\r\n", num_hole); i
      +                          f(n > 64) { USARTWriteString("ERROR: g_debug is overflowed\r\n"); do { ((void)0); asm("l
      +                          jmp $"); }while(0); } USARTWriteString(g_debug); } } while (0);;
  7547  17F9  160A  118A  2EE7   	ljmp	$	;# 
  7548  17FC                     l4890:	
  7549                           
  7550                           ;logic.h: 474: return num_hole;
  7551  17FC  1283               	bcf	3,5	;RP0=0, select bank0
  7552  17FD  1303               	bcf	3,6	;RP1=0, select bank0
  7553  17FE  0843               	movf	lg_get_holes_after_merge@num_hole,w
  7554  17FF  0008               	return
  7555  1800                     __end_of_lg_get_holes_after_merge:	
  7556                           
  7557                           	psect	text22
  7558  1EB2                     __ptext22:	
  7559 ;; *************** function _lg_get_height_after_merge *****************
  7560 ;; Defined at:
  7561 ;;		line 389 in file "../logic.h"
  7562 ;; Parameters:    Size  Location     Type
  7563 ;;  y               1    wreg     char 
  7564 ;;  matrix          2   21[BANK0 ] PTR struct .
  7565 ;;		 -> NULL(0), g_matrix4x4(96), 
  7566 ;; Auto vars:     Size  Location     Type
  7567 ;;  y               1   33[BANK0 ] char 
  7568 ;;  n               2   31[BANK0 ] int 
  7569 ;;  n               2   29[BANK0 ] int 
  7570 ;;  n               2   27[BANK0 ] int 
  7571 ;;  col             1   34[BANK0 ] char 
  7572 ;;  n               2   25[BANK0 ] int 
  7573 ;;  row             1   35[BANK0 ] char 
  7574 ;; Return value:  Size  Location     Type
  7575 ;;                  1    wreg      unsigned char 
  7576 ;; Registers used:
  7577 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  7578 ;; Tracked objects:
  7579 ;;		On entry : 0/0
  7580 ;;		On exit  : 0/0
  7581 ;;		Unchanged: 0/0
  7582 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7583 ;;      Params:         0       2       0       0       0
  7584 ;;      Locals:         0      11       0       0       0
  7585 ;;      Temps:          0       2       0       0       0
  7586 ;;      Totals:         0      15       0       0       0
  7587 ;;Total ram usage:       15 bytes
  7588 ;; Hardware stack levels used:    1
  7589 ;; Hardware stack levels required when called:    3
  7590 ;; This function calls:
  7591 ;;		_USARTWriteString
  7592 ;;		_get_matrix_bit
  7593 ;;		_sprintf
  7594 ;; This function is called by:
  7595 ;;		_lg_find_best_solution
  7596 ;; This function uses a non-reentrant model
  7597 ;;
  7598                           
  7599                           
  7600                           ;psect for function _lg_get_height_after_merge
  7601  1EB2                     _lg_get_height_after_merge:	
  7602                           
  7603                           ;incstack = 0
  7604                           ; Regs used in _lg_get_height_after_merge: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+
      +                          cstack]
  7605                           ;lg_get_height_after_merge@y stored from wreg
  7606  1EB2  1283               	bcf	3,5	;RP0=0, select bank0
  7607  1EB3  1303               	bcf	3,6	;RP1=0, select bank0
  7608  1EB4  00C1               	movwf	lg_get_height_after_merge@y
  7609                           
  7610                           ;logic.h: 391: do { if(0) { int n = sprintf(g_debug, "lg_get_height_after_merge""\r\n");
      +                           if(n > 64) { USARTWriteString("ERROR: g_debug is overflowed\r\n"); do { ((void)0); asm(
      +                          "ljmp $"); }while(0); } USARTWriteString(g_debug); } } while (0);;
  7611  1EB5  2EB9               	goto	l4750
  7612  1EB6  160A  158A  2EB2   	ljmp	$	;# 
  7613  1EB9                     l4750:	
  7614                           
  7615                           ;logic.h: 392: for(int8_t row = 0; row < 4; row++)
  7616  1EB9  1283               	bcf	3,5	;RP0=0, select bank0
  7617  1EBA  1303               	bcf	3,6	;RP1=0, select bank0
  7618  1EBB  01C3               	clrf	lg_get_height_after_merge@row
  7619  1EBC                     L17:	
  7620  1EBC  0843               	movf	lg_get_height_after_merge@row,w
  7621  1EBD  3A80               	xorlw	128
  7622  1EBE  3E7C               	addlw	-132
  7623  1EBF  1803               	btfsc	3,0
  7624  1EC0  0008               	return
  7625                           
  7626                           ;logic.h: 393: {
  7627                           ;logic.h: 394: for(int8_t col = 0; col < 4; col++)
  7628  1EC1  01C2               	clrf	lg_get_height_after_merge@col
  7629  1EC2  0842               	movf	lg_get_height_after_merge@col,w
  7630  1EC3  3A80               	xorlw	128
  7631  1EC4  3E7C               	addlw	-132
  7632  1EC5  1803               	btfsc	3,0
  7633  1EC6  2EF8               	goto	l4790
  7634  1EC7                     l4762:	
  7635                           
  7636                           ;logic.h: 395: {
  7637                           ;logic.h: 396: if(get_matrix_bit((uint8_t*)matrix->row, row, col) == 1)
  7638  1EC7  0835               	movf	lg_get_height_after_merge@matrix,w
  7639  1EC8  00F7               	movwf	get_matrix_bit@byte
  7640  1EC9  0836               	movf	lg_get_height_after_merge@matrix+1,w
  7641  1ECA  00F8               	movwf	get_matrix_bit@byte+1
  7642  1ECB  0843               	movf	lg_get_height_after_merge@row,w
  7643  1ECC  00B7               	movwf	??_lg_get_height_after_merge
  7644  1ECD  0837               	movf	??_lg_get_height_after_merge,w
  7645  1ECE  00F9               	movwf	get_matrix_bit@row
  7646  1ECF  0842               	movf	lg_get_height_after_merge@col,w
  7647  1ED0  00B8               	movwf	??_lg_get_height_after_merge+1
  7648  1ED1  0838               	movf	??_lg_get_height_after_merge+1,w
  7649  1ED2  00FA               	movwf	get_matrix_bit@col
  7650  1ED3  160A  158A  2198  160A  158A  	fcall	_get_matrix_bit
  7651  1ED8  3A01               	xorlw	1
  7652  1ED9  1903               	btfsc	3,2
  7653  1EDA  2EDF               	goto	l4782
  7654  1EDB  2EED               	goto	l4786
  7655                           
  7656                           ;logic.h: 397: {
  7657                           ;logic.h: 398: do { if(0) { int n = sprintf(g_debug, "y = %d""\r\n", y); if(n > 64) { US
      +                          ARTWriteString("ERROR: g_debug is overflowed\r\n"); do { ((void)0); asm("ljmp $"); }whil
      +                          e(0); } USARTWriteString(g_debug); } } while (0);;
  7658  1EDC  160A  158A  2EB2   	ljmp	$	;# 
  7659  1EDF                     l4782:	
  7660                           
  7661                           ;logic.h: 401: return (uint8_t)(16 - y - row);
  7662  1EDF  1283               	bcf	3,5	;RP0=0, select bank0
  7663  1EE0  1303               	bcf	3,6	;RP1=0, select bank0
  7664  1EE1  0843               	movf	lg_get_height_after_merge@row,w
  7665  1EE2  0741               	addwf	lg_get_height_after_merge@y,w
  7666  1EE3  3AFF               	xorlw	255
  7667  1EE4  3E01               	addlw	1
  7668  1EE5  3E10               	addlw	16
  7669  1EE6  0008               	return
  7670                           
  7671                           ;logic.h: 399: do { if(0) { int n = sprintf(g_debug, "row = %d""\r\n", row); if(n > 64) 
      +                          { USARTWriteString("ERROR: g_debug is overflowed\r\n"); do { ((void)0); asm("ljmp $"); }
      +                          while(0); } USARTWriteString(g_debug); } } while (0);;
  7672  1EE7  160A  158A  2EB2   	ljmp	$	;# 
  7673                           
  7674                           ;logic.h: 400: do { if(0) { int n = sprintf(g_debug, "height = %d""\r\n", 16 - y - row);
      +                           if(n > 64) { USARTWriteString("ERROR: g_debug is overflowed\r\n"); do { ((void)0); asm(
      +                          "ljmp $"); }while(0); } USARTWriteString(g_debug); } } while (0);;
  7675  1EEA  160A  158A  2EB2   	ljmp	$	;# 
  7676  1EED                     l4786:	
  7677  1EED  3001               	movlw	1
  7678  1EEE  1283               	bcf	3,5	;RP0=0, select bank0
  7679  1EEF  1303               	bcf	3,6	;RP1=0, select bank0
  7680  1EF0  00B7               	movwf	??_lg_get_height_after_merge
  7681  1EF1  0837               	movf	??_lg_get_height_after_merge,w
  7682  1EF2  07C2               	addwf	lg_get_height_after_merge@col,f
  7683  1EF3  0842               	movf	lg_get_height_after_merge@col,w
  7684  1EF4  3A80               	xorlw	128
  7685  1EF5  3E7C               	addlw	-132
  7686  1EF6  1C03               	skipc
  7687  1EF7  2EC7               	goto	l4762
  7688  1EF8                     l4790:	
  7689  1EF8  3001               	movlw	1
  7690  1EF9  00B7               	movwf	??_lg_get_height_after_merge
  7691  1EFA  0837               	movf	??_lg_get_height_after_merge,w
  7692  1EFB  07C3               	addwf	lg_get_height_after_merge@row,f
  7693  1EFC  2EBC               	goto	L17
  7694  1EFD                     __end_of_lg_get_height_after_merge:	
  7695                           
  7696                           	psect	text23
  7697  1BB5                     __ptext23:	
  7698 ;; *************** function _lg_get_height *****************
  7699 ;; Defined at:
  7700 ;;		line 377 in file "../logic.h"
  7701 ;; Parameters:    Size  Location     Type
  7702 ;;  matrix          1    wreg     PTR struct .
  7703 ;;		 -> g_matrix16x8(16), 
  7704 ;; Auto vars:     Size  Location     Type
  7705 ;;  matrix          1   25[BANK0 ] PTR struct .
  7706 ;;		 -> g_matrix16x8(16), 
  7707 ;;  n               2   23[BANK0 ] int 
  7708 ;;  row             1   26[BANK0 ] char 
  7709 ;; Return value:  Size  Location     Type
  7710 ;;                  1    wreg      unsigned char 
  7711 ;; Registers used:
  7712 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  7713 ;; Tracked objects:
  7714 ;;		On entry : 0/0
  7715 ;;		On exit  : 0/0
  7716 ;;		Unchanged: 0/0
  7717 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7718 ;;      Params:         0       0       0       0       0
  7719 ;;      Locals:         0       4       0       0       0
  7720 ;;      Temps:          0       2       0       0       0
  7721 ;;      Totals:         0       6       0       0       0
  7722 ;;Total ram usage:        6 bytes
  7723 ;; Hardware stack levels used:    1
  7724 ;; Hardware stack levels required when called:    2
  7725 ;; This function calls:
  7726 ;;		_USARTWriteString
  7727 ;;		_lg_is_row_empty
  7728 ;;		_sprintf
  7729 ;; This function is called by:
  7730 ;;		_lg_find_best_solution
  7731 ;; This function uses a non-reentrant model
  7732 ;;
  7733                           
  7734                           
  7735                           ;psect for function _lg_get_height
  7736  1BB5                     _lg_get_height:	
  7737                           
  7738                           ;incstack = 0
  7739                           ; Regs used in _lg_get_height: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  7740                           ;lg_get_height@matrix stored from wreg
  7741  1BB5  1283               	bcf	3,5	;RP0=0, select bank0
  7742  1BB6  1303               	bcf	3,6	;RP1=0, select bank0
  7743  1BB7  00B9               	movwf	lg_get_height@matrix
  7744                           
  7745                           ;logic.h: 379: for(int8_t row = 16 - 1; row >= 0; row--)
  7746  1BB8  300F               	movlw	15
  7747  1BB9  00B5               	movwf	??_lg_get_height
  7748  1BBA  0835               	movf	??_lg_get_height,w
  7749  1BBB  00BA               	movwf	lg_get_height@row
  7750  1BBC  1BBA               	btfsc	lg_get_height@row,7
  7751  1BBD  2BDF               	goto	l4740
  7752  1BBE                     l4724:	
  7753                           
  7754                           ;logic.h: 380: {
  7755                           ;logic.h: 381: if(lg_is_row_empty(matrix, row) == 1)
  7756  1BBE  083A               	movf	lg_get_height@row,w
  7757  1BBF  00B5               	movwf	??_lg_get_height
  7758  1BC0  0835               	movf	??_lg_get_height,w
  7759  1BC1  00F0               	movwf	lg_is_row_empty@row
  7760  1BC2  0839               	movf	lg_get_height@matrix,w
  7761  1BC3  160A  158A  2177  160A  158A  	fcall	_lg_is_row_empty
  7762  1BC8  3A01               	xorlw	1
  7763  1BC9  1903               	btfsc	3,2
  7764  1BCA  2BCF               	goto	l4732
  7765  1BCB  2BD7               	goto	l4736
  7766                           
  7767                           ;logic.h: 382: {
  7768                           ;logic.h: 383: do { if(0) { int n = sprintf(g_debug, "lg_get_height height = %d""\r\n", 
      +                          16 - row - 1); if(n > 64) { USARTWriteString("ERROR: g_debug is overflowed\r\n"); do { (
      +                          (void)0); asm("ljmp $"); }while(0); } USARTWriteString(g_debug); } } while (0);;
  7769  1BCC  160A  158A  2BB5   	ljmp	$	;# 
  7770  1BCF                     l4732:	
  7771                           
  7772                           ;logic.h: 384: return (uint8_t)(16 - row - 1);
  7773  1BCF  1283               	bcf	3,5	;RP0=0, select bank0
  7774  1BD0  1303               	bcf	3,6	;RP1=0, select bank0
  7775  1BD1  083A               	movf	lg_get_height@row,w
  7776  1BD2  3E01               	addlw	1
  7777  1BD3  3AFF               	xorlw	255
  7778  1BD4  3E01               	addlw	1
  7779  1BD5  3E10               	addlw	16
  7780  1BD6  0008               	return
  7781  1BD7                     l4736:	
  7782  1BD7  30FF               	movlw	255
  7783  1BD8  1283               	bcf	3,5	;RP0=0, select bank0
  7784  1BD9  1303               	bcf	3,6	;RP1=0, select bank0
  7785  1BDA  00B5               	movwf	??_lg_get_height
  7786  1BDB  0835               	movf	??_lg_get_height,w
  7787  1BDC  07BA               	addwf	lg_get_height@row,f
  7788  1BDD  1FBA               	btfss	lg_get_height@row,7
  7789  1BDE  2BBE               	goto	l4724
  7790  1BDF                     l4740:	
  7791                           
  7792                           ;logic.h: 385: }
  7793                           ;logic.h: 386: }
  7794                           ;logic.h: 387: return 16;
  7795  1BDF  3010               	movlw	16
  7796  1BE0  0008               	return
  7797  1BE1                     __end_of_lg_get_height:	
  7798                           
  7799                           	psect	text24
  7800  1977                     __ptext24:	
  7801 ;; *************** function _lg_is_row_empty *****************
  7802 ;; Defined at:
  7803 ;;		line 85 in file "../logic.h"
  7804 ;; Parameters:    Size  Location     Type
  7805 ;;  matrix          1    wreg     PTR const struct .
  7806 ;;		 -> g_matrix16x8(16), 
  7807 ;;  row             1    0[COMMON] unsigned char 
  7808 ;; Auto vars:     Size  Location     Type
  7809 ;;  matrix          1    1[COMMON] PTR const struct .
  7810 ;;		 -> g_matrix16x8(16), 
  7811 ;; Return value:  Size  Location     Type
  7812 ;;                  1    wreg      unsigned char 
  7813 ;; Registers used:
  7814 ;;		wreg, status,2, status,0
  7815 ;; Tracked objects:
  7816 ;;		On entry : 0/0
  7817 ;;		On exit  : 0/0
  7818 ;;		Unchanged: 0/0
  7819 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7820 ;;      Params:         1       0       0       0       0
  7821 ;;      Locals:         1       0       0       0       0
  7822 ;;      Temps:          0       0       0       0       0
  7823 ;;      Totals:         2       0       0       0       0
  7824 ;;Total ram usage:        2 bytes
  7825 ;; Hardware stack levels used:    1
  7826 ;; This function calls:
  7827 ;;		Nothing
  7828 ;; This function is called by:
  7829 ;;		_lg_get_height
  7830 ;; This function uses a non-reentrant model
  7831 ;;
  7832                           
  7833                           
  7834                           ;psect for function _lg_is_row_empty
  7835  1977                     _lg_is_row_empty:	
  7836                           
  7837                           ;incstack = 0
  7838                           ; Regs used in _lg_is_row_empty: [wreg+status,2+status,0]
  7839                           ;lg_is_row_empty@matrix stored from wreg
  7840  1977  00F1               	movwf	lg_is_row_empty@matrix
  7841                           
  7842                           ;logic.h: 87: if(matrix->row == 0x0)
  7843  1978  0871               	movf	lg_is_row_empty@matrix,w
  7844  1979  1D03               	btfss	3,2
  7845  197A  297D               	goto	l4178
  7846                           
  7847                           ;logic.h: 88: {
  7848                           ;logic.h: 89: return 1;
  7849  197B  3001               	movlw	1
  7850  197C  0008               	return
  7851  197D                     l4178:	
  7852                           
  7853                           ;logic.h: 90: }
  7854                           ;logic.h: 91: return 0;
  7855  197D  3000               	movlw	0
  7856  197E  0008               	return
  7857  197F                     __end_of_lg_is_row_empty:	
  7858                           
  7859                           	psect	text25
  7860  149E                     __ptext25:	
  7861 ;; *************** function _lg_fall_off *****************
  7862 ;; Defined at:
  7863 ;;		line 190 in file "../logic.h"
  7864 ;; Parameters:    Size  Location     Type
  7865 ;;  x               1    wreg     char 
  7866 ;;  y               1   21[BANK0 ] char 
  7867 ;;  matrix4x4       2   22[BANK0 ] PTR const struct .
  7868 ;;		 -> NULL(0), g_matrix4x4(96), 
  7869 ;;  matrix16x8      1   24[BANK0 ] PTR const struct .
  7870 ;;		 -> g_matrix16x8(16), 
  7871 ;; Auto vars:     Size  Location     Type
  7872 ;;  x               1   35[BANK0 ] char 
  7873 ;;  n               2   33[BANK0 ] int 
  7874 ;;  n               2   31[BANK0 ] int 
  7875 ;;  n               2   29[BANK0 ] int 
  7876 ;;  n               2   27[BANK0 ] int 
  7877 ;;  col             1   36[BANK0 ] char 
  7878 ;;  row             1   37[BANK0 ] char 
  7879 ;; Return value:  Size  Location     Type
  7880 ;;                  1    wreg      unsigned char 
  7881 ;; Registers used:
  7882 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  7883 ;; Tracked objects:
  7884 ;;		On entry : 0/0
  7885 ;;		On exit  : 0/0
  7886 ;;		Unchanged: 0/0
  7887 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7888 ;;      Params:         0       4       0       0       0
  7889 ;;      Locals:         0      11       0       0       0
  7890 ;;      Temps:          0       2       0       0       0
  7891 ;;      Totals:         0      17       0       0       0
  7892 ;;Total ram usage:       17 bytes
  7893 ;; Hardware stack levels used:    1
  7894 ;; Hardware stack levels required when called:    3
  7895 ;; This function calls:
  7896 ;;		_USARTWriteString
  7897 ;;		_get_matrix_bit
  7898 ;;		_sprintf
  7899 ;; This function is called by:
  7900 ;;		_lg_find_best_solution
  7901 ;; This function uses a non-reentrant model
  7902 ;;
  7903                           
  7904                           
  7905                           ;psect for function _lg_fall_off
  7906  149E                     _lg_fall_off:	
  7907                           
  7908                           ;incstack = 0
  7909                           ; Regs used in _lg_fall_off: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  7910                           ;lg_fall_off@x stored from wreg
  7911  149E  1283               	bcf	3,5	;RP0=0, select bank0
  7912  149F  1303               	bcf	3,6	;RP1=0, select bank0
  7913  14A0  00C3               	movwf	lg_fall_off@x
  7914  14A1                     l552:	
  7915                           ;logic.h: 192: while(1)
  7916                           
  7917                           
  7918                           ;logic.h: 193: {
  7919                           ;logic.h: 194: for(int8_t row = 4 - 1; row >= 0; row--)
  7920  14A1  3003               	movlw	3
  7921  14A2  00B9               	movwf	??_lg_fall_off
  7922  14A3  0839               	movf	??_lg_fall_off,w
  7923  14A4  00C5               	movwf	lg_fall_off@row
  7924  14A5  1BC5               	btfsc	lg_fall_off@row,7
  7925  14A6  2D24               	goto	l4552
  7926  14A7                     l4498:	
  7927                           
  7928                           ;logic.h: 195: {
  7929                           ;logic.h: 196: for(int8_t col = 0; col < 4; col++)
  7930  14A7  01C4               	clrf	lg_fall_off@col
  7931  14A8  0844               	movf	lg_fall_off@col,w
  7932  14A9  3A80               	xorlw	128
  7933  14AA  3E7C               	addlw	-132
  7934  14AB  1803               	btfsc	3,0
  7935  14AC  2D1E               	goto	l4548
  7936  14AD                     l4504:	
  7937                           
  7938                           ;logic.h: 197: {
  7939                           ;logic.h: 199: Seed++;
  7940  14AD  3001               	movlw	1
  7941  14AE  1683               	bsf	3,5	;RP0=1, select bank1
  7942  14AF  1303               	bcf	3,6	;RP1=0, select bank1
  7943  14B0  07D3               	addwf	_Seed^(0+128),f
  7944  14B1  1803               	skipnc
  7945  14B2  0AD4               	incf	(_Seed+1)^(0+128),f
  7946  14B3  3000               	movlw	0
  7947  14B4  07D4               	addwf	(_Seed+1)^(0+128),f
  7948                           
  7949                           ;logic.h: 201: if(get_matrix_bit((uint8_t*)matrix4x4->row, row, col) == 1)
  7950  14B5  1283               	bcf	3,5	;RP0=0, select bank0
  7951  14B6  1303               	bcf	3,6	;RP1=0, select bank0
  7952  14B7  0836               	movf	lg_fall_off@matrix4x4,w
  7953  14B8  00F7               	movwf	get_matrix_bit@byte
  7954  14B9  0837               	movf	lg_fall_off@matrix4x4+1,w
  7955  14BA  00F8               	movwf	get_matrix_bit@byte+1
  7956  14BB  0845               	movf	lg_fall_off@row,w
  7957  14BC  00B9               	movwf	??_lg_fall_off
  7958  14BD  0839               	movf	??_lg_fall_off,w
  7959  14BE  00F9               	movwf	get_matrix_bit@row
  7960  14BF  0844               	movf	lg_fall_off@col,w
  7961  14C0  00BA               	movwf	??_lg_fall_off+1
  7962  14C1  083A               	movf	??_lg_fall_off+1,w
  7963  14C2  00FA               	movwf	get_matrix_bit@col
  7964  14C3  160A  158A  2198  160A  118A  	fcall	_get_matrix_bit
  7965  14C8  3A01               	xorlw	1
  7966  14C9  1D03               	skipz
  7967  14CA  2D13               	goto	l4544
  7968                           
  7969                           ;logic.h: 202: {
  7970                           ;logic.h: 203: if(get_matrix_bit((uint8_t*)matrix16x8->row, y + row + 1, x + col) == 1)
  7971  14CB  1283               	bcf	3,5	;RP0=0, select bank0
  7972  14CC  1303               	bcf	3,6	;RP1=0, select bank0
  7973  14CD  0838               	movf	lg_fall_off@matrix16x8,w
  7974  14CE  00F7               	movwf	get_matrix_bit@byte
  7975  14CF  3000               	movlw	0
  7976  14D0  00F8               	movwf	get_matrix_bit@byte+1
  7977  14D1  0845               	movf	lg_fall_off@row,w
  7978  14D2  0735               	addwf	lg_fall_off@y,w
  7979  14D3  3E01               	addlw	1
  7980  14D4  00B9               	movwf	??_lg_fall_off
  7981  14D5  0839               	movf	??_lg_fall_off,w
  7982  14D6  00F9               	movwf	get_matrix_bit@row
  7983  14D7  0844               	movf	lg_fall_off@col,w
  7984  14D8  0743               	addwf	lg_fall_off@x,w
  7985  14D9  00BA               	movwf	??_lg_fall_off+1
  7986  14DA  083A               	movf	??_lg_fall_off+1,w
  7987  14DB  00FA               	movwf	get_matrix_bit@col
  7988  14DC  160A  158A  2198  160A  118A  	fcall	_get_matrix_bit
  7989  14E1  3A01               	xorlw	1
  7990  14E2  1903               	btfsc	3,2
  7991  14E3  2CE8               	goto	l4522
  7992  14E4  2CEF               	goto	l4526
  7993                           
  7994                           ;logic.h: 204: {
  7995                           ;logic.h: 205: do { if(0) { int n = sprintf(g_debug, "fall_off1""\r\n"); if(n > 64) { US
      +                          ARTWriteString("ERROR: g_debug is overflowed\r\n"); do { ((void)0); asm("ljmp $"); }whil
      +                          e(0); } USARTWriteString(g_debug); } } while (0);;
  7996  14E5  160A  118A  2C9E   	ljmp	$	;# 
  7997  14E8                     l4522:	
  7998                           
  7999                           ;logic.h: 207: return y;
  8000  14E8  1283               	bcf	3,5	;RP0=0, select bank0
  8001  14E9  1303               	bcf	3,6	;RP1=0, select bank0
  8002  14EA  0835               	movf	lg_fall_off@y,w
  8003  14EB  0008               	return
  8004                           
  8005                           ;logic.h: 206: do { if(0) { int n = sprintf(g_debug, "x = %d, y = %d""\r\n", x, y); if(n
      +                           > 64) { USARTWriteString("ERROR: g_debug is overflowed\r\n"); do { ((void)0); asm("ljmp
      +                           $"); }while(0); } USARTWriteString(g_debug); } } while (0);;
  8006  14EC  160A  118A  2C9E   	ljmp	$	;# 
  8007  14EF                     l4526:	
  8008                           
  8009                           ;logic.h: 208: }
  8010                           ;logic.h: 209: if((y + row) >= (16 - 1))
  8011  14EF  1283               	bcf	3,5	;RP0=0, select bank0
  8012  14F0  1303               	bcf	3,6	;RP1=0, select bank0
  8013  14F1  0835               	movf	lg_fall_off@y,w
  8014  14F2  0745               	addwf	lg_fall_off@row,w
  8015  14F3  00B9               	movwf	??_lg_fall_off
  8016  14F4  01BA               	clrf	??_lg_fall_off+1
  8017  14F5  1803               	skipnc
  8018  14F6  0ABA               	incf	??_lg_fall_off+1,f
  8019  14F7  1BB5               	btfsc	lg_fall_off@y,7
  8020  14F8  03BA               	decf	??_lg_fall_off+1,f
  8021  14F9  1BC5               	btfsc	lg_fall_off@row,7
  8022  14FA  03BA               	decf	??_lg_fall_off+1,f
  8023  14FB  1283               	bcf	3,5	;RP0=0, select bank0
  8024  14FC  1303               	bcf	3,6	;RP1=0, select bank0
  8025  14FD  083A               	movf	??_lg_fall_off+1,w
  8026  14FE  3A80               	xorlw	128
  8027  14FF  00FF               	movwf	127
  8028  1500  3080               	movlw	128
  8029  1501  027F               	subwf	127,w
  8030  1502  1D03               	skipz
  8031  1503  2D06               	goto	u5265
  8032  1504  300F               	movlw	15
  8033  1505  0239               	subwf	??_lg_fall_off,w
  8034  1506                     u5265:	
  8035  1506  1803               	btfsc	3,0
  8036  1507  2D0C               	goto	l4540
  8037  1508  2D13               	goto	l4544
  8038                           
  8039                           ;logic.h: 210: {
  8040                           ;logic.h: 211: do { if(0) { int n = sprintf(g_debug, "fall_off2""\r\n"); if(n > 64) { US
      +                          ARTWriteString("ERROR: g_debug is overflowed\r\n"); do { ((void)0); asm("ljmp $"); }whil
      +                          e(0); } USARTWriteString(g_debug); } } while (0);;
  8041  1509  160A  118A  2C9E   	ljmp	$	;# 
  8042  150C                     l4540:	
  8043                           
  8044                           ;logic.h: 213: return y;
  8045  150C  1283               	bcf	3,5	;RP0=0, select bank0
  8046  150D  1303               	bcf	3,6	;RP1=0, select bank0
  8047  150E  0835               	movf	lg_fall_off@y,w
  8048  150F  0008               	return
  8049                           
  8050                           ;logic.h: 212: do { if(0) { int n = sprintf(g_debug, "x = %d, y = %d""\r\n", x, y); if(n
      +                           > 64) { USARTWriteString("ERROR: g_debug is overflowed\r\n"); do { ((void)0); asm("ljmp
      +                           $"); }while(0); } USARTWriteString(g_debug); } } while (0);;
  8051  1510  160A  118A  2C9E   	ljmp	$	;# 
  8052  1513                     l4544:	
  8053  1513  3001               	movlw	1
  8054  1514  1283               	bcf	3,5	;RP0=0, select bank0
  8055  1515  1303               	bcf	3,6	;RP1=0, select bank0
  8056  1516  00B9               	movwf	??_lg_fall_off
  8057  1517  0839               	movf	??_lg_fall_off,w
  8058  1518  07C4               	addwf	lg_fall_off@col,f
  8059  1519  0844               	movf	lg_fall_off@col,w
  8060  151A  3A80               	xorlw	128
  8061  151B  3E7C               	addlw	-132
  8062  151C  1C03               	skipc
  8063  151D  2CAD               	goto	l4504
  8064  151E                     l4548:	
  8065  151E  30FF               	movlw	255
  8066  151F  00B9               	movwf	??_lg_fall_off
  8067  1520  0839               	movf	??_lg_fall_off,w
  8068  1521  07C5               	addwf	lg_fall_off@row,f
  8069  1522  1FC5               	btfss	lg_fall_off@row,7
  8070  1523  2CA7               	goto	l4498
  8071  1524                     l4552:	
  8072                           
  8073                           ;logic.h: 214: }
  8074                           ;logic.h: 215: }
  8075                           ;logic.h: 216: }
  8076                           ;logic.h: 217: }
  8077                           ;logic.h: 218: y++;
  8078  1524  3001               	movlw	1
  8079  1525  00B9               	movwf	??_lg_fall_off
  8080  1526  0839               	movf	??_lg_fall_off,w
  8081  1527  07B5               	addwf	lg_fall_off@y,f
  8082  1528  2CA1               	goto	l552
  8083  1529                     __end_of_lg_fall_off:	
  8084                           
  8085                           	psect	text26
  8086  164A                     __ptext26:	
  8087 ;; *************** function _dbg_print_cur_MATRIX4x4 *****************
  8088 ;; Defined at:
  8089 ;;		line 137 in file "../debug.h"
  8090 ;; Parameters:    Size  Location     Type
  8091 ;;  enable          1    wreg     unsigned char 
  8092 ;;  lable           2   50[BANK0 ] PTR const unsigned char 
  8093 ;;		 -> STR_139(7), 
  8094 ;;  x               1   52[BANK0 ] char 
  8095 ;;  y               1   53[BANK0 ] char 
  8096 ;; Auto vars:     Size  Location     Type
  8097 ;;  enable          1   64[BANK0 ] unsigned char 
  8098 ;;  n               2   60[BANK0 ] int 
  8099 ;;  n               2   58[BANK0 ] int 
  8100 ;;  matrix          2   62[BANK0 ] PTR struct .
  8101 ;;		 -> g_matrix4x4(96), 
  8102 ;; Return value:  Size  Location     Type
  8103 ;;                  1    wreg      void 
  8104 ;; Registers used:
  8105 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  8106 ;; Tracked objects:
  8107 ;;		On entry : 0/0
  8108 ;;		On exit  : 0/0
  8109 ;;		Unchanged: 0/0
  8110 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8111 ;;      Params:         0       4       0       0       0
  8112 ;;      Locals:         0       7       0       0       0
  8113 ;;      Temps:          0       4       0       0       0
  8114 ;;      Totals:         0      15       0       0       0
  8115 ;;Total ram usage:       15 bytes
  8116 ;; Hardware stack levels used:    1
  8117 ;; Hardware stack levels required when called:    4
  8118 ;; This function calls:
  8119 ;;		_USARTWriteString
  8120 ;;		_dbg_print_MATRIX4x4
  8121 ;;		_sprintf
  8122 ;; This function is called by:
  8123 ;;		_lg_find_best_solution
  8124 ;; This function uses a non-reentrant model
  8125 ;;
  8126                           
  8127                           
  8128                           ;psect for function _dbg_print_cur_MATRIX4x4
  8129  164A                     _dbg_print_cur_MATRIX4x4:	
  8130                           
  8131                           ;incstack = 0
  8132                           ; Regs used in _dbg_print_cur_MATRIX4x4: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cs
      +                          tack]
  8133                           ;dbg_print_cur_MATRIX4x4@enable stored from wreg
  8134  164A  1283               	bcf	3,5	;RP0=0, select bank0
  8135  164B  1303               	bcf	3,6	;RP1=0, select bank0
  8136  164C  00E0               	movwf	dbg_print_cur_MATRIX4x4@enable
  8137  164D  0860               	movf	dbg_print_cur_MATRIX4x4@enable,w
  8138  164E  1903               	btfsc	3,2
  8139  164F  0008               	return
  8140                           
  8141                           ;debug.h: 140: {
  8142                           ;debug.h: 141: if(lable != (0))
  8143  1650  0852               	movf	dbg_print_cur_MATRIX4x4@lable,w
  8144  1651  0453               	iorwf	dbg_print_cur_MATRIX4x4@lable+1,w
  8145  1652  1903               	btfsc	3,2
  8146  1653  2EB6               	goto	l4316
  8147                           
  8148                           ;debug.h: 142: {
  8149                           ;debug.h: 143: do { if(1) { int n = sprintf(g_debug, lable); if(n > 64) { USARTWriteStri
      +                          ng("ERROR: g_debug is overflowed\r\n"); do { ((void)0); asm("ljmp $"); }while(0); } USAR
      +                          TWriteString(g_debug); } } while (0);;
  8150  1654  0852               	movf	dbg_print_cur_MATRIX4x4@lable,w
  8151  1655  00A0               	movwf	sprintf@f
  8152  1656  0853               	movf	dbg_print_cur_MATRIX4x4@lable+1,w
  8153  1657  00A1               	movwf	sprintf@f+1
  8154  1658  3090               	movlw	(low (_g_debug| (0+256)))& (0+255)
  8155  1659  120A  158A  267C  160A  118A  	fcall	_sprintf
  8156  165E  1283               	bcf	3,5	;RP0=0, select bank0
  8157  165F  1303               	bcf	3,6	;RP1=0, select bank0
  8158  1660  0821               	movf	?_sprintf+1,w
  8159  1661  00DB               	movwf	dbg_print_cur_MATRIX4x4@n+1
  8160  1662  0820               	movf	?_sprintf,w
  8161  1663  00DA               	movwf	dbg_print_cur_MATRIX4x4@n
  8162  1664  085B               	movf	dbg_print_cur_MATRIX4x4@n+1,w
  8163  1665  3A80               	xorlw	128
  8164  1666  00FF               	movwf	127
  8165  1667  3080               	movlw	128
  8166  1668  027F               	subwf	127,w
  8167  1669  1D03               	skipz
  8168  166A  2E6D               	goto	u4845
  8169  166B  3041               	movlw	65
  8170  166C  025A               	subwf	dbg_print_cur_MATRIX4x4@n,w
  8171  166D                     u4845:	
  8172  166D  1C03               	skipc
  8173  166E  2E7B               	goto	l314
  8174  166F  304C               	movlw	low (STR_1| (0+32768))
  8175  1670  00F1               	movwf	USARTWriteString@str
  8176  1671  3089               	movlw	high (STR_1| (0+32768))
  8177  1672  00F2               	movwf	USARTWriteString@str+1
  8178  1673  160A  158A  2233  160A  118A  	fcall	_USARTWriteString
  8179  1678  160A  118A  2E4A   	ljmp	$	;# 
  8180  167B                     l314:	
  8181  167B  3090               	movlw	(low (_g_debug| (0+256)))& (0+255)
  8182  167C  00F1               	movwf	USARTWriteString@str
  8183  167D  3001               	movlw	1
  8184  167E  00F2               	movwf	USARTWriteString@str+1
  8185  167F  160A  158A  2233  160A  118A  	fcall	_USARTWriteString
  8186                           
  8187                           ;debug.h: 144: do { if(1) { int n = sprintf(g_debug, ":""\r\n"); if(n > 64) { USARTWrite
      +                          String("ERROR: g_debug is overflowed\r\n"); do { ((void)0); asm("ljmp $"); }while(0); } 
      +                          USARTWriteString(g_debug); } } while (0);;
  8188  1684  30E9               	movlw	low (STR_2| (0+32768))
  8189  1685  1283               	bcf	3,5	;RP0=0, select bank0
  8190  1686  1303               	bcf	3,6	;RP1=0, select bank0
  8191  1687  00A0               	movwf	sprintf@f
  8192  1688  308C               	movlw	high (STR_2| (0+32768))
  8193  1689  00A1               	movwf	sprintf@f+1
  8194  168A  3090               	movlw	(low (_g_debug| (0+256)))& (0+255)
  8195  168B  120A  158A  267C  160A  118A  	fcall	_sprintf
  8196  1690  1283               	bcf	3,5	;RP0=0, select bank0
  8197  1691  1303               	bcf	3,6	;RP1=0, select bank0
  8198  1692  0821               	movf	?_sprintf+1,w
  8199  1693  00DD               	movwf	dbg_print_cur_MATRIX4x4@n_384+1
  8200  1694  0820               	movf	?_sprintf,w
  8201  1695  00DC               	movwf	dbg_print_cur_MATRIX4x4@n_384
  8202  1696  085D               	movf	dbg_print_cur_MATRIX4x4@n_384+1,w
  8203  1697  3A80               	xorlw	128
  8204  1698  00FF               	movwf	127
  8205  1699  3080               	movlw	128
  8206  169A  027F               	subwf	127,w
  8207  169B  1D03               	skipz
  8208  169C  2E9F               	goto	u4855
  8209  169D  3041               	movlw	65
  8210  169E  025C               	subwf	dbg_print_cur_MATRIX4x4@n_384,w
  8211  169F                     u4855:	
  8212  169F  1C03               	skipc
  8213  16A0  2EAD               	goto	l320
  8214  16A1  304C               	movlw	low (STR_1| (0+32768))
  8215  16A2  00F1               	movwf	USARTWriteString@str
  8216  16A3  3089               	movlw	high (STR_1| (0+32768))
  8217  16A4  00F2               	movwf	USARTWriteString@str+1
  8218  16A5  160A  158A  2233  160A  118A  	fcall	_USARTWriteString
  8219  16AA  160A  118A  2E4A   	ljmp	$	;# 
  8220  16AD                     l320:	
  8221  16AD  3090               	movlw	(low (_g_debug| (0+256)))& (0+255)
  8222  16AE  00F1               	movwf	USARTWriteString@str
  8223  16AF  3001               	movlw	1
  8224  16B0  00F2               	movwf	USARTWriteString@str+1
  8225  16B1  160A  158A  2233  160A  118A  	fcall	_USARTWriteString
  8226  16B6                     l4316:	
  8227                           
  8228                           ;debug.h: 145: }
  8229                           ;debug.h: 146: MATRIX4x4* matrix = &g_matrix4x4[g_char_info[g_char_info_index].start_ind
      +                          ex + g_char_info_sub_index];
  8230  16B6  1283               	bcf	3,5	;RP0=0, select bank0
  8231  16B7  1303               	bcf	3,6	;RP1=0, select bank0
  8232  16B8  086E               	movf	_g_char_info_index,w
  8233  16B9  00D6               	movwf	??_dbg_print_cur_MATRIX4x4
  8234  16BA  0756               	addwf	??_dbg_print_cur_MATRIX4x4,w
  8235  16BB  3E10               	addlw	(low (_g_char_info| (0+256)))& (0+255)
  8236  16BC  0084               	movwf	4
  8237  16BD  086F               	movf	_g_char_info_sub_index,w
  8238  16BE  1783               	bsf	3,7	;select IRP bank2
  8239  16BF  0700               	addwf	0,w
  8240  16C0  00D7               	movwf	??_dbg_print_cur_MATRIX4x4+1
  8241  16C1  3001               	movlw	1
  8242  16C2                     u4865:	
  8243  16C2  1003               	clrc
  8244  16C3  0DD7               	rlf	??_dbg_print_cur_MATRIX4x4+1,f
  8245  16C4  3EFF               	addlw	-1
  8246  16C5  1D03               	skipz
  8247  16C6  2EC2               	goto	u4865
  8248  16C7  1003               	clrc
  8249  16C8  0D57               	rlf	??_dbg_print_cur_MATRIX4x4+1,w
  8250  16C9  3E24               	addlw	low (_g_matrix4x4| (0+32768))
  8251  16CA  00D8               	movwf	??_dbg_print_cur_MATRIX4x4+2
  8252  16CB  3088               	movlw	high (_g_matrix4x4| (0+32768))
  8253  16CC  1803               	skipnc
  8254  16CD  3E01               	addlw	1
  8255  16CE  00D9               	movwf	??_dbg_print_cur_MATRIX4x4+3
  8256  16CF  0858               	movf	??_dbg_print_cur_MATRIX4x4+2,w
  8257  16D0  00DE               	movwf	dbg_print_cur_MATRIX4x4@matrix
  8258  16D1  0859               	movf	??_dbg_print_cur_MATRIX4x4+3,w
  8259  16D2  00DF               	movwf	dbg_print_cur_MATRIX4x4@matrix+1
  8260                           
  8261                           ;debug.h: 147: dbg_print_MATRIX4x4(1, (0), x, y, matrix);
  8262  16D3  3000               	movlw	0
  8263  16D4  00B5               	movwf	dbg_print_MATRIX4x4@lable
  8264  16D5  00B6               	movwf	dbg_print_MATRIX4x4@lable+1
  8265  16D6  0854               	movf	dbg_print_cur_MATRIX4x4@x,w
  8266  16D7  00D6               	movwf	??_dbg_print_cur_MATRIX4x4
  8267  16D8  0856               	movf	??_dbg_print_cur_MATRIX4x4,w
  8268  16D9  00B7               	movwf	dbg_print_MATRIX4x4@x
  8269  16DA  0855               	movf	dbg_print_cur_MATRIX4x4@y,w
  8270  16DB  00D7               	movwf	??_dbg_print_cur_MATRIX4x4+1
  8271  16DC  0857               	movf	??_dbg_print_cur_MATRIX4x4+1,w
  8272  16DD  00B8               	movwf	dbg_print_MATRIX4x4@y
  8273  16DE  085E               	movf	dbg_print_cur_MATRIX4x4@matrix,w
  8274  16DF  00B9               	movwf	dbg_print_MATRIX4x4@matrix
  8275  16E0  085F               	movf	dbg_print_cur_MATRIX4x4@matrix+1,w
  8276  16E1  00BA               	movwf	dbg_print_MATRIX4x4@matrix+1
  8277  16E2  3001               	movlw	1
  8278  16E3  120A  118A  2294   	fcall	_dbg_print_MATRIX4x4
  8279  16E6  0008               	return
  8280  16E7                     __end_of_dbg_print_cur_MATRIX4x4:	
  8281                           
  8282                           	psect	text27
  8283  0294                     __ptext27:	
  8284 ;; *************** function _dbg_print_MATRIX4x4 *****************
  8285 ;; Defined at:
  8286 ;;		line 11 in file "../debug.h"
  8287 ;; Parameters:    Size  Location     Type
  8288 ;;  enable          1    wreg     unsigned char 
  8289 ;;  lable           2   21[BANK0 ] PTR const unsigned char 
  8290 ;;		 -> STR_128(15), STR_97(24), ROM(8192), 
  8291 ;;  x               1   23[BANK0 ] char 
  8292 ;;  y               1   24[BANK0 ] char 
  8293 ;;  matrix          2   25[BANK0 ] PTR const struct .
  8294 ;;		 -> NULL(0), g_matrix4x4(96), 
  8295 ;; Auto vars:     Size  Location     Type
  8296 ;;  enable          1   47[BANK0 ] unsigned char 
  8297 ;;  n               2   41[BANK0 ] int 
  8298 ;;  n               2   39[BANK0 ] int 
  8299 ;;  n               2   43[BANK0 ] int 
  8300 ;;  col             1   49[BANK0 ] char 
  8301 ;;  n               2   35[BANK0 ] int 
  8302 ;;  n               2   33[BANK0 ] int 
  8303 ;;  n               2   45[BANK0 ] int 
  8304 ;;  n               2   37[BANK0 ] int 
  8305 ;;  row             1   48[BANK0 ] char 
  8306 ;; Return value:  Size  Location     Type
  8307 ;;                  1    wreg      void 
  8308 ;; Registers used:
  8309 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  8310 ;; Tracked objects:
  8311 ;;		On entry : 0/0
  8312 ;;		On exit  : 0/0
  8313 ;;		Unchanged: 0/0
  8314 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8315 ;;      Params:         0       6       0       0       0
  8316 ;;      Locals:         0      17       0       0       0
  8317 ;;      Temps:          0       6       0       0       0
  8318 ;;      Totals:         0      29       0       0       0
  8319 ;;Total ram usage:       29 bytes
  8320 ;; Hardware stack levels used:    1
  8321 ;; Hardware stack levels required when called:    3
  8322 ;; This function calls:
  8323 ;;		_USARTWriteString
  8324 ;;		_get_matrix_bit
  8325 ;;		_sprintf
  8326 ;; This function is called by:
  8327 ;;		_dbg_print_cur_MATRIX4x4
  8328 ;;		_lg_merge
  8329 ;;		_lg_find_best_solution
  8330 ;;		_dbg_print_all_MATRIX4x4
  8331 ;; This function uses a non-reentrant model
  8332 ;;
  8333                           
  8334                           
  8335                           ;psect for function _dbg_print_MATRIX4x4
  8336  0294                     _dbg_print_MATRIX4x4:	
  8337                           
  8338                           ;incstack = 0
  8339                           ; Regs used in _dbg_print_MATRIX4x4: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack
      +                          ]
  8340                           ;dbg_print_MATRIX4x4@enable stored from wreg
  8341  0294  1283               	bcf	3,5	;RP0=0, select bank0
  8342  0295  1303               	bcf	3,6	;RP1=0, select bank0
  8343  0296  00CF               	movwf	dbg_print_MATRIX4x4@enable
  8344  0297  084F               	movf	dbg_print_MATRIX4x4@enable,w
  8345  0298  1903               	btfsc	3,2
  8346  0299  0008               	return
  8347                           
  8348                           ;debug.h: 14: {
  8349                           ;debug.h: 15: if(lable != (0))
  8350  029A  0835               	movf	dbg_print_MATRIX4x4@lable,w
  8351  029B  0436               	iorwf	dbg_print_MATRIX4x4@lable+1,w
  8352  029C  1903               	btfsc	3,2
  8353  029D  2B00               	goto	l148
  8354                           
  8355                           ;debug.h: 16: {
  8356                           ;debug.h: 17: do { if(1) { int n = sprintf(g_debug, lable); if(n > 64) { USARTWriteStrin
      +                          g("ERROR: g_debug is overflowed\r\n"); do { ((void)0); asm("ljmp $"); }while(0); } USART
      +                          WriteString(g_debug); } } while (0);;
  8357  029E  0835               	movf	dbg_print_MATRIX4x4@lable,w
  8358  029F  00A0               	movwf	sprintf@f
  8359  02A0  0836               	movf	dbg_print_MATRIX4x4@lable+1,w
  8360  02A1  00A1               	movwf	sprintf@f+1
  8361  02A2  3090               	movlw	(low (_g_debug| (0+256)))& (0+255)
  8362  02A3  120A  158A  267C  120A  118A  	fcall	_sprintf
  8363  02A8  1283               	bcf	3,5	;RP0=0, select bank0
  8364  02A9  1303               	bcf	3,6	;RP1=0, select bank0
  8365  02AA  0821               	movf	?_sprintf+1,w
  8366  02AB  00C2               	movwf	dbg_print_MATRIX4x4@n+1
  8367  02AC  0820               	movf	?_sprintf,w
  8368  02AD  00C1               	movwf	dbg_print_MATRIX4x4@n
  8369  02AE  0842               	movf	dbg_print_MATRIX4x4@n+1,w
  8370  02AF  3A80               	xorlw	128
  8371  02B0  00FF               	movwf	127
  8372  02B1  3080               	movlw	128
  8373  02B2  027F               	subwf	127,w
  8374  02B3  1D03               	skipz
  8375  02B4  2AB7               	goto	u4365
  8376  02B5  3041               	movlw	65
  8377  02B6  0241               	subwf	dbg_print_MATRIX4x4@n,w
  8378  02B7                     u4365:	
  8379  02B7  1C03               	skipc
  8380  02B8  2AC5               	goto	l138
  8381  02B9  304C               	movlw	low (STR_1| (0+32768))
  8382  02BA  00F1               	movwf	USARTWriteString@str
  8383  02BB  3089               	movlw	high (STR_1| (0+32768))
  8384  02BC  00F2               	movwf	USARTWriteString@str+1
  8385  02BD  160A  158A  2233  120A  118A  	fcall	_USARTWriteString
  8386  02C2  120A  118A  2A94   	ljmp	$	;# 
  8387  02C5                     l138:	
  8388  02C5  3090               	movlw	(low (_g_debug| (0+256)))& (0+255)
  8389  02C6  00F1               	movwf	USARTWriteString@str
  8390  02C7  3001               	movlw	1
  8391  02C8  00F2               	movwf	USARTWriteString@str+1
  8392  02C9  160A  158A  2233  120A  118A  	fcall	_USARTWriteString
  8393                           
  8394                           ;debug.h: 18: do { if(1) { int n = sprintf(g_debug, ":""\r\n"); if(n > 64) { USARTWriteS
      +                          tring("ERROR: g_debug is overflowed\r\n"); do { ((void)0); asm("ljmp $"); }while(0); } U
      +                          SARTWriteString(g_debug); } } while (0);;
  8395  02CE  30E9               	movlw	low (STR_2| (0+32768))
  8396  02CF  1283               	bcf	3,5	;RP0=0, select bank0
  8397  02D0  1303               	bcf	3,6	;RP1=0, select bank0
  8398  02D1  00A0               	movwf	sprintf@f
  8399  02D2  308C               	movlw	high (STR_2| (0+32768))
  8400  02D3  00A1               	movwf	sprintf@f+1
  8401  02D4  3090               	movlw	(low (_g_debug| (0+256)))& (0+255)
  8402  02D5  120A  158A  267C  120A  118A  	fcall	_sprintf
  8403  02DA  1283               	bcf	3,5	;RP0=0, select bank0
  8404  02DB  1303               	bcf	3,6	;RP1=0, select bank0
  8405  02DC  0821               	movf	?_sprintf+1,w
  8406  02DD  00C4               	movwf	dbg_print_MATRIX4x4@n_293+1
  8407  02DE  0820               	movf	?_sprintf,w
  8408  02DF  00C3               	movwf	dbg_print_MATRIX4x4@n_293
  8409  02E0  0844               	movf	dbg_print_MATRIX4x4@n_293+1,w
  8410  02E1  3A80               	xorlw	128
  8411  02E2  00FF               	movwf	127
  8412  02E3  3080               	movlw	128
  8413  02E4  027F               	subwf	127,w
  8414  02E5  1D03               	skipz
  8415  02E6  2AE9               	goto	u4375
  8416  02E7  3041               	movlw	65
  8417  02E8  0243               	subwf	dbg_print_MATRIX4x4@n_293,w
  8418  02E9                     u4375:	
  8419  02E9  1C03               	skipc
  8420  02EA  2AF7               	goto	l144
  8421  02EB  304C               	movlw	low (STR_1| (0+32768))
  8422  02EC  00F1               	movwf	USARTWriteString@str
  8423  02ED  3089               	movlw	high (STR_1| (0+32768))
  8424  02EE  00F2               	movwf	USARTWriteString@str+1
  8425  02EF  160A  158A  2233  120A  118A  	fcall	_USARTWriteString
  8426  02F4  120A  118A  2A94   	ljmp	$	;# 
  8427  02F7                     l144:	
  8428  02F7  3090               	movlw	(low (_g_debug| (0+256)))& (0+255)
  8429  02F8  00F1               	movwf	USARTWriteString@str
  8430  02F9  3001               	movlw	1
  8431  02FA  00F2               	movwf	USARTWriteString@str+1
  8432  02FB  160A  158A  2233  120A  118A  	fcall	_USARTWriteString
  8433  0300                     l148:	
  8434                           ;debug.h: 19: }
  8435                           ;debug.h: 20: do { if(1) { int n = sprintf(g_debug, "<<<<<<<<<<<<<<<<<<<<MATRIX4x4""\r\n
      +                          "); if(n > 64) { USARTWriteString("ERROR: g_debug is overflowed\r\n"); do { ((void)0); a
      +                          sm("ljmp $"); }while(0); } USARTWriteString(g_debug); } } while (0);;
  8436                           
  8437  0300  302C               	movlw	low (STR_4| (0+32768))
  8438  0301  1283               	bcf	3,5	;RP0=0, select bank0
  8439  0302  1303               	bcf	3,6	;RP1=0, select bank0
  8440  0303  00A0               	movwf	sprintf@f
  8441  0304  3089               	movlw	high (STR_4| (0+32768))
  8442  0305  00A1               	movwf	sprintf@f+1
  8443  0306  3090               	movlw	(low (_g_debug| (0+256)))& (0+255)
  8444  0307  120A  158A  267C  120A  118A  	fcall	_sprintf
  8445  030C  1283               	bcf	3,5	;RP0=0, select bank0
  8446  030D  1303               	bcf	3,6	;RP1=0, select bank0
  8447  030E  0821               	movf	?_sprintf+1,w
  8448  030F  00C6               	movwf	dbg_print_MATRIX4x4@n_296+1
  8449  0310  0820               	movf	?_sprintf,w
  8450  0311  00C5               	movwf	dbg_print_MATRIX4x4@n_296
  8451  0312  0846               	movf	dbg_print_MATRIX4x4@n_296+1,w
  8452  0313  3A80               	xorlw	128
  8453  0314  00FF               	movwf	127
  8454  0315  3080               	movlw	128
  8455  0316  027F               	subwf	127,w
  8456  0317  1D03               	skipz
  8457  0318  2B1B               	goto	u4385
  8458  0319  3041               	movlw	65
  8459  031A  0245               	subwf	dbg_print_MATRIX4x4@n_296,w
  8460  031B                     u4385:	
  8461  031B  1C03               	skipc
  8462  031C  2B29               	goto	l150
  8463  031D  304C               	movlw	low (STR_1| (0+32768))
  8464  031E  00F1               	movwf	USARTWriteString@str
  8465  031F  3089               	movlw	high (STR_1| (0+32768))
  8466  0320  00F2               	movwf	USARTWriteString@str+1
  8467  0321  160A  158A  2233  120A  118A  	fcall	_USARTWriteString
  8468  0326  120A  118A  2A94   	ljmp	$	;# 
  8469  0329                     l150:	
  8470  0329  3090               	movlw	(low (_g_debug| (0+256)))& (0+255)
  8471  032A  00F1               	movwf	USARTWriteString@str
  8472  032B  3001               	movlw	1
  8473  032C  00F2               	movwf	USARTWriteString@str+1
  8474  032D  160A  158A  2233  120A  118A  	fcall	_USARTWriteString
  8475                           
  8476                           ;debug.h: 21: for(int8_t row = 0; row < 16; row++)
  8477  0332  1283               	bcf	3,5	;RP0=0, select bank0
  8478  0333  1303               	bcf	3,6	;RP1=0, select bank0
  8479  0334  01D0               	clrf	dbg_print_MATRIX4x4@row
  8480  0335  0850               	movf	dbg_print_MATRIX4x4@row,w
  8481  0336  3A80               	xorlw	128
  8482  0337  3E70               	addlw	-144
  8483  0338  1803               	btfsc	3,0
  8484  0339  2C74               	goto	l4136
  8485  033A                     l4094:	
  8486                           
  8487                           ;debug.h: 22: {
  8488                           ;debug.h: 23: for(int8_t col = 0; col < 8; col++)
  8489  033A  01D1               	clrf	dbg_print_MATRIX4x4@col
  8490  033B  0851               	movf	dbg_print_MATRIX4x4@col,w
  8491  033C  3A80               	xorlw	128
  8492  033D  3E78               	addlw	-136
  8493  033E  1803               	btfsc	3,0
  8494  033F  2C39               	goto	l4126
  8495  0340                     l4100:	
  8496                           
  8497                           ;debug.h: 24: {
  8498                           ;debug.h: 25: if((row - y >= 0) && (row - y < 4)
  8499                           ;debug.h: 26: && (col - x >= 0) && (col - x < 4)
  8500                           ;debug.h: 27: && (get_matrix_bit(matrix->row, row - y, col - x) == 1))
  8501  0340  0838               	movf	dbg_print_MATRIX4x4@y,w
  8502  0341  00BB               	movwf	??_dbg_print_MATRIX4x4
  8503  0342  01BC               	clrf	??_dbg_print_MATRIX4x4+1
  8504  0343  1BBB               	btfsc	??_dbg_print_MATRIX4x4,7
  8505  0344  03BC               	decf	??_dbg_print_MATRIX4x4+1,f
  8506  0345  09BB               	comf	??_dbg_print_MATRIX4x4,f
  8507  0346  09BC               	comf	??_dbg_print_MATRIX4x4+1,f
  8508  0347  0ABB               	incf	??_dbg_print_MATRIX4x4,f
  8509  0348  1903               	skipnz
  8510  0349  0ABC               	incf	??_dbg_print_MATRIX4x4+1,f
  8511  034A  0850               	movf	dbg_print_MATRIX4x4@row,w
  8512  034B  00BD               	movwf	??_dbg_print_MATRIX4x4+2
  8513  034C  01BE               	clrf	??_dbg_print_MATRIX4x4+3
  8514  034D  1BBD               	btfsc	??_dbg_print_MATRIX4x4+2,7
  8515  034E  03BE               	decf	??_dbg_print_MATRIX4x4+3,f
  8516  034F  083B               	movf	??_dbg_print_MATRIX4x4,w
  8517  0350  073D               	addwf	??_dbg_print_MATRIX4x4+2,w
  8518  0351  00BF               	movwf	??_dbg_print_MATRIX4x4+4
  8519  0352  083C               	movf	??_dbg_print_MATRIX4x4+1,w
  8520  0353  1803               	skipnc
  8521  0354  0A3C               	incf	??_dbg_print_MATRIX4x4+1,w
  8522  0355  073E               	addwf	??_dbg_print_MATRIX4x4+3,w
  8523  0356  00C0               	movwf	??_dbg_print_MATRIX4x4+5
  8524  0357  1BC0               	btfsc	??_dbg_print_MATRIX4x4+5,7
  8525  0358  2BFC               	goto	l4116
  8526  0359  0838               	movf	dbg_print_MATRIX4x4@y,w
  8527  035A  00BB               	movwf	??_dbg_print_MATRIX4x4
  8528  035B  01BC               	clrf	??_dbg_print_MATRIX4x4+1
  8529  035C  1BBB               	btfsc	??_dbg_print_MATRIX4x4,7
  8530  035D  03BC               	decf	??_dbg_print_MATRIX4x4+1,f
  8531  035E  09BB               	comf	??_dbg_print_MATRIX4x4,f
  8532  035F  09BC               	comf	??_dbg_print_MATRIX4x4+1,f
  8533  0360  0ABB               	incf	??_dbg_print_MATRIX4x4,f
  8534  0361  1903               	skipnz
  8535  0362  0ABC               	incf	??_dbg_print_MATRIX4x4+1,f
  8536  0363  0850               	movf	dbg_print_MATRIX4x4@row,w
  8537  0364  00BD               	movwf	??_dbg_print_MATRIX4x4+2
  8538  0365  01BE               	clrf	??_dbg_print_MATRIX4x4+3
  8539  0366  1BBD               	btfsc	??_dbg_print_MATRIX4x4+2,7
  8540  0367  03BE               	decf	??_dbg_print_MATRIX4x4+3,f
  8541  0368  083B               	movf	??_dbg_print_MATRIX4x4,w
  8542  0369  073D               	addwf	??_dbg_print_MATRIX4x4+2,w
  8543  036A  00BF               	movwf	??_dbg_print_MATRIX4x4+4
  8544  036B  083C               	movf	??_dbg_print_MATRIX4x4+1,w
  8545  036C  1803               	skipnc
  8546  036D  0A3C               	incf	??_dbg_print_MATRIX4x4+1,w
  8547  036E  073E               	addwf	??_dbg_print_MATRIX4x4+3,w
  8548  036F  00C0               	movwf	??_dbg_print_MATRIX4x4+5
  8549  0370  0840               	movf	??_dbg_print_MATRIX4x4+5,w
  8550  0371  3A80               	xorlw	128
  8551  0372  00FF               	movwf	127
  8552  0373  3080               	movlw	128
  8553  0374  027F               	subwf	127,w
  8554  0375  1D03               	skipz
  8555  0376  2B79               	goto	u4425
  8556  0377  3004               	movlw	4
  8557  0378  023F               	subwf	??_dbg_print_MATRIX4x4+4,w
  8558  0379                     u4425:	
  8559  0379  1803               	skipnc
  8560  037A  2BFC               	goto	l4116
  8561  037B  1283               	bcf	3,5	;RP0=0, select bank0
  8562  037C  1303               	bcf	3,6	;RP1=0, select bank0
  8563  037D  0837               	movf	dbg_print_MATRIX4x4@x,w
  8564  037E  00BB               	movwf	??_dbg_print_MATRIX4x4
  8565  037F  01BC               	clrf	??_dbg_print_MATRIX4x4+1
  8566  0380  1BBB               	btfsc	??_dbg_print_MATRIX4x4,7
  8567  0381  03BC               	decf	??_dbg_print_MATRIX4x4+1,f
  8568  0382  09BB               	comf	??_dbg_print_MATRIX4x4,f
  8569  0383  09BC               	comf	??_dbg_print_MATRIX4x4+1,f
  8570  0384  0ABB               	incf	??_dbg_print_MATRIX4x4,f
  8571  0385  1903               	skipnz
  8572  0386  0ABC               	incf	??_dbg_print_MATRIX4x4+1,f
  8573  0387  0851               	movf	dbg_print_MATRIX4x4@col,w
  8574  0388  00BD               	movwf	??_dbg_print_MATRIX4x4+2
  8575  0389  01BE               	clrf	??_dbg_print_MATRIX4x4+3
  8576  038A  1BBD               	btfsc	??_dbg_print_MATRIX4x4+2,7
  8577  038B  03BE               	decf	??_dbg_print_MATRIX4x4+3,f
  8578  038C  083B               	movf	??_dbg_print_MATRIX4x4,w
  8579  038D  073D               	addwf	??_dbg_print_MATRIX4x4+2,w
  8580  038E  00BF               	movwf	??_dbg_print_MATRIX4x4+4
  8581  038F  083C               	movf	??_dbg_print_MATRIX4x4+1,w
  8582  0390  1803               	skipnc
  8583  0391  0A3C               	incf	??_dbg_print_MATRIX4x4+1,w
  8584  0392  073E               	addwf	??_dbg_print_MATRIX4x4+3,w
  8585  0393  00C0               	movwf	??_dbg_print_MATRIX4x4+5
  8586  0394  1BC0               	btfsc	??_dbg_print_MATRIX4x4+5,7
  8587  0395  2BFC               	goto	l4116
  8588  0396  0837               	movf	dbg_print_MATRIX4x4@x,w
  8589  0397  00BB               	movwf	??_dbg_print_MATRIX4x4
  8590  0398  01BC               	clrf	??_dbg_print_MATRIX4x4+1
  8591  0399  1BBB               	btfsc	??_dbg_print_MATRIX4x4,7
  8592  039A  03BC               	decf	??_dbg_print_MATRIX4x4+1,f
  8593  039B  09BB               	comf	??_dbg_print_MATRIX4x4,f
  8594  039C  09BC               	comf	??_dbg_print_MATRIX4x4+1,f
  8595  039D  0ABB               	incf	??_dbg_print_MATRIX4x4,f
  8596  039E  1903               	skipnz
  8597  039F  0ABC               	incf	??_dbg_print_MATRIX4x4+1,f
  8598  03A0  0851               	movf	dbg_print_MATRIX4x4@col,w
  8599  03A1  00BD               	movwf	??_dbg_print_MATRIX4x4+2
  8600  03A2  01BE               	clrf	??_dbg_print_MATRIX4x4+3
  8601  03A3  1BBD               	btfsc	??_dbg_print_MATRIX4x4+2,7
  8602  03A4  03BE               	decf	??_dbg_print_MATRIX4x4+3,f
  8603  03A5  083B               	movf	??_dbg_print_MATRIX4x4,w
  8604  03A6  073D               	addwf	??_dbg_print_MATRIX4x4+2,w
  8605  03A7  00BF               	movwf	??_dbg_print_MATRIX4x4+4
  8606  03A8  083C               	movf	??_dbg_print_MATRIX4x4+1,w
  8607  03A9  1803               	skipnc
  8608  03AA  0A3C               	incf	??_dbg_print_MATRIX4x4+1,w
  8609  03AB  073E               	addwf	??_dbg_print_MATRIX4x4+3,w
  8610  03AC  00C0               	movwf	??_dbg_print_MATRIX4x4+5
  8611  03AD  0840               	movf	??_dbg_print_MATRIX4x4+5,w
  8612  03AE  3A80               	xorlw	128
  8613  03AF  00FF               	movwf	127
  8614  03B0  3080               	movlw	128
  8615  03B1  027F               	subwf	127,w
  8616  03B2  1D03               	skipz
  8617  03B3  2BB6               	goto	u4445
  8618  03B4  3004               	movlw	4
  8619  03B5  023F               	subwf	??_dbg_print_MATRIX4x4+4,w
  8620  03B6                     u4445:	
  8621  03B6  1803               	skipnc
  8622  03B7  2BFC               	goto	l4116
  8623  03B8  1283               	bcf	3,5	;RP0=0, select bank0
  8624  03B9  1303               	bcf	3,6	;RP1=0, select bank0
  8625  03BA  0839               	movf	dbg_print_MATRIX4x4@matrix,w
  8626  03BB  00F7               	movwf	get_matrix_bit@byte
  8627  03BC  083A               	movf	dbg_print_MATRIX4x4@matrix+1,w
  8628  03BD  00F8               	movwf	get_matrix_bit@byte+1
  8629  03BE  0338               	decf	dbg_print_MATRIX4x4@y,w
  8630  03BF  3AFF               	xorlw	255
  8631  03C0  0750               	addwf	dbg_print_MATRIX4x4@row,w
  8632  03C1  00BB               	movwf	??_dbg_print_MATRIX4x4
  8633  03C2  083B               	movf	??_dbg_print_MATRIX4x4,w
  8634  03C3  00F9               	movwf	get_matrix_bit@row
  8635  03C4  0337               	decf	dbg_print_MATRIX4x4@x,w
  8636  03C5  3AFF               	xorlw	255
  8637  03C6  0751               	addwf	dbg_print_MATRIX4x4@col,w
  8638  03C7  00BC               	movwf	??_dbg_print_MATRIX4x4+1
  8639  03C8  083C               	movf	??_dbg_print_MATRIX4x4+1,w
  8640  03C9  00FA               	movwf	get_matrix_bit@col
  8641  03CA  160A  158A  2198  120A  118A  	fcall	_get_matrix_bit
  8642  03CF  3A01               	xorlw	1
  8643  03D0  1D03               	skipz
  8644  03D1  2BFC               	goto	l4116
  8645                           
  8646                           ;debug.h: 28: {
  8647                           ;debug.h: 29: do { if(1) { int n = sprintf(g_debug, "*"); if(n > 64) { USARTWriteString(
      +                          "ERROR: g_debug is overflowed\r\n"); do { ((void)0); asm("ljmp $"); }while(0); } USARTWr
      +                          iteString(g_debug); } } while (0);;
  8648  03D2  30ED               	movlw	low (STR_6| (0+32768))
  8649  03D3  1283               	bcf	3,5	;RP0=0, select bank0
  8650  03D4  1303               	bcf	3,6	;RP1=0, select bank0
  8651  03D5  00A0               	movwf	sprintf@f
  8652  03D6  308C               	movlw	high (STR_6| (0+32768))
  8653  03D7  00A1               	movwf	sprintf@f+1
  8654  03D8  3090               	movlw	(low (_g_debug| (0+256)))& (0+255)
  8655  03D9  120A  158A  267C  120A  118A  	fcall	_sprintf
  8656  03DE  1283               	bcf	3,5	;RP0=0, select bank0
  8657  03DF  1303               	bcf	3,6	;RP1=0, select bank0
  8658  03E0  0821               	movf	?_sprintf+1,w
  8659  03E1  00C8               	movwf	dbg_print_MATRIX4x4@n_303+1
  8660  03E2  0820               	movf	?_sprintf,w
  8661  03E3  00C7               	movwf	dbg_print_MATRIX4x4@n_303
  8662  03E4  0848               	movf	dbg_print_MATRIX4x4@n_303+1,w
  8663  03E5  3A80               	xorlw	128
  8664  03E6  00FF               	movwf	127
  8665  03E7  3080               	movlw	128
  8666  03E8  027F               	subwf	127,w
  8667  03E9  1D03               	skipz
  8668  03EA  2BED               	goto	u4465
  8669  03EB  3041               	movlw	65
  8670  03EC  0247               	subwf	dbg_print_MATRIX4x4@n_303,w
  8671  03ED                     u4465:	
  8672  03ED  1C03               	skipc
  8673  03EE  2C25               	goto	l168
  8674  03EF  304C               	movlw	low (STR_1| (0+32768))
  8675  03F0  00F1               	movwf	USARTWriteString@str
  8676  03F1  3089               	movlw	high (STR_1| (0+32768))
  8677  03F2  00F2               	movwf	USARTWriteString@str+1
  8678  03F3  160A  158A  2233  120A  118A  	fcall	_USARTWriteString
  8679  03F8  120A  118A  2A94   	ljmp	$	;# 
  8680  03FB  2C25               	goto	l168
  8681  03FC                     l4116:	
  8682                           ;debug.h: 31: else
  8683                           ;debug.h: 32: {
  8684                           ;debug.h: 33: do { if(1) { int n = sprintf(g_debug, "_"); if(n > 64) { USARTWriteString(
      +                          "ERROR: g_debug is overflowed\r\n"); do { ((void)0); asm("ljmp $"); }while(0); } USARTWr
      +                          iteString(g_debug); } } while (0);;
  8685                           
  8686                           ;debug.h: 30: }
  8687                           
  8688  03FC  30EF               	movlw	low (STR_8| (0+32768))
  8689  03FD  1283               	bcf	3,5	;RP0=0, select bank0
  8690  03FE  1303               	bcf	3,6	;RP1=0, select bank0
  8691  03FF  00A0               	movwf	sprintf@f
  8692  0400  308C               	movlw	high (STR_8| (0+32768))
  8693  0401  00A1               	movwf	sprintf@f+1
  8694  0402  3090               	movlw	(low (_g_debug| (0+256)))& (0+255)
  8695  0403  120A  158A  267C  120A  118A  	fcall	_sprintf
  8696  0408  1283               	bcf	3,5	;RP0=0, select bank0
  8697  0409  1303               	bcf	3,6	;RP1=0, select bank0
  8698  040A  0821               	movf	?_sprintf+1,w
  8699  040B  00CA               	movwf	dbg_print_MATRIX4x4@n_306+1
  8700  040C  0820               	movf	?_sprintf,w
  8701  040D  00C9               	movwf	dbg_print_MATRIX4x4@n_306
  8702  040E  084A               	movf	dbg_print_MATRIX4x4@n_306+1,w
  8703  040F  3A80               	xorlw	128
  8704  0410  00FF               	movwf	127
  8705  0411  3080               	movlw	128
  8706  0412  027F               	subwf	127,w
  8707  0413  1D03               	skipz
  8708  0414  2C17               	goto	u4475
  8709  0415  3041               	movlw	65
  8710  0416  0249               	subwf	dbg_print_MATRIX4x4@n_306,w
  8711  0417                     u4475:	
  8712  0417  1C03               	skipc
  8713  0418  2C25               	goto	l168
  8714  0419  304C               	movlw	low (STR_1| (0+32768))
  8715  041A  00F1               	movwf	USARTWriteString@str
  8716  041B  3089               	movlw	high (STR_1| (0+32768))
  8717  041C  00F2               	movwf	USARTWriteString@str+1
  8718  041D  160A  158A  2233  120A  118A  	fcall	_USARTWriteString
  8719  0422  120A  118A  2A94   	ljmp	$	;# 
  8720  0425                     l168:	
  8721  0425  3090               	movlw	(low (_g_debug| (0+256)))& (0+255)
  8722  0426  00F1               	movwf	USARTWriteString@str
  8723  0427  3001               	movlw	1
  8724  0428  00F2               	movwf	USARTWriteString@str+1
  8725  0429  160A  158A  2233  120A  118A  	fcall	_USARTWriteString
  8726  042E  3001               	movlw	1
  8727  042F  1283               	bcf	3,5	;RP0=0, select bank0
  8728  0430  1303               	bcf	3,6	;RP1=0, select bank0
  8729  0431  00BB               	movwf	??_dbg_print_MATRIX4x4
  8730  0432  083B               	movf	??_dbg_print_MATRIX4x4,w
  8731  0433  07D1               	addwf	dbg_print_MATRIX4x4@col,f
  8732  0434  0851               	movf	dbg_print_MATRIX4x4@col,w
  8733  0435  3A80               	xorlw	128
  8734  0436  3E78               	addlw	-136
  8735  0437  1C03               	skipc
  8736  0438  2B40               	goto	l4100
  8737  0439                     l4126:	
  8738                           ;debug.h: 34: }
  8739                           ;debug.h: 35: }
  8740                           ;debug.h: 36: do { if(1) { int n = sprintf(g_debug, """\r\n"); if(n > 64) { USARTWriteSt
      +                          ring("ERROR: g_debug is overflowed\r\n"); do { ((void)0); asm("ljmp $"); }while(0); } US
      +                          ARTWriteString(g_debug); } } while (0);;
  8741                           
  8742  0439  300E               	movlw	low ((STR_142+12)| (0+32768))
  8743  043A  00A0               	movwf	sprintf@f
  8744  043B  308C               	movlw	high ((STR_142+12)| (0+32768))
  8745  043C  00A1               	movwf	sprintf@f+1
  8746  043D  3090               	movlw	(low (_g_debug| (0+256)))& (0+255)
  8747  043E  120A  158A  267C  120A  118A  	fcall	_sprintf
  8748  0443  1283               	bcf	3,5	;RP0=0, select bank0
  8749  0444  1303               	bcf	3,6	;RP1=0, select bank0
  8750  0445  0821               	movf	?_sprintf+1,w
  8751  0446  00CC               	movwf	dbg_print_MATRIX4x4@n_309+1
  8752  0447  0820               	movf	?_sprintf,w
  8753  0448  00CB               	movwf	dbg_print_MATRIX4x4@n_309
  8754  0449  084C               	movf	dbg_print_MATRIX4x4@n_309+1,w
  8755  044A  3A80               	xorlw	128
  8756  044B  00FF               	movwf	127
  8757  044C  3080               	movlw	128
  8758  044D  027F               	subwf	127,w
  8759  044E  1D03               	skipz
  8760  044F  2C52               	goto	u4495
  8761  0450  3041               	movlw	65
  8762  0451  024B               	subwf	dbg_print_MATRIX4x4@n_309,w
  8763  0452                     u4495:	
  8764  0452  1C03               	skipc
  8765  0453  2C60               	goto	l174
  8766  0454  304C               	movlw	low (STR_1| (0+32768))
  8767  0455  00F1               	movwf	USARTWriteString@str
  8768  0456  3089               	movlw	high (STR_1| (0+32768))
  8769  0457  00F2               	movwf	USARTWriteString@str+1
  8770  0458  160A  158A  2233  120A  118A  	fcall	_USARTWriteString
  8771  045D  120A  118A  2A94   	ljmp	$	;# 
  8772  0460                     l174:	
  8773  0460  3090               	movlw	(low (_g_debug| (0+256)))& (0+255)
  8774  0461  00F1               	movwf	USARTWriteString@str
  8775  0462  3001               	movlw	1
  8776  0463  00F2               	movwf	USARTWriteString@str+1
  8777  0464  160A  158A  2233  120A  118A  	fcall	_USARTWriteString
  8778  0469  3001               	movlw	1
  8779  046A  1283               	bcf	3,5	;RP0=0, select bank0
  8780  046B  1303               	bcf	3,6	;RP1=0, select bank0
  8781  046C  00BB               	movwf	??_dbg_print_MATRIX4x4
  8782  046D  083B               	movf	??_dbg_print_MATRIX4x4,w
  8783  046E  07D0               	addwf	dbg_print_MATRIX4x4@row,f
  8784  046F  0850               	movf	dbg_print_MATRIX4x4@row,w
  8785  0470  3A80               	xorlw	128
  8786  0471  3E70               	addlw	-144
  8787  0472  1C03               	skipc
  8788  0473  2B3A               	goto	l4094
  8789  0474                     l4136:	
  8790                           ;debug.h: 37: }
  8791                           ;debug.h: 38: do { if(1) { int n = sprintf(g_debug, ">>>>>>>>>>>>>>>>>>>>""\r\n"); if(n 
      +                          > 64) { USARTWriteString("ERROR: g_debug is overflowed\r\n"); do { ((void)0); asm("ljmp 
      +                          $"); }while(0); } USARTWriteString(g_debug); } } while (0);;
  8792                           
  8793  0474  3009               	movlw	low (STR_12| (0+32768))
  8794  0475  00A0               	movwf	sprintf@f
  8795  0476  308B               	movlw	high (STR_12| (0+32768))
  8796  0477  00A1               	movwf	sprintf@f+1
  8797  0478  3090               	movlw	(low (_g_debug| (0+256)))& (0+255)
  8798  0479  120A  158A  267C  120A  118A  	fcall	_sprintf
  8799  047E  1283               	bcf	3,5	;RP0=0, select bank0
  8800  047F  1303               	bcf	3,6	;RP1=0, select bank0
  8801  0480  0821               	movf	?_sprintf+1,w
  8802  0481  00CE               	movwf	dbg_print_MATRIX4x4@n_312+1
  8803  0482  0820               	movf	?_sprintf,w
  8804  0483  00CD               	movwf	dbg_print_MATRIX4x4@n_312
  8805  0484  084E               	movf	dbg_print_MATRIX4x4@n_312+1,w
  8806  0485  3A80               	xorlw	128
  8807  0486  00FF               	movwf	127
  8808  0487  3080               	movlw	128
  8809  0488  027F               	subwf	127,w
  8810  0489  1D03               	skipz
  8811  048A  2C8D               	goto	u4515
  8812  048B  3041               	movlw	65
  8813  048C  024D               	subwf	dbg_print_MATRIX4x4@n_312,w
  8814  048D                     u4515:	
  8815  048D  1C03               	skipc
  8816  048E  2C9B               	goto	l180
  8817  048F  304C               	movlw	low (STR_1| (0+32768))
  8818  0490  00F1               	movwf	USARTWriteString@str
  8819  0491  3089               	movlw	high (STR_1| (0+32768))
  8820  0492  00F2               	movwf	USARTWriteString@str+1
  8821  0493  160A  158A  2233  120A  118A  	fcall	_USARTWriteString
  8822  0498  120A  118A  2A94   	ljmp	$	;# 
  8823  049B                     l180:	
  8824  049B  3090               	movlw	(low (_g_debug| (0+256)))& (0+255)
  8825  049C  00F1               	movwf	USARTWriteString@str
  8826  049D  3001               	movlw	1
  8827  049E  00F2               	movwf	USARTWriteString@str+1
  8828  049F  160A  158A  2233   	fcall	_USARTWriteString
  8829  04A2  0008               	return
  8830  04A3                     __end_of_dbg_print_MATRIX4x4:	
  8831                           
  8832                           	psect	text28
  8833  12A5                     __ptext28:	
  8834 ;; *************** function _dbg_print_Screen *****************
  8835 ;; Defined at:
  8836 ;;		line 118 in file "../debug.h"
  8837 ;; Parameters:    Size  Location     Type
  8838 ;;  enable          1    wreg     unsigned char 
  8839 ;;  lable           2   44[BANK0 ] PTR const unsigned char 
  8840 ;;		 -> STR_129(15), 
  8841 ;; Auto vars:     Size  Location     Type
  8842 ;;  enable          1   46[BANK0 ] unsigned char 
  8843 ;;  n               2   49[BANK0 ] int 
  8844 ;;  n               2   47[BANK0 ] int 
  8845 ;; Return value:  Size  Location     Type
  8846 ;;                  1    wreg      void 
  8847 ;; Registers used:
  8848 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  8849 ;; Tracked objects:
  8850 ;;		On entry : 0/0
  8851 ;;		On exit  : 0/0
  8852 ;;		Unchanged: 0/0
  8853 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8854 ;;      Params:         0       2       0       0       0
  8855 ;;      Locals:         0       5       0       0       0
  8856 ;;      Temps:          0       0       0       0       0
  8857 ;;      Totals:         0       7       0       0       0
  8858 ;;Total ram usage:        7 bytes
  8859 ;; Hardware stack levels used:    1
  8860 ;; Hardware stack levels required when called:    4
  8861 ;; This function calls:
  8862 ;;		_USARTWriteString
  8863 ;;		_dbg_print_MATRIX16x8
  8864 ;;		_sprintf
  8865 ;; This function is called by:
  8866 ;;		_lg_find_best_solution
  8867 ;; This function uses a non-reentrant model
  8868 ;;
  8869                           
  8870                           
  8871                           ;psect for function _dbg_print_Screen
  8872  12A5                     _dbg_print_Screen:	
  8873                           
  8874                           ;incstack = 0
  8875                           ; Regs used in _dbg_print_Screen: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  8876                           ;dbg_print_Screen@enable stored from wreg
  8877  12A5  1283               	bcf	3,5	;RP0=0, select bank0
  8878  12A6  1303               	bcf	3,6	;RP1=0, select bank0
  8879  12A7  00CE               	movwf	dbg_print_Screen@enable
  8880  12A8  084E               	movf	dbg_print_Screen@enable,w
  8881  12A9  1903               	btfsc	3,2
  8882  12AA  0008               	return
  8883                           
  8884                           ;debug.h: 121: {
  8885                           ;debug.h: 122: if(lable != (0))
  8886  12AB  084C               	movf	dbg_print_Screen@lable,w
  8887  12AC  044D               	iorwf	dbg_print_Screen@lable+1,w
  8888  12AD  1903               	btfsc	3,2
  8889  12AE  2B11               	goto	l294
  8890                           
  8891                           ;debug.h: 123: {
  8892                           ;debug.h: 124: do { if(1) { int n = sprintf(g_debug, lable); if(n > 64) { USARTWriteStri
      +                          ng("ERROR: g_debug is overflowed\r\n"); do { ((void)0); asm("ljmp $"); }while(0); } USAR
      +                          TWriteString(g_debug); } } while (0);;
  8893  12AF  084C               	movf	dbg_print_Screen@lable,w
  8894  12B0  00A0               	movwf	sprintf@f
  8895  12B1  084D               	movf	dbg_print_Screen@lable+1,w
  8896  12B2  00A1               	movwf	sprintf@f+1
  8897  12B3  3090               	movlw	(low (_g_debug| (0+256)))& (0+255)
  8898  12B4  120A  158A  267C  160A  118A  	fcall	_sprintf
  8899  12B9  1283               	bcf	3,5	;RP0=0, select bank0
  8900  12BA  1303               	bcf	3,6	;RP1=0, select bank0
  8901  12BB  0821               	movf	?_sprintf+1,w
  8902  12BC  00D0               	movwf	dbg_print_Screen@n+1
  8903  12BD  0820               	movf	?_sprintf,w
  8904  12BE  00CF               	movwf	dbg_print_Screen@n
  8905  12BF  0850               	movf	dbg_print_Screen@n+1,w
  8906  12C0  3A80               	xorlw	128
  8907  12C1  00FF               	movwf	127
  8908  12C2  3080               	movlw	128
  8909  12C3  027F               	subwf	127,w
  8910  12C4  1D03               	skipz
  8911  12C5  2AC8               	goto	u6975
  8912  12C6  3041               	movlw	65
  8913  12C7  024F               	subwf	dbg_print_Screen@n,w
  8914  12C8                     u6975:	
  8915  12C8  1C03               	skipc
  8916  12C9  2AD6               	goto	l297
  8917  12CA  304C               	movlw	low (STR_1| (0+32768))
  8918  12CB  00F1               	movwf	USARTWriteString@str
  8919  12CC  3089               	movlw	high (STR_1| (0+32768))
  8920  12CD  00F2               	movwf	USARTWriteString@str+1
  8921  12CE  160A  158A  2233  160A  118A  	fcall	_USARTWriteString
  8922  12D3  160A  118A  2AA5   	ljmp	$	;# 
  8923  12D6                     l297:	
  8924  12D6  3090               	movlw	(low (_g_debug| (0+256)))& (0+255)
  8925  12D7  00F1               	movwf	USARTWriteString@str
  8926  12D8  3001               	movlw	1
  8927  12D9  00F2               	movwf	USARTWriteString@str+1
  8928  12DA  160A  158A  2233  160A  118A  	fcall	_USARTWriteString
  8929                           
  8930                           ;debug.h: 125: do { if(1) { int n = sprintf(g_debug, ":""\r\n"); if(n > 64) { USARTWrite
      +                          String("ERROR: g_debug is overflowed\r\n"); do { ((void)0); asm("ljmp $"); }while(0); } 
      +                          USARTWriteString(g_debug); } } while (0);;
  8931  12DF  30E9               	movlw	low (STR_2| (0+32768))
  8932  12E0  1283               	bcf	3,5	;RP0=0, select bank0
  8933  12E1  1303               	bcf	3,6	;RP1=0, select bank0
  8934  12E2  00A0               	movwf	sprintf@f
  8935  12E3  308C               	movlw	high (STR_2| (0+32768))
  8936  12E4  00A1               	movwf	sprintf@f+1
  8937  12E5  3090               	movlw	(low (_g_debug| (0+256)))& (0+255)
  8938  12E6  120A  158A  267C  160A  118A  	fcall	_sprintf
  8939  12EB  1283               	bcf	3,5	;RP0=0, select bank0
  8940  12EC  1303               	bcf	3,6	;RP1=0, select bank0
  8941  12ED  0821               	movf	?_sprintf+1,w
  8942  12EE  00D2               	movwf	dbg_print_Screen@n_373+1
  8943  12EF  0820               	movf	?_sprintf,w
  8944  12F0  00D1               	movwf	dbg_print_Screen@n_373
  8945  12F1  0852               	movf	dbg_print_Screen@n_373+1,w
  8946  12F2  3A80               	xorlw	128
  8947  12F3  00FF               	movwf	127
  8948  12F4  3080               	movlw	128
  8949  12F5  027F               	subwf	127,w
  8950  12F6  1D03               	skipz
  8951  12F7  2AFA               	goto	u6985
  8952  12F8  3041               	movlw	65
  8953  12F9  0251               	subwf	dbg_print_Screen@n_373,w
  8954  12FA                     u6985:	
  8955  12FA  1C03               	skipc
  8956  12FB  2B08               	goto	l303
  8957  12FC  304C               	movlw	low (STR_1| (0+32768))
  8958  12FD  00F1               	movwf	USARTWriteString@str
  8959  12FE  3089               	movlw	high (STR_1| (0+32768))
  8960  12FF  00F2               	movwf	USARTWriteString@str+1
  8961  1300  160A  158A  2233  160A  118A  	fcall	_USARTWriteString
  8962  1305  160A  118A  2AA5   	ljmp	$	;# 
  8963  1308                     l303:	
  8964  1308  3090               	movlw	(low (_g_debug| (0+256)))& (0+255)
  8965  1309  00F1               	movwf	USARTWriteString@str
  8966  130A  3001               	movlw	1
  8967  130B  00F2               	movwf	USARTWriteString@str+1
  8968  130C  160A  158A  2233  160A  118A  	fcall	_USARTWriteString
  8969  1311                     l294:	
  8970                           
  8971                           ;debug.h: 126: }
  8972                           ;debug.h: 127: dbg_print_MATRIX16x8(1, (0), &g_matrix16x8);
  8973  1311  3000               	movlw	0
  8974  1312  1283               	bcf	3,5	;RP0=0, select bank0
  8975  1313  1303               	bcf	3,6	;RP1=0, select bank0
  8976  1314  00B5               	movwf	dbg_print_MATRIX16x8@lable
  8977  1315  00B6               	movwf	dbg_print_MATRIX16x8@lable+1
  8978  1316  30D8               	movlw	(low (_g_matrix16x8| 0))& (0+255)
  8979  1317  00B7               	movwf	dbg_print_MATRIX16x8@matrix
  8980  1318  3000               	movlw	0
  8981  1319  00B8               	movwf	dbg_print_MATRIX16x8@matrix+1
  8982  131A  3001               	movlw	1
  8983  131B  120A  118A  2107   	fcall	_dbg_print_MATRIX16x8
  8984  131E  0008               	return
  8985  131F                     __end_of_dbg_print_Screen:	
  8986                           
  8987                           	psect	text29
  8988  1A56                     __ptext29:	
  8989 ;; *************** function ___wmul *****************
  8990 ;; Defined at:
  8991 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\Umul16.c"
  8992 ;; Parameters:    Size  Location     Type
  8993 ;;  multiplier      2   41[BANK0 ] unsigned int 
  8994 ;;  multiplicand    2   43[BANK0 ] unsigned int 
  8995 ;; Auto vars:     Size  Location     Type
  8996 ;;  product         2   45[BANK0 ] unsigned int 
  8997 ;; Return value:  Size  Location     Type
  8998 ;;                  2   41[BANK0 ] unsigned int 
  8999 ;; Registers used:
  9000 ;;		wreg, status,2, status,0
  9001 ;; Tracked objects:
  9002 ;;		On entry : 0/0
  9003 ;;		On exit  : 0/0
  9004 ;;		Unchanged: 0/0
  9005 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  9006 ;;      Params:         0       4       0       0       0
  9007 ;;      Locals:         0       2       0       0       0
  9008 ;;      Temps:          0       0       0       0       0
  9009 ;;      Totals:         0       6       0       0       0
  9010 ;;Total ram usage:        6 bytes
  9011 ;; Hardware stack levels used:    1
  9012 ;; This function calls:
  9013 ;;		Nothing
  9014 ;; This function is called by:
  9015 ;;		_lg_find_best_solution
  9016 ;; This function uses a non-reentrant model
  9017 ;;
  9018                           
  9019                           
  9020                           ;psect for function ___wmul
  9021  1A56                     ___wmul:	
  9022                           
  9023                           ;incstack = 0
  9024                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  9025  1A56  1283               	bcf	3,5	;RP0=0, select bank0
  9026  1A57  1303               	bcf	3,6	;RP1=0, select bank0
  9027  1A58  01CD               	clrf	___wmul@product
  9028  1A59  01CE               	clrf	___wmul@product+1
  9029  1A5A                     l4898:	
  9030  1A5A  1C49               	btfss	___wmul@multiplier,0
  9031  1A5B  2A62               	goto	l1126
  9032  1A5C  084B               	movf	___wmul@multiplicand,w
  9033  1A5D  07CD               	addwf	___wmul@product,f
  9034  1A5E  1803               	skipnc
  9035  1A5F  0ACE               	incf	___wmul@product+1,f
  9036  1A60  084C               	movf	___wmul@multiplicand+1,w
  9037  1A61  07CE               	addwf	___wmul@product+1,f
  9038  1A62                     l1126:	
  9039  1A62  3001               	movlw	1
  9040  1A63                     u6035:	
  9041  1A63  1003               	clrc
  9042  1A64  0DCB               	rlf	___wmul@multiplicand,f
  9043  1A65  0DCC               	rlf	___wmul@multiplicand+1,f
  9044  1A66  3EFF               	addlw	-1
  9045  1A67  1D03               	skipz
  9046  1A68  2A63               	goto	u6035
  9047  1A69  3001               	movlw	1
  9048  1A6A                     u6045:	
  9049  1A6A  1003               	clrc
  9050  1A6B  0CCA               	rrf	___wmul@multiplier+1,f
  9051  1A6C  0CC9               	rrf	___wmul@multiplier,f
  9052  1A6D  3EFF               	addlw	-1
  9053  1A6E  1D03               	skipz
  9054  1A6F  2A6A               	goto	u6045
  9055  1A70  0849               	movf	___wmul@multiplier,w
  9056  1A71  044A               	iorwf	___wmul@multiplier+1,w
  9057  1A72  1D03               	btfss	3,2
  9058  1A73  2A5A               	goto	l4898
  9059  1A74  084E               	movf	___wmul@product+1,w
  9060  1A75  00CA               	movwf	?___wmul+1
  9061  1A76  084D               	movf	___wmul@product,w
  9062  1A77  00C9               	movwf	?___wmul
  9063  1A78  0008               	return
  9064  1A79                     __end_of___wmul:	
  9065                           
  9066                           	psect	text30
  9067  1165                     __ptext30:	
  9068 ;; *************** function _lg_delete_matrix *****************
  9069 ;; Defined at:
  9070 ;;		line 47 in file "../logic.h"
  9071 ;; Parameters:    Size  Location     Type
  9072 ;;  matrix          1    wreg     PTR struct .
  9073 ;;		 -> g_matrix16x8(16), 
  9074 ;; Auto vars:     Size  Location     Type
  9075 ;;  matrix          1   60[BANK0 ] PTR struct .
  9076 ;;		 -> g_matrix16x8(16), 
  9077 ;;  n               2   57[BANK0 ] int 
  9078 ;;  row             1   61[BANK0 ] char 
  9079 ;;  count           1   59[BANK0 ] unsigned char 
  9080 ;; Return value:  Size  Location     Type
  9081 ;;                  1    wreg      unsigned char 
  9082 ;; Registers used:
  9083 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  9084 ;; Tracked objects:
  9085 ;;		On entry : 0/0
  9086 ;;		On exit  : 0/0
  9087 ;;		Unchanged: 0/0
  9088 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  9089 ;;      Params:         0       0       0       0       0
  9090 ;;      Locals:         0       5       0       0       0
  9091 ;;      Temps:          0       2       0       0       0
  9092 ;;      Totals:         0       7       0       0       0
  9093 ;;Total ram usage:        7 bytes
  9094 ;; Hardware stack levels used:    1
  9095 ;; Hardware stack levels required when called:    5
  9096 ;; This function calls:
  9097 ;;		_USARTWriteString
  9098 ;;		_dbg_print_MATRIX16x8
  9099 ;;		_lg_delete_matrix_row
  9100 ;;		_lg_is_row_full
  9101 ;;		_sprintf
  9102 ;; This function is called by:
  9103 ;;		_main
  9104 ;; This function uses a non-reentrant model
  9105 ;;
  9106                           
  9107                           
  9108                           ;psect for function _lg_delete_matrix
  9109  1165                     _lg_delete_matrix:	
  9110                           
  9111                           ;incstack = 0
  9112                           ; Regs used in _lg_delete_matrix: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  9113                           ;lg_delete_matrix@matrix stored from wreg
  9114  1165  1283               	bcf	3,5	;RP0=0, select bank0
  9115  1166  1303               	bcf	3,6	;RP1=0, select bank0
  9116  1167  00DC               	movwf	lg_delete_matrix@matrix
  9117                           
  9118                           ;logic.h: 49: uint8_t count = 0;
  9119  1168  01DB               	clrf	lg_delete_matrix@count
  9120                           
  9121                           ;logic.h: 50: int8_t row = 16 - 1;
  9122  1169  300F               	movlw	15
  9123  116A  00D7               	movwf	??_lg_delete_matrix
  9124  116B  0857               	movf	??_lg_delete_matrix,w
  9125  116C  00DD               	movwf	lg_delete_matrix@row
  9126  116D                     l4988:	
  9127                           ;logic.h: 51: while(row >= 0)
  9128                           
  9129  116D  1BDD               	btfsc	lg_delete_matrix@row,7
  9130  116E  0008               	return
  9131                           
  9132                           ;logic.h: 52: {
  9133                           ;logic.h: 54: Seed++;
  9134  116F  3001               	movlw	1
  9135  1170  1683               	bsf	3,5	;RP0=1, select bank1
  9136  1171  1303               	bcf	3,6	;RP1=0, select bank1
  9137  1172  07D3               	addwf	_Seed^(0+128),f
  9138  1173  1803               	skipnc
  9139  1174  0AD4               	incf	(_Seed+1)^(0+128),f
  9140  1175  3000               	movlw	0
  9141  1176  07D4               	addwf	(_Seed+1)^(0+128),f
  9142                           
  9143                           ;logic.h: 56: if(lg_is_row_full(matrix, row) == 1)
  9144  1177  1283               	bcf	3,5	;RP0=0, select bank0
  9145  1178  1303               	bcf	3,6	;RP1=0, select bank0
  9146  1179  085C               	movf	lg_delete_matrix@matrix,w
  9147  117A  00CC               	movwf	lg_is_row_full@matrix
  9148  117B  3000               	movlw	0
  9149  117C  00CD               	movwf	lg_is_row_full@matrix+1
  9150  117D  085D               	movf	lg_delete_matrix@row,w
  9151  117E  00D7               	movwf	??_lg_delete_matrix
  9152  117F  0857               	movf	??_lg_delete_matrix,w
  9153  1180  00CE               	movwf	lg_is_row_full@row
  9154  1181  160A  158A  2337  160A  118A  	fcall	_lg_is_row_full
  9155  1186  3A01               	xorlw	1
  9156  1187  1D03               	skipz
  9157  1188  29BC               	goto	l4986
  9158                           
  9159                           ;logic.h: 57: {
  9160                           ;logic.h: 58: dbg_print_MATRIX16x8(0, "Before delete MATRIX16x8", &g_matrix16x8);
  9161  1189  307A               	movlw	low (STR_55| (0+32768))
  9162  118A  1283               	bcf	3,5	;RP0=0, select bank0
  9163  118B  1303               	bcf	3,6	;RP1=0, select bank0
  9164  118C  00B5               	movwf	dbg_print_MATRIX16x8@lable
  9165  118D  308A               	movlw	high (STR_55| (0+32768))
  9166  118E  00B6               	movwf	dbg_print_MATRIX16x8@lable+1
  9167  118F  30D8               	movlw	(low (_g_matrix16x8| 0))& (0+255)
  9168  1190  00B7               	movwf	dbg_print_MATRIX16x8@matrix
  9169  1191  3000               	movlw	0
  9170  1192  00B8               	movwf	dbg_print_MATRIX16x8@matrix+1
  9171  1193  3000               	movlw	0
  9172  1194  120A  118A  2107  160A  118A  	fcall	_dbg_print_MATRIX16x8
  9173                           
  9174                           ;logic.h: 59: lg_delete_matrix_row(matrix, row);
  9175  1199  1283               	bcf	3,5	;RP0=0, select bank0
  9176  119A  1303               	bcf	3,6	;RP1=0, select bank0
  9177  119B  085D               	movf	lg_delete_matrix@row,w
  9178  119C  00D7               	movwf	??_lg_delete_matrix
  9179  119D  0857               	movf	??_lg_delete_matrix,w
  9180  119E  00F0               	movwf	lg_delete_matrix_row@row
  9181  119F  085C               	movf	lg_delete_matrix@matrix,w
  9182  11A0  160A  158A  24FB  160A  118A  	fcall	_lg_delete_matrix_row
  9183                           
  9184                           ;logic.h: 60: dbg_print_MATRIX16x8(0, "After delete MATRIX16x8", &g_matrix16x8);
  9185  11A5  30C3               	movlw	low (STR_56| (0+32768))
  9186  11A6  1283               	bcf	3,5	;RP0=0, select bank0
  9187  11A7  1303               	bcf	3,6	;RP1=0, select bank0
  9188  11A8  00B5               	movwf	dbg_print_MATRIX16x8@lable
  9189  11A9  308A               	movlw	high (STR_56| (0+32768))
  9190  11AA  00B6               	movwf	dbg_print_MATRIX16x8@lable+1
  9191  11AB  30D8               	movlw	(low (_g_matrix16x8| 0))& (0+255)
  9192  11AC  00B7               	movwf	dbg_print_MATRIX16x8@matrix
  9193  11AD  3000               	movlw	0
  9194  11AE  00B8               	movwf	dbg_print_MATRIX16x8@matrix+1
  9195  11AF  3000               	movlw	0
  9196  11B0  120A  118A  2107  160A  118A  	fcall	_dbg_print_MATRIX16x8
  9197                           
  9198                           ;logic.h: 61: count++;
  9199  11B5  3001               	movlw	1
  9200  11B6  1283               	bcf	3,5	;RP0=0, select bank0
  9201  11B7  1303               	bcf	3,6	;RP1=0, select bank0
  9202  11B8  00D7               	movwf	??_lg_delete_matrix
  9203  11B9  0857               	movf	??_lg_delete_matrix,w
  9204  11BA  07DB               	addwf	lg_delete_matrix@count,f
  9205                           
  9206                           ;logic.h: 62: }
  9207  11BB  296D               	goto	l4988
  9208  11BC                     l4986:	
  9209                           
  9210                           ;logic.h: 63: else
  9211                           ;logic.h: 64: {
  9212                           ;logic.h: 65: row--;
  9213  11BC  30FF               	movlw	255
  9214  11BD  1283               	bcf	3,5	;RP0=0, select bank0
  9215  11BE  1303               	bcf	3,6	;RP1=0, select bank0
  9216  11BF  00D7               	movwf	??_lg_delete_matrix
  9217  11C0  0857               	movf	??_lg_delete_matrix,w
  9218  11C1  07DD               	addwf	lg_delete_matrix@row,f
  9219  11C2  296D               	goto	l4988
  9220                           
  9221                           ;logic.h: 66: }
  9222                           ;logic.h: 67: }
  9223                           ;logic.h: 68: do { if(0) { int n = sprintf(g_debug, "delete_matrix count = %d""\r\n", co
      +                          unt); if(n > 64) { USARTWriteString("ERROR: g_debug is overflowed\r\n"); do { ((void)0);
      +                           asm("ljmp $"); }while(0); } USARTWriteString(g_debug); } } while (0);;
  9224  11C3  160A  118A  2965   	ljmp	$	;# 
  9225  11C6                     __end_of_lg_delete_matrix:	
  9226                           ;logic.h: 69: return count;
  9227                           ;	Return value of _lg_delete_matrix is never used
  9228                           
  9229                           
  9230                           	psect	text31
  9231  1B37                     __ptext31:	
  9232 ;; *************** function _lg_is_row_full *****************
  9233 ;; Defined at:
  9234 ;;		line 19 in file "../logic.h"
  9235 ;; Parameters:    Size  Location     Type
  9236 ;;  matrix          2   44[BANK0 ] PTR const struct .
  9237 ;;		 -> temp_matrix16x8(16), g_matrix16x8(16), 
  9238 ;;  row             1   46[BANK0 ] unsigned char 
  9239 ;; Auto vars:     Size  Location     Type
  9240 ;;  n               2   53[BANK0 ] int 
  9241 ;;  n               2   51[BANK0 ] int 
  9242 ;; Return value:  Size  Location     Type
  9243 ;;                  1    wreg      unsigned char 
  9244 ;; Registers used:
  9245 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  9246 ;; Tracked objects:
  9247 ;;		On entry : 0/0
  9248 ;;		On exit  : 0/0
  9249 ;;		Unchanged: 0/0
  9250 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  9251 ;;      Params:         0       3       0       0       0
  9252 ;;      Locals:         0       4       0       0       0
  9253 ;;      Temps:          0       4       0       0       0
  9254 ;;      Totals:         0      11       0       0       0
  9255 ;;Total ram usage:       11 bytes
  9256 ;; Hardware stack levels used:    1
  9257 ;; Hardware stack levels required when called:    4
  9258 ;; This function calls:
  9259 ;;		_USARTWriteString
  9260 ;;		_dbg_print_MATRIX16x8
  9261 ;;		_sprintf
  9262 ;; This function is called by:
  9263 ;;		_lg_delete_matrix
  9264 ;;		_lg_get_num_removed_rows
  9265 ;; This function uses a non-reentrant model
  9266 ;;
  9267                           
  9268                           
  9269                           ;psect for function _lg_is_row_full
  9270  1B37                     _lg_is_row_full:	
  9271                           
  9272                           ;logic.h: 21: if(matrix->row[row] == (uint8_t)0xFF)
  9273                           
  9274                           ;incstack = 0
  9275                           ; Regs used in _lg_is_row_full: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  9276  1B37  1283               	bcf	3,5	;RP0=0, select bank0
  9277  1B38  1303               	bcf	3,6	;RP1=0, select bank0
  9278  1B39  084E               	movf	lg_is_row_full@row,w
  9279  1B3A  074C               	addwf	lg_is_row_full@matrix,w
  9280  1B3B  00CF               	movwf	??_lg_is_row_full
  9281  1B3C  084D               	movf	lg_is_row_full@matrix+1,w
  9282  1B3D  1803               	skipnc
  9283  1B3E  3E01               	addlw	1
  9284  1B3F  00D0               	movwf	??_lg_is_row_full+1
  9285  1B40  084F               	movf	??_lg_is_row_full,w
  9286  1B41  0084               	movwf	4
  9287  1B42  1783               	bsf	3,7
  9288  1B43  1C50               	btfss	??_lg_is_row_full+1,0
  9289  1B44  1383               	bcf	3,7
  9290  1B45  0A00               	incf	0,w
  9291  1B46  1903               	btfsc	3,2
  9292  1B47  2B4D               	goto	l385
  9293                           
  9294                           ;logic.h: 27: }
  9295                           ;logic.h: 28: return 0;
  9296  1B48  3000               	movlw	0
  9297  1B49  0008               	return
  9298                           
  9299                           ;logic.h: 22: {
  9300                           ;logic.h: 23: do { if(0) { int n = sprintf(g_debug, "row = %X""\r\n", matrix->row[row]);
      +                           if(n > 64) { USARTWriteString("ERROR: g_debug is overflowed\r\n"); do { ((void)0); asm(
      +                          "ljmp $"); }while(0); } USARTWriteString(g_debug); } } while (0);;
  9301  1B4A  160A  158A  2B37   	ljmp	$	;# 
  9302  1B4D                     l385:	
  9303                           
  9304                           ;logic.h: 25: dbg_print_MATRIX16x8(0, "Row is full", matrix);
  9305  1B4D  30A2               	movlw	low (STR_54| (0+32768))
  9306  1B4E  1283               	bcf	3,5	;RP0=0, select bank0
  9307  1B4F  1303               	bcf	3,6	;RP1=0, select bank0
  9308  1B50  00B5               	movwf	dbg_print_MATRIX16x8@lable
  9309  1B51  308C               	movlw	high (STR_54| (0+32768))
  9310  1B52  00B6               	movwf	dbg_print_MATRIX16x8@lable+1
  9311  1B53  084C               	movf	lg_is_row_full@matrix,w
  9312  1B54  00B7               	movwf	dbg_print_MATRIX16x8@matrix
  9313  1B55  084D               	movf	lg_is_row_full@matrix+1,w
  9314  1B56  00B8               	movwf	dbg_print_MATRIX16x8@matrix+1
  9315  1B57  3000               	movlw	0
  9316  1B58  120A  118A  2107   	fcall	_dbg_print_MATRIX16x8
  9317                           
  9318                           ;logic.h: 26: return 1;
  9319  1B5B  3001               	movlw	1
  9320  1B5C  0008               	return
  9321                           
  9322                           ;logic.h: 24: do { if(0) { int n = sprintf(g_debug, "row(%d) is full""\r\n", row); if(n 
      +                          > 64) { USARTWriteString("ERROR: g_debug is overflowed\r\n"); do { ((void)0); asm("ljmp 
      +                          $"); }while(0); } USARTWriteString(g_debug); } } while (0);;
  9323  1B5D  160A  158A  2B37   	ljmp	$	;# 
  9324  1B60                     __end_of_lg_is_row_full:	
  9325                           
  9326                           	psect	text32
  9327  0107                     __ptext32:	
  9328 ;; *************** function _dbg_print_MATRIX16x8 *****************
  9329 ;; Defined at:
  9330 ;;		line 48 in file "../debug.h"
  9331 ;; Parameters:    Size  Location     Type
  9332 ;;  enable          1    wreg     unsigned char 
  9333 ;;  lable           2   21[BANK0 ] PTR const unsigned char 
  9334 ;;		 -> STR_156(12), STR_130(15), STR_99(23), STR_98(24), 
  9335 ;;		 -> STR_56(24), STR_55(25), STR_54(12), ROM(8192), 
  9336 ;;  matrix          2   23[BANK0 ] PTR const struct .
  9337 ;;		 -> temp_matrix16x8(16), g_matrix16x8(16), 
  9338 ;; Auto vars:     Size  Location     Type
  9339 ;;  enable          1   41[BANK0 ] unsigned char 
  9340 ;;  n               2   35[BANK0 ] int 
  9341 ;;  n               2   33[BANK0 ] int 
  9342 ;;  n               2   37[BANK0 ] int 
  9343 ;;  col             1   43[BANK0 ] unsigned char 
  9344 ;;  n               2   29[BANK0 ] int 
  9345 ;;  n               2   27[BANK0 ] int 
  9346 ;;  n               2   39[BANK0 ] int 
  9347 ;;  n               2   31[BANK0 ] int 
  9348 ;;  row             1   42[BANK0 ] unsigned char 
  9349 ;; Return value:  Size  Location     Type
  9350 ;;                  1    wreg      void 
  9351 ;; Registers used:
  9352 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  9353 ;; Tracked objects:
  9354 ;;		On entry : 0/0
  9355 ;;		On exit  : 0/0
  9356 ;;		Unchanged: 0/0
  9357 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  9358 ;;      Params:         0       4       0       0       0
  9359 ;;      Locals:         0      17       0       0       0
  9360 ;;      Temps:          0       2       0       0       0
  9361 ;;      Totals:         0      23       0       0       0
  9362 ;;Total ram usage:       23 bytes
  9363 ;; Hardware stack levels used:    1
  9364 ;; Hardware stack levels required when called:    3
  9365 ;; This function calls:
  9366 ;;		_USARTWriteString
  9367 ;;		_get_matrix_bit
  9368 ;;		_sprintf
  9369 ;; This function is called by:
  9370 ;;		_dbg_print_Screen
  9371 ;;		_lg_is_row_full
  9372 ;;		_lg_delete_matrix
  9373 ;;		_lg_merge
  9374 ;;		_lg_find_best_solution
  9375 ;;		_main
  9376 ;; This function uses a non-reentrant model
  9377 ;;
  9378                           
  9379                           
  9380                           ;psect for function _dbg_print_MATRIX16x8
  9381  0107                     _dbg_print_MATRIX16x8:	
  9382                           
  9383                           ;incstack = 0
  9384                           ; Regs used in _dbg_print_MATRIX16x8: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstac
      +                          k]
  9385                           ;dbg_print_MATRIX16x8@enable stored from wreg
  9386  0107  1283               	bcf	3,5	;RP0=0, select bank0
  9387  0108  1303               	bcf	3,6	;RP1=0, select bank0
  9388  0109  00C9               	movwf	dbg_print_MATRIX16x8@enable
  9389  010A  0849               	movf	dbg_print_MATRIX16x8@enable,w
  9390  010B  1903               	btfsc	3,2
  9391  010C  0008               	return
  9392                           
  9393                           ;debug.h: 51: {
  9394                           ;debug.h: 52: if(lable != (0))
  9395  010D  0835               	movf	dbg_print_MATRIX16x8@lable,w
  9396  010E  0436               	iorwf	dbg_print_MATRIX16x8@lable+1,w
  9397  010F  1903               	btfsc	3,2
  9398  0110  2973               	goto	l201
  9399                           
  9400                           ;debug.h: 53: {
  9401                           ;debug.h: 54: do { if(1) { int n = sprintf(g_debug, lable); if(n > 64) { USARTWriteStrin
      +                          g("ERROR: g_debug is overflowed\r\n"); do { ((void)0); asm("ljmp $"); }while(0); } USART
      +                          WriteString(g_debug); } } while (0);;
  9402  0111  0835               	movf	dbg_print_MATRIX16x8@lable,w
  9403  0112  00A0               	movwf	sprintf@f
  9404  0113  0836               	movf	dbg_print_MATRIX16x8@lable+1,w
  9405  0114  00A1               	movwf	sprintf@f+1
  9406  0115  3090               	movlw	(low (_g_debug| (0+256)))& (0+255)
  9407  0116  120A  158A  267C  120A  118A  	fcall	_sprintf
  9408  011B  1283               	bcf	3,5	;RP0=0, select bank0
  9409  011C  1303               	bcf	3,6	;RP1=0, select bank0
  9410  011D  0821               	movf	?_sprintf+1,w
  9411  011E  00BC               	movwf	dbg_print_MATRIX16x8@n+1
  9412  011F  0820               	movf	?_sprintf,w
  9413  0120  00BB               	movwf	dbg_print_MATRIX16x8@n
  9414  0121  083C               	movf	dbg_print_MATRIX16x8@n+1,w
  9415  0122  3A80               	xorlw	128
  9416  0123  00FF               	movwf	127
  9417  0124  3080               	movlw	128
  9418  0125  027F               	subwf	127,w
  9419  0126  1D03               	skipz
  9420  0127  292A               	goto	u4095
  9421  0128  3041               	movlw	65
  9422  0129  023B               	subwf	dbg_print_MATRIX16x8@n,w
  9423  012A                     u4095:	
  9424  012A  1C03               	skipc
  9425  012B  2938               	goto	l191
  9426  012C  304C               	movlw	low (STR_1| (0+32768))
  9427  012D  00F1               	movwf	USARTWriteString@str
  9428  012E  3089               	movlw	high (STR_1| (0+32768))
  9429  012F  00F2               	movwf	USARTWriteString@str+1
  9430  0130  160A  158A  2233  120A  118A  	fcall	_USARTWriteString
  9431  0135  120A  118A  2907   	ljmp	$	;# 
  9432  0138                     l191:	
  9433  0138  3090               	movlw	(low (_g_debug| (0+256)))& (0+255)
  9434  0139  00F1               	movwf	USARTWriteString@str
  9435  013A  3001               	movlw	1
  9436  013B  00F2               	movwf	USARTWriteString@str+1
  9437  013C  160A  158A  2233  120A  118A  	fcall	_USARTWriteString
  9438                           
  9439                           ;debug.h: 55: do { if(1) { int n = sprintf(g_debug, ":""\r\n"); if(n > 64) { USARTWriteS
      +                          tring("ERROR: g_debug is overflowed\r\n"); do { ((void)0); asm("ljmp $"); }while(0); } U
      +                          SARTWriteString(g_debug); } } while (0);;
  9440  0141  30E9               	movlw	low (STR_2| (0+32768))
  9441  0142  1283               	bcf	3,5	;RP0=0, select bank0
  9442  0143  1303               	bcf	3,6	;RP1=0, select bank0
  9443  0144  00A0               	movwf	sprintf@f
  9444  0145  308C               	movlw	high (STR_2| (0+32768))
  9445  0146  00A1               	movwf	sprintf@f+1
  9446  0147  3090               	movlw	(low (_g_debug| (0+256)))& (0+255)
  9447  0148  120A  158A  267C  120A  118A  	fcall	_sprintf
  9448  014D  1283               	bcf	3,5	;RP0=0, select bank0
  9449  014E  1303               	bcf	3,6	;RP1=0, select bank0
  9450  014F  0821               	movf	?_sprintf+1,w
  9451  0150  00BE               	movwf	dbg_print_MATRIX16x8@n_321+1
  9452  0151  0820               	movf	?_sprintf,w
  9453  0152  00BD               	movwf	dbg_print_MATRIX16x8@n_321
  9454  0153  083E               	movf	dbg_print_MATRIX16x8@n_321+1,w
  9455  0154  3A80               	xorlw	128
  9456  0155  00FF               	movwf	127
  9457  0156  3080               	movlw	128
  9458  0157  027F               	subwf	127,w
  9459  0158  1D03               	skipz
  9460  0159  295C               	goto	u4105
  9461  015A  3041               	movlw	65
  9462  015B  023D               	subwf	dbg_print_MATRIX16x8@n_321,w
  9463  015C                     u4105:	
  9464  015C  1C03               	skipc
  9465  015D  296A               	goto	l197
  9466  015E  304C               	movlw	low (STR_1| (0+32768))
  9467  015F  00F1               	movwf	USARTWriteString@str
  9468  0160  3089               	movlw	high (STR_1| (0+32768))
  9469  0161  00F2               	movwf	USARTWriteString@str+1
  9470  0162  160A  158A  2233  120A  118A  	fcall	_USARTWriteString
  9471  0167  120A  118A  2907   	ljmp	$	;# 
  9472  016A                     l197:	
  9473  016A  3090               	movlw	(low (_g_debug| (0+256)))& (0+255)
  9474  016B  00F1               	movwf	USARTWriteString@str
  9475  016C  3001               	movlw	1
  9476  016D  00F2               	movwf	USARTWriteString@str+1
  9477  016E  160A  158A  2233  120A  118A  	fcall	_USARTWriteString
  9478  0173                     l201:	
  9479                           ;debug.h: 56: }
  9480                           ;debug.h: 57: do { if(1) { int n = sprintf(g_debug, "<<<<<<<<<<<<<<<<<<<<MATRIX16x8""\r\
      +                          n"); if(n > 64) { USARTWriteString("ERROR: g_debug is overflowed\r\n"); do { ((void)0); 
      +                          asm("ljmp $"); }while(0); } USARTWriteString(g_debug); } } while (0);;
  9481                           
  9482  0173  300B               	movlw	low (STR_17| (0+32768))
  9483  0174  1283               	bcf	3,5	;RP0=0, select bank0
  9484  0175  1303               	bcf	3,6	;RP1=0, select bank0
  9485  0176  00A0               	movwf	sprintf@f
  9486  0177  3089               	movlw	high (STR_17| (0+32768))
  9487  0178  00A1               	movwf	sprintf@f+1
  9488  0179  3090               	movlw	(low (_g_debug| (0+256)))& (0+255)
  9489  017A  120A  158A  267C  120A  118A  	fcall	_sprintf
  9490  017F  1283               	bcf	3,5	;RP0=0, select bank0
  9491  0180  1303               	bcf	3,6	;RP1=0, select bank0
  9492  0181  0821               	movf	?_sprintf+1,w
  9493  0182  00C0               	movwf	dbg_print_MATRIX16x8@n_324+1
  9494  0183  0820               	movf	?_sprintf,w
  9495  0184  00BF               	movwf	dbg_print_MATRIX16x8@n_324
  9496  0185  0840               	movf	dbg_print_MATRIX16x8@n_324+1,w
  9497  0186  3A80               	xorlw	128
  9498  0187  00FF               	movwf	127
  9499  0188  3080               	movlw	128
  9500  0189  027F               	subwf	127,w
  9501  018A  1D03               	skipz
  9502  018B  298E               	goto	u4115
  9503  018C  3041               	movlw	65
  9504  018D  023F               	subwf	dbg_print_MATRIX16x8@n_324,w
  9505  018E                     u4115:	
  9506  018E  1C03               	skipc
  9507  018F  299C               	goto	l203
  9508  0190  304C               	movlw	low (STR_1| (0+32768))
  9509  0191  00F1               	movwf	USARTWriteString@str
  9510  0192  3089               	movlw	high (STR_1| (0+32768))
  9511  0193  00F2               	movwf	USARTWriteString@str+1
  9512  0194  160A  158A  2233  120A  118A  	fcall	_USARTWriteString
  9513  0199  120A  118A  2907   	ljmp	$	;# 
  9514  019C                     l203:	
  9515  019C  3090               	movlw	(low (_g_debug| (0+256)))& (0+255)
  9516  019D  00F1               	movwf	USARTWriteString@str
  9517  019E  3001               	movlw	1
  9518  019F  00F2               	movwf	USARTWriteString@str+1
  9519  01A0  160A  158A  2233  120A  118A  	fcall	_USARTWriteString
  9520                           
  9521                           ;debug.h: 58: for(uint8_t row = 0; row < 16; row++)
  9522  01A5  1283               	bcf	3,5	;RP0=0, select bank0
  9523  01A6  1303               	bcf	3,6	;RP1=0, select bank0
  9524  01A7  01CA               	clrf	dbg_print_MATRIX16x8@row
  9525  01A8  3010               	movlw	16
  9526  01A9  024A               	subwf	dbg_print_MATRIX16x8@row,w
  9527  01AA  1803               	btfsc	3,0
  9528  01AB  2A65               	goto	l3968
  9529  01AC                     l3934:	
  9530                           
  9531                           ;debug.h: 59: {
  9532                           ;debug.h: 60: for(uint8_t col = 0; col < 8; col++)
  9533  01AC  01CB               	clrf	dbg_print_MATRIX16x8@col
  9534  01AD  3008               	movlw	8
  9535  01AE  024B               	subwf	dbg_print_MATRIX16x8@col,w
  9536  01AF  1803               	btfsc	3,0
  9537  01B0  2A2B               	goto	l3958
  9538  01B1                     l3940:	
  9539                           
  9540                           ;debug.h: 61: {
  9541                           ;debug.h: 62: if(get_matrix_bit((uint8_t*)matrix->row, row, col) == 1)
  9542  01B1  0837               	movf	dbg_print_MATRIX16x8@matrix,w
  9543  01B2  00F7               	movwf	get_matrix_bit@byte
  9544  01B3  0838               	movf	dbg_print_MATRIX16x8@matrix+1,w
  9545  01B4  00F8               	movwf	get_matrix_bit@byte+1
  9546  01B5  084A               	movf	dbg_print_MATRIX16x8@row,w
  9547  01B6  00B9               	movwf	??_dbg_print_MATRIX16x8
  9548  01B7  0839               	movf	??_dbg_print_MATRIX16x8,w
  9549  01B8  00F9               	movwf	get_matrix_bit@row
  9550  01B9  084B               	movf	dbg_print_MATRIX16x8@col,w
  9551  01BA  00BA               	movwf	??_dbg_print_MATRIX16x8+1
  9552  01BB  083A               	movf	??_dbg_print_MATRIX16x8+1,w
  9553  01BC  00FA               	movwf	get_matrix_bit@col
  9554  01BD  160A  158A  2198  120A  118A  	fcall	_get_matrix_bit
  9555  01C2  3A01               	xorlw	1
  9556  01C3  1D03               	skipz
  9557  01C4  29EF               	goto	l3948
  9558                           
  9559                           ;debug.h: 63: {
  9560                           ;debug.h: 64: do { if(1) { int n = sprintf(g_debug, "*"); if(n > 64) { USARTWriteString(
      +                          "ERROR: g_debug is overflowed\r\n"); do { ((void)0); asm("ljmp $"); }while(0); } USARTWr
      +                          iteString(g_debug); } } while (0);;
  9561  01C5  30ED               	movlw	low (STR_6| (0+32768))
  9562  01C6  1283               	bcf	3,5	;RP0=0, select bank0
  9563  01C7  1303               	bcf	3,6	;RP1=0, select bank0
  9564  01C8  00A0               	movwf	sprintf@f
  9565  01C9  308C               	movlw	high (STR_6| (0+32768))
  9566  01CA  00A1               	movwf	sprintf@f+1
  9567  01CB  3090               	movlw	(low (_g_debug| (0+256)))& (0+255)
  9568  01CC  120A  158A  267C  120A  118A  	fcall	_sprintf
  9569  01D1  1283               	bcf	3,5	;RP0=0, select bank0
  9570  01D2  1303               	bcf	3,6	;RP1=0, select bank0
  9571  01D3  0821               	movf	?_sprintf+1,w
  9572  01D4  00C2               	movwf	dbg_print_MATRIX16x8@n_330+1
  9573  01D5  0820               	movf	?_sprintf,w
  9574  01D6  00C1               	movwf	dbg_print_MATRIX16x8@n_330
  9575  01D7  0842               	movf	dbg_print_MATRIX16x8@n_330+1,w
  9576  01D8  3A80               	xorlw	128
  9577  01D9  00FF               	movwf	127
  9578  01DA  3080               	movlw	128
  9579  01DB  027F               	subwf	127,w
  9580  01DC  1D03               	skipz
  9581  01DD  29E0               	goto	u4155
  9582  01DE  3041               	movlw	65
  9583  01DF  0241               	subwf	dbg_print_MATRIX16x8@n_330,w
  9584  01E0                     u4155:	
  9585  01E0  1C03               	skipc
  9586  01E1  2A18               	goto	l221
  9587  01E2  304C               	movlw	low (STR_1| (0+32768))
  9588  01E3  00F1               	movwf	USARTWriteString@str
  9589  01E4  3089               	movlw	high (STR_1| (0+32768))
  9590  01E5  00F2               	movwf	USARTWriteString@str+1
  9591  01E6  160A  158A  2233  120A  118A  	fcall	_USARTWriteString
  9592  01EB  120A  118A  2907   	ljmp	$	;# 
  9593  01EE  2A18               	goto	l221
  9594  01EF                     l3948:	
  9595                           ;debug.h: 66: else
  9596                           ;debug.h: 67: {
  9597                           ;debug.h: 68: do { if(1) { int n = sprintf(g_debug, "_"); if(n > 64) { USARTWriteString(
      +                          "ERROR: g_debug is overflowed\r\n"); do { ((void)0); asm("ljmp $"); }while(0); } USARTWr
      +                          iteString(g_debug); } } while (0);;
  9598                           
  9599                           ;debug.h: 65: }
  9600                           
  9601  01EF  30EF               	movlw	low (STR_8| (0+32768))
  9602  01F0  1283               	bcf	3,5	;RP0=0, select bank0
  9603  01F1  1303               	bcf	3,6	;RP1=0, select bank0
  9604  01F2  00A0               	movwf	sprintf@f
  9605  01F3  308C               	movlw	high (STR_8| (0+32768))
  9606  01F4  00A1               	movwf	sprintf@f+1
  9607  01F5  3090               	movlw	(low (_g_debug| (0+256)))& (0+255)
  9608  01F6  120A  158A  267C  120A  118A  	fcall	_sprintf
  9609  01FB  1283               	bcf	3,5	;RP0=0, select bank0
  9610  01FC  1303               	bcf	3,6	;RP1=0, select bank0
  9611  01FD  0821               	movf	?_sprintf+1,w
  9612  01FE  00C4               	movwf	dbg_print_MATRIX16x8@n_333+1
  9613  01FF  0820               	movf	?_sprintf,w
  9614  0200  00C3               	movwf	dbg_print_MATRIX16x8@n_333
  9615  0201  0844               	movf	dbg_print_MATRIX16x8@n_333+1,w
  9616  0202  3A80               	xorlw	128
  9617  0203  00FF               	movwf	127
  9618  0204  3080               	movlw	128
  9619  0205  027F               	subwf	127,w
  9620  0206  1D03               	skipz
  9621  0207  2A0A               	goto	u4165
  9622  0208  3041               	movlw	65
  9623  0209  0243               	subwf	dbg_print_MATRIX16x8@n_333,w
  9624  020A                     u4165:	
  9625  020A  1C03               	skipc
  9626  020B  2A18               	goto	l221
  9627  020C  304C               	movlw	low (STR_1| (0+32768))
  9628  020D  00F1               	movwf	USARTWriteString@str
  9629  020E  3089               	movlw	high (STR_1| (0+32768))
  9630  020F  00F2               	movwf	USARTWriteString@str+1
  9631  0210  160A  158A  2233  120A  118A  	fcall	_USARTWriteString
  9632  0215  120A  118A  2907   	ljmp	$	;# 
  9633  0218                     l221:	
  9634  0218  3090               	movlw	(low (_g_debug| (0+256)))& (0+255)
  9635  0219  00F1               	movwf	USARTWriteString@str
  9636  021A  3001               	movlw	1
  9637  021B  00F2               	movwf	USARTWriteString@str+1
  9638  021C  160A  158A  2233  120A  118A  	fcall	_USARTWriteString
  9639  0221  3001               	movlw	1
  9640  0222  1283               	bcf	3,5	;RP0=0, select bank0
  9641  0223  1303               	bcf	3,6	;RP1=0, select bank0
  9642  0224  00B9               	movwf	??_dbg_print_MATRIX16x8
  9643  0225  0839               	movf	??_dbg_print_MATRIX16x8,w
  9644  0226  07CB               	addwf	dbg_print_MATRIX16x8@col,f
  9645  0227  3008               	movlw	8
  9646  0228  024B               	subwf	dbg_print_MATRIX16x8@col,w
  9647  0229  1C03               	skipc
  9648  022A  29B1               	goto	l3940
  9649  022B                     l3958:	
  9650                           ;debug.h: 69: }
  9651                           ;debug.h: 70: }
  9652                           ;debug.h: 71: do { if(1) { int n = sprintf(g_debug, """\r\n"); if(n > 64) { USARTWriteSt
      +                          ring("ERROR: g_debug is overflowed\r\n"); do { ((void)0); asm("ljmp $"); }while(0); } US
      +                          ARTWriteString(g_debug); } } while (0);;
  9653                           
  9654  022B  300E               	movlw	low ((STR_142+12)| (0+32768))
  9655  022C  00A0               	movwf	sprintf@f
  9656  022D  308C               	movlw	high ((STR_142+12)| (0+32768))
  9657  022E  00A1               	movwf	sprintf@f+1
  9658  022F  3090               	movlw	(low (_g_debug| (0+256)))& (0+255)
  9659  0230  120A  158A  267C  120A  118A  	fcall	_sprintf
  9660  0235  1283               	bcf	3,5	;RP0=0, select bank0
  9661  0236  1303               	bcf	3,6	;RP1=0, select bank0
  9662  0237  0821               	movf	?_sprintf+1,w
  9663  0238  00C6               	movwf	dbg_print_MATRIX16x8@n_336+1
  9664  0239  0820               	movf	?_sprintf,w
  9665  023A  00C5               	movwf	dbg_print_MATRIX16x8@n_336
  9666  023B  0846               	movf	dbg_print_MATRIX16x8@n_336+1,w
  9667  023C  3A80               	xorlw	128
  9668  023D  00FF               	movwf	127
  9669  023E  3080               	movlw	128
  9670  023F  027F               	subwf	127,w
  9671  0240  1D03               	skipz
  9672  0241  2A44               	goto	u4185
  9673  0242  3041               	movlw	65
  9674  0243  0245               	subwf	dbg_print_MATRIX16x8@n_336,w
  9675  0244                     u4185:	
  9676  0244  1C03               	skipc
  9677  0245  2A52               	goto	l227
  9678  0246  304C               	movlw	low (STR_1| (0+32768))
  9679  0247  00F1               	movwf	USARTWriteString@str
  9680  0248  3089               	movlw	high (STR_1| (0+32768))
  9681  0249  00F2               	movwf	USARTWriteString@str+1
  9682  024A  160A  158A  2233  120A  118A  	fcall	_USARTWriteString
  9683  024F  120A  118A  2907   	ljmp	$	;# 
  9684  0252                     l227:	
  9685  0252  3090               	movlw	(low (_g_debug| (0+256)))& (0+255)
  9686  0253  00F1               	movwf	USARTWriteString@str
  9687  0254  3001               	movlw	1
  9688  0255  00F2               	movwf	USARTWriteString@str+1
  9689  0256  160A  158A  2233  120A  118A  	fcall	_USARTWriteString
  9690  025B  3001               	movlw	1
  9691  025C  1283               	bcf	3,5	;RP0=0, select bank0
  9692  025D  1303               	bcf	3,6	;RP1=0, select bank0
  9693  025E  00B9               	movwf	??_dbg_print_MATRIX16x8
  9694  025F  0839               	movf	??_dbg_print_MATRIX16x8,w
  9695  0260  07CA               	addwf	dbg_print_MATRIX16x8@row,f
  9696  0261  3010               	movlw	16
  9697  0262  024A               	subwf	dbg_print_MATRIX16x8@row,w
  9698  0263  1C03               	skipc
  9699  0264  29AC               	goto	l3934
  9700  0265                     l3968:	
  9701                           ;debug.h: 72: }
  9702                           ;debug.h: 73: do { if(1) { int n = sprintf(g_debug, ">>>>>>>>>>>>>>>>>>>>""\r\n"); if(n 
      +                          > 64) { USARTWriteString("ERROR: g_debug is overflowed\r\n"); do { ((void)0); asm("ljmp 
      +                          $"); }while(0); } USARTWriteString(g_debug); } } while (0);;
  9703                           
  9704  0265  3009               	movlw	low (STR_12| (0+32768))
  9705  0266  00A0               	movwf	sprintf@f
  9706  0267  308B               	movlw	high (STR_12| (0+32768))
  9707  0268  00A1               	movwf	sprintf@f+1
  9708  0269  3090               	movlw	(low (_g_debug| (0+256)))& (0+255)
  9709  026A  120A  158A  267C  120A  118A  	fcall	_sprintf
  9710  026F  1283               	bcf	3,5	;RP0=0, select bank0
  9711  0270  1303               	bcf	3,6	;RP1=0, select bank0
  9712  0271  0821               	movf	?_sprintf+1,w
  9713  0272  00C8               	movwf	dbg_print_MATRIX16x8@n_339+1
  9714  0273  0820               	movf	?_sprintf,w
  9715  0274  00C7               	movwf	dbg_print_MATRIX16x8@n_339
  9716  0275  0848               	movf	dbg_print_MATRIX16x8@n_339+1,w
  9717  0276  3A80               	xorlw	128
  9718  0277  00FF               	movwf	127
  9719  0278  3080               	movlw	128
  9720  0279  027F               	subwf	127,w
  9721  027A  1D03               	skipz
  9722  027B  2A7E               	goto	u4205
  9723  027C  3041               	movlw	65
  9724  027D  0247               	subwf	dbg_print_MATRIX16x8@n_339,w
  9725  027E                     u4205:	
  9726  027E  1C03               	skipc
  9727  027F  2A8C               	goto	l233
  9728  0280  304C               	movlw	low (STR_1| (0+32768))
  9729  0281  00F1               	movwf	USARTWriteString@str
  9730  0282  3089               	movlw	high (STR_1| (0+32768))
  9731  0283  00F2               	movwf	USARTWriteString@str+1
  9732  0284  160A  158A  2233  120A  118A  	fcall	_USARTWriteString
  9733  0289  120A  118A  2907   	ljmp	$	;# 
  9734  028C                     l233:	
  9735  028C  3090               	movlw	(low (_g_debug| (0+256)))& (0+255)
  9736  028D  00F1               	movwf	USARTWriteString@str
  9737  028E  3001               	movlw	1
  9738  028F  00F2               	movwf	USARTWriteString@str+1
  9739  0290  160A  158A  2233   	fcall	_USARTWriteString
  9740  0293  0008               	return
  9741  0294                     __end_of_dbg_print_MATRIX16x8:	
  9742                           
  9743                           	psect	text33
  9744  1CFB                     __ptext33:	
  9745 ;; *************** function _lg_delete_matrix_row *****************
  9746 ;; Defined at:
  9747 ;;		line 30 in file "../logic.h"
  9748 ;; Parameters:    Size  Location     Type
  9749 ;;  matrix          1    wreg     PTR struct .
  9750 ;;		 -> g_matrix16x8(16), 
  9751 ;;  row             1    0[COMMON] unsigned char 
  9752 ;; Auto vars:     Size  Location     Type
  9753 ;;  matrix          1    4[COMMON] PTR struct .
  9754 ;;		 -> g_matrix16x8(16), 
  9755 ;;  i               1    5[COMMON] char 
  9756 ;; Return value:  Size  Location     Type
  9757 ;;                  1    wreg      void 
  9758 ;; Registers used:
  9759 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  9760 ;; Tracked objects:
  9761 ;;		On entry : 0/0
  9762 ;;		On exit  : 0/0
  9763 ;;		Unchanged: 0/0
  9764 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  9765 ;;      Params:         1       0       0       0       0
  9766 ;;      Locals:         2       0       0       0       0
  9767 ;;      Temps:          3       0       0       0       0
  9768 ;;      Totals:         6       0       0       0       0
  9769 ;;Total ram usage:        6 bytes
  9770 ;; Hardware stack levels used:    1
  9771 ;; This function calls:
  9772 ;;		Nothing
  9773 ;; This function is called by:
  9774 ;;		_lg_delete_matrix
  9775 ;; This function uses a non-reentrant model
  9776 ;;
  9777                           
  9778                           
  9779                           ;psect for function _lg_delete_matrix_row
  9780  1CFB                     _lg_delete_matrix_row:	
  9781                           
  9782                           ;incstack = 0
  9783                           ; Regs used in _lg_delete_matrix_row: [wreg-fsr0h+status,2+status,0]
  9784                           ;lg_delete_matrix_row@matrix stored from wreg
  9785  1CFB  00F4               	movwf	lg_delete_matrix_row@matrix
  9786                           
  9787                           ;logic.h: 32: for(int8_t i = 16 - 1; i >= 0; i--)
  9788  1CFC  300F               	movlw	15
  9789  1CFD  00F1               	movwf	??_lg_delete_matrix_row
  9790  1CFE  0871               	movf	??_lg_delete_matrix_row,w
  9791  1CFF  00F5               	movwf	lg_delete_matrix_row@i
  9792  1D00                     L18:	
  9793  1D00  1BF5               	btfsc	lg_delete_matrix_row@i,7
  9794  1D01  0008               	return
  9795                           
  9796                           ;logic.h: 33: {
  9797                           ;logic.h: 34: if(i <= row)
  9798  1D02  0875               	movf	lg_delete_matrix_row@i,w
  9799  1D03  00F1               	movwf	??_lg_delete_matrix_row
  9800  1D04  01F2               	clrf	??_lg_delete_matrix_row+1
  9801  1D05  1BF1               	btfsc	??_lg_delete_matrix_row,7
  9802  1D06  03F2               	decf	??_lg_delete_matrix_row+1,f
  9803  1D07  0872               	movf	??_lg_delete_matrix_row+1,w
  9804  1D08  3A80               	xorlw	128
  9805  1D09  3C80               	sublw	128
  9806  1D0A  1D03               	skipz
  9807  1D0B  2D0E               	goto	u4925
  9808  1D0C  0871               	movf	??_lg_delete_matrix_row,w
  9809  1D0D  0270               	subwf	lg_delete_matrix_row@row,w
  9810  1D0E                     u4925:	
  9811  1D0E  1C03               	skipc
  9812  1D0F  2D2D               	goto	l4372
  9813                           
  9814                           ;logic.h: 35: {
  9815                           ;logic.h: 36: if(i > 0)
  9816  1D10  0875               	movf	lg_delete_matrix_row@i,w
  9817  1D11  3A80               	xorlw	128
  9818  1D12  3E7F               	addlw	-129
  9819  1D13  1C03               	skipc
  9820  1D14  2D26               	goto	l4370
  9821                           
  9822                           ;logic.h: 37: {
  9823                           ;logic.h: 38: matrix->row[i] = matrix->row[i - 1];
  9824  1D15  0875               	movf	lg_delete_matrix_row@i,w
  9825  1D16  3EFF               	addlw	255
  9826  1D17  0774               	addwf	lg_delete_matrix_row@matrix,w
  9827  1D18  00F1               	movwf	??_lg_delete_matrix_row
  9828  1D19  0871               	movf	??_lg_delete_matrix_row,w
  9829  1D1A  0084               	movwf	4
  9830  1D1B  1383               	bcf	3,7	;select IRP bank0
  9831  1D1C  0800               	movf	0,w
  9832  1D1D  00F2               	movwf	??_lg_delete_matrix_row+1
  9833  1D1E  0875               	movf	lg_delete_matrix_row@i,w
  9834  1D1F  0774               	addwf	lg_delete_matrix_row@matrix,w
  9835  1D20  00F3               	movwf	??_lg_delete_matrix_row+2
  9836  1D21  0873               	movf	??_lg_delete_matrix_row+2,w
  9837  1D22  0084               	movwf	4
  9838  1D23  0872               	movf	??_lg_delete_matrix_row+1,w
  9839  1D24  0080               	movwf	0
  9840                           
  9841                           ;logic.h: 39: }
  9842  1D25  2D2D               	goto	l4372
  9843  1D26                     l4370:	
  9844                           
  9845                           ;logic.h: 40: else
  9846                           ;logic.h: 41: {
  9847                           ;logic.h: 42: matrix->row[i] = (uint8_t)0x0;
  9848  1D26  0875               	movf	lg_delete_matrix_row@i,w
  9849  1D27  0774               	addwf	lg_delete_matrix_row@matrix,w
  9850  1D28  00F1               	movwf	??_lg_delete_matrix_row
  9851  1D29  0871               	movf	??_lg_delete_matrix_row,w
  9852  1D2A  0084               	movwf	4
  9853  1D2B  1383               	bcf	3,7	;select IRP bank0
  9854  1D2C  0180               	clrf	0
  9855  1D2D                     l4372:	
  9856  1D2D  30FF               	movlw	255
  9857  1D2E  00F1               	movwf	??_lg_delete_matrix_row
  9858  1D2F  0871               	movf	??_lg_delete_matrix_row,w
  9859  1D30  07F5               	addwf	lg_delete_matrix_row@i,f
  9860  1D31  2D00               	goto	L18
  9861  1D32                     __end_of_lg_delete_matrix_row:	
  9862                           
  9863                           	psect	text34
  9864  19A7                     __ptext34:	
  9865 ;; *************** function _lg_clear_matrix *****************
  9866 ;; Defined at:
  9867 ;;		line 14 in file "../logic.h"
  9868 ;; Parameters:    Size  Location     Type
  9869 ;;		None
  9870 ;; Auto vars:     Size  Location     Type
  9871 ;;		None
  9872 ;; Return value:  Size  Location     Type
  9873 ;;                  1    wreg      void 
  9874 ;; Registers used:
  9875 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  9876 ;; Tracked objects:
  9877 ;;		On entry : 0/0
  9878 ;;		On exit  : 0/0
  9879 ;;		Unchanged: 0/0
  9880 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  9881 ;;      Params:         0       0       0       0       0
  9882 ;;      Locals:         0       0       0       0       0
  9883 ;;      Temps:          0       0       0       0       0
  9884 ;;      Totals:         0       0       0       0       0
  9885 ;;Total ram usage:        0 bytes
  9886 ;; Hardware stack levels used:    1
  9887 ;; Hardware stack levels required when called:    6
  9888 ;; This function calls:
  9889 ;;		_hal_print_Screen
  9890 ;;		_memset
  9891 ;; This function is called by:
  9892 ;;		_main
  9893 ;; This function uses a non-reentrant model
  9894 ;;
  9895                           
  9896                           
  9897                           ;psect for function _lg_clear_matrix
  9898  19A7                     _lg_clear_matrix:	
  9899                           
  9900                           ;logic.h: 16: memset(&g_matrix16x8, 0, sizeof(MATRIX16x8));
  9901                           
  9902                           ;incstack = 0
  9903                           ; Regs used in _lg_clear_matrix: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  9904  19A7  3000               	movlw	0
  9905  19A8  00F0               	movwf	memset@c
  9906  19A9  00F1               	movwf	memset@c+1
  9907  19AA  3010               	movlw	16
  9908  19AB  00F2               	movwf	memset@n
  9909  19AC  3000               	movlw	0
  9910  19AD  00F3               	movwf	memset@n+1
  9911  19AE  30D8               	movlw	(low (_g_matrix16x8| 0))& (0+255)
  9912  19AF  120A  158A  24F4  160A  158A  	fcall	_memset
  9913                           
  9914                           ;logic.h: 17: hal_print_Screen();
  9915  19B4  160A  158A  2165   	fcall	_hal_print_Screen
  9916  19B7  0008               	return
  9917  19B8                     __end_of_lg_clear_matrix:	
  9918                           
  9919                           	psect	text35
  9920  0CF4                     __ptext35:	
  9921 ;; *************** function _memset *****************
  9922 ;; Defined at:
  9923 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\memset.c"
  9924 ;; Parameters:    Size  Location     Type
  9925 ;;  p1              1    wreg     PTR void 
  9926 ;;		 -> max7219_init1@matrix(16), g_matrix16x8(16), 
  9927 ;;  c               2    0[COMMON] int 
  9928 ;;  n               2    2[COMMON] unsigned int 
  9929 ;; Auto vars:     Size  Location     Type
  9930 ;;  p1              1    6[COMMON] PTR void 
  9931 ;;		 -> max7219_init1@matrix(16), g_matrix16x8(16), 
  9932 ;;  p               1    5[COMMON] PTR unsigned char 
  9933 ;;		 -> max7219_init1@matrix(16), g_matrix16x8(16), 
  9934 ;; Return value:  Size  Location     Type
  9935 ;;                  1    wreg      PTR void 
  9936 ;; Registers used:
  9937 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  9938 ;; Tracked objects:
  9939 ;;		On entry : 0/0
  9940 ;;		On exit  : 0/0
  9941 ;;		Unchanged: 0/0
  9942 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  9943 ;;      Params:         4       0       0       0       0
  9944 ;;      Locals:         2       0       0       0       0
  9945 ;;      Temps:          1       0       0       0       0
  9946 ;;      Totals:         7       0       0       0       0
  9947 ;;Total ram usage:        7 bytes
  9948 ;; Hardware stack levels used:    1
  9949 ;; This function calls:
  9950 ;;		Nothing
  9951 ;; This function is called by:
  9952 ;;		_max7219_init1
  9953 ;;		_lg_clear_matrix
  9954 ;; This function uses a non-reentrant model
  9955 ;;
  9956                           
  9957                           
  9958                           ;psect for function _memset
  9959  0CF4                     _memset:	
  9960                           
  9961                           ;incstack = 0
  9962                           ; Regs used in _memset: [wreg-fsr0h+status,2+status,0]
  9963                           ;memset@p1 stored from wreg
  9964  0CF4  00F6               	movwf	memset@p1
  9965  0CF5  0876               	movf	memset@p1,w
  9966  0CF6  00F4               	movwf	??_memset
  9967  0CF7  0874               	movf	??_memset,w
  9968  0CF8  00F5               	movwf	memset@p
  9969  0CF9                     l4038:	
  9970  0CF9  3001               	movlw	1
  9971  0CFA  02F2               	subwf	memset@n,f
  9972  0CFB  3000               	movlw	0
  9973  0CFC  1C03               	skipc
  9974  0CFD  03F3               	decf	memset@n+1,f
  9975  0CFE  02F3               	subwf	memset@n+1,f
  9976  0CFF  0A72               	incf	memset@n,w
  9977  0D00  1903               	btfsc	3,2
  9978  0D01  0A73               	incf	memset@n+1,w
  9979  0D02  1903               	btfsc	3,2
  9980  0D03  0008               	return
  9981  0D04  0870               	movf	memset@c,w
  9982  0D05  00F4               	movwf	??_memset
  9983  0D06  0875               	movf	memset@p,w
  9984  0D07  0084               	movwf	4
  9985  0D08  0874               	movf	??_memset,w
  9986  0D09  1383               	bcf	3,7	;select IRP bank0
  9987  0D0A  0080               	movwf	0
  9988  0D0B  3001               	movlw	1
  9989  0D0C  00F4               	movwf	??_memset
  9990  0D0D  0874               	movf	??_memset,w
  9991  0D0E  07F5               	addwf	memset@p,f
  9992  0D0F  2CF9               	goto	l4038
  9993  0D10                     __end_of_memset:	
  9994                           ;	Return value of _memset is never used
  9995                           
  9996                           
  9997                           	psect	text36
  9998  1965                     __ptext36:	
  9999 ;; *************** function _hal_print_Screen *****************
 10000 ;; Defined at:
 10001 ;;		line 10 in file "../hal.h"
 10002 ;; Parameters:    Size  Location     Type
 10003 ;;		None
 10004 ;; Auto vars:     Size  Location     Type
 10005 ;;		None
 10006 ;; Return value:  Size  Location     Type
 10007 ;;                  1    wreg      void 
 10008 ;; Registers used:
 10009 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
 10010 ;; Tracked objects:
 10011 ;;		On entry : 0/0
 10012 ;;		On exit  : 0/0
 10013 ;;		Unchanged: 0/0
 10014 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 10015 ;;      Params:         0       0       0       0       0
 10016 ;;      Locals:         0       0       0       0       0
 10017 ;;      Temps:          0       0       0       0       0
 10018 ;;      Totals:         0       0       0       0       0
 10019 ;;Total ram usage:        0 bytes
 10020 ;; Hardware stack levels used:    1
 10021 ;; Hardware stack levels required when called:    5
 10022 ;; This function calls:
 10023 ;;		_hal_print_MATRIX16x8
 10024 ;; This function is called by:
 10025 ;;		_lg_clear_matrix
 10026 ;;		_main
 10027 ;; This function uses a non-reentrant model
 10028 ;;
 10029                           
 10030                           
 10031                           ;psect for function _hal_print_Screen
 10032  1965                     _hal_print_Screen:	
 10033                           
 10034                           ;hal.h: 12: hal_print_MATRIX16x8(&g_matrix16x8);
 10035                           
 10036                           ;incstack = 0
 10037                           ; Regs used in _hal_print_Screen: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
 10038  1965  30D8               	movlw	(low (_g_matrix16x8| 0))& (0+255)
 10039  1966  160A  158A  21C9   	fcall	_hal_print_MATRIX16x8
 10040  1969  0008               	return
 10041  196A                     __end_of_hal_print_Screen:	
 10042                           
 10043                           	psect	text37
 10044  19C9                     __ptext37:	
 10045 ;; *************** function _hal_print_MATRIX16x8 *****************
 10046 ;; Defined at:
 10047 ;;		line 34 in file "../hal_max7219.h"
 10048 ;; Parameters:    Size  Location     Type
 10049 ;;  matrix88        1    wreg     PTR const struct .
 10050 ;;		 -> g_matrix16x8(16), 
 10051 ;; Auto vars:     Size  Location     Type
 10052 ;;  matrix88        1   23[BANK0 ] PTR const struct .
 10053 ;;		 -> g_matrix16x8(16), 
 10054 ;;  matrix7219     16   24[BANK0 ] struct .
 10055 ;; Return value:  Size  Location     Type
 10056 ;;                  1    wreg      void 
 10057 ;; Registers used:
 10058 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
 10059 ;; Tracked objects:
 10060 ;;		On entry : 0/0
 10061 ;;		On exit  : 0/0
 10062 ;;		Unchanged: 0/0
 10063 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 10064 ;;      Params:         0       0       0       0       0
 10065 ;;      Locals:         0      17       0       0       0
 10066 ;;      Temps:          0       1       0       0       0
 10067 ;;      Totals:         0      18       0       0       0
 10068 ;;Total ram usage:       18 bytes
 10069 ;; Hardware stack levels used:    1
 10070 ;; Hardware stack levels required when called:    4
 10071 ;; This function calls:
 10072 ;;		_hal_MATRIX16x8_to_MATRIX_MATRIX7219
 10073 ;;		_hal_print_MATRIX_MATRIX7219
 10074 ;; This function is called by:
 10075 ;;		_hal_print_Screen
 10076 ;; This function uses a non-reentrant model
 10077 ;;
 10078                           
 10079                           
 10080                           ;psect for function _hal_print_MATRIX16x8
 10081  19C9                     _hal_print_MATRIX16x8:	
 10082                           
 10083                           ;incstack = 0
 10084                           ; Regs used in _hal_print_MATRIX16x8: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstac
      +                          k]
 10085                           ;hal_print_MATRIX16x8@matrix88 stored from wreg
 10086  19C9  1283               	bcf	3,5	;RP0=0, select bank0
 10087  19CA  1303               	bcf	3,6	;RP1=0, select bank0
 10088  19CB  00B7               	movwf	hal_print_MATRIX16x8@matrix88
 10089                           
 10090                           ;hal_max7219.h: 36: MATRIX_MATRIX7219 matrix7219;
 10091                           ;hal_max7219.h: 37: hal_MATRIX16x8_to_MATRIX_MATRIX7219(matrix88, &matrix7219);
 10092  19CC  3038               	movlw	(low (hal_print_MATRIX16x8@matrix7219| 0))& (0+255)
 10093  19CD  00B6               	movwf	??_hal_print_MATRIX16x8
 10094  19CE  0836               	movf	??_hal_print_MATRIX16x8,w
 10095  19CF  00AD               	movwf	hal_MATRIX16x8_to_MATRIX_MATRIX7219@matrix7219
 10096  19D0  0837               	movf	hal_print_MATRIX16x8@matrix88,w
 10097  19D1  160A  158A  25EC  160A  158A  	fcall	_hal_MATRIX16x8_to_MATRIX_MATRIX7219
 10098                           
 10099                           ;hal_max7219.h: 38: hal_print_MATRIX_MATRIX7219(&matrix7219);
 10100  19D6  3038               	movlw	(low (hal_print_MATRIX16x8@matrix7219| 0))& (0+255)
 10101  19D7  160A  118A  20AA   	fcall	_hal_print_MATRIX_MATRIX7219
 10102  19DA  0008               	return
 10103  19DB                     __end_of_hal_print_MATRIX16x8:	
 10104                           
 10105                           	psect	text38
 10106  10AA                     __ptext38:	
 10107 ;; *************** function _hal_print_MATRIX_MATRIX7219 *****************
 10108 ;; Defined at:
 10109 ;;		line 16 in file "../hal_max7219.h"
 10110 ;; Parameters:    Size  Location     Type
 10111 ;;  matrix7219      1    wreg     PTR const struct .
 10112 ;;		 -> hal_print_MATRIX16x8@matrix7219(16), 
 10113 ;; Auto vars:     Size  Location     Type
 10114 ;;  matrix7219      1    8[BANK0 ] PTR const struct .
 10115 ;;		 -> hal_print_MATRIX16x8@matrix7219(16), 
 10116 ;;  matrix_col      1   13[BANK0 ] unsigned char 
 10117 ;;  matrix_row      1   12[BANK0 ] unsigned char 
 10118 ;;  matrix          2    9[BANK0 ] struct .
 10119 ;;  col             1   11[BANK0 ] unsigned char 
 10120 ;; Return value:  Size  Location     Type
 10121 ;;                  1    wreg      void 
 10122 ;; Registers used:
 10123 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 10124 ;; Tracked objects:
 10125 ;;		On entry : 0/0
 10126 ;;		On exit  : 0/0
 10127 ;;		Unchanged: 0/0
 10128 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 10129 ;;      Params:         0       0       0       0       0
 10130 ;;      Locals:         0       6       0       0       0
 10131 ;;      Temps:          0       8       0       0       0
 10132 ;;      Totals:         0      14       0       0       0
 10133 ;;Total ram usage:       14 bytes
 10134 ;; Hardware stack levels used:    1
 10135 ;; Hardware stack levels required when called:    2
 10136 ;; This function calls:
 10137 ;;		_Write_Matrix
 10138 ;; This function is called by:
 10139 ;;		_hal_print_MATRIX16x8
 10140 ;; This function uses a non-reentrant model
 10141 ;;
 10142                           
 10143                           
 10144                           ;psect for function _hal_print_MATRIX_MATRIX7219
 10145  10AA                     _hal_print_MATRIX_MATRIX7219:	
 10146                           
 10147                           ;incstack = 0
 10148                           ; Regs used in _hal_print_MATRIX_MATRIX7219: [wreg-fsr0h+status,2+status,0+pclath+cstack
      +                          ]
 10149                           ;hal_print_MATRIX_MATRIX7219@matrix7219 stored from wreg
 10150  10AA  1283               	bcf	3,5	;RP0=0, select bank0
 10151  10AB  1303               	bcf	3,6	;RP1=0, select bank0
 10152  10AC  00A8               	movwf	hal_print_MATRIX_MATRIX7219@matrix7219
 10153                           
 10154                           ;hal_max7219.h: 18: DRV_MATRIX_MATRIX7219 matrix;
 10155                           ;hal_max7219.h: 20: uint8_t col;
 10156                           ;hal_max7219.h: 22: for (col = 0; col < 8; col++)
 10157  10AD  01AB               	clrf	hal_print_MATRIX_MATRIX7219@col
 10158  10AE                     L19:	
 10159  10AE  3008               	movlw	8
 10160  10AF  022B               	subwf	hal_print_MATRIX_MATRIX7219@col,w
 10161  10B0  1803               	btfsc	3,0
 10162  10B1  0008               	return
 10163                           
 10164                           ;hal_max7219.h: 23: {
 10165                           ;hal_max7219.h: 24: for(uint8_t matrix_row = 0; matrix_row < (16/8); matrix_row++)
 10166  10B2  01AC               	clrf	hal_print_MATRIX_MATRIX7219@matrix_row
 10167  10B3  3002               	movlw	2
 10168  10B4  022C               	subwf	hal_print_MATRIX_MATRIX7219@matrix_row,w
 10169  10B5  1803               	btfsc	3,0
 10170  10B6  28F4               	goto	l4024
 10171  10B7                     l4008:	
 10172                           
 10173                           ;hal_max7219.h: 25: {
 10174                           ;hal_max7219.h: 26: for(uint8_t matrix_col = 0; matrix_col < (8/8); matrix_col++)
 10175  10B7  01AD               	clrf	hal_print_MATRIX_MATRIX7219@matrix_col
 10176  10B8  082D               	movf	hal_print_MATRIX_MATRIX7219@matrix_col,w
 10177  10B9  1D03               	btfss	3,2
 10178  10BA  28EC               	goto	l4020
 10179  10BB                     l4014:	
 10180                           
 10181                           ;hal_max7219.h: 27: {
 10182                           ;hal_max7219.h: 28: matrix.data[matrix_row][matrix_col] = matrix7219->data[matrix_row][m
      +                          atrix_col].data[col];
 10183  10BB  082C               	movf	hal_print_MATRIX_MATRIX7219@matrix_row,w
 10184  10BC  00A0               	movwf	??_hal_print_MATRIX_MATRIX7219
 10185  10BD  3002               	movlw	2
 10186  10BE                     u4285:	
 10187  10BE  1003               	clrc
 10188  10BF  0DA0               	rlf	??_hal_print_MATRIX_MATRIX7219,f
 10189  10C0  3EFF               	addlw	-1
 10190  10C1  1D03               	skipz
 10191  10C2  28BE               	goto	u4285
 10192  10C3  1003               	clrc
 10193  10C4  0D20               	rlf	??_hal_print_MATRIX_MATRIX7219,w
 10194  10C5  0728               	addwf	hal_print_MATRIX_MATRIX7219@matrix7219,w
 10195  10C6  00A1               	movwf	??_hal_print_MATRIX_MATRIX7219+1
 10196  10C7  082D               	movf	hal_print_MATRIX_MATRIX7219@matrix_col,w
 10197  10C8  00A2               	movwf	??_hal_print_MATRIX_MATRIX7219+2
 10198  10C9  3002               	movlw	2
 10199  10CA                     u4295:	
 10200  10CA  1003               	clrc
 10201  10CB  0DA2               	rlf	??_hal_print_MATRIX_MATRIX7219+2,f
 10202  10CC  3EFF               	addlw	-1
 10203  10CD  1D03               	skipz
 10204  10CE  28CA               	goto	u4295
 10205  10CF  1003               	clrc
 10206  10D0  0D22               	rlf	??_hal_print_MATRIX_MATRIX7219+2,w
 10207  10D1  0721               	addwf	??_hal_print_MATRIX_MATRIX7219+1,w
 10208  10D2  00A3               	movwf	??_hal_print_MATRIX_MATRIX7219+3
 10209  10D3  082B               	movf	hal_print_MATRIX_MATRIX7219@col,w
 10210  10D4  0723               	addwf	??_hal_print_MATRIX_MATRIX7219+3,w
 10211  10D5  00A4               	movwf	??_hal_print_MATRIX_MATRIX7219+4
 10212  10D6  0824               	movf	??_hal_print_MATRIX_MATRIX7219+4,w
 10213  10D7  0084               	movwf	4
 10214  10D8  1383               	bcf	3,7	;select IRP bank0
 10215  10D9  0800               	movf	0,w
 10216  10DA  00A5               	movwf	??_hal_print_MATRIX_MATRIX7219+5
 10217  10DB  3029               	movlw	(low (hal_print_MATRIX_MATRIX7219@matrix| 0))& (0+255)
 10218  10DC  072C               	addwf	hal_print_MATRIX_MATRIX7219@matrix_row,w
 10219  10DD  00A6               	movwf	??_hal_print_MATRIX_MATRIX7219+6
 10220  10DE  082D               	movf	hal_print_MATRIX_MATRIX7219@matrix_col,w
 10221  10DF  0726               	addwf	??_hal_print_MATRIX_MATRIX7219+6,w
 10222  10E0  00A7               	movwf	??_hal_print_MATRIX_MATRIX7219+7
 10223  10E1  0827               	movf	??_hal_print_MATRIX_MATRIX7219+7,w
 10224  10E2  0084               	movwf	4
 10225  10E3  0825               	movf	??_hal_print_MATRIX_MATRIX7219+5,w
 10226  10E4  0080               	movwf	0
 10227  10E5  3001               	movlw	1
 10228  10E6  00A0               	movwf	??_hal_print_MATRIX_MATRIX7219
 10229  10E7  0820               	movf	??_hal_print_MATRIX_MATRIX7219,w
 10230  10E8  07AD               	addwf	hal_print_MATRIX_MATRIX7219@matrix_col,f
 10231  10E9  082D               	movf	hal_print_MATRIX_MATRIX7219@matrix_col,w
 10232  10EA  1903               	btfsc	3,2
 10233  10EB  28BB               	goto	l4014
 10234  10EC                     l4020:	
 10235  10EC  3001               	movlw	1
 10236  10ED  00A0               	movwf	??_hal_print_MATRIX_MATRIX7219
 10237  10EE  0820               	movf	??_hal_print_MATRIX_MATRIX7219,w
 10238  10EF  07AC               	addwf	hal_print_MATRIX_MATRIX7219@matrix_row,f
 10239  10F0  3002               	movlw	2
 10240  10F1  022C               	subwf	hal_print_MATRIX_MATRIX7219@matrix_row,w
 10241  10F2  1C03               	skipc
 10242  10F3  28B7               	goto	l4008
 10243  10F4                     l4024:	
 10244                           
 10245                           ;hal_max7219.h: 29: }
 10246                           ;hal_max7219.h: 30: }
 10247                           ;hal_max7219.h: 31: Write_Matrix(&matrix, 1, col);
 10248  10F4  01F4               	clrf	Write_Matrix@option
 10249  10F5  0AF4               	incf	Write_Matrix@option,f
 10250  10F6  082B               	movf	hal_print_MATRIX_MATRIX7219@col,w
 10251  10F7  00A0               	movwf	??_hal_print_MATRIX_MATRIX7219
 10252  10F8  0820               	movf	??_hal_print_MATRIX_MATRIX7219,w
 10253  10F9  00F5               	movwf	Write_Matrix@column
 10254  10FA  3029               	movlw	(low (hal_print_MATRIX_MATRIX7219@matrix| 0))& (0+255)
 10255  10FB  160A  118A  2107  160A  118A  	fcall	_Write_Matrix
 10256  1100  3001               	movlw	1
 10257  1101  1283               	bcf	3,5	;RP0=0, select bank0
 10258  1102  1303               	bcf	3,6	;RP1=0, select bank0
 10259  1103  00A0               	movwf	??_hal_print_MATRIX_MATRIX7219
 10260  1104  0820               	movf	??_hal_print_MATRIX_MATRIX7219,w
 10261  1105  07AB               	addwf	hal_print_MATRIX_MATRIX7219@col,f
 10262  1106  28AE               	goto	L19
 10263  1107                     __end_of_hal_print_MATRIX_MATRIX7219:	
 10264                           
 10265                           	psect	text39
 10266  1107                     __ptext39:	
 10267 ;; *************** function _Write_Matrix *****************
 10268 ;; Defined at:
 10269 ;;		line 58 in file "../max7219.h"
 10270 ;; Parameters:    Size  Location     Type
 10271 ;;  matrix          1    wreg     PTR const struct .
 10272 ;;		 -> hal_print_MATRIX_MATRIX7219@matrix(2), max7219_init1@matrix(16), 
 10273 ;;  option          1    4[COMMON] unsigned char 
 10274 ;;  column          1    5[COMMON] unsigned char 
 10275 ;; Auto vars:     Size  Location     Type
 10276 ;;  matrix          1   11[COMMON] PTR const struct .
 10277 ;;		 -> hal_print_MATRIX_MATRIX7219@matrix(2), max7219_init1@matrix(16), 
 10278 ;;  col             1   12[COMMON] unsigned char 
 10279 ;;  row             1   13[COMMON] unsigned char 
 10280 ;;  value           1   10[COMMON] unsigned char 
 10281 ;;  at              1    9[COMMON] unsigned char 
 10282 ;; Return value:  Size  Location     Type
 10283 ;;                  1    wreg      void 
 10284 ;; Registers used:
 10285 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 10286 ;; Tracked objects:
 10287 ;;		On entry : 0/0
 10288 ;;		On exit  : 0/0
 10289 ;;		Unchanged: 0/0
 10290 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 10291 ;;      Params:         2       0       0       0       0
 10292 ;;      Locals:         5       0       0       0       0
 10293 ;;      Temps:          3       0       0       0       0
 10294 ;;      Totals:        10       0       0       0       0
 10295 ;;Total ram usage:       10 bytes
 10296 ;; Hardware stack levels used:    1
 10297 ;; Hardware stack levels required when called:    1
 10298 ;; This function calls:
 10299 ;;		_SPI1_write
 10300 ;;		_reverse
 10301 ;; This function is called by:
 10302 ;;		_max7219_init1
 10303 ;;		_hal_print_MATRIX_MATRIX7219
 10304 ;; This function uses a non-reentrant model
 10305 ;;
 10306                           
 10307                           
 10308                           ;psect for function _Write_Matrix
 10309  1107                     _Write_Matrix:	
 10310                           
 10311                           ;incstack = 0
 10312                           ; Regs used in _Write_Matrix: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 10313                           ;Write_Matrix@matrix stored from wreg
 10314  1107  00FB               	movwf	Write_Matrix@matrix
 10315                           
 10316                           ;max7219.h: 60: RA2 = 0;
 10317  1108  1283               	bcf	3,5	;RP0=0, select bank0
 10318  1109  1303               	bcf	3,6	;RP1=0, select bank0
 10319  110A  1105               	bcf	5,2	;volatile
 10320                           
 10321                           ;max7219.h: 62: uint8_t at;
 10322                           ;max7219.h: 63: uint8_t value;
 10323                           ;max7219.h: 64: for(uint8_t row = 0; row < (16/8); row++)
 10324  110B  01FD               	clrf	Write_Matrix@row
 10325  110C  3002               	movlw	2
 10326  110D  027D               	subwf	Write_Matrix@row,w
 10327  110E  1803               	btfsc	3,0
 10328  110F  2961               	goto	l115
 10329  1110                     l3750:	
 10330                           
 10331                           ;max7219.h: 65: {
 10332                           ;max7219.h: 66: for(uint8_t col = 0; col < (8/8); col++)
 10333  1110  01FC               	clrf	Write_Matrix@col
 10334  1111  087C               	movf	Write_Matrix@col,w
 10335  1112  1D03               	btfss	3,2
 10336  1113  2959               	goto	l3778
 10337  1114                     l3756:	
 10338                           
 10339                           ;max7219.h: 67: {
 10340                           ;max7219.h: 68: at = column;
 10341  1114  0875               	movf	Write_Matrix@column,w
 10342  1115  00F6               	movwf	??_Write_Matrix
 10343  1116  0876               	movf	??_Write_Matrix,w
 10344  1117  00F9               	movwf	Write_Matrix@at
 10345                           
 10346                           ;max7219.h: 69: value = matrix->data[(16/8) - 1 - row][(8/8) - 1 - col];
 10347  1118  037D               	decf	Write_Matrix@row,w
 10348  1119  3AFF               	xorlw	255
 10349  111A  3E01               	addlw	1
 10350  111B  077B               	addwf	Write_Matrix@matrix,w
 10351  111C  00F6               	movwf	??_Write_Matrix
 10352  111D  037C               	decf	Write_Matrix@col,w
 10353  111E  3AFF               	xorlw	255
 10354  111F  0776               	addwf	??_Write_Matrix,w
 10355  1120  00F7               	movwf	??_Write_Matrix+1
 10356  1121  0877               	movf	??_Write_Matrix+1,w
 10357  1122  0084               	movwf	4
 10358  1123  1383               	bcf	3,7	;select IRP bank0
 10359  1124  0800               	movf	0,w
 10360  1125  00F8               	movwf	??_Write_Matrix+2
 10361  1126  0878               	movf	??_Write_Matrix+2,w
 10362  1127  00FA               	movwf	Write_Matrix@value
 10363                           
 10364                           ;max7219.h: 70: if(option == 1)
 10365  1128  0374               	decf	Write_Matrix@option,w
 10366  1129  1D03               	btfss	3,2
 10367  112A  2946               	goto	l3770
 10368                           
 10369                           ;max7219.h: 71: {
 10370                           ;max7219.h: 72: if(((16/8) - 1 - row)%2 == 1)
 10371  112B  037D               	decf	Write_Matrix@row,w
 10372  112C  3AFF               	xorlw	255
 10373  112D  3E01               	addlw	1
 10374  112E  3901               	andlw	1
 10375  112F  1903               	btfsc	3,2
 10376  1130  2942               	goto	l3768
 10377                           
 10378                           ;max7219.h: 73: {
 10379                           ;max7219.h: 74: at = 8 - 1 - column;
 10380  1131  0875               	movf	Write_Matrix@column,w
 10381  1132  3E01               	addlw	1
 10382  1133  3AFF               	xorlw	255
 10383  1134  3E01               	addlw	1
 10384  1135  3E08               	addlw	8
 10385  1136  00F6               	movwf	??_Write_Matrix
 10386  1137  0876               	movf	??_Write_Matrix,w
 10387  1138  00F9               	movwf	Write_Matrix@at
 10388                           
 10389                           ;max7219.h: 75: value = reverse(value);
 10390  1139  087A               	movf	Write_Matrix@value,w
 10391  113A  160A  158A  246B  160A  118A  	fcall	_reverse
 10392  113F  00F6               	movwf	??_Write_Matrix
 10393  1140  0876               	movf	??_Write_Matrix,w
 10394  1141  00FA               	movwf	Write_Matrix@value
 10395  1142                     l3768:	
 10396                           
 10397                           ;max7219.h: 76: }
 10398                           ;max7219.h: 77: at++;
 10399  1142  3001               	movlw	1
 10400  1143  00F6               	movwf	??_Write_Matrix
 10401  1144  0876               	movf	??_Write_Matrix,w
 10402  1145  07F9               	addwf	Write_Matrix@at,f
 10403  1146                     l3770:	
 10404                           
 10405                           ;max7219.h: 78: }
 10406                           ;max7219.h: 79: SPI1_write(at);
 10407  1146  0879               	movf	Write_Matrix@at,w
 10408  1147  160A  158A  2360  160A  118A  	fcall	_SPI1_write
 10409                           
 10410                           ;max7219.h: 80: SPI1_write(value);
 10411  114C  087A               	movf	Write_Matrix@value,w
 10412  114D  160A  158A  2360  160A  118A  	fcall	_SPI1_write
 10413  1152  3001               	movlw	1
 10414  1153  00F6               	movwf	??_Write_Matrix
 10415  1154  0876               	movf	??_Write_Matrix,w
 10416  1155  07FC               	addwf	Write_Matrix@col,f
 10417  1156  087C               	movf	Write_Matrix@col,w
 10418  1157  1903               	btfsc	3,2
 10419  1158  2914               	goto	l3756
 10420  1159                     l3778:	
 10421  1159  3001               	movlw	1
 10422  115A  00F6               	movwf	??_Write_Matrix
 10423  115B  0876               	movf	??_Write_Matrix,w
 10424  115C  07FD               	addwf	Write_Matrix@row,f
 10425  115D  3002               	movlw	2
 10426  115E  027D               	subwf	Write_Matrix@row,w
 10427  115F  1C03               	skipc
 10428  1160  2910               	goto	l3750
 10429  1161                     l115:	
 10430                           
 10431                           ;max7219.h: 81: }
 10432                           ;max7219.h: 82: }
 10433                           ;max7219.h: 83: RA2 = 1;
 10434  1161  1283               	bcf	3,5	;RP0=0, select bank0
 10435  1162  1303               	bcf	3,6	;RP1=0, select bank0
 10436  1163  1505               	bsf	5,2	;volatile
 10437  1164  0008               	return
 10438  1165                     __end_of_Write_Matrix:	
 10439                           
 10440                           	psect	text40
 10441  1C6B                     __ptext40:	
 10442 ;; *************** function _reverse *****************
 10443 ;; Defined at:
 10444 ;;		line 70 in file "../bit_operator.h"
 10445 ;; Parameters:    Size  Location     Type
 10446 ;;  byte            1    wreg     unsigned char 
 10447 ;; Auto vars:     Size  Location     Type
 10448 ;;  byte            1    1[COMMON] unsigned char 
 10449 ;;  temp            1    3[COMMON] PTR struct .
 10450 ;;		 -> reverse@byte(1), 
 10451 ;;  res             1    2[COMMON] struct .
 10452 ;; Return value:  Size  Location     Type
 10453 ;;                  1    wreg      unsigned char 
 10454 ;; Registers used:
 10455 ;;		wreg, fsr0l, fsr0h
 10456 ;; Tracked objects:
 10457 ;;		On entry : 0/0
 10458 ;;		On exit  : 0/0
 10459 ;;		Unchanged: 0/0
 10460 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 10461 ;;      Params:         0       0       0       0       0
 10462 ;;      Locals:         3       0       0       0       0
 10463 ;;      Temps:          1       0       0       0       0
 10464 ;;      Totals:         4       0       0       0       0
 10465 ;;Total ram usage:        4 bytes
 10466 ;; Hardware stack levels used:    1
 10467 ;; This function calls:
 10468 ;;		Nothing
 10469 ;; This function is called by:
 10470 ;;		_Write_Matrix
 10471 ;; This function uses a non-reentrant model
 10472 ;;
 10473                           
 10474                           
 10475                           ;psect for function _reverse
 10476  1C6B                     _reverse:	
 10477                           
 10478                           ;incstack = 0
 10479                           ; Regs used in _reverse: [wregfsr0]
 10480                           ;reverse@byte stored from wreg
 10481  1C6B  00F1               	movwf	reverse@byte
 10482                           
 10483                           ;bit_operator.h: 72: t_byte *temp = (t_byte *)&byte;
 10484  1C6C  3071               	movlw	(low (reverse@byte| 0))& (0+255)
 10485  1C6D  00F0               	movwf	??_reverse
 10486  1C6E  0870               	movf	??_reverse,w
 10487  1C6F  00F3               	movwf	reverse@temp
 10488                           
 10489                           ;bit_operator.h: 73: t_byte res;
 10490                           ;bit_operator.h: 75: res.b0 = temp->b7;
 10491  1C70  0873               	movf	reverse@temp,w
 10492  1C71  0084               	movwf	4
 10493  1C72  1072               	bcf	reverse@res,0
 10494  1C73  1B80               	btfsc	0,7
 10495  1C74  1472               	bsf	reverse@res,0
 10496                           
 10497                           ;bit_operator.h: 76: res.b1 = temp->b6;
 10498  1C75  0873               	movf	reverse@temp,w
 10499  1C76  0084               	movwf	4
 10500  1C77  10F2               	bcf	reverse@res,1
 10501  1C78  1B00               	btfsc	0,6
 10502  1C79  14F2               	bsf	reverse@res,1
 10503                           
 10504                           ;bit_operator.h: 77: res.b2 = temp->b5;
 10505  1C7A  0873               	movf	reverse@temp,w
 10506  1C7B  0084               	movwf	4
 10507  1C7C  1172               	bcf	reverse@res,2
 10508  1C7D  1A80               	btfsc	0,5
 10509  1C7E  1572               	bsf	reverse@res,2
 10510                           
 10511                           ;bit_operator.h: 78: res.b3 = temp->b4;
 10512  1C7F  0873               	movf	reverse@temp,w
 10513  1C80  0084               	movwf	4
 10514  1C81  11F2               	bcf	reverse@res,3
 10515  1C82  1A00               	btfsc	0,4
 10516  1C83  15F2               	bsf	reverse@res,3
 10517                           
 10518                           ;bit_operator.h: 79: res.b4 = temp->b3;
 10519  1C84  0873               	movf	reverse@temp,w
 10520  1C85  0084               	movwf	4
 10521  1C86  1272               	bcf	reverse@res,4
 10522  1C87  1980               	btfsc	0,3
 10523  1C88  1672               	bsf	reverse@res,4
 10524                           
 10525                           ;bit_operator.h: 80: res.b5 = temp->b2;
 10526  1C89  0873               	movf	reverse@temp,w
 10527  1C8A  0084               	movwf	4
 10528  1C8B  12F2               	bcf	reverse@res,5
 10529  1C8C  1900               	btfsc	0,2
 10530  1C8D  16F2               	bsf	reverse@res,5
 10531                           
 10532                           ;bit_operator.h: 81: res.b6 = temp->b1;
 10533  1C8E  0873               	movf	reverse@temp,w
 10534  1C8F  0084               	movwf	4
 10535  1C90  1372               	bcf	reverse@res,6
 10536  1C91  1880               	btfsc	0,1
 10537  1C92  1772               	bsf	reverse@res,6
 10538                           
 10539                           ;bit_operator.h: 82: res.b7 = temp->b0;
 10540  1C93  0873               	movf	reverse@temp,w
 10541  1C94  0084               	movwf	4
 10542  1C95  13F2               	bcf	reverse@res,7
 10543  1C96  1800               	btfsc	0,0
 10544  1C97  17F2               	bsf	reverse@res,7
 10545                           
 10546                           ;bit_operator.h: 84: return *((uint8_t *)&res);
 10547  1C98  0872               	movf	reverse@res,w
 10548  1C99  0008               	return
 10549  1C9A                     __end_of_reverse:	
 10550                           
 10551                           	psect	text41
 10552  1B60                     __ptext41:	
 10553 ;; *************** function _SPI1_write *****************
 10554 ;; Defined at:
 10555 ;;		line 26 in file "../max7219.h"
 10556 ;; Parameters:    Size  Location     Type
 10557 ;;  data            1    wreg     unsigned char 
 10558 ;; Auto vars:     Size  Location     Type
 10559 ;;  data            1    1[COMMON] unsigned char 
 10560 ;;  i               1    3[COMMON] unsigned char 
 10561 ;;  mask            1    2[COMMON] unsigned char 
 10562 ;; Return value:  Size  Location     Type
 10563 ;;                  1    wreg      void 
 10564 ;; Registers used:
 10565 ;;		wreg, status,2, status,0
 10566 ;; Tracked objects:
 10567 ;;		On entry : 0/0
 10568 ;;		On exit  : 0/0
 10569 ;;		Unchanged: 0/0
 10570 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 10571 ;;      Params:         0       0       0       0       0
 10572 ;;      Locals:         3       0       0       0       0
 10573 ;;      Temps:          1       0       0       0       0
 10574 ;;      Totals:         4       0       0       0       0
 10575 ;;Total ram usage:        4 bytes
 10576 ;; Hardware stack levels used:    1
 10577 ;; This function calls:
 10578 ;;		Nothing
 10579 ;; This function is called by:
 10580 ;;		_Write_Matrix
 10581 ;; This function uses a non-reentrant model
 10582 ;;
 10583                           
 10584                           
 10585                           ;psect for function _SPI1_write
 10586  1B60                     _SPI1_write:	
 10587                           
 10588                           ;incstack = 0
 10589                           ; Regs used in _SPI1_write: [wreg+status,2+status,0]
 10590                           ;SPI1_write@data stored from wreg
 10591  1B60  00F1               	movwf	SPI1_write@data
 10592                           
 10593                           ;max7219.h: 28: uint8_t mask = 0b10000000;
 10594  1B61  3080               	movlw	128
 10595  1B62  00F0               	movwf	??_SPI1_write
 10596  1B63  0870               	movf	??_SPI1_write,w
 10597  1B64  00F2               	movwf	SPI1_write@mask
 10598                           
 10599                           ;max7219.h: 29: for(uint8_t i = 0; i < 8; i++)
 10600  1B65  01F3               	clrf	SPI1_write@i
 10601  1B66                     L20:	
 10602  1B66  3008               	movlw	8
 10603  1B67  0273               	subwf	SPI1_write@i,w
 10604  1B68  1803               	btfsc	3,0
 10605  1B69  0008               	return
 10606                           
 10607                           ;max7219.h: 30: {
 10608                           ;max7219.h: 31: if((data & mask) > 0)
 10609  1B6A  0871               	movf	SPI1_write@data,w
 10610  1B6B  0572               	andwf	SPI1_write@mask,w
 10611  1B6C  1903               	btfsc	3,2
 10612  1B6D  2B72               	goto	l109
 10613                           
 10614                           ;max7219.h: 32: {
 10615                           ;max7219.h: 33: RA3 = 1;
 10616  1B6E  1283               	bcf	3,5	;RP0=0, select bank0
 10617  1B6F  1303               	bcf	3,6	;RP1=0, select bank0
 10618  1B70  1585               	bsf	5,3	;volatile
 10619                           
 10620                           ;max7219.h: 35: }
 10621  1B71  2B75               	goto	l3672
 10622  1B72                     l109:	
 10623                           
 10624                           ;max7219.h: 36: else
 10625                           ;max7219.h: 37: {
 10626                           ;max7219.h: 38: RA3 = 0;
 10627  1B72  1283               	bcf	3,5	;RP0=0, select bank0
 10628  1B73  1303               	bcf	3,6	;RP1=0, select bank0
 10629  1B74  1185               	bcf	5,3	;volatile
 10630  1B75                     l3672:	
 10631                           
 10632                           ;max7219.h: 40: }
 10633                           ;max7219.h: 41: mask >>= 1;
 10634  1B75  1003               	clrc
 10635  1B76  0CF2               	rrf	SPI1_write@mask,f
 10636                           
 10637                           ;max7219.h: 42: RA1 = 1;
 10638  1B77  1485               	bsf	5,1	;volatile
 10639                           
 10640                           ;max7219.h: 43: _delay((unsigned long)((10)*(20000000/4000000.0)));
 10641  1B78  3010               	movlw	16
 10642  1B79  00F0               	movwf	??_SPI1_write
 10643  1B7A                     u7357:	
 10644  1B7A  0BF0               	decfsz	??_SPI1_write,f
 10645  1B7B  2B7A               	goto	u7357
 10646  1B7C  0000               	nop
 10647                           
 10648                           ;max7219.h: 44: RA1 = 0;
 10649  1B7D  1283               	bcf	3,5	;RP0=0, select bank0
 10650  1B7E  1303               	bcf	3,6	;RP1=0, select bank0
 10651  1B7F  1085               	bcf	5,1	;volatile
 10652                           
 10653                           ;max7219.h: 45: _delay((unsigned long)((10)*(20000000/4000000.0)));
 10654  1B80  3010               	movlw	16
 10655  1B81  00F0               	movwf	??_SPI1_write
 10656  1B82                     u7367:	
 10657  1B82  0BF0               	decfsz	??_SPI1_write,f
 10658  1B83  2B82               	goto	u7367
 10659  1B84  0000               	nop
 10660  1B85  3001               	movlw	1
 10661  1B86  00F0               	movwf	??_SPI1_write
 10662  1B87  0870               	movf	??_SPI1_write,w
 10663  1B88  07F3               	addwf	SPI1_write@i,f
 10664  1B89  2B66               	goto	L20
 10665  1B8A                     __end_of_SPI1_write:	
 10666                           
 10667                           	psect	text42
 10668  1DEC                     __ptext42:	
 10669 ;; *************** function _hal_MATRIX16x8_to_MATRIX_MATRIX7219 *****************
 10670 ;; Defined at:
 10671 ;;		line 6 in file "../hal_max7219.h"
 10672 ;; Parameters:    Size  Location     Type
 10673 ;;  matrix16x8      1    wreg     PTR const struct .
 10674 ;;		 -> g_matrix16x8(16), 
 10675 ;;  matrix7219      1   13[BANK0 ] PTR struct .
 10676 ;;		 -> hal_print_MATRIX16x8@matrix7219(16), 
 10677 ;; Auto vars:     Size  Location     Type
 10678 ;;  matrix16x8      1   19[BANK0 ] PTR const struct .
 10679 ;;		 -> g_matrix16x8(16), 
 10680 ;;  row             1   21[BANK0 ] unsigned char 
 10681 ;;  col             1   20[BANK0 ] unsigned char 
 10682 ;; Return value:  Size  Location     Type
 10683 ;;                  1    wreg      void 
 10684 ;; Registers used:
 10685 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
 10686 ;; Tracked objects:
 10687 ;;		On entry : 0/0
 10688 ;;		On exit  : 0/0
 10689 ;;		Unchanged: 0/0
 10690 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 10691 ;;      Params:         0       1       0       0       0
 10692 ;;      Locals:         0       3       0       0       0
 10693 ;;      Temps:          0       5       0       0       0
 10694 ;;      Totals:         0       9       0       0       0
 10695 ;;Total ram usage:        9 bytes
 10696 ;; Hardware stack levels used:    1
 10697 ;; Hardware stack levels required when called:    3
 10698 ;; This function calls:
 10699 ;;		_get_matrix_bit
 10700 ;;		_set_matrix_matrix7219_bit
 10701 ;; This function is called by:
 10702 ;;		_hal_print_MATRIX16x8
 10703 ;; This function uses a non-reentrant model
 10704 ;;
 10705                           
 10706                           
 10707                           ;psect for function _hal_MATRIX16x8_to_MATRIX_MATRIX7219
 10708  1DEC                     _hal_MATRIX16x8_to_MATRIX_MATRIX7219:	
 10709                           
 10710                           ;incstack = 0
 10711                           ; Regs used in _hal_MATRIX16x8_to_MATRIX_MATRIX7219: [wreg-fsr0h+status,2+status,0+btemp
      +                          +1+pclath+cstack]
 10712                           ;hal_MATRIX16x8_to_MATRIX_MATRIX7219@matrix16x8 stored from wreg
 10713  1DEC  1283               	bcf	3,5	;RP0=0, select bank0
 10714  1DED  1303               	bcf	3,6	;RP1=0, select bank0
 10715  1DEE  00B3               	movwf	hal_MATRIX16x8_to_MATRIX_MATRIX7219@matrix16x8
 10716                           
 10717                           ;hal_max7219.h: 8: for(uint8_t col = 0; col < 8; col++)
 10718  1DEF  01B4               	clrf	hal_MATRIX16x8_to_MATRIX_MATRIX7219@col
 10719  1DF0                     L21:	
 10720  1DF0  3008               	movlw	8
 10721  1DF1  0234               	subwf	hal_MATRIX16x8_to_MATRIX_MATRIX7219@col,w
 10722  1DF2  1803               	btfsc	3,0
 10723  1DF3  0008               	return
 10724                           
 10725                           ;hal_max7219.h: 9: {
 10726                           ;hal_max7219.h: 10: for(uint8_t row = 0; row < 16; row++)
 10727  1DF4  01B5               	clrf	hal_MATRIX16x8_to_MATRIX_MATRIX7219@row
 10728  1DF5  3010               	movlw	16
 10729  1DF6  0235               	subwf	hal_MATRIX16x8_to_MATRIX_MATRIX7219@row,w
 10730  1DF7  1803               	btfsc	3,0
 10731  1DF8  2E27               	goto	l3992
 10732  1DF9                     l3986:	
 10733                           
 10734                           ;hal_max7219.h: 11: {
 10735                           ;hal_max7219.h: 12: set_matrix_matrix7219_bit(matrix7219, row, col, get_matrix_bit(matri
      +                          x16x8->row, row, col));
 10736  1DF9  0835               	movf	hal_MATRIX16x8_to_MATRIX_MATRIX7219@row,w
 10737  1DFA  00AE               	movwf	??_hal_MATRIX16x8_to_MATRIX_MATRIX7219
 10738  1DFB  082E               	movf	??_hal_MATRIX16x8_to_MATRIX_MATRIX7219,w
 10739  1DFC  00A7               	movwf	set_matrix_matrix7219_bit@matrix_row
 10740  1DFD  0834               	movf	hal_MATRIX16x8_to_MATRIX_MATRIX7219@col,w
 10741  1DFE  00AF               	movwf	??_hal_MATRIX16x8_to_MATRIX_MATRIX7219+1
 10742  1DFF  082F               	movf	??_hal_MATRIX16x8_to_MATRIX_MATRIX7219+1,w
 10743  1E00  00A8               	movwf	set_matrix_matrix7219_bit@matrix_col
 10744  1E01  0833               	movf	hal_MATRIX16x8_to_MATRIX_MATRIX7219@matrix16x8,w
 10745  1E02  00F7               	movwf	get_matrix_bit@byte
 10746  1E03  3000               	movlw	0
 10747  1E04  00F8               	movwf	get_matrix_bit@byte+1
 10748  1E05  0835               	movf	hal_MATRIX16x8_to_MATRIX_MATRIX7219@row,w
 10749  1E06  00B0               	movwf	??_hal_MATRIX16x8_to_MATRIX_MATRIX7219+2
 10750  1E07  0830               	movf	??_hal_MATRIX16x8_to_MATRIX_MATRIX7219+2,w
 10751  1E08  00F9               	movwf	get_matrix_bit@row
 10752  1E09  0834               	movf	hal_MATRIX16x8_to_MATRIX_MATRIX7219@col,w
 10753  1E0A  00B1               	movwf	??_hal_MATRIX16x8_to_MATRIX_MATRIX7219+3
 10754  1E0B  0831               	movf	??_hal_MATRIX16x8_to_MATRIX_MATRIX7219+3,w
 10755  1E0C  00FA               	movwf	get_matrix_bit@col
 10756  1E0D  160A  158A  2198  160A  158A  	fcall	_get_matrix_bit
 10757  1E12  1283               	bcf	3,5	;RP0=0, select bank0
 10758  1E13  1303               	bcf	3,6	;RP1=0, select bank0
 10759  1E14  00B2               	movwf	??_hal_MATRIX16x8_to_MATRIX_MATRIX7219+4
 10760  1E15  0832               	movf	??_hal_MATRIX16x8_to_MATRIX_MATRIX7219+4,w
 10761  1E16  00A9               	movwf	set_matrix_matrix7219_bit@value
 10762  1E17  082D               	movf	hal_MATRIX16x8_to_MATRIX_MATRIX7219@matrix7219,w
 10763  1E18  160A  158A  230E  160A  158A  	fcall	_set_matrix_matrix7219_bit
 10764  1E1D  3001               	movlw	1
 10765  1E1E  1283               	bcf	3,5	;RP0=0, select bank0
 10766  1E1F  1303               	bcf	3,6	;RP1=0, select bank0
 10767  1E20  00AE               	movwf	??_hal_MATRIX16x8_to_MATRIX_MATRIX7219
 10768  1E21  082E               	movf	??_hal_MATRIX16x8_to_MATRIX_MATRIX7219,w
 10769  1E22  07B5               	addwf	hal_MATRIX16x8_to_MATRIX_MATRIX7219@row,f
 10770  1E23  3010               	movlw	16
 10771  1E24  0235               	subwf	hal_MATRIX16x8_to_MATRIX_MATRIX7219@row,w
 10772  1E25  1C03               	skipc
 10773  1E26  2DF9               	goto	l3986
 10774  1E27                     l3992:	
 10775  1E27  3001               	movlw	1
 10776  1E28  00AE               	movwf	??_hal_MATRIX16x8_to_MATRIX_MATRIX7219
 10777  1E29  082E               	movf	??_hal_MATRIX16x8_to_MATRIX_MATRIX7219,w
 10778  1E2A  07B4               	addwf	hal_MATRIX16x8_to_MATRIX_MATRIX7219@col,f
 10779  1E2B  2DF0               	goto	L21
 10780  1E2C                     __end_of_hal_MATRIX16x8_to_MATRIX_MATRIX7219:	
 10781                           
 10782                           	psect	text43
 10783  1B0E                     __ptext43:	
 10784 ;; *************** function _set_matrix_matrix7219_bit *****************
 10785 ;; Defined at:
 10786 ;;		line 62 in file "../matrix_matrix7219.h"
 10787 ;; Parameters:    Size  Location     Type
 10788 ;;  matrix_matri    1    wreg     PTR struct .
 10789 ;;		 -> hal_print_MATRIX16x8@matrix7219(16), 
 10790 ;;  matrix_row      1    7[BANK0 ] unsigned char 
 10791 ;;  matrix_col      1    8[BANK0 ] unsigned char 
 10792 ;;  value           1    9[BANK0 ] unsigned char 
 10793 ;; Auto vars:     Size  Location     Type
 10794 ;;  matrix_matri    1   13[COMMON] PTR struct .
 10795 ;;		 -> hal_print_MATRIX16x8@matrix7219(16), 
 10796 ;;  matrix          1   12[COMMON] PTR struct .
 10797 ;;		 -> matrix7219.data(16), hal_print_MATRIX16x8@matrix7219(16), 
 10798 ;; Return value:  Size  Location     Type
 10799 ;;                  1    wreg      void 
 10800 ;; Registers used:
 10801 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 10802 ;; Tracked objects:
 10803 ;;		On entry : 0/0
 10804 ;;		On exit  : 0/0
 10805 ;;		Unchanged: 0/0
 10806 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 10807 ;;      Params:         0       3       0       0       0
 10808 ;;      Locals:         2       0       0       0       0
 10809 ;;      Temps:          0       3       0       0       0
 10810 ;;      Totals:         2       6       0       0       0
 10811 ;;Total ram usage:        8 bytes
 10812 ;; Hardware stack levels used:    1
 10813 ;; Hardware stack levels required when called:    2
 10814 ;; This function calls:
 10815 ;;		_get_matrix7219
 10816 ;;		_set_matrix7219_bit
 10817 ;; This function is called by:
 10818 ;;		_hal_MATRIX16x8_to_MATRIX_MATRIX7219
 10819 ;; This function uses a non-reentrant model
 10820 ;;
 10821                           
 10822                           
 10823                           ;psect for function _set_matrix_matrix7219_bit
 10824  1B0E                     _set_matrix_matrix7219_bit:	
 10825                           
 10826                           ;incstack = 0
 10827                           ; Regs used in _set_matrix_matrix7219_bit: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 10828                           ;set_matrix_matrix7219_bit@matrix_matrix stored from wreg
 10829  1B0E  00FD               	movwf	set_matrix_matrix7219_bit@matrix_matrix
 10830                           
 10831                           ;matrix_matrix7219.h: 64: MATRIX7219* matrix = get_matrix7219(matrix_matrix, matrix_row,
      +                           matrix_col);
 10832  1B0F  1283               	bcf	3,5	;RP0=0, select bank0
 10833  1B10  1303               	bcf	3,6	;RP1=0, select bank0
 10834  1B11  0827               	movf	set_matrix_matrix7219_bit@matrix_row,w
 10835  1B12  00AA               	movwf	??_set_matrix_matrix7219_bit
 10836  1B13  082A               	movf	??_set_matrix_matrix7219_bit,w
 10837  1B14  00F9               	movwf	get_matrix7219@matrix_row
 10838  1B15  0828               	movf	set_matrix_matrix7219_bit@matrix_col,w
 10839  1B16  00AB               	movwf	??_set_matrix_matrix7219_bit+1
 10840  1B17  082B               	movf	??_set_matrix_matrix7219_bit+1,w
 10841  1B18  00FA               	movwf	get_matrix7219@matrix_col
 10842  1B19  087D               	movf	set_matrix_matrix7219_bit@matrix_matrix,w
 10843  1B1A  160A  158A  25AD  160A  158A  	fcall	_get_matrix7219
 10844  1B1F  1283               	bcf	3,5	;RP0=0, select bank0
 10845  1B20  1303               	bcf	3,6	;RP1=0, select bank0
 10846  1B21  00AC               	movwf	??_set_matrix_matrix7219_bit+2
 10847  1B22  082C               	movf	??_set_matrix_matrix7219_bit+2,w
 10848  1B23  00FC               	movwf	set_matrix_matrix7219_bit@matrix
 10849                           
 10850                           ;matrix_matrix7219.h: 66: set_matrix7219_bit(matrix, matrix_row%8, matrix_col%8, value);
 10851  1B24  0827               	movf	set_matrix_matrix7219_bit@matrix_row,w
 10852  1B25  3907               	andlw	7
 10853  1B26  00AA               	movwf	??_set_matrix_matrix7219_bit
 10854  1B27  082A               	movf	??_set_matrix_matrix7219_bit,w
 10855  1B28  00F0               	movwf	set_matrix7219_bit@row
 10856  1B29  0828               	movf	set_matrix_matrix7219_bit@matrix_col,w
 10857  1B2A  3907               	andlw	7
 10858  1B2B  00AB               	movwf	??_set_matrix_matrix7219_bit+1
 10859  1B2C  082B               	movf	??_set_matrix_matrix7219_bit+1,w
 10860  1B2D  00F1               	movwf	set_matrix7219_bit@col
 10861  1B2E  0829               	movf	set_matrix_matrix7219_bit@value,w
 10862  1B2F  00AC               	movwf	??_set_matrix_matrix7219_bit+2
 10863  1B30  082C               	movf	??_set_matrix_matrix7219_bit+2,w
 10864  1B31  00F2               	movwf	set_matrix7219_bit@value
 10865  1B32  087C               	movf	set_matrix_matrix7219_bit@matrix,w
 10866  1B33  160A  158A  238A   	fcall	_set_matrix7219_bit
 10867  1B36  0008               	return
 10868  1B37                     __end_of_set_matrix_matrix7219_bit:	
 10869                           
 10870                           	psect	text44
 10871  1B8A                     __ptext44:	
 10872 ;; *************** function _set_matrix7219_bit *****************
 10873 ;; Defined at:
 10874 ;;		line 41 in file "../matrix_matrix7219.h"
 10875 ;; Parameters:    Size  Location     Type
 10876 ;;  matrix          1    wreg     PTR struct .
 10877 ;;		 -> matrix7219.data(16), hal_print_MATRIX16x8@matrix7219(16), 
 10878 ;;  row             1    0[COMMON] unsigned char 
 10879 ;;  col             1    1[COMMON] unsigned char 
 10880 ;;  value           1    2[COMMON] unsigned char 
 10881 ;; Auto vars:     Size  Location     Type
 10882 ;;  matrix          1    7[COMMON] PTR struct .
 10883 ;;		 -> matrix7219.data(16), hal_print_MATRIX16x8@matrix7219(16), 
 10884 ;;  mask            1    8[COMMON] unsigned char 
 10885 ;; Return value:  Size  Location     Type
 10886 ;;                  1    wreg      unsigned char 
 10887 ;; Registers used:
 10888 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 10889 ;; Tracked objects:
 10890 ;;		On entry : 0/0
 10891 ;;		On exit  : 0/0
 10892 ;;		Unchanged: 0/0
 10893 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 10894 ;;      Params:         3       0       0       0       0
 10895 ;;      Locals:         2       0       0       0       0
 10896 ;;      Temps:          4       0       0       0       0
 10897 ;;      Totals:         9       0       0       0       0
 10898 ;;Total ram usage:        9 bytes
 10899 ;; Hardware stack levels used:    1
 10900 ;; This function calls:
 10901 ;;		Nothing
 10902 ;; This function is called by:
 10903 ;;		_set_matrix_matrix7219_bit
 10904 ;; This function uses a non-reentrant model
 10905 ;;
 10906                           
 10907                           
 10908                           ;psect for function _set_matrix7219_bit
 10909  1B8A                     _set_matrix7219_bit:	
 10910                           
 10911                           ;incstack = 0
 10912                           ; Regs used in _set_matrix7219_bit: [wreg-fsr0h+status,2+status,0]
 10913                           ;set_matrix7219_bit@matrix stored from wreg
 10914  1B8A  00F7               	movwf	set_matrix7219_bit@matrix
 10915                           
 10916                           ;matrix_matrix7219.h: 43: uint8_t mask = 0x80 >> row;
 10917  1B8B  0A70               	incf	set_matrix7219_bit@row,w
 10918  1B8C  00F3               	movwf	??_set_matrix7219_bit
 10919  1B8D  3080               	movlw	128
 10920  1B8E  00F4               	movwf	??_set_matrix7219_bit+1
 10921  1B8F  3000               	movlw	0
 10922  1B90  00F5               	movwf	??_set_matrix7219_bit+2
 10923  1B91  2B95               	goto	u3614
 10924  1B92                     u3615:	
 10925  1B92  0D75               	rlf	??_set_matrix7219_bit+2,w
 10926  1B93  0CF5               	rrf	??_set_matrix7219_bit+2,f
 10927  1B94  0CF4               	rrf	??_set_matrix7219_bit+1,f
 10928  1B95                     u3614:	
 10929  1B95  0BF3               	decfsz	??_set_matrix7219_bit,f
 10930  1B96  2B92               	goto	u3615
 10931  1B97  0874               	movf	??_set_matrix7219_bit+1,w
 10932  1B98  00F6               	movwf	??_set_matrix7219_bit+3
 10933  1B99  0876               	movf	??_set_matrix7219_bit+3,w
 10934  1B9A  00F8               	movwf	set_matrix7219_bit@mask
 10935                           
 10936                           ;matrix_matrix7219.h: 45: if(value > 0)
 10937  1B9B  0872               	movf	set_matrix7219_bit@value,w
 10938  1B9C  1903               	btfsc	3,2
 10939  1B9D  2BA9               	goto	l43
 10940                           
 10941                           ;matrix_matrix7219.h: 46: {
 10942                           ;matrix_matrix7219.h: 47: matrix->data[col] |= mask;
 10943  1B9E  0878               	movf	set_matrix7219_bit@mask,w
 10944  1B9F  00F3               	movwf	??_set_matrix7219_bit
 10945  1BA0  0871               	movf	set_matrix7219_bit@col,w
 10946  1BA1  0777               	addwf	set_matrix7219_bit@matrix,w
 10947  1BA2  00F4               	movwf	??_set_matrix7219_bit+1
 10948  1BA3  0874               	movf	??_set_matrix7219_bit+1,w
 10949  1BA4  0084               	movwf	4
 10950  1BA5  0873               	movf	??_set_matrix7219_bit,w
 10951  1BA6  1383               	bcf	3,7	;select IRP bank0
 10952  1BA7  0480               	iorwf	0,f
 10953                           
 10954                           ;matrix_matrix7219.h: 48: }
 10955  1BA8  0008               	return
 10956  1BA9                     l43:	
 10957                           
 10958                           ;matrix_matrix7219.h: 49: else
 10959                           ;matrix_matrix7219.h: 50: {
 10960                           ;matrix_matrix7219.h: 51: mask = ~mask;
 10961  1BA9  09F8               	comf	set_matrix7219_bit@mask,f
 10962                           
 10963                           ;matrix_matrix7219.h: 52: matrix->data[col] &= mask;
 10964  1BAA  0878               	movf	set_matrix7219_bit@mask,w
 10965  1BAB  00F3               	movwf	??_set_matrix7219_bit
 10966  1BAC  0871               	movf	set_matrix7219_bit@col,w
 10967  1BAD  0777               	addwf	set_matrix7219_bit@matrix,w
 10968  1BAE  00F4               	movwf	??_set_matrix7219_bit+1
 10969  1BAF  0874               	movf	??_set_matrix7219_bit+1,w
 10970  1BB0  0084               	movwf	4
 10971  1BB1  0873               	movf	??_set_matrix7219_bit,w
 10972  1BB2  1383               	bcf	3,7	;select IRP bank0
 10973  1BB3  0580               	andwf	0,f
 10974  1BB4  0008               	return
 10975  1BB5                     __end_of_set_matrix7219_bit:	
 10976                           
 10977                           	psect	text45
 10978  1DAD                     __ptext45:	
 10979 ;; *************** function _get_matrix7219 *****************
 10980 ;; Defined at:
 10981 ;;		line 23 in file "../matrix_matrix7219.h"
 10982 ;; Parameters:    Size  Location     Type
 10983 ;;  matrix_matri    1    wreg     PTR const struct .
 10984 ;;		 -> hal_print_MATRIX16x8@matrix7219(16), 
 10985 ;;  matrix_row      1    9[COMMON] unsigned char 
 10986 ;;  matrix_col      1   10[COMMON] unsigned char 
 10987 ;; Auto vars:     Size  Location     Type
 10988 ;;  matrix_matri    1   11[COMMON] PTR const struct .
 10989 ;;		 -> hal_print_MATRIX16x8@matrix7219(16), 
 10990 ;; Return value:  Size  Location     Type
 10991 ;;                  1    wreg      PTR struct .
 10992 ;; Registers used:
 10993 ;;		wreg, status,2, status,0, pclath, cstack
 10994 ;; Tracked objects:
 10995 ;;		On entry : 0/0
 10996 ;;		On exit  : 0/0
 10997 ;;		Unchanged: 0/0
 10998 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 10999 ;;      Params:         2       0       0       0       0
 11000 ;;      Locals:         1       0       0       0       0
 11001 ;;      Temps:          0       7       0       0       0
 11002 ;;      Totals:         3       7       0       0       0
 11003 ;;Total ram usage:       10 bytes
 11004 ;; Hardware stack levels used:    1
 11005 ;; Hardware stack levels required when called:    1
 11006 ;; This function calls:
 11007 ;;		___awdiv
 11008 ;; This function is called by:
 11009 ;;		_set_matrix_matrix7219_bit
 11010 ;;		_get_matrix_matrix7219_bit
 11011 ;; This function uses a non-reentrant model
 11012 ;;
 11013                           
 11014                           
 11015                           ;psect for function _get_matrix7219
 11016  1DAD                     _get_matrix7219:	
 11017                           
 11018                           ;incstack = 0
 11019                           ; Regs used in _get_matrix7219: [wreg+status,2+status,0+pclath+cstack]
 11020                           ;get_matrix7219@matrix_matrix stored from wreg
 11021  1DAD  00FB               	movwf	get_matrix7219@matrix_matrix
 11022                           
 11023                           ;matrix_matrix7219.h: 25: return &matrix_matrix->data[matrix_row/8][matrix_col/8];
 11024  1DAE  3008               	movlw	8
 11025  1DAF  00F0               	movwf	___awdiv@divisor
 11026  1DB0  3000               	movlw	0
 11027  1DB1  00F1               	movwf	___awdiv@divisor+1
 11028  1DB2  0879               	movf	get_matrix7219@matrix_row,w
 11029  1DB3  1283               	bcf	3,5	;RP0=0, select bank0
 11030  1DB4  1303               	bcf	3,6	;RP1=0, select bank0
 11031  1DB5  00A0               	movwf	??_get_matrix7219
 11032  1DB6  01A1               	clrf	??_get_matrix7219+1
 11033  1DB7  0820               	movf	??_get_matrix7219,w
 11034  1DB8  00F2               	movwf	___awdiv@dividend
 11035  1DB9  0821               	movf	??_get_matrix7219+1,w
 11036  1DBA  00F3               	movwf	___awdiv@dividend+1
 11037  1DBB  160A  158A  27A7  160A  158A  	fcall	___awdiv
 11038  1DC0  0870               	movf	?___awdiv,w
 11039  1DC1  1283               	bcf	3,5	;RP0=0, select bank0
 11040  1DC2  1303               	bcf	3,6	;RP1=0, select bank0
 11041  1DC3  00A2               	movwf	??_get_matrix7219+2
 11042  1DC4  3002               	movlw	2
 11043  1DC5                     u3595:	
 11044  1DC5  1003               	clrc
 11045  1DC6  0DA2               	rlf	??_get_matrix7219+2,f
 11046  1DC7  3EFF               	addlw	-1
 11047  1DC8  1D03               	skipz
 11048  1DC9  2DC5               	goto	u3595
 11049  1DCA  1003               	clrc
 11050  1DCB  0D22               	rlf	??_get_matrix7219+2,w
 11051  1DCC  077B               	addwf	get_matrix7219@matrix_matrix,w
 11052  1DCD  00A3               	movwf	??_get_matrix7219+3
 11053  1DCE  3008               	movlw	8
 11054  1DCF  00F0               	movwf	___awdiv@divisor
 11055  1DD0  3000               	movlw	0
 11056  1DD1  00F1               	movwf	___awdiv@divisor+1
 11057  1DD2  087A               	movf	get_matrix7219@matrix_col,w
 11058  1DD3  00A4               	movwf	??_get_matrix7219+4
 11059  1DD4  01A5               	clrf	??_get_matrix7219+5
 11060  1DD5  0824               	movf	??_get_matrix7219+4,w
 11061  1DD6  00F2               	movwf	___awdiv@dividend
 11062  1DD7  0825               	movf	??_get_matrix7219+5,w
 11063  1DD8  00F3               	movwf	___awdiv@dividend+1
 11064  1DD9  160A  158A  27A7  160A  158A  	fcall	___awdiv
 11065  1DDE  0870               	movf	?___awdiv,w
 11066  1DDF  1283               	bcf	3,5	;RP0=0, select bank0
 11067  1DE0  1303               	bcf	3,6	;RP1=0, select bank0
 11068  1DE1  00A6               	movwf	??_get_matrix7219+6
 11069  1DE2  3002               	movlw	2
 11070  1DE3                     u3605:	
 11071  1DE3  1003               	clrc
 11072  1DE4  0DA6               	rlf	??_get_matrix7219+6,f
 11073  1DE5  3EFF               	addlw	-1
 11074  1DE6  1D03               	skipz
 11075  1DE7  2DE3               	goto	u3605
 11076  1DE8  1003               	clrc
 11077  1DE9  0D26               	rlf	??_get_matrix7219+6,w
 11078  1DEA  0723               	addwf	??_get_matrix7219+3,w
 11079  1DEB  0008               	return
 11080  1DEC                     __end_of_get_matrix7219:	
 11081                           
 11082                           	psect	text46
 11083  1FA7                     __ptext46:	
 11084 ;; *************** function ___awdiv *****************
 11085 ;; Defined at:
 11086 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\awdiv.c"
 11087 ;; Parameters:    Size  Location     Type
 11088 ;;  divisor         2    0[COMMON] int 
 11089 ;;  dividend        2    2[COMMON] int 
 11090 ;; Auto vars:     Size  Location     Type
 11091 ;;  quotient        2    7[COMMON] int 
 11092 ;;  sign            1    6[COMMON] unsigned char 
 11093 ;;  counter         1    5[COMMON] unsigned char 
 11094 ;; Return value:  Size  Location     Type
 11095 ;;                  2    0[COMMON] int 
 11096 ;; Registers used:
 11097 ;;		wreg, status,2, status,0
 11098 ;; Tracked objects:
 11099 ;;		On entry : 0/0
 11100 ;;		On exit  : 0/0
 11101 ;;		Unchanged: 0/0
 11102 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 11103 ;;      Params:         4       0       0       0       0
 11104 ;;      Locals:         4       0       0       0       0
 11105 ;;      Temps:          1       0       0       0       0
 11106 ;;      Totals:         9       0       0       0       0
 11107 ;;Total ram usage:        9 bytes
 11108 ;; Hardware stack levels used:    1
 11109 ;; This function calls:
 11110 ;;		Nothing
 11111 ;; This function is called by:
 11112 ;;		_get_matrix7219
 11113 ;;		_USARTWriteInt
 11114 ;; This function uses a non-reentrant model
 11115 ;;
 11116                           
 11117                           
 11118                           ;psect for function ___awdiv
 11119  1FA7                     ___awdiv:	
 11120                           
 11121                           ;incstack = 0
 11122                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
 11123  1FA7  01F6               	clrf	___awdiv@sign
 11124  1FA8  1FF1               	btfss	___awdiv@divisor+1,7
 11125  1FA9  2FB1               	goto	l3540
 11126  1FAA  09F0               	comf	___awdiv@divisor,f
 11127  1FAB  09F1               	comf	___awdiv@divisor+1,f
 11128  1FAC  0AF0               	incf	___awdiv@divisor,f
 11129  1FAD  1903               	skipnz
 11130  1FAE  0AF1               	incf	___awdiv@divisor+1,f
 11131  1FAF  01F6               	clrf	___awdiv@sign
 11132  1FB0  0AF6               	incf	___awdiv@sign,f
 11133  1FB1                     l3540:	
 11134  1FB1  1FF3               	btfss	___awdiv@dividend+1,7
 11135  1FB2  2FBC               	goto	l3546
 11136  1FB3  09F2               	comf	___awdiv@dividend,f
 11137  1FB4  09F3               	comf	___awdiv@dividend+1,f
 11138  1FB5  0AF2               	incf	___awdiv@dividend,f
 11139  1FB6  1903               	skipnz
 11140  1FB7  0AF3               	incf	___awdiv@dividend+1,f
 11141  1FB8  3001               	movlw	1
 11142  1FB9  00F4               	movwf	??___awdiv
 11143  1FBA  0874               	movf	??___awdiv,w
 11144  1FBB  06F6               	xorwf	___awdiv@sign,f
 11145  1FBC                     l3546:	
 11146  1FBC  01F7               	clrf	___awdiv@quotient
 11147  1FBD  01F8               	clrf	___awdiv@quotient+1
 11148  1FBE  0870               	movf	___awdiv@divisor,w
 11149  1FBF  0471               	iorwf	___awdiv@divisor+1,w
 11150  1FC0  1903               	btfsc	3,2
 11151  1FC1  2FF3               	goto	l3568
 11152  1FC2  01F5               	clrf	___awdiv@counter
 11153  1FC3  0AF5               	incf	___awdiv@counter,f
 11154  1FC4                     l3556:	
 11155  1FC4  1BF1               	btfsc	___awdiv@divisor+1,7
 11156  1FC5  2FD2               	goto	l3558
 11157  1FC6  3001               	movlw	1
 11158  1FC7                     u3525:	
 11159  1FC7  1003               	clrc
 11160  1FC8  0DF0               	rlf	___awdiv@divisor,f
 11161  1FC9  0DF1               	rlf	___awdiv@divisor+1,f
 11162  1FCA  3EFF               	addlw	-1
 11163  1FCB  1D03               	skipz
 11164  1FCC  2FC7               	goto	u3525
 11165  1FCD  3001               	movlw	1
 11166  1FCE  00F4               	movwf	??___awdiv
 11167  1FCF  0874               	movf	??___awdiv,w
 11168  1FD0  07F5               	addwf	___awdiv@counter,f
 11169  1FD1  2FC4               	goto	l3556
 11170  1FD2                     l3558:	
 11171  1FD2  3001               	movlw	1
 11172  1FD3                     u3545:	
 11173  1FD3  1003               	clrc
 11174  1FD4  0DF7               	rlf	___awdiv@quotient,f
 11175  1FD5  0DF8               	rlf	___awdiv@quotient+1,f
 11176  1FD6  3EFF               	addlw	-1
 11177  1FD7  1D03               	skipz
 11178  1FD8  2FD3               	goto	u3545
 11179  1FD9  0871               	movf	___awdiv@divisor+1,w
 11180  1FDA  0273               	subwf	___awdiv@dividend+1,w
 11181  1FDB  1D03               	skipz
 11182  1FDC  2FDF               	goto	u3555
 11183  1FDD  0870               	movf	___awdiv@divisor,w
 11184  1FDE  0272               	subwf	___awdiv@dividend,w
 11185  1FDF                     u3555:	
 11186  1FDF  1C03               	skipc
 11187  1FE0  2FE8               	goto	l3564
 11188  1FE1  0870               	movf	___awdiv@divisor,w
 11189  1FE2  02F2               	subwf	___awdiv@dividend,f
 11190  1FE3  0871               	movf	___awdiv@divisor+1,w
 11191  1FE4  1C03               	skipc
 11192  1FE5  03F3               	decf	___awdiv@dividend+1,f
 11193  1FE6  02F3               	subwf	___awdiv@dividend+1,f
 11194  1FE7  1477               	bsf	___awdiv@quotient,0
 11195  1FE8                     l3564:	
 11196  1FE8  3001               	movlw	1
 11197  1FE9                     u3565:	
 11198  1FE9  1003               	clrc
 11199  1FEA  0CF1               	rrf	___awdiv@divisor+1,f
 11200  1FEB  0CF0               	rrf	___awdiv@divisor,f
 11201  1FEC  3EFF               	addlw	-1
 11202  1FED  1D03               	skipz
 11203  1FEE  2FE9               	goto	u3565
 11204  1FEF  3001               	movlw	1
 11205  1FF0  02F5               	subwf	___awdiv@counter,f
 11206  1FF1  1D03               	btfss	3,2
 11207  1FF2  2FD2               	goto	l3558
 11208  1FF3                     l3568:	
 11209  1FF3  0876               	movf	___awdiv@sign,w
 11210  1FF4  1903               	btfsc	3,2
 11211  1FF5  2FFB               	goto	l3572
 11212  1FF6  09F7               	comf	___awdiv@quotient,f
 11213  1FF7  09F8               	comf	___awdiv@quotient+1,f
 11214  1FF8  0AF7               	incf	___awdiv@quotient,f
 11215  1FF9  1903               	skipnz
 11216  1FFA  0AF8               	incf	___awdiv@quotient+1,f
 11217  1FFB                     l3572:	
 11218  1FFB  0878               	movf	___awdiv@quotient+1,w
 11219  1FFC  00F1               	movwf	?___awdiv+1
 11220  1FFD  0877               	movf	___awdiv@quotient,w
 11221  1FFE  00F0               	movwf	?___awdiv
 11222  1FFF  0008               	return
 11223  2000                     __end_of___awdiv:	
 11224                           
 11225                           	psect	text47
 11226  1E6C                     __ptext47:	
 11227 ;; *************** function _lg_clear *****************
 11228 ;; Defined at:
 11229 ;;		line 221 in file "../logic.h"
 11230 ;; Parameters:    Size  Location     Type
 11231 ;;  x               1    wreg     char 
 11232 ;;  y               1    0[BANK0 ] char 
 11233 ;;  matrix4x4       2    1[BANK0 ] PTR const struct .
 11234 ;;		 -> NULL(0), g_matrix4x4(96), 
 11235 ;;  matrix16x8      1    3[BANK0 ] PTR struct .
 11236 ;;		 -> g_matrix16x8(16), 
 11237 ;; Auto vars:     Size  Location     Type
 11238 ;;  x               1    6[BANK0 ] char 
 11239 ;;  col             1    8[BANK0 ] unsigned char 
 11240 ;;  row             1    7[BANK0 ] unsigned char 
 11241 ;; Return value:  Size  Location     Type
 11242 ;;                  1    wreg      void 
 11243 ;; Registers used:
 11244 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
 11245 ;; Tracked objects:
 11246 ;;		On entry : 0/0
 11247 ;;		On exit  : 0/0
 11248 ;;		Unchanged: 0/0
 11249 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 11250 ;;      Params:         0       4       0       0       0
 11251 ;;      Locals:         0       3       0       0       0
 11252 ;;      Temps:          0       2       0       0       0
 11253 ;;      Totals:         0       9       0       0       0
 11254 ;;Total ram usage:        9 bytes
 11255 ;; Hardware stack levels used:    1
 11256 ;; Hardware stack levels required when called:    3
 11257 ;; This function calls:
 11258 ;;		_get_matrix_bit
 11259 ;;		_set_matrix_bit
 11260 ;; This function is called by:
 11261 ;;		_main
 11262 ;; This function uses a non-reentrant model
 11263 ;;
 11264                           
 11265                           
 11266                           ;psect for function _lg_clear
 11267  1E6C                     _lg_clear:	
 11268                           
 11269                           ;incstack = 0
 11270                           ; Regs used in _lg_clear: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
 11271                           ;lg_clear@x stored from wreg
 11272  1E6C  1283               	bcf	3,5	;RP0=0, select bank0
 11273  1E6D  1303               	bcf	3,6	;RP1=0, select bank0
 11274  1E6E  00A6               	movwf	lg_clear@x
 11275                           
 11276                           ;logic.h: 223: for(uint8_t row = 0; row < 4; row++)
 11277  1E6F  01A7               	clrf	lg_clear@row
 11278  1E70                     L22:	
 11279  1E70  3004               	movlw	4
 11280  1E71  0227               	subwf	lg_clear@row,w
 11281  1E72  1803               	btfsc	3,0
 11282  1E73  0008               	return
 11283                           
 11284                           ;logic.h: 224: {
 11285                           ;logic.h: 225: for(uint8_t col = 0; col < 4; col++)
 11286  1E74  01A8               	clrf	lg_clear@col
 11287  1E75  3004               	movlw	4
 11288  1E76  0228               	subwf	lg_clear@col,w
 11289  1E77  1803               	btfsc	3,0
 11290  1E78  2EAD               	goto	l5588
 11291  1E79                     l5580:	
 11292                           
 11293                           ;logic.h: 226: {
 11294                           ;logic.h: 227: if(get_matrix_bit((uint8_t*)matrix4x4->row, row, col) == 1)
 11295  1E79  0821               	movf	lg_clear@matrix4x4,w
 11296  1E7A  00F7               	movwf	get_matrix_bit@byte
 11297  1E7B  0822               	movf	lg_clear@matrix4x4+1,w
 11298  1E7C  00F8               	movwf	get_matrix_bit@byte+1
 11299  1E7D  0827               	movf	lg_clear@row,w
 11300  1E7E  00A4               	movwf	??_lg_clear
 11301  1E7F  0824               	movf	??_lg_clear,w
 11302  1E80  00F9               	movwf	get_matrix_bit@row
 11303  1E81  0828               	movf	lg_clear@col,w
 11304  1E82  00A5               	movwf	??_lg_clear+1
 11305  1E83  0825               	movf	??_lg_clear+1,w
 11306  1E84  00FA               	movwf	get_matrix_bit@col
 11307  1E85  160A  158A  2198  160A  158A  	fcall	_get_matrix_bit
 11308  1E8A  3A01               	xorlw	1
 11309  1E8B  1D03               	skipz
 11310  1E8C  2EA3               	goto	l5584
 11311                           
 11312                           ;logic.h: 228: {
 11313                           ;logic.h: 229: set_matrix_bit((uint8_t*)matrix16x8->row, y + row, x + col, 0);
 11314  1E8D  1283               	bcf	3,5	;RP0=0, select bank0
 11315  1E8E  1303               	bcf	3,6	;RP1=0, select bank0
 11316  1E8F  0823               	movf	lg_clear@matrix16x8,w
 11317  1E90  00F6               	movwf	set_matrix_bit@byte
 11318  1E91  3000               	movlw	0
 11319  1E92  00F7               	movwf	set_matrix_bit@byte+1
 11320  1E93  0827               	movf	lg_clear@row,w
 11321  1E94  0720               	addwf	lg_clear@y,w
 11322  1E95  00A4               	movwf	??_lg_clear
 11323  1E96  0824               	movf	??_lg_clear,w
 11324  1E97  00F8               	movwf	set_matrix_bit@row
 11325  1E98  0828               	movf	lg_clear@col,w
 11326  1E99  0726               	addwf	lg_clear@x,w
 11327  1E9A  00A5               	movwf	??_lg_clear+1
 11328  1E9B  0825               	movf	??_lg_clear+1,w
 11329  1E9C  00F9               	movwf	set_matrix_bit@col
 11330  1E9D  01FA               	clrf	set_matrix_bit@value
 11331  1E9E  160A  158A  21ED  160A  158A  	fcall	_set_matrix_bit
 11332  1EA3                     l5584:	
 11333  1EA3  3001               	movlw	1
 11334  1EA4  1283               	bcf	3,5	;RP0=0, select bank0
 11335  1EA5  1303               	bcf	3,6	;RP1=0, select bank0
 11336  1EA6  00A4               	movwf	??_lg_clear
 11337  1EA7  0824               	movf	??_lg_clear,w
 11338  1EA8  07A8               	addwf	lg_clear@col,f
 11339  1EA9  3004               	movlw	4
 11340  1EAA  0228               	subwf	lg_clear@col,w
 11341  1EAB  1C03               	skipc
 11342  1EAC  2E79               	goto	l5580
 11343  1EAD                     l5588:	
 11344  1EAD  3001               	movlw	1
 11345  1EAE  00A4               	movwf	??_lg_clear
 11346  1EAF  0824               	movf	??_lg_clear,w
 11347  1EB0  07A7               	addwf	lg_clear@row,f
 11348  1EB1  2E70               	goto	L22
 11349  1EB2                     __end_of_lg_clear:	
 11350                           
 11351                           	psect	text48
 11352  19ED                     __ptext48:	
 11353 ;; *************** function _set_matrix_bit *****************
 11354 ;; Defined at:
 11355 ;;		line 4 in file "../bit_matrix.h"
 11356 ;; Parameters:    Size  Location     Type
 11357 ;;  byte            2    6[COMMON] PTR unsigned char 
 11358 ;;		 -> temp_matrix16x8(16), g_matrix16x8(16), 
 11359 ;;  row             1    8[COMMON] unsigned char 
 11360 ;;  col             1    9[COMMON] unsigned char 
 11361 ;;  value           1   10[COMMON] unsigned char 
 11362 ;; Auto vars:     Size  Location     Type
 11363 ;;		None
 11364 ;; Return value:  Size  Location     Type
 11365 ;;                  1    wreg      void 
 11366 ;; Registers used:
 11367 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 11368 ;; Tracked objects:
 11369 ;;		On entry : 0/0
 11370 ;;		On exit  : 0/0
 11371 ;;		Unchanged: 0/0
 11372 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 11373 ;;      Params:         5       0       0       0       0
 11374 ;;      Locals:         0       0       0       0       0
 11375 ;;      Temps:          2       0       0       0       0
 11376 ;;      Totals:         7       0       0       0       0
 11377 ;;Total ram usage:        7 bytes
 11378 ;; Hardware stack levels used:    1
 11379 ;; Hardware stack levels required when called:    1
 11380 ;; This function calls:
 11381 ;;		_setbit
 11382 ;; This function is called by:
 11383 ;;		_lg_clear
 11384 ;;		_lg_merge
 11385 ;;		_lg_merge1
 11386 ;; This function uses a non-reentrant model
 11387 ;;
 11388                           
 11389                           
 11390                           ;psect for function _set_matrix_bit
 11391  19ED                     _set_matrix_bit:	
 11392                           
 11393                           ;bit_matrix.h: 6: setbit(&byte[row], col, value);
 11394                           
 11395                           ;incstack = 0
 11396                           ; Regs used in _set_matrix_bit: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 11397  19ED  0878               	movf	set_matrix_bit@row,w
 11398  19EE  0776               	addwf	set_matrix_bit@byte,w
 11399  19EF  00F0               	movwf	setbit@byte
 11400  19F0  0877               	movf	set_matrix_bit@byte+1,w
 11401  19F1  1803               	skipnc
 11402  19F2  3E01               	addlw	1
 11403  19F3  00F1               	movwf	setbit@byte+1
 11404  19F4  0879               	movf	set_matrix_bit@col,w
 11405  19F5  00FB               	movwf	??_set_matrix_bit
 11406  19F6  087B               	movf	??_set_matrix_bit,w
 11407  19F7  00F2               	movwf	setbit@at
 11408  19F8  087A               	movf	set_matrix_bit@value,w
 11409  19F9  00FC               	movwf	??_set_matrix_bit+1
 11410  19FA  087C               	movf	??_set_matrix_bit+1,w
 11411  19FB  00F3               	movwf	setbit@value
 11412  19FC  160A  118A  222D   	fcall	_setbit
 11413  19FF  0008               	return
 11414  1A00                     __end_of_set_matrix_bit:	
 11415                           
 11416                           	psect	text49
 11417  122D                     __ptext49:	
 11418 ;; *************** function _setbit *****************
 11419 ;; Defined at:
 11420 ;;		line 8 in file "../bit_operator.h"
 11421 ;; Parameters:    Size  Location     Type
 11422 ;;  byte            2    0[COMMON] PTR unsigned char 
 11423 ;;		 -> temp_matrix16x8(16), g_matrix16x8(16), 
 11424 ;;  at              1    2[COMMON] unsigned char 
 11425 ;;  value           1    3[COMMON] unsigned char 
 11426 ;; Auto vars:     Size  Location     Type
 11427 ;;  temp            2    4[COMMON] PTR struct .
 11428 ;;		 -> temp_matrix16x8(16), g_matrix16x8(16), 
 11429 ;; Return value:  Size  Location     Type
 11430 ;;                  1    wreg      void 
 11431 ;; Registers used:
 11432 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 11433 ;; Tracked objects:
 11434 ;;		On entry : 0/0
 11435 ;;		On exit  : 0/0
 11436 ;;		Unchanged: 0/0
 11437 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 11438 ;;      Params:         4       0       0       0       0
 11439 ;;      Locals:         2       0       0       0       0
 11440 ;;      Temps:          0       0       0       0       0
 11441 ;;      Totals:         6       0       0       0       0
 11442 ;;Total ram usage:        6 bytes
 11443 ;; Hardware stack levels used:    1
 11444 ;; This function calls:
 11445 ;;		Nothing
 11446 ;; This function is called by:
 11447 ;;		_set_matrix_bit
 11448 ;; This function uses a non-reentrant model
 11449 ;;
 11450                           
 11451                           
 11452                           ;psect for function _setbit
 11453  122D                     _setbit:	
 11454                           
 11455                           ;bit_operator.h: 10: t_byte *temp = (t_byte *)byte;
 11456                           
 11457                           ;incstack = 0
 11458                           ; Regs used in _setbit: [wreg-fsr0h+status,2+status,0]
 11459  122D  0870               	movf	setbit@byte,w
 11460  122E  00F4               	movwf	setbit@temp
 11461  122F  0871               	movf	setbit@byte+1,w
 11462  1230  00F5               	movwf	setbit@temp+1
 11463                           
 11464                           ;bit_operator.h: 11: switch(at)
 11465  1231  2A8A               	goto	l3908
 11466  1232                     l3890:	
 11467                           ;bit_operator.h: 12: {
 11468                           ;bit_operator.h: 13: case 0:
 11469                           
 11470                           
 11471                           ;bit_operator.h: 14: temp->b0 = value;
 11472  1232  0874               	movf	setbit@temp,w
 11473  1233  0084               	movwf	4
 11474  1234  1783               	bsf	3,7
 11475  1235  1C75               	btfss	setbit@temp+1,0
 11476  1236  1383               	bcf	3,7
 11477  1237  0873               	movf	setbit@value,w
 11478  1238  3901               	andlw	1
 11479  1239  1000               	bcf	0,0
 11480  123A  1D03               	skipz
 11481  123B  1400               	bsf	0,0
 11482                           
 11483                           ;bit_operator.h: 15: break;
 11484  123C  0008               	return
 11485  123D                     l3892:	
 11486                           ;bit_operator.h: 16: case 1:
 11487                           
 11488                           
 11489                           ;bit_operator.h: 17: temp->b1 = value;
 11490  123D  0874               	movf	setbit@temp,w
 11491  123E  0084               	movwf	4
 11492  123F  1783               	bsf	3,7
 11493  1240  1C75               	btfss	setbit@temp+1,0
 11494  1241  1383               	bcf	3,7
 11495  1242  0873               	movf	setbit@value,w
 11496  1243  3901               	andlw	1
 11497  1244  1080               	bcf	0,1
 11498  1245  1D03               	skipz
 11499  1246  1480               	bsf	0,1
 11500                           
 11501                           ;bit_operator.h: 18: break;
 11502  1247  0008               	return
 11503  1248                     l3894:	
 11504                           ;bit_operator.h: 19: case 2:
 11505                           
 11506                           
 11507                           ;bit_operator.h: 20: temp->b2 = value;
 11508  1248  0874               	movf	setbit@temp,w
 11509  1249  0084               	movwf	4
 11510  124A  1783               	bsf	3,7
 11511  124B  1C75               	btfss	setbit@temp+1,0
 11512  124C  1383               	bcf	3,7
 11513  124D  0873               	movf	setbit@value,w
 11514  124E  3901               	andlw	1
 11515  124F  1100               	bcf	0,2
 11516  1250  1D03               	skipz
 11517  1251  1500               	bsf	0,2
 11518                           
 11519                           ;bit_operator.h: 21: break;
 11520  1252  0008               	return
 11521  1253                     l3896:	
 11522                           ;bit_operator.h: 22: case 3:
 11523                           
 11524                           
 11525                           ;bit_operator.h: 23: temp->b3 = value;
 11526  1253  0874               	movf	setbit@temp,w
 11527  1254  0084               	movwf	4
 11528  1255  1783               	bsf	3,7
 11529  1256  1C75               	btfss	setbit@temp+1,0
 11530  1257  1383               	bcf	3,7
 11531  1258  0873               	movf	setbit@value,w
 11532  1259  3901               	andlw	1
 11533  125A  1180               	bcf	0,3
 11534  125B  1D03               	skipz
 11535  125C  1580               	bsf	0,3
 11536                           
 11537                           ;bit_operator.h: 24: break;
 11538  125D  0008               	return
 11539  125E                     l3898:	
 11540                           ;bit_operator.h: 25: case 4:
 11541                           
 11542                           
 11543                           ;bit_operator.h: 26: temp->b4 = value;
 11544  125E  0874               	movf	setbit@temp,w
 11545  125F  0084               	movwf	4
 11546  1260  1783               	bsf	3,7
 11547  1261  1C75               	btfss	setbit@temp+1,0
 11548  1262  1383               	bcf	3,7
 11549  1263  0873               	movf	setbit@value,w
 11550  1264  3901               	andlw	1
 11551  1265  1200               	bcf	0,4
 11552  1266  1D03               	skipz
 11553  1267  1600               	bsf	0,4
 11554                           
 11555                           ;bit_operator.h: 27: break;
 11556  1268  0008               	return
 11557  1269                     l3900:	
 11558                           ;bit_operator.h: 28: case 5:
 11559                           
 11560                           
 11561                           ;bit_operator.h: 29: temp->b5 = value;
 11562  1269  0874               	movf	setbit@temp,w
 11563  126A  0084               	movwf	4
 11564  126B  1783               	bsf	3,7
 11565  126C  1C75               	btfss	setbit@temp+1,0
 11566  126D  1383               	bcf	3,7
 11567  126E  0873               	movf	setbit@value,w
 11568  126F  3901               	andlw	1
 11569  1270  1280               	bcf	0,5
 11570  1271  1D03               	skipz
 11571  1272  1680               	bsf	0,5
 11572                           
 11573                           ;bit_operator.h: 30: break;
 11574  1273  0008               	return
 11575  1274                     l3902:	
 11576                           ;bit_operator.h: 31: case 6:
 11577                           
 11578                           
 11579                           ;bit_operator.h: 32: temp->b6 = value;
 11580  1274  0874               	movf	setbit@temp,w
 11581  1275  0084               	movwf	4
 11582  1276  1783               	bsf	3,7
 11583  1277  1C75               	btfss	setbit@temp+1,0
 11584  1278  1383               	bcf	3,7
 11585  1279  0873               	movf	setbit@value,w
 11586  127A  3901               	andlw	1
 11587  127B  1300               	bcf	0,6
 11588  127C  1D03               	skipz
 11589  127D  1700               	bsf	0,6
 11590                           
 11591                           ;bit_operator.h: 33: break;
 11592  127E  0008               	return
 11593  127F                     l3904:	
 11594                           ;bit_operator.h: 34: case 7:
 11595                           
 11596                           
 11597                           ;bit_operator.h: 35: temp->b7 = value;
 11598  127F  0874               	movf	setbit@temp,w
 11599  1280  0084               	movwf	4
 11600  1281  1783               	bsf	3,7
 11601  1282  1C75               	btfss	setbit@temp+1,0
 11602  1283  1383               	bcf	3,7
 11603  1284  0873               	movf	setbit@value,w
 11604  1285  3901               	andlw	1
 11605  1286  1380               	bcf	0,7
 11606  1287  1D03               	skipz
 11607  1288  1780               	bsf	0,7
 11608                           
 11609                           ;bit_operator.h: 37: }
 11610                           
 11611                           ;bit_operator.h: 36: break;
 11612  1289  0008               	return
 11613  128A                     l3908:	
 11614  128A  0872               	movf	setbit@at,w
 11615                           
 11616                           ; Switch size 1, requested type "space"
 11617                           ; Number of cases is 8, Range of values is 0 to 7
 11618                           ; switch strategies available:
 11619                           ; Name         Instructions Cycles
 11620                           ; simple_byte           25    13 (average)
 11621                           ; direct_byte           32     8 (fixed)
 11622                           ; jumptable            260     6 (fixed)
 11623                           ;	Chosen strategy is simple_byte
 11624  128B  3A00               	xorlw	0	; case 0
 11625  128C  1903               	skipnz
 11626  128D  2A32               	goto	l3890
 11627  128E  3A01               	xorlw	1	; case 1
 11628  128F  1903               	skipnz
 11629  1290  2A3D               	goto	l3892
 11630  1291  3A03               	xorlw	3	; case 2
 11631  1292  1903               	skipnz
 11632  1293  2A48               	goto	l3894
 11633  1294  3A01               	xorlw	1	; case 3
 11634  1295  1903               	skipnz
 11635  1296  2A53               	goto	l3896
 11636  1297  3A07               	xorlw	7	; case 4
 11637  1298  1903               	skipnz
 11638  1299  2A5E               	goto	l3898
 11639  129A  3A01               	xorlw	1	; case 5
 11640  129B  1903               	skipnz
 11641  129C  2A69               	goto	l3900
 11642  129D  3A03               	xorlw	3	; case 6
 11643  129E  1903               	skipnz
 11644  129F  2A74               	goto	l3902
 11645  12A0  3A01               	xorlw	1	; case 7
 11646  12A1  1903               	skipnz
 11647  12A2  2A7F               	goto	l3904
 11648  12A3  2AA4               	goto	l82
 11649  12A4                     l82:	
 11650  12A4  0008               	return
 11651  12A5                     __end_of_setbit:	
 11652                           
 11653                           	psect	text50
 11654  1998                     __ptext50:	
 11655 ;; *************** function _get_matrix_bit *****************
 11656 ;; Defined at:
 11657 ;;		line 8 in file "../bit_matrix.h"
 11658 ;; Parameters:    Size  Location     Type
 11659 ;;  byte            2    7[COMMON] PTR const unsigned char 
 11660 ;;		 -> temp_matrix16x8.row(16), NULL(0), temp_matrix16x8(16), g_matrix16x8.row(16), 
 11661 ;;		 -> g_matrix16x8(16), g_matrix4x4.row(4), g_matrix4x4(96), 
 11662 ;;  row             1    9[COMMON] unsigned char 
 11663 ;;  col             1   10[COMMON] unsigned char 
 11664 ;; Auto vars:     Size  Location     Type
 11665 ;;		None
 11666 ;; Return value:  Size  Location     Type
 11667 ;;                  1    wreg      unsigned char 
 11668 ;; Registers used:
 11669 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
 11670 ;; Tracked objects:
 11671 ;;		On entry : 0/0
 11672 ;;		On exit  : 0/0
 11673 ;;		Unchanged: 0/0
 11674 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 11675 ;;      Params:         4       0       0       0       0
 11676 ;;      Locals:         0       0       0       0       0
 11677 ;;      Temps:          1       0       0       0       0
 11678 ;;      Totals:         5       0       0       0       0
 11679 ;;Total ram usage:        5 bytes
 11680 ;; Hardware stack levels used:    1
 11681 ;; Hardware stack levels required when called:    2
 11682 ;; This function calls:
 11683 ;;		_getbit
 11684 ;; This function is called by:
 11685 ;;		_dbg_print_MATRIX4x4
 11686 ;;		_dbg_print_MATRIX16x8
 11687 ;;		_hal_MATRIX16x8_to_MATRIX_MATRIX7219
 11688 ;;		_lg_hit_land
 11689 ;;		_lg_is_valid
 11690 ;;		_lg_is_left_boundary
 11691 ;;		_lg_is_right_boundary
 11692 ;;		_lg_fall_off
 11693 ;;		_lg_clear
 11694 ;;		_lg_merge
 11695 ;;		_lg_merge1
 11696 ;;		_lg_get_num_of_orphan
 11697 ;;		_lg_get_weight
 11698 ;;		_lg_get_height_after_merge
 11699 ;;		_lg_get_holes_after_merge
 11700 ;; This function uses a non-reentrant model
 11701 ;;
 11702                           
 11703                           
 11704                           ;psect for function _get_matrix_bit
 11705  1998                     _get_matrix_bit:	
 11706                           
 11707                           ;bit_matrix.h: 10: return getbit(&byte[row], col);
 11708                           
 11709                           ;incstack = 0
 11710                           ; Regs used in _get_matrix_bit: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
 11711  1998  0879               	movf	get_matrix_bit@row,w
 11712  1999  0777               	addwf	get_matrix_bit@byte,w
 11713  199A  00F0               	movwf	getbit@byte
 11714  199B  0878               	movf	get_matrix_bit@byte+1,w
 11715  199C  1803               	skipnc
 11716  199D  3E01               	addlw	1
 11717  199E  00F1               	movwf	getbit@byte+1
 11718  199F  087A               	movf	get_matrix_bit@col,w
 11719  19A0  00FB               	movwf	??_get_matrix_bit
 11720  19A1  087B               	movf	??_get_matrix_bit,w
 11721  19A2  00F2               	movwf	getbit@at
 11722  19A3  160A  118A  25B7   	fcall	_getbit
 11723  19A6  0008               	return
 11724  19A7                     __end_of_get_matrix_bit:	
 11725                           
 11726                           	psect	text51
 11727  15B7                     __ptext51:	
 11728 ;; *************** function _getbit *****************
 11729 ;; Defined at:
 11730 ;;		line 39 in file "../bit_operator.h"
 11731 ;; Parameters:    Size  Location     Type
 11732 ;;  byte            2    0[COMMON] PTR const unsigned char 
 11733 ;;		 -> temp_matrix16x8.row(16), NULL(0), temp_matrix16x8(16), g_matrix16x8.row(16), 
 11734 ;;		 -> g_matrix16x8(16), g_matrix4x4.row(4), g_matrix4x4(96), 
 11735 ;;  at              1    2[COMMON] unsigned char 
 11736 ;; Auto vars:     Size  Location     Type
 11737 ;;  temp            2    5[COMMON] PTR struct .
 11738 ;;		 -> temp_matrix16x8.row(16), NULL(0), temp_matrix16x8(16), g_matrix16x8.row(16), 
 11739 ;;		 -> g_matrix16x8(16), g_matrix4x4.row(4), g_matrix4x4(96), 
 11740 ;; Return value:  Size  Location     Type
 11741 ;;                  1    wreg      unsigned char 
 11742 ;; Registers used:
 11743 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath
 11744 ;; Tracked objects:
 11745 ;;		On entry : 0/0
 11746 ;;		On exit  : 0/0
 11747 ;;		Unchanged: 0/0
 11748 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 11749 ;;      Params:         3       0       0       0       0
 11750 ;;      Locals:         2       0       0       0       0
 11751 ;;      Temps:          2       0       0       0       0
 11752 ;;      Totals:         7       0       0       0       0
 11753 ;;Total ram usage:        7 bytes
 11754 ;; Hardware stack levels used:    2
 11755 ;; This function calls:
 11756 ;;		Nothing
 11757 ;; This function is called by:
 11758 ;;		_get_matrix_bit
 11759 ;; This function uses a non-reentrant model
 11760 ;;
 11761                           
 11762                           
 11763                           ;psect for function _getbit
 11764  15B7                     _getbit:	
 11765                           
 11766                           ;bit_operator.h: 41: t_byte *temp = (t_byte *)byte;
 11767                           
 11768                           ;incstack = 0
 11769                           ; Regs used in _getbit: [wreg-fsr0h+status,2+status,0+btemp+1+pclath]
 11770  15B7  0870               	movf	getbit@byte,w
 11771  15B8  00F5               	movwf	getbit@temp
 11772  15B9  0871               	movf	getbit@byte+1,w
 11773  15BA  00F6               	movwf	getbit@temp+1
 11774                           
 11775                           ;bit_operator.h: 42: switch(at)
 11776  15BB  2E2F               	goto	l3638
 11777  15BC                     l3588:	
 11778                           ;bit_operator.h: 43: {
 11779                           ;bit_operator.h: 44: case 0:
 11780                           
 11781                           
 11782                           ;bit_operator.h: 45: return (uint8_t)temp->b0;
 11783  15BC  0876               	movf	getbit@temp+1,w
 11784  15BD  1283               	bcf	3,5	;RP0=0, select bank0
 11785  15BE  1303               	bcf	3,6	;RP1=0, select bank0
 11786  15BF  00FF               	movwf	127
 11787  15C0  0875               	movf	getbit@temp,w
 11788  15C1  0084               	movwf	4
 11789  15C2  120A  158A  2000   	fcall	stringtab
 11790  15C5  00F3               	movwf	??_getbit
 11791  15C6  0873               	movf	??_getbit,w
 11792  15C7  3901               	andlw	1
 11793                           
 11794                           ;bit_operator.h: 46: break;
 11795  15C8  0008               	return
 11796  15C9                     l3594:	
 11797                           ;bit_operator.h: 47: case 1:
 11798                           
 11799                           
 11800                           ;bit_operator.h: 48: return (uint8_t)temp->b1;
 11801  15C9  0876               	movf	getbit@temp+1,w
 11802  15CA  1283               	bcf	3,5	;RP0=0, select bank0
 11803  15CB  1303               	bcf	3,6	;RP1=0, select bank0
 11804  15CC  00FF               	movwf	127
 11805  15CD  0875               	movf	getbit@temp,w
 11806  15CE  0084               	movwf	4
 11807  15CF  120A  158A  2000   	fcall	stringtab
 11808  15D2  00F3               	movwf	??_getbit
 11809  15D3  0C73               	rrf	??_getbit,w
 11810  15D4  3901               	andlw	1
 11811                           
 11812                           ;bit_operator.h: 49: break;
 11813  15D5  0008               	return
 11814  15D6                     l3600:	
 11815                           ;bit_operator.h: 50: case 2:
 11816                           
 11817                           
 11818                           ;bit_operator.h: 51: return (uint8_t)temp->b2;
 11819  15D6  0876               	movf	getbit@temp+1,w
 11820  15D7  1283               	bcf	3,5	;RP0=0, select bank0
 11821  15D8  1303               	bcf	3,6	;RP1=0, select bank0
 11822  15D9  00FF               	movwf	127
 11823  15DA  0875               	movf	getbit@temp,w
 11824  15DB  0084               	movwf	4
 11825  15DC  120A  158A  2000   	fcall	stringtab
 11826  15DF  00F3               	movwf	??_getbit
 11827  15E0  0C73               	rrf	??_getbit,w
 11828  15E1  00F4               	movwf	??_getbit+1
 11829  15E2  0C74               	rrf	??_getbit+1,w
 11830  15E3  3901               	andlw	1
 11831                           
 11832                           ;bit_operator.h: 52: break;
 11833  15E4  0008               	return
 11834  15E5                     l3606:	
 11835                           ;bit_operator.h: 53: case 3:
 11836                           
 11837                           
 11838                           ;bit_operator.h: 54: return (uint8_t)temp->b3;
 11839  15E5  0876               	movf	getbit@temp+1,w
 11840  15E6  1283               	bcf	3,5	;RP0=0, select bank0
 11841  15E7  1303               	bcf	3,6	;RP1=0, select bank0
 11842  15E8  00FF               	movwf	127
 11843  15E9  0875               	movf	getbit@temp,w
 11844  15EA  0084               	movwf	4
 11845  15EB  120A  158A  2000   	fcall	stringtab
 11846  15EE  00F3               	movwf	??_getbit
 11847  15EF  0C73               	rrf	??_getbit,w
 11848  15F0  00F4               	movwf	??_getbit+1
 11849  15F1  0CF4               	rrf	??_getbit+1,f
 11850  15F2  0C74               	rrf	??_getbit+1,w
 11851  15F3  3901               	andlw	1
 11852                           
 11853                           ;bit_operator.h: 55: break;
 11854  15F4  0008               	return
 11855  15F5                     l3612:	
 11856                           ;bit_operator.h: 56: case 4:
 11857                           
 11858                           
 11859                           ;bit_operator.h: 57: return (uint8_t)temp->b4;
 11860  15F5  0876               	movf	getbit@temp+1,w
 11861  15F6  1283               	bcf	3,5	;RP0=0, select bank0
 11862  15F7  1303               	bcf	3,6	;RP1=0, select bank0
 11863  15F8  00FF               	movwf	127
 11864  15F9  0875               	movf	getbit@temp,w
 11865  15FA  0084               	movwf	4
 11866  15FB  120A  158A  2000   	fcall	stringtab
 11867  15FE  00F3               	movwf	??_getbit
 11868  15FF  0E73               	swapf	??_getbit,w
 11869  1600  3901               	andlw	1
 11870                           
 11871                           ;bit_operator.h: 58: break;
 11872  1601  0008               	return
 11873  1602                     l3618:	
 11874                           ;bit_operator.h: 59: case 5:
 11875                           
 11876                           
 11877                           ;bit_operator.h: 60: return (uint8_t)temp->b5;
 11878  1602  0876               	movf	getbit@temp+1,w
 11879  1603  1283               	bcf	3,5	;RP0=0, select bank0
 11880  1604  1303               	bcf	3,6	;RP1=0, select bank0
 11881  1605  00FF               	movwf	127
 11882  1606  0875               	movf	getbit@temp,w
 11883  1607  0084               	movwf	4
 11884  1608  120A  158A  2000   	fcall	stringtab
 11885  160B  00F3               	movwf	??_getbit
 11886  160C  0E73               	swapf	??_getbit,w
 11887  160D  00F4               	movwf	??_getbit+1
 11888  160E  0C74               	rrf	??_getbit+1,w
 11889  160F  3901               	andlw	1
 11890                           
 11891                           ;bit_operator.h: 61: break;
 11892  1610  0008               	return
 11893  1611                     l3624:	
 11894                           ;bit_operator.h: 62: case 6:
 11895                           
 11896                           
 11897                           ;bit_operator.h: 63: return (uint8_t)temp->b6;
 11898  1611  0876               	movf	getbit@temp+1,w
 11899  1612  1283               	bcf	3,5	;RP0=0, select bank0
 11900  1613  1303               	bcf	3,6	;RP1=0, select bank0
 11901  1614  00FF               	movwf	127
 11902  1615  0875               	movf	getbit@temp,w
 11903  1616  0084               	movwf	4
 11904  1617  120A  158A  2000   	fcall	stringtab
 11905  161A  00F3               	movwf	??_getbit
 11906  161B  0E73               	swapf	??_getbit,w
 11907  161C  00F4               	movwf	??_getbit+1
 11908  161D  0CF4               	rrf	??_getbit+1,f
 11909  161E  0C74               	rrf	??_getbit+1,w
 11910  161F  3901               	andlw	1
 11911                           
 11912                           ;bit_operator.h: 64: break;
 11913  1620  0008               	return
 11914  1621                     l3630:	
 11915                           ;bit_operator.h: 65: case 7:
 11916                           
 11917                           
 11918                           ;bit_operator.h: 66: return (uint8_t)temp->b7;
 11919  1621  0876               	movf	getbit@temp+1,w
 11920  1622  1283               	bcf	3,5	;RP0=0, select bank0
 11921  1623  1303               	bcf	3,6	;RP1=0, select bank0
 11922  1624  00FF               	movwf	127
 11923  1625  0875               	movf	getbit@temp,w
 11924  1626  0084               	movwf	4
 11925  1627  120A  158A  2000   	fcall	stringtab
 11926  162A  00F3               	movwf	??_getbit
 11927  162B  0D73               	rlf	??_getbit,w
 11928  162C  0D73               	rlf	??_getbit,w
 11929  162D  3901               	andlw	1
 11930                           
 11931                           ;bit_operator.h: 68: }
 11932                           
 11933                           ;bit_operator.h: 67: break;
 11934  162E  0008               	return
 11935  162F                     l3638:	
 11936  162F  0872               	movf	getbit@at,w
 11937                           
 11938                           ; Switch size 1, requested type "space"
 11939                           ; Number of cases is 8, Range of values is 0 to 7
 11940                           ; switch strategies available:
 11941                           ; Name         Instructions Cycles
 11942                           ; simple_byte           25    13 (average)
 11943                           ; direct_byte           32     8 (fixed)
 11944                           ; jumptable            260     6 (fixed)
 11945                           ;	Chosen strategy is simple_byte
 11946  1630  3A00               	xorlw	0	; case 0
 11947  1631  1903               	skipnz
 11948  1632  2DBC               	goto	l3588
 11949  1633  3A01               	xorlw	1	; case 1
 11950  1634  1903               	skipnz
 11951  1635  2DC9               	goto	l3594
 11952  1636  3A03               	xorlw	3	; case 2
 11953  1637  1903               	skipnz
 11954  1638  2DD6               	goto	l3600
 11955  1639  3A01               	xorlw	1	; case 3
 11956  163A  1903               	skipnz
 11957  163B  2DE5               	goto	l3606
 11958  163C  3A07               	xorlw	7	; case 4
 11959  163D  1903               	skipnz
 11960  163E  2DF5               	goto	l3612
 11961  163F  3A01               	xorlw	1	; case 5
 11962  1640  1903               	skipnz
 11963  1641  2E02               	goto	l3618
 11964  1642  3A03               	xorlw	3	; case 6
 11965  1643  1903               	skipnz
 11966  1644  2E11               	goto	l3624
 11967  1645  3A01               	xorlw	1	; case 7
 11968  1646  1903               	skipnz
 11969  1647  2E21               	goto	l3630
 11970  1648  2E49               	goto	l87
 11971  1649                     l87:	
 11972  1649  0008               	return
 11973  164A                     __end_of_getbit:	
 11974                           
 11975                           	psect	text52
 11976  1A00                     __ptext52:	
 11977 ;; *************** function _lg_char_info_index_rand *****************
 11978 ;; Defined at:
 11979 ;;		line 343 in file "../logic.h"
 11980 ;; Parameters:    Size  Location     Type
 11981 ;;		None
 11982 ;; Auto vars:     Size  Location     Type
 11983 ;;		None
 11984 ;; Return value:  Size  Location     Type
 11985 ;;                  1    wreg      unsigned char 
 11986 ;; Registers used:
 11987 ;;		wreg, status,2, status,0, pclath, cstack
 11988 ;; Tracked objects:
 11989 ;;		On entry : 0/0
 11990 ;;		On exit  : 0/0
 11991 ;;		Unchanged: 0/0
 11992 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 11993 ;;      Params:         0       0       0       0       0
 11994 ;;      Locals:         0       0       0       0       0
 11995 ;;      Temps:          0       0       0       0       0
 11996 ;;      Totals:         0       0       0       0       0
 11997 ;;Total ram usage:        0 bytes
 11998 ;; Hardware stack levels used:    1
 11999 ;; Hardware stack levels required when called:    2
 12000 ;; This function calls:
 12001 ;;		___awmod
 12002 ;;		_rand
 12003 ;; This function is called by:
 12004 ;;		_main
 12005 ;; This function uses a non-reentrant model
 12006 ;;
 12007                           
 12008                           
 12009                           ;psect for function _lg_char_info_index_rand
 12010  1A00                     _lg_char_info_index_rand:	
 12011                           
 12012                           ;logic.h: 345: return (uint8_t)(rand()%9);
 12013                           
 12014                           ;incstack = 0
 12015                           ; Regs used in _lg_char_info_index_rand: [wreg+status,2+status,0+pclath+cstack]
 12016  1A00  3009               	movlw	9
 12017  1A01  1283               	bcf	3,5	;RP0=0, select bank0
 12018  1A02  1303               	bcf	3,6	;RP1=0, select bank0
 12019  1A03  00A7               	movwf	___awmod@divisor
 12020  1A04  3000               	movlw	0
 12021  1A05  00A8               	movwf	___awmod@divisor+1
 12022  1A06  160A  158A  26FD  160A  158A  	fcall	_rand
 12023  1A0B  1283               	bcf	3,5	;RP0=0, select bank0
 12024  1A0C  1303               	bcf	3,6	;RP1=0, select bank0
 12025  1A0D  0821               	movf	?_rand+1,w
 12026  1A0E  00AA               	movwf	___awmod@dividend+1
 12027  1A0F  0820               	movf	?_rand,w
 12028  1A10  00A9               	movwf	___awmod@dividend
 12029  1A11  160A  118A  2002   	fcall	___awmod
 12030  1A14  1283               	bcf	3,5	;RP0=0, select bank0
 12031  1A15  1303               	bcf	3,6	;RP1=0, select bank0
 12032  1A16  0827               	movf	?___awmod,w
 12033  1A17  0008               	return
 12034  1A18                     __end_of_lg_char_info_index_rand:	
 12035                           
 12036                           	psect	text53
 12037  1EFD                     __ptext53:	
 12038 ;; *************** function _rand *****************
 12039 ;; Defined at:
 12040 ;;		line 12 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\rand.c"
 12041 ;; Parameters:    Size  Location     Type
 12042 ;;		None
 12043 ;; Auto vars:     Size  Location     Type
 12044 ;;		None
 12045 ;; Return value:  Size  Location     Type
 12046 ;;                  2    0[BANK0 ] int 
 12047 ;; Registers used:
 12048 ;;		wreg, status,2, status,0, pclath, cstack
 12049 ;; Tracked objects:
 12050 ;;		On entry : 0/0
 12051 ;;		On exit  : 0/0
 12052 ;;		Unchanged: 0/0
 12053 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 12054 ;;      Params:         0       2       0       0       0
 12055 ;;      Locals:         0       0       0       0       0
 12056 ;;      Temps:          0       5       0       0       0
 12057 ;;      Totals:         0       7       0       0       0
 12058 ;;Total ram usage:        7 bytes
 12059 ;; Hardware stack levels used:    1
 12060 ;; Hardware stack levels required when called:    1
 12061 ;; This function calls:
 12062 ;;		___lmul
 12063 ;; This function is called by:
 12064 ;;		_lg_char_info_index_rand
 12065 ;; This function uses a non-reentrant model
 12066 ;;
 12067                           
 12068                           
 12069                           ;psect for function _rand
 12070  1EFD                     _rand:	
 12071                           
 12072                           ;incstack = 0
 12073                           ; Regs used in _rand: [wreg+status,2+status,0+pclath+cstack]
 12074  1EFD  1683               	bsf	3,5	;RP0=1, select bank1
 12075  1EFE  1303               	bcf	3,6	;RP1=0, select bank1
 12076  1EFF  086B               	movf	(_randx+3)^(0+128),w
 12077  1F00  00F3               	movwf	___lmul@multiplier+3
 12078  1F01  086A               	movf	(_randx+2)^(0+128),w
 12079  1F02  00F2               	movwf	___lmul@multiplier+2
 12080  1F03  0869               	movf	(_randx+1)^(0+128),w
 12081  1F04  00F1               	movwf	___lmul@multiplier+1
 12082  1F05  0868               	movf	_randx^(0+128),w
 12083  1F06  00F0               	movwf	___lmul@multiplier
 12084  1F07  3041               	movlw	65
 12085  1F08  00F7               	movwf	___lmul@multiplicand+3
 12086  1F09  30C6               	movlw	198
 12087  1F0A  00F6               	movwf	___lmul@multiplicand+2
 12088  1F0B  304E               	movlw	78
 12089  1F0C  00F5               	movwf	___lmul@multiplicand+1
 12090  1F0D  306D               	movlw	109
 12091  1F0E  00F4               	movwf	___lmul@multiplicand
 12092  1F0F  160A  158A  256E  160A  158A  	fcall	___lmul
 12093  1F14  0873               	movf	?___lmul+3,w
 12094  1F15  1683               	bsf	3,5	;RP0=1, select bank1
 12095  1F16  1303               	bcf	3,6	;RP1=0, select bank1
 12096  1F17  00EB               	movwf	(_randx+3)^(0+128)
 12097  1F18  0872               	movf	?___lmul+2,w
 12098  1F19  00EA               	movwf	(_randx+2)^(0+128)
 12099  1F1A  0871               	movf	?___lmul+1,w
 12100  1F1B  00E9               	movwf	(_randx+1)^(0+128)
 12101  1F1C  0870               	movf	?___lmul,w
 12102  1F1D  00E8               	movwf	_randx^(0+128)
 12103  1F1E  3039               	movlw	57
 12104  1F1F  07E8               	addwf	_randx^(0+128),f
 12105  1F20  3030               	movlw	48
 12106  1F21  1803               	skipnc
 12107  1F22  3031               	movlw	49
 12108  1F23  07E9               	addwf	(_randx+1)^(0+128),f
 12109  1F24  3000               	movlw	0
 12110  1F25  1803               	skipnc
 12111  1F26  3001               	movlw	1
 12112  1F27  07EA               	addwf	(_randx+2)^(0+128),f
 12113  1F28  3000               	movlw	0
 12114  1F29  1803               	skipnc
 12115  1F2A  3001               	movlw	1
 12116  1F2B  07EB               	addwf	(_randx+3)^(0+128),f
 12117  1F2C  0868               	movf	_randx^(0+128),w
 12118  1F2D  1283               	bcf	3,5	;RP0=0, select bank0
 12119  1F2E  1303               	bcf	3,6	;RP1=0, select bank0
 12120  1F2F  00A2               	movwf	??_rand
 12121  1F30  1683               	bsf	3,5	;RP0=1, select bank1
 12122  1F31  1303               	bcf	3,6	;RP1=0, select bank1
 12123  1F32  0869               	movf	(_randx+1)^(0+128),w
 12124  1F33  1283               	bcf	3,5	;RP0=0, select bank0
 12125  1F34  1303               	bcf	3,6	;RP1=0, select bank0
 12126  1F35  00A3               	movwf	??_rand+1
 12127  1F36  1683               	bsf	3,5	;RP0=1, select bank1
 12128  1F37  1303               	bcf	3,6	;RP1=0, select bank1
 12129  1F38  086A               	movf	(_randx+2)^(0+128),w
 12130  1F39  1283               	bcf	3,5	;RP0=0, select bank0
 12131  1F3A  1303               	bcf	3,6	;RP1=0, select bank0
 12132  1F3B  00A4               	movwf	??_rand+2
 12133  1F3C  1683               	bsf	3,5	;RP0=1, select bank1
 12134  1F3D  1303               	bcf	3,6	;RP1=0, select bank1
 12135  1F3E  086B               	movf	(_randx+3)^(0+128),w
 12136  1F3F  1283               	bcf	3,5	;RP0=0, select bank0
 12137  1F40  1303               	bcf	3,6	;RP1=0, select bank0
 12138  1F41  00A5               	movwf	??_rand+3
 12139  1F42  3010               	movlw	16
 12140  1F43  00A6               	movwf	??_rand+4
 12141  1F44                     u5535:	
 12142  1F44  0D25               	rlf	??_rand+3,w
 12143  1F45  0CA5               	rrf	??_rand+3,f
 12144  1F46  0CA4               	rrf	??_rand+2,f
 12145  1F47  0CA3               	rrf	??_rand+1,f
 12146  1F48  0CA2               	rrf	??_rand,f
 12147  1F49  0BA6               	decfsz	??_rand+4,f
 12148  1F4A  2F44               	goto	u5535
 12149  1F4B  30FF               	movlw	255
 12150  1F4C  0522               	andwf	??_rand,w
 12151  1F4D  00A0               	movwf	?_rand
 12152  1F4E  307F               	movlw	127
 12153  1F4F  0523               	andwf	??_rand+1,w
 12154  1F50  00A1               	movwf	?_rand+1
 12155  1F51  0008               	return
 12156  1F52                     __end_of_rand:	
 12157                           
 12158                           	psect	text54
 12159  1D6E                     __ptext54:	
 12160 ;; *************** function ___lmul *****************
 12161 ;; Defined at:
 12162 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\Umul32.c"
 12163 ;; Parameters:    Size  Location     Type
 12164 ;;  multiplier      4    0[COMMON] unsigned long 
 12165 ;;  multiplicand    4    4[COMMON] unsigned long 
 12166 ;; Auto vars:     Size  Location     Type
 12167 ;;  product         4    9[COMMON] unsigned long 
 12168 ;; Return value:  Size  Location     Type
 12169 ;;                  4    0[COMMON] unsigned long 
 12170 ;; Registers used:
 12171 ;;		wreg, status,2, status,0
 12172 ;; Tracked objects:
 12173 ;;		On entry : 0/0
 12174 ;;		On exit  : 0/0
 12175 ;;		Unchanged: 0/0
 12176 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 12177 ;;      Params:         8       0       0       0       0
 12178 ;;      Locals:         4       0       0       0       0
 12179 ;;      Temps:          1       0       0       0       0
 12180 ;;      Totals:        13       0       0       0       0
 12181 ;;Total ram usage:       13 bytes
 12182 ;; Hardware stack levels used:    1
 12183 ;; This function calls:
 12184 ;;		Nothing
 12185 ;; This function is called by:
 12186 ;;		_rand
 12187 ;; This function uses a non-reentrant model
 12188 ;;
 12189                           
 12190                           
 12191                           ;psect for function ___lmul
 12192  1D6E                     ___lmul:	
 12193                           
 12194                           ;incstack = 0
 12195                           ; Regs used in ___lmul: [wreg+status,2+status,0]
 12196  1D6E  3000               	movlw	0
 12197  1D6F  00FC               	movwf	___lmul@product+3
 12198  1D70  3000               	movlw	0
 12199  1D71  00FB               	movwf	___lmul@product+2
 12200  1D72  3000               	movlw	0
 12201  1D73  00FA               	movwf	___lmul@product+1
 12202  1D74  3000               	movlw	0
 12203  1D75  00F9               	movwf	___lmul@product
 12204  1D76                     l4270:	
 12205  1D76  1C70               	btfss	___lmul@multiplier,0
 12206  1D77  2D8C               	goto	l4274
 12207  1D78  0874               	movf	___lmul@multiplicand,w
 12208  1D79  07F9               	addwf	___lmul@product,f
 12209  1D7A  0875               	movf	___lmul@multiplicand+1,w
 12210  1D7B  1103               	clrz
 12211  1D7C  1803               	skipnc
 12212  1D7D  3E01               	addlw	1
 12213  1D7E  1D03               	btfss	3,2
 12214  1D7F  07FA               	addwf	___lmul@product+1,f
 12215  1D80  0876               	movf	___lmul@multiplicand+2,w
 12216  1D81  1103               	clrz
 12217  1D82  1803               	skipnc
 12218  1D83  3E01               	addlw	1
 12219  1D84  1D03               	btfss	3,2
 12220  1D85  07FB               	addwf	___lmul@product+2,f
 12221  1D86  0877               	movf	___lmul@multiplicand+3,w
 12222  1D87  1103               	clrz
 12223  1D88  1803               	skipnc
 12224  1D89  3E01               	addlw	1
 12225  1D8A  1D03               	btfss	3,2
 12226  1D8B  07FC               	addwf	___lmul@product+3,f
 12227  1D8C                     l4274:	
 12228  1D8C  3001               	movlw	1
 12229  1D8D  00F8               	movwf	??___lmul
 12230  1D8E                     u4755:	
 12231  1D8E  1003               	clrc
 12232  1D8F  0DF4               	rlf	___lmul@multiplicand,f
 12233  1D90  0DF5               	rlf	___lmul@multiplicand+1,f
 12234  1D91  0DF6               	rlf	___lmul@multiplicand+2,f
 12235  1D92  0DF7               	rlf	___lmul@multiplicand+3,f
 12236  1D93  0BF8               	decfsz	??___lmul,f
 12237  1D94  2D8E               	goto	u4755
 12238  1D95  3001               	movlw	1
 12239  1D96                     u4765:	
 12240  1D96  1003               	clrc
 12241  1D97  0CF3               	rrf	___lmul@multiplier+3,f
 12242  1D98  0CF2               	rrf	___lmul@multiplier+2,f
 12243  1D99  0CF1               	rrf	___lmul@multiplier+1,f
 12244  1D9A  0CF0               	rrf	___lmul@multiplier,f
 12245  1D9B  3EFF               	addlw	-1
 12246  1D9C  1D03               	skipz
 12247  1D9D  2D96               	goto	u4765
 12248  1D9E  0873               	movf	___lmul@multiplier+3,w
 12249  1D9F  0472               	iorwf	___lmul@multiplier+2,w
 12250  1DA0  0471               	iorwf	___lmul@multiplier+1,w
 12251  1DA1  0470               	iorwf	___lmul@multiplier,w
 12252  1DA2  1D03               	skipz
 12253  1DA3  2D76               	goto	l4270
 12254  1DA4  087C               	movf	___lmul@product+3,w
 12255  1DA5  00F3               	movwf	?___lmul+3
 12256  1DA6  087B               	movf	___lmul@product+2,w
 12257  1DA7  00F2               	movwf	?___lmul+2
 12258  1DA8  087A               	movf	___lmul@product+1,w
 12259  1DA9  00F1               	movwf	?___lmul+1
 12260  1DAA  0879               	movf	___lmul@product,w
 12261  1DAB  00F0               	movwf	?___lmul
 12262  1DAC  0008               	return
 12263  1DAD                     __end_of___lmul:	
 12264                           
 12265                           	psect	text55
 12266  1002                     __ptext55:	
 12267 ;; *************** function ___awmod *****************
 12268 ;; Defined at:
 12269 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\awmod.c"
 12270 ;; Parameters:    Size  Location     Type
 12271 ;;  divisor         2    7[BANK0 ] int 
 12272 ;;  dividend        2    9[BANK0 ] int 
 12273 ;; Auto vars:     Size  Location     Type
 12274 ;;  sign            1   12[BANK0 ] unsigned char 
 12275 ;;  counter         1   11[BANK0 ] unsigned char 
 12276 ;; Return value:  Size  Location     Type
 12277 ;;                  2    7[BANK0 ] int 
 12278 ;; Registers used:
 12279 ;;		wreg, status,2, status,0
 12280 ;; Tracked objects:
 12281 ;;		On entry : 0/0
 12282 ;;		On exit  : 0/0
 12283 ;;		Unchanged: 0/0
 12284 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 12285 ;;      Params:         0       4       0       0       0
 12286 ;;      Locals:         0       2       0       0       0
 12287 ;;      Temps:          1       0       0       0       0
 12288 ;;      Totals:         1       6       0       0       0
 12289 ;;Total ram usage:        7 bytes
 12290 ;; Hardware stack levels used:    1
 12291 ;; This function calls:
 12292 ;;		Nothing
 12293 ;; This function is called by:
 12294 ;;		_lg_char_info_index_rand
 12295 ;;		_USARTWriteInt
 12296 ;; This function uses a non-reentrant model
 12297 ;;
 12298                           
 12299                           
 12300                           ;psect for function ___awmod
 12301  1002                     ___awmod:	
 12302                           
 12303                           ;incstack = 0
 12304                           ; Regs used in ___awmod: [wreg+status,2+status,0]
 12305  1002  1283               	bcf	3,5	;RP0=0, select bank0
 12306  1003  1303               	bcf	3,6	;RP1=0, select bank0
 12307  1004  01AC               	clrf	___awmod@sign
 12308  1005  1FAA               	btfss	___awmod@dividend+1,7
 12309  1006  280E               	goto	l4918
 12310  1007  09A9               	comf	___awmod@dividend,f
 12311  1008  09AA               	comf	___awmod@dividend+1,f
 12312  1009  0AA9               	incf	___awmod@dividend,f
 12313  100A  1903               	skipnz
 12314  100B  0AAA               	incf	___awmod@dividend+1,f
 12315  100C  01AC               	clrf	___awmod@sign
 12316  100D  0AAC               	incf	___awmod@sign,f
 12317  100E                     l4918:	
 12318  100E  1FA8               	btfss	___awmod@divisor+1,7
 12319  100F  2815               	goto	l4922
 12320  1010  09A7               	comf	___awmod@divisor,f
 12321  1011  09A8               	comf	___awmod@divisor+1,f
 12322  1012  0AA7               	incf	___awmod@divisor,f
 12323  1013  1903               	skipnz
 12324  1014  0AA8               	incf	___awmod@divisor+1,f
 12325  1015                     l4922:	
 12326  1015  0827               	movf	___awmod@divisor,w
 12327  1016  0428               	iorwf	___awmod@divisor+1,w
 12328  1017  1903               	btfsc	3,2
 12329  1018  2842               	goto	l4940
 12330  1019  01AB               	clrf	___awmod@counter
 12331  101A  0AAB               	incf	___awmod@counter,f
 12332  101B                     l4930:	
 12333  101B  1BA8               	btfsc	___awmod@divisor+1,7
 12334  101C  2829               	goto	l4932
 12335  101D  3001               	movlw	1
 12336  101E                     u6095:	
 12337  101E  1003               	clrc
 12338  101F  0DA7               	rlf	___awmod@divisor,f
 12339  1020  0DA8               	rlf	___awmod@divisor+1,f
 12340  1021  3EFF               	addlw	-1
 12341  1022  1D03               	skipz
 12342  1023  281E               	goto	u6095
 12343  1024  3001               	movlw	1
 12344  1025  00FD               	movwf	??___awmod
 12345  1026  087D               	movf	??___awmod,w
 12346  1027  07AB               	addwf	___awmod@counter,f
 12347  1028  281B               	goto	l4930
 12348  1029                     l4932:	
 12349  1029  0828               	movf	___awmod@divisor+1,w
 12350  102A  022A               	subwf	___awmod@dividend+1,w
 12351  102B  1D03               	skipz
 12352  102C  282F               	goto	u6115
 12353  102D  0827               	movf	___awmod@divisor,w
 12354  102E  0229               	subwf	___awmod@dividend,w
 12355  102F                     u6115:	
 12356  102F  1C03               	skipc
 12357  1030  2837               	goto	l4936
 12358  1031  0827               	movf	___awmod@divisor,w
 12359  1032  02A9               	subwf	___awmod@dividend,f
 12360  1033  0828               	movf	___awmod@divisor+1,w
 12361  1034  1C03               	skipc
 12362  1035  03AA               	decf	___awmod@dividend+1,f
 12363  1036  02AA               	subwf	___awmod@dividend+1,f
 12364  1037                     l4936:	
 12365  1037  3001               	movlw	1
 12366  1038                     u6125:	
 12367  1038  1003               	clrc
 12368  1039  0CA8               	rrf	___awmod@divisor+1,f
 12369  103A  0CA7               	rrf	___awmod@divisor,f
 12370  103B  3EFF               	addlw	-1
 12371  103C  1D03               	skipz
 12372  103D  2838               	goto	u6125
 12373  103E  3001               	movlw	1
 12374  103F  02AB               	subwf	___awmod@counter,f
 12375  1040  1D03               	btfss	3,2
 12376  1041  2829               	goto	l4932
 12377  1042                     l4940:	
 12378  1042  082C               	movf	___awmod@sign,w
 12379  1043  1903               	btfsc	3,2
 12380  1044  284A               	goto	l4944
 12381  1045  09A9               	comf	___awmod@dividend,f
 12382  1046  09AA               	comf	___awmod@dividend+1,f
 12383  1047  0AA9               	incf	___awmod@dividend,f
 12384  1048  1903               	skipnz
 12385  1049  0AAA               	incf	___awmod@dividend+1,f
 12386  104A                     l4944:	
 12387  104A  082A               	movf	___awmod@dividend+1,w
 12388  104B  00A8               	movwf	?___awmod+1
 12389  104C  0829               	movf	___awmod@dividend,w
 12390  104D  00A7               	movwf	?___awmod
 12391  104E  0008               	return
 12392  104F                     __end_of___awmod:	
 12393                           
 12394                           	psect	text56
 12395  1A79                     __ptext56:	
 12396 ;; *************** function _eeprom_write_int *****************
 12397 ;; Defined at:
 12398 ;;		line 2 in file "../eeprom_operator.h"
 12399 ;; Parameters:    Size  Location     Type
 12400 ;;  at              1    wreg     unsigned char 
 12401 ;;  value           2   21[BANK0 ] unsigned int 
 12402 ;; Auto vars:     Size  Location     Type
 12403 ;;  at              1   26[BANK0 ] unsigned char 
 12404 ;;  n               2   24[BANK0 ] int 
 12405 ;;  temp            1   27[BANK0 ] unsigned char 
 12406 ;; Return value:  Size  Location     Type
 12407 ;;                  1    wreg      void 
 12408 ;; Registers used:
 12409 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
 12410 ;; Tracked objects:
 12411 ;;		On entry : 0/0
 12412 ;;		On exit  : 0/0
 12413 ;;		Unchanged: 0/0
 12414 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 12415 ;;      Params:         0       2       0       0       0
 12416 ;;      Locals:         0       4       0       0       0
 12417 ;;      Temps:          0       1       0       0       0
 12418 ;;      Totals:         0       7       0       0       0
 12419 ;;Total ram usage:        7 bytes
 12420 ;; Hardware stack levels used:    1
 12421 ;; Hardware stack levels required when called:    2
 12422 ;; This function calls:
 12423 ;;		_USARTWriteString
 12424 ;;		_eeprom_write
 12425 ;;		_sprintf
 12426 ;; This function is called by:
 12427 ;;		_main
 12428 ;; This function uses a non-reentrant model
 12429 ;;
 12430                           
 12431                           
 12432                           ;psect for function _eeprom_write_int
 12433  1A79                     _eeprom_write_int:	
 12434                           
 12435                           ;incstack = 0
 12436                           ; Regs used in _eeprom_write_int: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
 12437                           ;eeprom_write_int@at stored from wreg
 12438  1A79  1283               	bcf	3,5	;RP0=0, select bank0
 12439  1A7A  1303               	bcf	3,6	;RP1=0, select bank0
 12440  1A7B  00BA               	movwf	eeprom_write_int@at
 12441                           
 12442                           ;eeprom_operator.h: 4: uint8_t temp;
 12443                           ;eeprom_operator.h: 5: temp = value >> 8;
 12444  1A7C  0836               	movf	eeprom_write_int@value+1,w
 12445  1A7D  00B7               	movwf	??_eeprom_write_int
 12446  1A7E  0837               	movf	??_eeprom_write_int,w
 12447  1A7F  00BB               	movwf	eeprom_write_int@temp
 12448                           
 12449                           ;eeprom_operator.h: 6: eeprom_write(at, temp);
 12450  1A80  083B               	movf	eeprom_write_int@temp,w
 12451  1A81  00B7               	movwf	??_eeprom_write_int
 12452  1A82  0837               	movf	??_eeprom_write_int,w
 12453  1A83  00F0               	movwf	eeprom_write@value
 12454  1A84  083A               	movf	eeprom_write_int@at,w
 12455  1A85  160A  158A  22C1  160A  158A  	fcall	_eeprom_write
 12456                           
 12457                           ;eeprom_operator.h: 8: temp = value & 0xFF;
 12458  1A8A  1283               	bcf	3,5	;RP0=0, select bank0
 12459  1A8B  1303               	bcf	3,6	;RP1=0, select bank0
 12460  1A8C  0835               	movf	eeprom_write_int@value,w
 12461  1A8D  00B7               	movwf	??_eeprom_write_int
 12462  1A8E  0837               	movf	??_eeprom_write_int,w
 12463  1A8F  00BB               	movwf	eeprom_write_int@temp
 12464                           
 12465                           ;eeprom_operator.h: 9: eeprom_write(at + 1, temp);
 12466  1A90  083B               	movf	eeprom_write_int@temp,w
 12467  1A91  00B7               	movwf	??_eeprom_write_int
 12468  1A92  0837               	movf	??_eeprom_write_int,w
 12469  1A93  00F0               	movwf	eeprom_write@value
 12470  1A94  083A               	movf	eeprom_write_int@at,w
 12471  1A95  3E01               	addlw	1
 12472  1A96  160A  158A  22C1   	fcall	_eeprom_write
 12473                           
 12474                           ;eeprom_operator.h: 10: do { if(0) { int n = sprintf(g_debug, "eeprom_write_int = %d""\r
      +                          \n", value); if(n > 64) { USARTWriteString("ERROR: g_debug is overflowed\r\n"); do { ((v
      +                          oid)0); asm("ljmp $"); }while(0); } USARTWriteString(g_debug); } } while (0);;
 12475  1A99  0008               	return
 12476  1A9A  160A  158A  2A79   	ljmp	$	;# 
 12477  1A9D                     __end_of_eeprom_write_int:	
 12478                           
 12479                           	psect	text57
 12480  0E7C                     __ptext57:	
 12481 ;; *************** function _sprintf *****************
 12482 ;; Defined at:
 12483 ;;		line 492 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\doprnt.c"
 12484 ;; Parameters:    Size  Location     Type
 12485 ;;  sp              1    wreg     PTR unsigned char 
 12486 ;;		 -> g_debug(64), 
 12487 ;;  f               2    0[BANK0 ] PTR const unsigned char 
 12488 ;;		 -> STR_156(12), STR_154(15), STR_152(15), STR_150(25), 
 12489 ;;		 -> STR_148(29), STR_146(12), STR_144(23), STR_142(15), 
 12490 ;;		 -> STR_140(61), STR_139(7), STR_137(54), STR_135(20), 
 12491 ;;		 -> STR_133(17), STR_131(19), STR_130(15), STR_129(15), 
 12492 ;;		 -> STR_128(15), STR_126(27), STR_124(16), STR_122(12), 
 12493 ;;		 -> STR_120(13), STR_118(11), STR_116(14), STR_114(11), 
 12494 ;;		 -> STR_112(9), STR_110(28), STR_108(28), STR_106(18), 
 12495 ;;		 -> STR_104(17), STR_102(12), STR_100(12), STR_99(23), 
 12496 ;;		 -> STR_98(24), STR_97(24), STR_95(17), STR_93(12), 
 12497 ;;		 -> STR_91(17), STR_89(12), STR_87(28), STR_85(27), 
 12498 ;;		 -> STR_83(8), STR_81(21), STR_79(13), STR_77(21), 
 12499 ;;		 -> STR_75(13), STR_73(21), STR_71(13), STR_69(37), 
 12500 ;;		 -> STR_67(10), STR_65(26), STR_63(26), STR_61(37), 
 12501 ;;		 -> STR_59(21), STR_57(27), STR_56(24), STR_55(25), 
 12502 ;;		 -> STR_54(12), STR_52(18), STR_50(11), STR_48(23), 
 12503 ;;		 -> STR_46(24), STR_44(4), STR_41(4), STR_38(23), 
 12504 ;;		 -> STR_36(3), STR_34(2), STR_32(2), STR_30(23), 
 12505 ;;		 -> STR_28(4), STR_25(23), STR_23(3), STR_21(2), 
 12506 ;;		 -> STR_19(2), STR_17(33), STR_15(4), STR_12(23), 
 12507 ;;		 -> STR_10(3), STR_8(2), STR_6(2), STR_4(32), 
 12508 ;;		 -> STR_2(4), ROM(8192), 
 12509 ;; Auto vars:     Size  Location     Type
 12510 ;;  sp              1   20[BANK0 ] PTR unsigned char 
 12511 ;;		 -> g_debug(64), 
 12512 ;;  idx             1   11[BANK0 ] unsigned char 
 12513 ;;  tmpval          4    0        struct .
 12514 ;;  val             2   17[BANK0 ] unsigned int 
 12515 ;;  ccnt            2   12[BANK0 ] int 
 12516 ;;  cp              2    0        PTR const unsigned char 
 12517 ;;  len             2    0        unsigned int 
 12518 ;;  c               1   19[BANK0 ] char 
 12519 ;;  flag            1   16[BANK0 ] unsigned char 
 12520 ;;  prec            1   15[BANK0 ] char 
 12521 ;;  ap              1   14[BANK0 ] PTR void [1]
 12522 ;;		 -> ?_sprintf(2), 
 12523 ;; Return value:  Size  Location     Type
 12524 ;;                  2    0[BANK0 ] int 
 12525 ;; Registers used:
 12526 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
 12527 ;; Tracked objects:
 12528 ;;		On entry : 0/0
 12529 ;;		On exit  : 0/0
 12530 ;;		Unchanged: 0/0
 12531 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 12532 ;;      Params:         0       8       0       0       0
 12533 ;;      Locals:         0      10       0       0       0
 12534 ;;      Temps:          0       3       0       0       0
 12535 ;;      Totals:         0      21       0       0       0
 12536 ;;Total ram usage:       21 bytes
 12537 ;; Hardware stack levels used:    1
 12538 ;; Hardware stack levels required when called:    1
 12539 ;; This function calls:
 12540 ;;		___lwdiv
 12541 ;;		___lwmod
 12542 ;; This function is called by:
 12543 ;;		_dbg_print_MATRIX4x4
 12544 ;;		_dbg_print_MATRIX16x8
 12545 ;;		_dbg_print_Screen
 12546 ;;		_dbg_print_cur_MATRIX4x4
 12547 ;;		_eeprom_write_int
 12548 ;;		_eeprom_read_int
 12549 ;;		_lg_is_row_full
 12550 ;;		_lg_delete_matrix
 12551 ;;		_lg_get_num_removed_rows
 12552 ;;		_lg_hit_land
 12553 ;;		_lg_is_valid
 12554 ;;		_lg_is_left_boundary
 12555 ;;		_lg_is_right_boundary
 12556 ;;		_lg_fall_off
 12557 ;;		_lg_get_num_of_orphan
 12558 ;;		_lg_get_weight
 12559 ;;		_lg_left_most
 12560 ;;		_lg_right_most
 12561 ;;		_lg_get_height
 12562 ;;		_lg_get_height_after_merge
 12563 ;;		_lg_get_holes_after_merge
 12564 ;;		_lg_find_best_solution
 12565 ;;		_main
 12566 ;;		_dbg_print_MATRIX_MATRIX7219
 12567 ;;		_dbg_print_all_MATRIX4x4
 12568 ;; This function uses a non-reentrant model
 12569 ;;
 12570                           
 12571                           
 12572                           ;psect for function _sprintf
 12573  0E7C                     _sprintf:	
 12574                           
 12575                           ;incstack = 0
 12576                           ; Regs used in _sprintf: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
 12577                           ;sprintf@sp stored from wreg
 12578  0E7C  1283               	bcf	3,5	;RP0=0, select bank0
 12579  0E7D  1303               	bcf	3,6	;RP1=0, select bank0
 12580  0E7E  00B4               	movwf	sprintf@sp
 12581                           
 12582                           ;doprnt.c: 494: va_list ap;
 12583                           ;doprnt.c: 499: signed char c;
 12584                           ;doprnt.c: 506: signed char prec;
 12585                           ;doprnt.c: 508: unsigned char flag;
 12586                           ;doprnt.c: 510: int ccnt = 0;
 12587  0E7F  01AC               	clrf	sprintf@ccnt
 12588  0E80  01AD               	clrf	sprintf@ccnt+1
 12589                           
 12590                           ;doprnt.c: 523: union {
 12591                           ;doprnt.c: 524: unsigned long vd;
 12592                           ;doprnt.c: 525: double integ;
 12593                           ;doprnt.c: 526: } tmpval;
 12594                           ;doprnt.c: 528: unsigned int val;
 12595                           ;doprnt.c: 529: unsigned len;
 12596                           ;doprnt.c: 530: const char * cp;
 12597                           ;doprnt.c: 533: *ap = __va_start();
 12598  0E81  3022               	movlw	(low ((?_sprintf| 0+2)))& (0+255)
 12599  0E82  00A8               	movwf	??_sprintf
 12600  0E83  0828               	movf	??_sprintf,w
 12601  0E84  00AE               	movwf	sprintf@ap
 12602                           
 12603                           ;doprnt.c: 635: switch(c = *f++) {
 12604  0E85  2E99               	goto	l3872
 12605  0E86                     l977:	
 12606                           ;doprnt.c: 712: case 'X':
 12607                           
 12608                           ;doprnt.c: 698: case 'i':
 12609                           ;doprnt.c: 699: break;
 12610                           
 12611                           ;doprnt.c: 697: case 'd':
 12612                           
 12613                           ;doprnt.c: 638: goto alldone;
 12614                           
 12615                           ;doprnt.c: 637: case 0:
 12616                           
 12617                           
 12618                           ;doprnt.c: 718: case 'x':
 12619                           ;doprnt.c: 721: flag |= 0x80;
 12620  0E86  17B0               	bsf	sprintf@flag,7
 12621                           
 12622                           ;doprnt.c: 723: break;
 12623  0E87  2ED5               	goto	l975
 12624  0E88                     l3796:	
 12625                           ;doprnt.c: 802: default:
 12626                           
 12627                           
 12628                           ;doprnt.c: 809: ((*sp++ = (c)),(++ccnt));
 12629  0E88  0833               	movf	sprintf@c,w
 12630  0E89  00A8               	movwf	??_sprintf
 12631  0E8A  0834               	movf	sprintf@sp,w
 12632  0E8B  0084               	movwf	4
 12633  0E8C  0828               	movf	??_sprintf,w
 12634  0E8D  1783               	bsf	3,7	;select IRP bank2
 12635  0E8E  0080               	movwf	0
 12636  0E8F  3001               	movlw	1
 12637  0E90  00A8               	movwf	??_sprintf
 12638  0E91  0828               	movf	??_sprintf,w
 12639  0E92  07B4               	addwf	sprintf@sp,f
 12640  0E93  3001               	movlw	1
 12641  0E94  07AC               	addwf	sprintf@ccnt,f
 12642  0E95  1803               	skipnc
 12643  0E96  0AAD               	incf	sprintf@ccnt+1,f
 12644  0E97  3000               	movlw	0
 12645  0E98  07AD               	addwf	sprintf@ccnt+1,f
 12646  0E99                     l3872:	
 12647                           ;doprnt.c: 536: while(c = *f++) {
 12648                           
 12649                           ;doprnt.c: 810: continue;
 12650                           
 12651  0E99  0821               	movf	sprintf@f+1,w
 12652  0E9A  00A9               	movwf	??_sprintf+1
 12653  0E9B  0820               	movf	sprintf@f,w
 12654  0E9C  00A8               	movwf	??_sprintf
 12655  0E9D  0AA0               	incf	sprintf@f,f
 12656  0E9E  1903               	skipnz
 12657  0E9F  0AA1               	incf	sprintf@f+1,f
 12658  0EA0  0829               	movf	??_sprintf+1,w
 12659  0EA1  00FF               	movwf	127
 12660  0EA2  0828               	movf	??_sprintf,w
 12661  0EA3  0084               	movwf	4
 12662  0EA4  120A  158A  2000  120A  158A  	fcall	stringtab
 12663  0EA9  00AA               	movwf	??_sprintf+2
 12664  0EAA  082A               	movf	??_sprintf+2,w
 12665  0EAB  00B3               	movwf	sprintf@c
 12666  0EAC  0833               	movf	sprintf@c,w
 12667  0EAD  1903               	btfsc	3,2
 12668  0EAE  2FF7               	goto	l3874
 12669                           
 12670                           ;doprnt.c: 538: if(c != '%')
 12671  0EAF  3025               	movlw	37
 12672  0EB0  0633               	xorwf	sprintf@c,w
 12673  0EB1  1D03               	btfss	3,2
 12674  0EB2  2E88               	goto	l3796
 12675                           
 12676                           ;doprnt.c: 543: }
 12677                           ;doprnt.c: 548: flag = 0;
 12678                           
 12679                           ;doprnt.c: 542: continue;
 12680                           
 12681                           ;doprnt.c: 540: {
 12682                           ;doprnt.c: 541: ((*sp++ = (c)),(++ccnt));
 12683  0EB3  01B0               	clrf	sprintf@flag
 12684                           
 12685                           ;doprnt.c: 822: }
 12686  0EB4  0821               	movf	sprintf@f+1,w
 12687  0EB5  00A9               	movwf	??_sprintf+1
 12688  0EB6  0820               	movf	sprintf@f,w
 12689  0EB7  00A8               	movwf	??_sprintf
 12690  0EB8  0AA0               	incf	sprintf@f,f
 12691  0EB9  1903               	skipnz
 12692  0EBA  0AA1               	incf	sprintf@f+1,f
 12693  0EBB  0829               	movf	??_sprintf+1,w
 12694  0EBC  00FF               	movwf	127
 12695  0EBD  0828               	movf	??_sprintf,w
 12696  0EBE  0084               	movwf	4
 12697  0EBF  120A  158A  2000  120A  158A  	fcall	stringtab
 12698  0EC4  00B3               	movwf	sprintf@c
 12699                           
 12700                           ; Switch size 1, requested type "space"
 12701                           ; Number of cases is 5, Range of values is 0 to 120
 12702                           ; switch strategies available:
 12703                           ; Name         Instructions Cycles
 12704                           ; simple_byte           16     9 (average)
 12705                           ; jumptable            260     6 (fixed)
 12706                           ;	Chosen strategy is simple_byte
 12707  0EC5  3A00               	xorlw	0	; case 0
 12708  0EC6  1903               	skipnz
 12709  0EC7  2FF7               	goto	l3874
 12710  0EC8  3A58               	xorlw	88	; case 88
 12711  0EC9  1903               	skipnz
 12712  0ECA  2E86               	goto	l977
 12713  0ECB  3A3C               	xorlw	60	; case 100
 12714  0ECC  1903               	skipnz
 12715  0ECD  2ED5               	goto	l975
 12716  0ECE  3A0D               	xorlw	13	; case 105
 12717  0ECF  1903               	skipnz
 12718  0ED0  2ED5               	goto	l975
 12719  0ED1  3A11               	xorlw	17	; case 120
 12720  0ED2  1903               	skipnz
 12721  0ED3  2E86               	goto	l977
 12722  0ED4  2E88               	goto	l3796
 12723  0ED5                     l975:	
 12724                           
 12725                           ;doprnt.c: 1251: if((flag & 0x80) == 0x00)
 12726  0ED5  1BB0               	btfsc	sprintf@flag,7
 12727  0ED6  2EEF               	goto	l3816
 12728                           
 12729                           ;doprnt.c: 1253: {
 12730                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
 12731  0ED7  082E               	movf	sprintf@ap,w
 12732  0ED8  0084               	movwf	4
 12733  0ED9  1383               	bcf	3,7	;select IRP bank0
 12734  0EDA  0800               	movf	0,w
 12735  0EDB  00B1               	movwf	sprintf@val
 12736  0EDC  0A84               	incf	4,f
 12737  0EDD  0800               	movf	0,w
 12738  0EDE  00B2               	movwf	sprintf@val+1
 12739  0EDF  3002               	movlw	2
 12740  0EE0  00A8               	movwf	??_sprintf
 12741  0EE1  0828               	movf	??_sprintf,w
 12742  0EE2  07AE               	addwf	sprintf@ap,f
 12743                           
 12744                           ;doprnt.c: 1261: if((int)val < 0) {
 12745  0EE3  1FB2               	btfss	sprintf@val+1,7
 12746  0EE4  2F4C               	goto	l3842
 12747                           
 12748                           ;doprnt.c: 1262: flag |= 0x03;
 12749  0EE5  3003               	movlw	3
 12750  0EE6  00A8               	movwf	??_sprintf
 12751  0EE7  0828               	movf	??_sprintf,w
 12752  0EE8  04B0               	iorwf	sprintf@flag,f
 12753                           
 12754                           ;doprnt.c: 1263: val = -val;
 12755  0EE9  09B1               	comf	sprintf@val,f
 12756  0EEA  09B2               	comf	sprintf@val+1,f
 12757  0EEB  0AB1               	incf	sprintf@val,f
 12758  0EEC  1903               	skipnz
 12759  0EED  0AB2               	incf	sprintf@val+1,f
 12760                           
 12761                           ;doprnt.c: 1264: }
 12762                           ;doprnt.c: 1266: }
 12763  0EEE  2F4C               	goto	l3842
 12764  0EEF                     l3816:	
 12765                           
 12766                           ;doprnt.c: 1268: else
 12767                           ;doprnt.c: 1273: {
 12768                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
 12769  0EEF  082E               	movf	sprintf@ap,w
 12770  0EF0  0084               	movwf	4
 12771  0EF1  1383               	bcf	3,7	;select IRP bank0
 12772  0EF2  0800               	movf	0,w
 12773  0EF3  00B1               	movwf	sprintf@val
 12774  0EF4  0A84               	incf	4,f
 12775  0EF5  0800               	movf	0,w
 12776  0EF6  00B2               	movwf	sprintf@val+1
 12777  0EF7  3002               	movlw	2
 12778  0EF8  00A8               	movwf	??_sprintf
 12779  0EF9  0828               	movf	??_sprintf,w
 12780  0EFA  07AE               	addwf	sprintf@ap,f
 12781                           
 12782                           ;doprnt.c: 1287: }
 12783                           ;doprnt.c: 1294: switch((unsigned char)(flag & 0x80)) {
 12784  0EFB  2F4C               	goto	l3842
 12785  0EFC                     l983:	
 12786                           ;doprnt.c: 1299: case 0x00:
 12787                           
 12788                           
 12789                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
 12790  0EFC  01B3               	clrf	sprintf@c
 12791  0EFD  0AB3               	incf	sprintf@c,f
 12792  0EFE                     L24:	
 12793  0EFE  3005               	movlw	5
 12794  0EFF  0633               	xorwf	sprintf@c,w
 12795  0F00  1903               	btfsc	3,2
 12796  0F01  2F55               	goto	l3844
 12797                           
 12798                           ;doprnt.c: 1306: if(val < dpowers[c])
 12799  0F02  0833               	movf	sprintf@c,w
 12800  0F03  00A8               	movwf	??_sprintf
 12801  0F04  0728               	addwf	??_sprintf,w
 12802  0F05  3E12               	addlw	low (_dpowers| (0+32768))
 12803  0F06  0084               	movwf	4
 12804  0F07  3088               	movlw	high (_dpowers| (0+32768))
 12805  0F08  1803               	skipnc
 12806  0F09  3E01               	addlw	1
 12807  0F0A  00FF               	movwf	127
 12808  0F0B  120A  158A  2000  120A  158A  	fcall	stringtab
 12809  0F10  00A9               	movwf	??_sprintf+1
 12810  0F11  120A  158A  2000  120A  158A  	fcall	stringtab
 12811  0F16  00AA               	movwf	??_sprintf+2
 12812  0F17  082A               	movf	??_sprintf+2,w
 12813  0F18  0232               	subwf	sprintf@val+1,w
 12814  0F19  1D03               	skipz
 12815  0F1A  2F1D               	goto	u3985
 12816  0F1B  0829               	movf	??_sprintf+1,w
 12817  0F1C  0231               	subwf	sprintf@val,w
 12818  0F1D                     u3985:	
 12819  0F1D  1C03               	btfss	3,0
 12820  0F1E  2F55               	goto	l3844
 12821                           
 12822                           ;doprnt.c: 1307: break;
 12823  0F1F  3001               	movlw	1
 12824  0F20  00A8               	movwf	??_sprintf
 12825  0F21  0828               	movf	??_sprintf,w
 12826  0F22  07B3               	addwf	sprintf@c,f
 12827  0F23  2EFE               	goto	L24
 12828  0F24                     l988:	
 12829                           ;doprnt.c: 1314: case 0x80:
 12830                           
 12831                           ;doprnt.c: 1309: break;
 12832                           
 12833                           
 12834                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
 12835  0F24  01B3               	clrf	sprintf@c
 12836  0F25  0AB3               	incf	sprintf@c,f
 12837  0F26                     L25:	
 12838  0F26  3004               	movlw	4
 12839  0F27  0633               	xorwf	sprintf@c,w
 12840  0F28  1903               	btfsc	3,2
 12841  0F29  2F55               	goto	l3844
 12842                           
 12843                           ;doprnt.c: 1317: if(val < hexpowers[c])
 12844  0F2A  0833               	movf	sprintf@c,w
 12845  0F2B  00A8               	movwf	??_sprintf
 12846  0F2C  0728               	addwf	??_sprintf,w
 12847  0F2D  3E1C               	addlw	low (_hexpowers| (0+32768))
 12848  0F2E  0084               	movwf	4
 12849  0F2F  3088               	movlw	high (_hexpowers| (0+32768))
 12850  0F30  1803               	skipnc
 12851  0F31  3E01               	addlw	1
 12852  0F32  00FF               	movwf	127
 12853  0F33  120A  158A  2000  120A  158A  	fcall	stringtab
 12854  0F38  00A9               	movwf	??_sprintf+1
 12855  0F39  120A  158A  2000  120A  158A  	fcall	stringtab
 12856  0F3E  00AA               	movwf	??_sprintf+2
 12857  0F3F  082A               	movf	??_sprintf+2,w
 12858  0F40  0232               	subwf	sprintf@val+1,w
 12859  0F41  1D03               	skipz
 12860  0F42  2F45               	goto	u4015
 12861  0F43  0829               	movf	??_sprintf+1,w
 12862  0F44  0231               	subwf	sprintf@val,w
 12863  0F45                     u4015:	
 12864  0F45  1C03               	btfss	3,0
 12865  0F46  2F55               	goto	l3844
 12866                           
 12867                           ;doprnt.c: 1318: break;
 12868  0F47  3001               	movlw	1
 12869  0F48  00A8               	movwf	??_sprintf
 12870  0F49  0828               	movf	??_sprintf,w
 12871  0F4A  07B3               	addwf	sprintf@c,f
 12872  0F4B  2F26               	goto	L25
 12873  0F4C                     l3842:	
 12874                           ;doprnt.c: 1336: }
 12875                           
 12876                           ;doprnt.c: 1320: break;
 12877                           
 12878  0F4C  0830               	movf	sprintf@flag,w
 12879  0F4D  3980               	andlw	128
 12880                           
 12881                           ; Switch size 1, requested type "space"
 12882                           ; Number of cases is 2, Range of values is 0 to 128
 12883                           ; switch strategies available:
 12884                           ; Name         Instructions Cycles
 12885                           ; simple_byte            7     4 (average)
 12886                           ; jumptable            260     6 (fixed)
 12887                           ;	Chosen strategy is simple_byte
 12888  0F4E  3A00               	xorlw	0	; case 0
 12889  0F4F  1903               	skipnz
 12890  0F50  2EFC               	goto	l983
 12891  0F51  3A80               	xorlw	128	; case 128
 12892  0F52  1903               	skipnz
 12893  0F53  2F24               	goto	l988
 12894  0F54  2F55               	goto	l3844
 12895  0F55                     l3844:	
 12896                           
 12897                           ;doprnt.c: 1422: {
 12898                           ;doprnt.c: 1438: if(flag & 0x03)
 12899  0F55  0830               	movf	sprintf@flag,w
 12900  0F56  3903               	andlw	3
 12901  0F57  1903               	btfsc	3,2
 12902  0F58  2F6A               	goto	l3852
 12903                           
 12904                           ;doprnt.c: 1439: ((*sp++ = ('-')),(++ccnt));
 12905  0F59  302D               	movlw	45
 12906  0F5A  00A8               	movwf	??_sprintf
 12907  0F5B  0834               	movf	sprintf@sp,w
 12908  0F5C  0084               	movwf	4
 12909  0F5D  0828               	movf	??_sprintf,w
 12910  0F5E  1783               	bsf	3,7	;select IRP bank2
 12911  0F5F  0080               	movwf	0
 12912  0F60  3001               	movlw	1
 12913  0F61  00A8               	movwf	??_sprintf
 12914  0F62  0828               	movf	??_sprintf,w
 12915  0F63  07B4               	addwf	sprintf@sp,f
 12916  0F64  3001               	movlw	1
 12917  0F65  07AC               	addwf	sprintf@ccnt,f
 12918  0F66  1803               	skipnc
 12919  0F67  0AAD               	incf	sprintf@ccnt+1,f
 12920  0F68  3000               	movlw	0
 12921  0F69  07AD               	addwf	sprintf@ccnt+1,f
 12922  0F6A                     l3852:	
 12923                           
 12924                           ;doprnt.c: 1469: }
 12925                           ;doprnt.c: 1472: prec = c;
 12926  0F6A  0833               	movf	sprintf@c,w
 12927  0F6B  00A8               	movwf	??_sprintf
 12928  0F6C  0828               	movf	??_sprintf,w
 12929  0F6D  00AF               	movwf	sprintf@prec
 12930                           
 12931                           ;doprnt.c: 1474: while(prec--) {
 12932  0F6E  2FE6               	goto	l3870
 12933  0F6F                     l3854:	
 12934                           ;doprnt.c: 1478: {
 12935                           ;doprnt.c: 1483: case 0x00:
 12936                           
 12937                           ;doprnt.c: 1476: switch((unsigned char)(flag & 0x80))
 12938                           
 12939                           
 12940                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
 12941  0F6F  300A               	movlw	10
 12942  0F70  00F8               	movwf	___lwmod@divisor
 12943  0F71  3000               	movlw	0
 12944  0F72  00F9               	movwf	___lwmod@divisor+1
 12945  0F73  082F               	movf	sprintf@prec,w
 12946  0F74  00A8               	movwf	??_sprintf
 12947  0F75  0728               	addwf	??_sprintf,w
 12948  0F76  3E12               	addlw	low (_dpowers| (0+32768))
 12949  0F77  0084               	movwf	4
 12950  0F78  3088               	movlw	high (_dpowers| (0+32768))
 12951  0F79  1803               	skipnc
 12952  0F7A  3E01               	addlw	1
 12953  0F7B  00FF               	movwf	127
 12954  0F7C  120A  158A  2000  120A  158A  	fcall	stringtab
 12955  0F81  00F0               	movwf	___lwdiv@divisor
 12956  0F82  120A  158A  2000  120A  158A  	fcall	stringtab
 12957  0F87  00F1               	movwf	___lwdiv@divisor+1
 12958  0F88  0832               	movf	sprintf@val+1,w
 12959  0F89  00F3               	movwf	___lwdiv@dividend+1
 12960  0F8A  0831               	movf	sprintf@val,w
 12961  0F8B  00F2               	movwf	___lwdiv@dividend
 12962  0F8C  160A  158A  2532  120A  158A  	fcall	___lwdiv
 12963  0F91  0871               	movf	?___lwdiv+1,w
 12964  0F92  00FB               	movwf	___lwmod@dividend+1
 12965  0F93  0870               	movf	?___lwdiv,w
 12966  0F94  00FA               	movwf	___lwmod@dividend
 12967  0F95  160A  158A  24C9  120A  158A  	fcall	___lwmod
 12968  0F9A  0878               	movf	?___lwmod,w
 12969  0F9B  3E30               	addlw	48
 12970  0F9C  1283               	bcf	3,5	;RP0=0, select bank0
 12971  0F9D  1303               	bcf	3,6	;RP1=0, select bank0
 12972  0F9E  00A9               	movwf	??_sprintf+1
 12973  0F9F  0829               	movf	??_sprintf+1,w
 12974  0FA0  2FD4               	goto	L23
 12975  0FA1                     l3856:	
 12976                           ;doprnt.c: 1497: case 0x80:
 12977                           
 12978                           ;doprnt.c: 1491: break;
 12979                           
 12980                           
 12981                           ;doprnt.c: 1499: {
 12982                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
 12983  0FA1  082F               	movf	sprintf@prec,w
 12984  0FA2  00A8               	movwf	??_sprintf
 12985  0FA3  0728               	addwf	??_sprintf,w
 12986  0FA4  3E1C               	addlw	low (_hexpowers| (0+32768))
 12987  0FA5  0084               	movwf	4
 12988  0FA6  3088               	movlw	high (_hexpowers| (0+32768))
 12989  0FA7  1803               	skipnc
 12990  0FA8  3E01               	addlw	1
 12991  0FA9  00FF               	movwf	127
 12992  0FAA  120A  158A  2000  120A  158A  	fcall	stringtab
 12993  0FAF  00F0               	movwf	___lwdiv@divisor
 12994  0FB0  120A  158A  2000  120A  158A  	fcall	stringtab
 12995  0FB5  00F1               	movwf	___lwdiv@divisor+1
 12996  0FB6  0832               	movf	sprintf@val+1,w
 12997  0FB7  00F3               	movwf	___lwdiv@dividend+1
 12998  0FB8  0831               	movf	sprintf@val,w
 12999  0FB9  00F2               	movwf	___lwdiv@dividend
 13000  0FBA  160A  158A  2532  120A  158A  	fcall	___lwdiv
 13001  0FBF  0870               	movf	?___lwdiv,w
 13002  0FC0  390F               	andlw	15
 13003  0FC1  1283               	bcf	3,5	;RP0=0, select bank0
 13004  0FC2  1303               	bcf	3,6	;RP1=0, select bank0
 13005  0FC3  00A9               	movwf	??_sprintf+1
 13006  0FC4  0829               	movf	??_sprintf+1,w
 13007  0FC5  00AB               	movwf	sprintf@idx
 13008                           
 13009                           ;doprnt.c: 1504: c = "0123456789ABCDEF"[idx];
 13010  0FC6  082B               	movf	sprintf@idx,w
 13011  0FC7  3EAE               	addlw	low (STR_157| (0+32768))
 13012  0FC8  0084               	movwf	4
 13013  0FC9  308B               	movlw	high (STR_157| (0+32768))
 13014  0FCA  1803               	skipnc
 13015  0FCB  3E01               	addlw	1
 13016  0FCC  00FF               	movwf	127
 13017  0FCD  120A  158A  2000  120A  158A  	fcall	stringtab
 13018  0FD2  00A8               	movwf	??_sprintf
 13019  0FD3  0828               	movf	??_sprintf,w
 13020  0FD4                     L23:	
 13021  0FD4  00B3               	movwf	sprintf@c
 13022  0FD5                     l3864:	
 13023                           ;doprnt.c: 1523: }
 13024                           
 13025                           ;doprnt.c: 1508: }
 13026                           ;doprnt.c: 1510: break;
 13027                           
 13028                           
 13029                           ;doprnt.c: 1524: ((*sp++ = (c)),(++ccnt));
 13030  0FD5  0833               	movf	sprintf@c,w
 13031  0FD6  00A8               	movwf	??_sprintf
 13032  0FD7  0834               	movf	sprintf@sp,w
 13033  0FD8  0084               	movwf	4
 13034  0FD9  0828               	movf	??_sprintf,w
 13035  0FDA  1783               	bsf	3,7	;select IRP bank2
 13036  0FDB  0080               	movwf	0
 13037  0FDC  3001               	movlw	1
 13038  0FDD  00A8               	movwf	??_sprintf
 13039  0FDE  0828               	movf	??_sprintf,w
 13040  0FDF  07B4               	addwf	sprintf@sp,f
 13041  0FE0  3001               	movlw	1
 13042  0FE1  07AC               	addwf	sprintf@ccnt,f
 13043  0FE2  1803               	skipnc
 13044  0FE3  0AAD               	incf	sprintf@ccnt+1,f
 13045  0FE4  3000               	movlw	0
 13046  0FE5  07AD               	addwf	sprintf@ccnt+1,f
 13047  0FE6                     l3870:	
 13048  0FE6  30FF               	movlw	255
 13049  0FE7  00A8               	movwf	??_sprintf
 13050  0FE8  0828               	movf	??_sprintf,w
 13051  0FE9  07AF               	addwf	sprintf@prec,f
 13052  0FEA  0A2F               	incf	sprintf@prec,w
 13053  0FEB  1903               	btfsc	3,2
 13054  0FEC  2E99               	goto	l3872
 13055  0FED  0830               	movf	sprintf@flag,w
 13056  0FEE  3980               	andlw	128
 13057                           
 13058                           ; Switch size 1, requested type "space"
 13059                           ; Number of cases is 2, Range of values is 0 to 128
 13060                           ; switch strategies available:
 13061                           ; Name         Instructions Cycles
 13062                           ; simple_byte            7     4 (average)
 13063                           ; jumptable            260     6 (fixed)
 13064                           ;	Chosen strategy is simple_byte
 13065  0FEF  3A00               	xorlw	0	; case 0
 13066  0FF0  1903               	skipnz
 13067  0FF1  2F6F               	goto	l3854
 13068  0FF2  3A80               	xorlw	128	; case 128
 13069  0FF3  1903               	skipnz
 13070  0FF4  2FA1               	goto	l3856
 13071  0FF5  2FD5               	goto	l3864
 13072  0FF6  2FD5               	goto	l3864
 13073  0FF7                     l3874:	
 13074                           ;doprnt.c: 1525: }
 13075                           ;doprnt.c: 1533: }
 13076                           ;doprnt.c: 1535: alldone:
 13077                           
 13078                           
 13079                           ;doprnt.c: 1538: *sp = 0;
 13080  0FF7  0834               	movf	sprintf@sp,w
 13081  0FF8  0084               	movwf	4
 13082  0FF9  1783               	bsf	3,7	;select IRP bank2
 13083  0FFA  0180               	clrf	0
 13084                           
 13085                           ;doprnt.c: 1540: return ccnt;
 13086  0FFB  082D               	movf	sprintf@ccnt+1,w
 13087  0FFC  00A1               	movwf	?_sprintf+1
 13088  0FFD  082C               	movf	sprintf@ccnt,w
 13089  0FFE  00A0               	movwf	?_sprintf
 13090  0FFF  0008               	return
 13091  1000                     __end_of_sprintf:	
 13092                           
 13093                           	psect	text58
 13094  1CC9                     __ptext58:	
 13095 ;; *************** function ___lwmod *****************
 13096 ;; Defined at:
 13097 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\lwmod.c"
 13098 ;; Parameters:    Size  Location     Type
 13099 ;;  divisor         2    8[COMMON] unsigned int 
 13100 ;;  dividend        2   10[COMMON] unsigned int 
 13101 ;; Auto vars:     Size  Location     Type
 13102 ;;  counter         1   13[COMMON] unsigned char 
 13103 ;; Return value:  Size  Location     Type
 13104 ;;                  2    8[COMMON] unsigned int 
 13105 ;; Registers used:
 13106 ;;		wreg, status,2, status,0
 13107 ;; Tracked objects:
 13108 ;;		On entry : 0/0
 13109 ;;		On exit  : 0/0
 13110 ;;		Unchanged: 0/0
 13111 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 13112 ;;      Params:         4       0       0       0       0
 13113 ;;      Locals:         1       0       0       0       0
 13114 ;;      Temps:          1       0       0       0       0
 13115 ;;      Totals:         6       0       0       0       0
 13116 ;;Total ram usage:        6 bytes
 13117 ;; Hardware stack levels used:    1
 13118 ;; This function calls:
 13119 ;;		Nothing
 13120 ;; This function is called by:
 13121 ;;		_sprintf
 13122 ;; This function uses a non-reentrant model
 13123 ;;
 13124                           
 13125                           
 13126                           ;psect for function ___lwmod
 13127  1CC9                     ___lwmod:	
 13128                           
 13129                           ;incstack = 0
 13130                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
 13131  1CC9  0878               	movf	___lwmod@divisor,w
 13132  1CCA  0479               	iorwf	___lwmod@divisor+1,w
 13133  1CCB  1903               	btfsc	3,2
 13134  1CCC  2CF6               	goto	l3730
 13135  1CCD  01FD               	clrf	___lwmod@counter
 13136  1CCE  0AFD               	incf	___lwmod@counter,f
 13137  1CCF                     l3720:	
 13138  1CCF  1BF9               	btfsc	___lwmod@divisor+1,7
 13139  1CD0  2CDD               	goto	l3722
 13140  1CD1  3001               	movlw	1
 13141  1CD2                     u3835:	
 13142  1CD2  1003               	clrc
 13143  1CD3  0DF8               	rlf	___lwmod@divisor,f
 13144  1CD4  0DF9               	rlf	___lwmod@divisor+1,f
 13145  1CD5  3EFF               	addlw	-1
 13146  1CD6  1D03               	skipz
 13147  1CD7  2CD2               	goto	u3835
 13148  1CD8  3001               	movlw	1
 13149  1CD9  00FC               	movwf	??___lwmod
 13150  1CDA  087C               	movf	??___lwmod,w
 13151  1CDB  07FD               	addwf	___lwmod@counter,f
 13152  1CDC  2CCF               	goto	l3720
 13153  1CDD                     l3722:	
 13154  1CDD  0879               	movf	___lwmod@divisor+1,w
 13155  1CDE  027B               	subwf	___lwmod@dividend+1,w
 13156  1CDF  1D03               	skipz
 13157  1CE0  2CE3               	goto	u3855
 13158  1CE1  0878               	movf	___lwmod@divisor,w
 13159  1CE2  027A               	subwf	___lwmod@dividend,w
 13160  1CE3                     u3855:	
 13161  1CE3  1C03               	skipc
 13162  1CE4  2CEB               	goto	l3726
 13163  1CE5  0878               	movf	___lwmod@divisor,w
 13164  1CE6  02FA               	subwf	___lwmod@dividend,f
 13165  1CE7  0879               	movf	___lwmod@divisor+1,w
 13166  1CE8  1C03               	skipc
 13167  1CE9  03FB               	decf	___lwmod@dividend+1,f
 13168  1CEA  02FB               	subwf	___lwmod@dividend+1,f
 13169  1CEB                     l3726:	
 13170  1CEB  3001               	movlw	1
 13171  1CEC                     u3865:	
 13172  1CEC  1003               	clrc
 13173  1CED  0CF9               	rrf	___lwmod@divisor+1,f
 13174  1CEE  0CF8               	rrf	___lwmod@divisor,f
 13175  1CEF  3EFF               	addlw	-1
 13176  1CF0  1D03               	skipz
 13177  1CF1  2CEC               	goto	u3865
 13178  1CF2  3001               	movlw	1
 13179  1CF3  02FD               	subwf	___lwmod@counter,f
 13180  1CF4  1D03               	btfss	3,2
 13181  1CF5  2CDD               	goto	l3722
 13182  1CF6                     l3730:	
 13183  1CF6  087B               	movf	___lwmod@dividend+1,w
 13184  1CF7  00F9               	movwf	?___lwmod+1
 13185  1CF8  087A               	movf	___lwmod@dividend,w
 13186  1CF9  00F8               	movwf	?___lwmod
 13187  1CFA  0008               	return
 13188  1CFB                     __end_of___lwmod:	
 13189                           
 13190                           	psect	text59
 13191  1D32                     __ptext59:	
 13192 ;; *************** function ___lwdiv *****************
 13193 ;; Defined at:
 13194 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\lwdiv.c"
 13195 ;; Parameters:    Size  Location     Type
 13196 ;;  divisor         2    0[COMMON] unsigned int 
 13197 ;;  dividend        2    2[COMMON] unsigned int 
 13198 ;; Auto vars:     Size  Location     Type
 13199 ;;  quotient        2    5[COMMON] unsigned int 
 13200 ;;  counter         1    7[COMMON] unsigned char 
 13201 ;; Return value:  Size  Location     Type
 13202 ;;                  2    0[COMMON] unsigned int 
 13203 ;; Registers used:
 13204 ;;		wreg, status,2, status,0
 13205 ;; Tracked objects:
 13206 ;;		On entry : 0/0
 13207 ;;		On exit  : 0/0
 13208 ;;		Unchanged: 0/0
 13209 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 13210 ;;      Params:         4       0       0       0       0
 13211 ;;      Locals:         3       0       0       0       0
 13212 ;;      Temps:          1       0       0       0       0
 13213 ;;      Totals:         8       0       0       0       0
 13214 ;;Total ram usage:        8 bytes
 13215 ;; Hardware stack levels used:    1
 13216 ;; This function calls:
 13217 ;;		Nothing
 13218 ;; This function is called by:
 13219 ;;		_sprintf
 13220 ;; This function uses a non-reentrant model
 13221 ;;
 13222                           
 13223                           
 13224                           ;psect for function ___lwdiv
 13225  1D32                     ___lwdiv:	
 13226                           
 13227                           ;incstack = 0
 13228                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
 13229  1D32  01F5               	clrf	___lwdiv@quotient
 13230  1D33  01F6               	clrf	___lwdiv@quotient+1
 13231  1D34  0870               	movf	___lwdiv@divisor,w
 13232  1D35  0471               	iorwf	___lwdiv@divisor+1,w
 13233  1D36  1903               	btfsc	3,2
 13234  1D37  2D69               	goto	l3708
 13235  1D38  01F7               	clrf	___lwdiv@counter
 13236  1D39  0AF7               	incf	___lwdiv@counter,f
 13237  1D3A                     l3696:	
 13238  1D3A  1BF1               	btfsc	___lwdiv@divisor+1,7
 13239  1D3B  2D48               	goto	l3698
 13240  1D3C  3001               	movlw	1
 13241  1D3D                     u3765:	
 13242  1D3D  1003               	clrc
 13243  1D3E  0DF0               	rlf	___lwdiv@divisor,f
 13244  1D3F  0DF1               	rlf	___lwdiv@divisor+1,f
 13245  1D40  3EFF               	addlw	-1
 13246  1D41  1D03               	skipz
 13247  1D42  2D3D               	goto	u3765
 13248  1D43  3001               	movlw	1
 13249  1D44  00F4               	movwf	??___lwdiv
 13250  1D45  0874               	movf	??___lwdiv,w
 13251  1D46  07F7               	addwf	___lwdiv@counter,f
 13252  1D47  2D3A               	goto	l3696
 13253  1D48                     l3698:	
 13254  1D48  3001               	movlw	1
 13255  1D49                     u3785:	
 13256  1D49  1003               	clrc
 13257  1D4A  0DF5               	rlf	___lwdiv@quotient,f
 13258  1D4B  0DF6               	rlf	___lwdiv@quotient+1,f
 13259  1D4C  3EFF               	addlw	-1
 13260  1D4D  1D03               	skipz
 13261  1D4E  2D49               	goto	u3785
 13262  1D4F  0871               	movf	___lwdiv@divisor+1,w
 13263  1D50  0273               	subwf	___lwdiv@dividend+1,w
 13264  1D51  1D03               	skipz
 13265  1D52  2D55               	goto	u3795
 13266  1D53  0870               	movf	___lwdiv@divisor,w
 13267  1D54  0272               	subwf	___lwdiv@dividend,w
 13268  1D55                     u3795:	
 13269  1D55  1C03               	skipc
 13270  1D56  2D5E               	goto	l3704
 13271  1D57  0870               	movf	___lwdiv@divisor,w
 13272  1D58  02F2               	subwf	___lwdiv@dividend,f
 13273  1D59  0871               	movf	___lwdiv@divisor+1,w
 13274  1D5A  1C03               	skipc
 13275  1D5B  03F3               	decf	___lwdiv@dividend+1,f
 13276  1D5C  02F3               	subwf	___lwdiv@dividend+1,f
 13277  1D5D  1475               	bsf	___lwdiv@quotient,0
 13278  1D5E                     l3704:	
 13279  1D5E  3001               	movlw	1
 13280  1D5F                     u3805:	
 13281  1D5F  1003               	clrc
 13282  1D60  0CF1               	rrf	___lwdiv@divisor+1,f
 13283  1D61  0CF0               	rrf	___lwdiv@divisor,f
 13284  1D62  3EFF               	addlw	-1
 13285  1D63  1D03               	skipz
 13286  1D64  2D5F               	goto	u3805
 13287  1D65  3001               	movlw	1
 13288  1D66  02F7               	subwf	___lwdiv@counter,f
 13289  1D67  1D03               	btfss	3,2
 13290  1D68  2D48               	goto	l3698
 13291  1D69                     l3708:	
 13292  1D69  0876               	movf	___lwdiv@quotient+1,w
 13293  1D6A  00F1               	movwf	?___lwdiv+1
 13294  1D6B  0875               	movf	___lwdiv@quotient,w
 13295  1D6C  00F0               	movwf	?___lwdiv
 13296  1D6D  0008               	return
 13297  1D6E                     __end_of___lwdiv:	
 13298                           
 13299                           	psect	text60
 13300  1AC1                     __ptext60:	
 13301 ;; *************** function _eeprom_write *****************
 13302 ;; Defined at:
 13303 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\pic\eewrite.c"
 13304 ;; Parameters:    Size  Location     Type
 13305 ;;  addr            1    wreg     unsigned char 
 13306 ;;  value           1    0[COMMON] unsigned char 
 13307 ;; Auto vars:     Size  Location     Type
 13308 ;;  addr            1    2[COMMON] unsigned char 
 13309 ;; Return value:  Size  Location     Type
 13310 ;;                  1    wreg      void 
 13311 ;; Registers used:
 13312 ;;		wreg, status,2, status,0
 13313 ;; Tracked objects:
 13314 ;;		On entry : 0/0
 13315 ;;		On exit  : 0/0
 13316 ;;		Unchanged: 0/0
 13317 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 13318 ;;      Params:         1       0       0       0       0
 13319 ;;      Locals:         1       0       0       0       0
 13320 ;;      Temps:          1       0       0       0       0
 13321 ;;      Totals:         3       0       0       0       0
 13322 ;;Total ram usage:        3 bytes
 13323 ;; Hardware stack levels used:    1
 13324 ;; This function calls:
 13325 ;;		Nothing
 13326 ;; This function is called by:
 13327 ;;		_eeprom_write_int
 13328 ;; This function uses a non-reentrant model
 13329 ;;
 13330                           
 13331                           
 13332                           ;psect for function _eeprom_write
 13333  1AC1                     _eeprom_write:	
 13334                           
 13335                           ;incstack = 0
 13336                           ; Regs used in _eeprom_write: [wreg+status,2+status,0]
 13337                           ;eeprom_write@addr stored from wreg
 13338  1AC1  00F2               	movwf	eeprom_write@addr
 13339  1AC2                     l1036:	
 13340  1AC2  1683               	bsf	3,5	;RP0=1, select bank3
 13341  1AC3  1703               	bsf	3,6	;RP1=1, select bank3
 13342  1AC4  188C               	btfsc	12,1	;volsfr
 13343  1AC5  2AC2               	goto	l1036
 13344  1AC6  0872               	movf	eeprom_write@addr,w
 13345  1AC7  1283               	bcf	3,5	;RP0=0, select bank2
 13346  1AC8  1703               	bsf	3,6	;RP1=1, select bank2
 13347  1AC9  008D               	movwf	13	;volatile
 13348  1ACA  0870               	movf	eeprom_write@value,w
 13349  1ACB  008C               	movwf	12	;volatile
 13350  1ACC  303F               	movlw	63
 13351  1ACD  00F1               	movwf	??_eeprom_write
 13352  1ACE  0871               	movf	??_eeprom_write,w
 13353  1ACF  1683               	bsf	3,5	;RP0=1, select bank3
 13354  1AD0  1703               	bsf	3,6	;RP1=1, select bank3
 13355  1AD1  058C               	andwf	12,f	;volsfr
 13356  1AD2  1283               	bcf	3,5	;RP0=0, select bank0
 13357  1AD3  1303               	bcf	3,6	;RP1=0, select bank0
 13358  1AD4  1003               	bcf	3,0	;volatile
 13359  1AD5  1B8B               	btfsc	11,7	;volatile
 13360  1AD6  1403               	bsf	3,0	;volatile
 13361  1AD7  138B               	bcf	11,7	;volatile
 13362  1AD8  1683               	bsf	3,5	;RP0=1, select bank3
 13363  1AD9  1703               	bsf	3,6	;RP1=1, select bank3
 13364  1ADA  150C               	bsf	12,2	;volsfr
 13365  1ADB  3055               	movlw	85
 13366  1ADC  008D               	movwf	13	;volsfr
 13367  1ADD  30AA               	movlw	170
 13368  1ADE  008D               	movwf	13	;volsfr
 13369  1ADF  148C               	bsf	12,1	;volsfr
 13370  1AE0  110C               	bcf	12,2	;volsfr
 13371  1AE1  1283               	bcf	3,5	;RP0=0, select bank0
 13372  1AE2  1303               	bcf	3,6	;RP1=0, select bank0
 13373  1AE3  1C03               	btfss	3,0	;volatile
 13374  1AE4  0008               	return
 13375  1AE5  178B               	bsf	11,7	;volatile
 13376  1AE6  0008               	return
 13377  1AE7                     __end_of_eeprom_write:	
 13378                           
 13379                           	psect	text61
 13380  1A33                     __ptext61:	
 13381 ;; *************** function _USARTWriteString *****************
 13382 ;; Defined at:
 13383 ;;		line 73 in file "../usart_pic16.c"
 13384 ;; Parameters:    Size  Location     Type
 13385 ;;  str             2    1[COMMON] PTR const unsigned char 
 13386 ;;		 -> STR_155(31), STR_153(31), STR_151(31), STR_149(31), 
 13387 ;;		 -> STR_147(31), STR_145(31), STR_143(31), STR_141(31), 
 13388 ;;		 -> STR_138(31), STR_136(31), STR_134(31), STR_132(31), 
 13389 ;;		 -> STR_127(31), STR_125(31), STR_123(31), STR_121(31), 
 13390 ;;		 -> STR_119(31), STR_117(31), STR_115(31), STR_113(31), 
 13391 ;;		 -> STR_111(31), STR_109(31), STR_107(31), STR_105(31), 
 13392 ;;		 -> STR_103(31), STR_101(31), STR_96(31), STR_94(31), 
 13393 ;;		 -> STR_92(31), STR_90(31), STR_88(31), STR_86(31), 
 13394 ;;		 -> STR_84(31), STR_82(31), STR_80(31), STR_78(31), 
 13395 ;;		 -> STR_76(31), STR_74(31), STR_72(31), STR_70(31), 
 13396 ;;		 -> STR_68(31), STR_66(31), STR_64(31), STR_62(31), 
 13397 ;;		 -> STR_60(31), STR_58(31), STR_53(31), STR_51(31), 
 13398 ;;		 -> STR_49(31), STR_47(31), STR_45(31), STR_43(31), 
 13399 ;;		 -> STR_42(31), STR_40(31), STR_39(31), STR_37(31), 
 13400 ;;		 -> STR_35(31), STR_33(31), STR_31(31), STR_29(31), 
 13401 ;;		 -> STR_27(31), STR_26(31), STR_24(31), STR_22(31), 
 13402 ;;		 -> STR_20(31), STR_18(31), STR_16(31), STR_14(31), 
 13403 ;;		 -> STR_13(31), STR_11(31), STR_9(31), STR_7(31), 
 13404 ;;		 -> STR_5(31), STR_3(31), STR_1(31), g_debug(64), 
 13405 ;; Auto vars:     Size  Location     Type
 13406 ;;		None
 13407 ;; Return value:  Size  Location     Type
 13408 ;;                  1    wreg      void 
 13409 ;; Registers used:
 13410 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
 13411 ;; Tracked objects:
 13412 ;;		On entry : 0/0
 13413 ;;		On exit  : 0/0
 13414 ;;		Unchanged: 0/0
 13415 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 13416 ;;      Params:         2       0       0       0       0
 13417 ;;      Locals:         0       0       0       0       0
 13418 ;;      Temps:          0       0       0       0       0
 13419 ;;      Totals:         2       0       0       0       0
 13420 ;;Total ram usage:        2 bytes
 13421 ;; Hardware stack levels used:    1
 13422 ;; Hardware stack levels required when called:    1
 13423 ;; This function calls:
 13424 ;;		_USARTWriteChar
 13425 ;; This function is called by:
 13426 ;;		_dbg_print_MATRIX4x4
 13427 ;;		_dbg_print_MATRIX16x8
 13428 ;;		_dbg_print_Screen
 13429 ;;		_dbg_print_cur_MATRIX4x4
 13430 ;;		_eeprom_write_int
 13431 ;;		_eeprom_read_int
 13432 ;;		_lg_is_row_full
 13433 ;;		_lg_delete_matrix
 13434 ;;		_lg_get_num_removed_rows
 13435 ;;		_lg_hit_land
 13436 ;;		_lg_is_valid
 13437 ;;		_lg_is_left_boundary
 13438 ;;		_lg_is_right_boundary
 13439 ;;		_lg_fall_off
 13440 ;;		_lg_get_num_of_orphan
 13441 ;;		_lg_get_weight
 13442 ;;		_lg_left_most
 13443 ;;		_lg_right_most
 13444 ;;		_lg_get_height
 13445 ;;		_lg_get_height_after_merge
 13446 ;;		_lg_get_holes_after_merge
 13447 ;;		_lg_find_best_solution
 13448 ;;		_main
 13449 ;;		_dbg_print_MATRIX_MATRIX7219
 13450 ;;		_dbg_print_all_MATRIX4x4
 13451 ;;		_USARTWriteLine
 13452 ;; This function uses a non-reentrant model
 13453 ;;
 13454                           
 13455                           
 13456                           ;psect for function _USARTWriteString
 13457  1A33                     _USARTWriteString:	
 13458  1A33                     l3886:	
 13459                           ;usart_pic16.c: 74: while (*str != '\0') {
 13460                           
 13461                           ;incstack = 0
 13462                           ; Regs used in _USARTWriteString: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
 13463                           
 13464  1A33  0872               	movf	USARTWriteString@str+1,w
 13465  1A34  1283               	bcf	3,5	;RP0=0, select bank0
 13466  1A35  1303               	bcf	3,6	;RP1=0, select bank0
 13467  1A36  00FF               	movwf	127
 13468  1A37  0871               	movf	USARTWriteString@str,w
 13469  1A38  0084               	movwf	4
 13470  1A39  120A  158A  2000  160A  158A  	fcall	stringtab
 13471  1A3E  3A00               	xorlw	0
 13472  1A3F  1903               	btfsc	3,2
 13473  1A40  0008               	return
 13474                           
 13475                           ;usart_pic16.c: 75: USARTWriteChar(*str);
 13476  1A41  0872               	movf	USARTWriteString@str+1,w
 13477  1A42  1283               	bcf	3,5	;RP0=0, select bank0
 13478  1A43  1303               	bcf	3,6	;RP1=0, select bank0
 13479  1A44  00FF               	movwf	127
 13480  1A45  0871               	movf	USARTWriteString@str,w
 13481  1A46  0084               	movwf	4
 13482  1A47  120A  158A  2000  160A  158A  	fcall	stringtab
 13483  1A4C  160A  158A  216F  160A  158A  	fcall	_USARTWriteChar
 13484                           
 13485                           ;usart_pic16.c: 76: str++;
 13486  1A51  3001               	movlw	1
 13487  1A52  07F1               	addwf	USARTWriteString@str,f
 13488  1A53  1803               	skipnc
 13489  1A54  0AF2               	incf	USARTWriteString@str+1,f
 13490  1A55  2A33               	goto	l3886
 13491  1A56                     __end_of_USARTWriteString:	
 13492                           
 13493                           	psect	text62
 13494  196F                     __ptext62:	
 13495 ;; *************** function _USARTWriteChar *****************
 13496 ;; Defined at:
 13497 ;;		line 67 in file "../usart_pic16.c"
 13498 ;; Parameters:    Size  Location     Type
 13499 ;;  ch              1    wreg     unsigned char 
 13500 ;; Auto vars:     Size  Location     Type
 13501 ;;  ch              1    0[COMMON] unsigned char 
 13502 ;; Return value:  Size  Location     Type
 13503 ;;                  1    wreg      void 
 13504 ;; Registers used:
 13505 ;;		wreg
 13506 ;; Tracked objects:
 13507 ;;		On entry : 0/0
 13508 ;;		On exit  : 0/0
 13509 ;;		Unchanged: 0/0
 13510 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 13511 ;;      Params:         0       0       0       0       0
 13512 ;;      Locals:         1       0       0       0       0
 13513 ;;      Temps:          0       0       0       0       0
 13514 ;;      Totals:         1       0       0       0       0
 13515 ;;Total ram usage:        1 bytes
 13516 ;; Hardware stack levels used:    1
 13517 ;; This function calls:
 13518 ;;		Nothing
 13519 ;; This function is called by:
 13520 ;;		_USARTWriteString
 13521 ;;		_USARTWriteLine
 13522 ;;		_USARTWriteInt
 13523 ;;		_USARTGotoNewLine
 13524 ;; This function uses a non-reentrant model
 13525 ;;
 13526                           
 13527                           
 13528                           ;psect for function _USARTWriteChar
 13529  196F                     _USARTWriteChar:	
 13530                           
 13531                           ;incstack = 0
 13532                           ; Regs used in _USARTWriteChar: [wreg]
 13533                           ;USARTWriteChar@ch stored from wreg
 13534  196F  00F0               	movwf	USARTWriteChar@ch
 13535  1970                     l923:	
 13536                           ;usart_pic16.c: 68: while (!PIR1bits.TXIF);
 13537                           
 13538  1970  1283               	bcf	3,5	;RP0=0, select bank0
 13539  1971  1303               	bcf	3,6	;RP1=0, select bank0
 13540  1972  1E0C               	btfss	12,4	;volatile
 13541  1973  2970               	goto	l923
 13542                           
 13543                           ;usart_pic16.c: 70: TXREG = ch;
 13544  1974  0870               	movf	USARTWriteChar@ch,w
 13545  1975  0099               	movwf	25	;volatile
 13546  1976  0008               	return
 13547  1977                     __end_of_USARTWriteChar:	
 13548  007E                     btemp	set	126	;btemp
 13549  007E                     wtemp	set	126
 13550  007E                     wtemp0	set	126
 13551  0080                     wtemp1	set	128
 13552  0082                     wtemp2	set	130
 13553  0084                     wtemp3	set	132
 13554  0086                     wtemp4	set	134
 13555  0088                     wtemp5	set	136
 13556  007F                     wtemp6	set	127
 13557  007E                     ttemp	set	126
 13558  007E                     ttemp0	set	126
 13559  0081                     ttemp1	set	129
 13560  0084                     ttemp2	set	132
 13561  0087                     ttemp3	set	135
 13562  007F                     ttemp4	set	127
 13563  007E                     ltemp	set	126
 13564  007E                     ltemp0	set	126
 13565  0082                     ltemp1	set	130
 13566  0086                     ltemp2	set	134
 13567  0080                     ltemp3	set	128


Data Sizes:
    Strings     1133
    Constant    114
    Data        23
    BSS         110
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     76      80
    BANK1            80     46      77
    BANK3            96      0      80
    BANK2            96      0      18

Pointer List with Targets:

    lg_is_right_boundary@matrix16x8	PTR const struct . size(1) Largest target is 16
		 -> g_matrix16x8(BANK1[16]), 

    lg_is_left_boundary@matrix16x8	PTR const struct . size(1) Largest target is 16
		 -> g_matrix16x8(BANK1[16]), 

    memset@p1	PTR void  size(1) Largest target is 16
		 -> max7219_init1@matrix(BANK0[16]), g_matrix16x8(BANK1[16]), 

    memset@p	PTR unsigned char  size(1) Largest target is 16
		 -> max7219_init1@matrix(BANK0[16]), g_matrix16x8(BANK1[16]), 

    memcpy@d1	PTR void  size(1) Largest target is 16
		 -> temp_matrix16x8(BANK3[16]), 

    memcpy@d	PTR unsigned char  size(1) Largest target is 16
		 -> temp_matrix16x8(BANK3[16]), 

    memcpy@s1	PTR const void  size(1) Largest target is 16
		 -> g_matrix16x8(BANK1[16]), 

    memcpy@s	PTR const unsigned char  size(1) Largest target is 16
		 -> g_matrix16x8(BANK1[16]), 

    sprintf@f	PTR const unsigned char  size(2) Largest target is 8192
		 -> STR_156(CODE[12]), STR_154(CODE[15]), STR_152(CODE[15]), STR_150(CODE[25]), 
		 -> STR_148(CODE[29]), STR_146(CODE[12]), STR_144(CODE[23]), STR_142(CODE[15]), 
		 -> STR_140(CODE[61]), STR_139(CODE[7]), STR_137(CODE[54]), STR_135(CODE[20]), 
		 -> STR_133(CODE[17]), STR_131(CODE[19]), STR_130(CODE[15]), STR_129(CODE[15]), 
		 -> STR_128(CODE[15]), STR_126(CODE[27]), STR_124(CODE[16]), STR_122(CODE[12]), 
		 -> STR_120(CODE[13]), STR_118(CODE[11]), STR_116(CODE[14]), STR_114(CODE[11]), 
		 -> STR_112(CODE[9]), STR_110(CODE[28]), STR_108(CODE[28]), STR_106(CODE[18]), 
		 -> STR_104(CODE[17]), STR_102(CODE[12]), STR_100(CODE[12]), STR_99(CODE[23]), 
		 -> STR_98(CODE[24]), STR_97(CODE[24]), STR_95(CODE[17]), STR_93(CODE[12]), 
		 -> STR_91(CODE[17]), STR_89(CODE[12]), STR_87(CODE[28]), STR_85(CODE[27]), 
		 -> STR_83(CODE[8]), STR_81(CODE[21]), STR_79(CODE[13]), STR_77(CODE[21]), 
		 -> STR_75(CODE[13]), STR_73(CODE[21]), STR_71(CODE[13]), STR_69(CODE[37]), 
		 -> STR_67(CODE[10]), STR_65(CODE[26]), STR_63(CODE[26]), STR_61(CODE[37]), 
		 -> STR_59(CODE[21]), STR_57(CODE[27]), STR_56(CODE[24]), STR_55(CODE[25]), 
		 -> STR_54(CODE[12]), STR_52(CODE[18]), STR_50(CODE[11]), STR_48(CODE[23]), 
		 -> STR_46(CODE[24]), STR_44(CODE[4]), STR_41(CODE[4]), STR_38(CODE[23]), 
		 -> STR_36(CODE[3]), STR_34(CODE[2]), STR_32(CODE[2]), STR_30(CODE[23]), 
		 -> STR_28(CODE[4]), STR_25(CODE[23]), STR_23(CODE[3]), STR_21(CODE[2]), 
		 -> STR_19(CODE[2]), STR_17(CODE[33]), STR_15(CODE[4]), STR_12(CODE[23]), 
		 -> STR_10(CODE[3]), STR_8(CODE[2]), STR_6(CODE[2]), STR_4(CODE[32]), 
		 -> STR_2(CODE[4]), ROM(CODE[8192]), 

    sprintf@sp	PTR unsigned char  size(1) Largest target is 64
		 -> g_debug(BANK3[64]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    USARTWriteString@str	PTR const unsigned char  size(2) Largest target is 64
		 -> STR_155(CODE[31]), STR_153(CODE[31]), STR_151(CODE[31]), STR_149(CODE[31]), 
		 -> STR_147(CODE[31]), STR_145(CODE[31]), STR_143(CODE[31]), STR_141(CODE[31]), 
		 -> STR_138(CODE[31]), STR_136(CODE[31]), STR_134(CODE[31]), STR_132(CODE[31]), 
		 -> STR_127(CODE[31]), STR_125(CODE[31]), STR_123(CODE[31]), STR_121(CODE[31]), 
		 -> STR_119(CODE[31]), STR_117(CODE[31]), STR_115(CODE[31]), STR_113(CODE[31]), 
		 -> STR_111(CODE[31]), STR_109(CODE[31]), STR_107(CODE[31]), STR_105(CODE[31]), 
		 -> STR_103(CODE[31]), STR_101(CODE[31]), STR_96(CODE[31]), STR_94(CODE[31]), 
		 -> STR_92(CODE[31]), STR_90(CODE[31]), STR_88(CODE[31]), STR_86(CODE[31]), 
		 -> STR_84(CODE[31]), STR_82(CODE[31]), STR_80(CODE[31]), STR_78(CODE[31]), 
		 -> STR_76(CODE[31]), STR_74(CODE[31]), STR_72(CODE[31]), STR_70(CODE[31]), 
		 -> STR_68(CODE[31]), STR_66(CODE[31]), STR_64(CODE[31]), STR_62(CODE[31]), 
		 -> STR_60(CODE[31]), STR_58(CODE[31]), STR_53(CODE[31]), STR_51(CODE[31]), 
		 -> STR_49(CODE[31]), STR_47(CODE[31]), STR_45(CODE[31]), STR_43(CODE[31]), 
		 -> STR_42(CODE[31]), STR_40(CODE[31]), STR_39(CODE[31]), STR_37(CODE[31]), 
		 -> STR_35(CODE[31]), STR_33(CODE[31]), STR_31(CODE[31]), STR_29(CODE[31]), 
		 -> STR_27(CODE[31]), STR_26(CODE[31]), STR_24(CODE[31]), STR_22(CODE[31]), 
		 -> STR_20(CODE[31]), STR_18(CODE[31]), STR_16(CODE[31]), STR_14(CODE[31]), 
		 -> STR_13(CODE[31]), STR_11(CODE[31]), STR_9(CODE[31]), STR_7(CODE[31]), 
		 -> STR_5(CODE[31]), STR_3(CODE[31]), STR_1(CODE[31]), g_debug(BANK3[64]), 

    g_cur_matrix4x4	PTR struct . size(2) Largest target is 96
		 -> NULL(NULL[0]), g_matrix4x4(CODE[96]), 

    temp_cur_matrix4x4	PTR struct . size(2) Largest target is 96
		 -> NULL(NULL[0]), g_matrix4x4(CODE[96]), 

    lg_get_holes_after_merge@matrix	PTR struct . size(1) Largest target is 16
		 -> temp_matrix16x8(BANK3[16]), 

    lg_get_height_after_merge@matrix	PTR struct . size(2) Largest target is 96
		 -> NULL(NULL[0]), g_matrix4x4(CODE[96]), 

    lg_get_height@matrix	PTR struct . size(1) Largest target is 16
		 -> g_matrix16x8(BANK1[16]), 

    lg_right_most@matrix16x8	PTR const struct . size(1) Largest target is 16
		 -> g_matrix16x8(BANK1[16]), 

    lg_right_most@matrix4x4	PTR const struct . size(2) Largest target is 96
		 -> NULL(NULL[0]), g_matrix4x4(CODE[96]), 

    lg_left_most@matrix16x8	PTR const struct . size(1) Largest target is 16
		 -> g_matrix16x8(BANK1[16]), 

    lg_left_most@matrix4x4	PTR const struct . size(2) Largest target is 96
		 -> NULL(NULL[0]), g_matrix4x4(CODE[96]), 

    lg_get_weight@matrix	PTR const struct . size(1) Largest target is 16
		 -> temp_matrix16x8(BANK3[16]), 

    lg_get_num_of_orphan@matrix	PTR const struct . size(1) Largest target is 16
		 -> temp_matrix16x8(BANK3[16]), 

    lg_merge1@matrix4x4	PTR const struct . size(2) Largest target is 96
		 -> NULL(NULL[0]), g_matrix4x4(CODE[96]), 

    sp__memcpy	PTR void  size(1) Largest target is 16
		 -> temp_matrix16x8(BANK3[16]), 

    lg_merge1@matrix16x8_in	PTR const struct . size(1) Largest target is 16
		 -> g_matrix16x8(BANK1[16]), 

    lg_merge1@matrix16x8_out	PTR struct . size(1) Largest target is 16
		 -> temp_matrix16x8(BANK3[16]), 

    lg_merge@matrix16x8	PTR struct . size(1) Largest target is 16
		 -> g_matrix16x8(BANK1[16]), 

    lg_merge@matrix4x4	PTR const struct . size(2) Largest target is 96
		 -> NULL(NULL[0]), g_matrix4x4(CODE[96]), 

    lg_clear@matrix16x8	PTR struct . size(1) Largest target is 16
		 -> g_matrix16x8(BANK1[16]), 

    lg_clear@matrix4x4	PTR const struct . size(2) Largest target is 96
		 -> NULL(NULL[0]), g_matrix4x4(CODE[96]), 

    lg_fall_off@matrix16x8	PTR const struct . size(1) Largest target is 16
		 -> g_matrix16x8(BANK1[16]), 

    lg_fall_off@matrix4x4	PTR const struct . size(2) Largest target is 96
		 -> NULL(NULL[0]), g_matrix4x4(CODE[96]), 

    lg_is_right_boundary@matrix4x4	PTR const struct . size(2) Largest target is 96
		 -> NULL(NULL[0]), g_matrix4x4(CODE[96]), 

    lg_is_left_boundary@matrix4x4	PTR const struct . size(2) Largest target is 96
		 -> NULL(NULL[0]), g_matrix4x4(CODE[96]), 

    lg_is_valid@matrix16x8	PTR const struct . size(1) Largest target is 16
		 -> g_matrix16x8(BANK1[16]), 

    lg_is_valid@matrix4x4	PTR const struct . size(2) Largest target is 96
		 -> NULL(NULL[0]), g_matrix4x4(CODE[96]), 

    lg_hit_land@matrix16x8	PTR const struct . size(1) Largest target is 16
		 -> g_matrix16x8(BANK1[16]), 

    lg_hit_land@matrix4x4	PTR const struct . size(2) Largest target is 96
		 -> NULL(NULL[0]), g_matrix4x4(CODE[96]), 

    lg_is_row_empty@matrix	PTR const struct . size(1) Largest target is 16
		 -> g_matrix16x8(BANK1[16]), 

    lg_get_num_removed_rows@matrix	PTR struct . size(1) Largest target is 16
		 -> temp_matrix16x8(BANK3[16]), 

    lg_delete_matrix@matrix	PTR struct . size(1) Largest target is 16
		 -> g_matrix16x8(BANK1[16]), 

    lg_delete_matrix_row@matrix	PTR struct . size(1) Largest target is 16
		 -> g_matrix16x8(BANK1[16]), 

    lg_is_row_full@matrix	PTR const struct . size(2) Largest target is 16
		 -> temp_matrix16x8(BANK3[16]), g_matrix16x8(BANK1[16]), 

    sp__lg_get_MATRIX4x4	PTR struct . size(2) Largest target is 96
		 -> g_matrix4x4(CODE[96]), 

    hal_print_MATRIX16x8@matrix88	PTR const struct . size(1) Largest target is 16
		 -> g_matrix16x8(BANK1[16]), 

    hal_print_MATRIX_MATRIX7219@matrix7219	PTR const struct . size(1) Largest target is 16
		 -> hal_print_MATRIX16x8@matrix7219(BANK0[16]), 

    hal_MATRIX16x8_to_MATRIX_MATRIX7219@matrix16x8	PTR const struct . size(1) Largest target is 16
		 -> g_matrix16x8(BANK1[16]), 

    hal_MATRIX16x8_to_MATRIX_MATRIX7219@matrix7219	PTR struct . size(1) Largest target is 16
		 -> hal_print_MATRIX16x8@matrix7219(BANK0[16]), 

    dbg_print_cur_MATRIX4x4@matrix	PTR struct . size(2) Largest target is 96
		 -> g_matrix4x4(CODE[96]), 

    dbg_print_cur_MATRIX4x4@lable	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_139(CODE[7]), 

    dbg_print_Screen@lable	PTR const unsigned char  size(2) Largest target is 15
		 -> STR_129(CODE[15]), 

    dbg_print_MATRIX16x8@matrix	PTR const struct . size(2) Largest target is 16
		 -> temp_matrix16x8(BANK3[16]), g_matrix16x8(BANK1[16]), 

    dbg_print_MATRIX16x8@lable	PTR const unsigned char  size(2) Largest target is 8192
		 -> STR_156(CODE[12]), STR_130(CODE[15]), STR_99(CODE[23]), STR_98(CODE[24]), 
		 -> STR_56(CODE[24]), STR_55(CODE[25]), STR_54(CODE[12]), ROM(CODE[8192]), 

    dbg_print_MATRIX4x4@matrix	PTR const struct . size(2) Largest target is 96
		 -> NULL(NULL[0]), g_matrix4x4(CODE[96]), 

    dbg_print_MATRIX4x4@lable	PTR const unsigned char  size(2) Largest target is 8192
		 -> STR_128(CODE[15]), STR_97(CODE[24]), ROM(CODE[8192]), 

    sp__memset	PTR void  size(1) Largest target is 16
		 -> max7219_init1@matrix(BANK0[16]), g_matrix16x8(BANK1[16]), 

    Write_Matrix@matrix	PTR const struct . size(1) Largest target is 16
		 -> hal_print_MATRIX_MATRIX7219@matrix(BANK0[2]), max7219_init1@matrix(BANK0[16]), 

    get_matrix_bit@byte	PTR const unsigned char  size(2) Largest target is 96
		 -> temp_matrix16x8.row(BANK3[16]), NULL(NULL[0]), temp_matrix16x8(BANK3[16]), g_matrix16x8.row(BANK1[16]), 
		 -> g_matrix16x8(BANK1[16]), g_matrix4x4.row(CODE[4]), g_matrix4x4(CODE[96]), 

    set_matrix_bit@byte	PTR unsigned char  size(2) Largest target is 16
		 -> temp_matrix16x8(BANK3[16]), g_matrix16x8(BANK1[16]), 

    reverse@temp	PTR struct . size(1) Largest target is 1
		 -> reverse@byte(COMMON[1]), 

    getbit@byte	PTR const unsigned char  size(2) Largest target is 96
		 -> temp_matrix16x8.row(BANK3[16]), NULL(NULL[0]), temp_matrix16x8(BANK3[16]), g_matrix16x8.row(BANK1[16]), 
		 -> g_matrix16x8(BANK1[16]), g_matrix4x4.row(CODE[4]), g_matrix4x4(CODE[96]), 

    getbit@temp	PTR struct . size(2) Largest target is 96
		 -> temp_matrix16x8.row(BANK3[16]), NULL(NULL[0]), temp_matrix16x8(BANK3[16]), g_matrix16x8.row(BANK1[16]), 
		 -> g_matrix16x8(BANK1[16]), g_matrix4x4.row(CODE[4]), g_matrix4x4(CODE[96]), 

    setbit@byte	PTR unsigned char  size(2) Largest target is 16
		 -> temp_matrix16x8(BANK3[16]), g_matrix16x8(BANK1[16]), 

    setbit@temp	PTR struct . size(2) Largest target is 16
		 -> temp_matrix16x8(BANK3[16]), g_matrix16x8(BANK1[16]), 

    set_matrix_matrix7219_bit@matrix_matrix	PTR struct . size(1) Largest target is 16
		 -> hal_print_MATRIX16x8@matrix7219(BANK0[16]), 

    set_matrix_matrix7219_bit@matrix	PTR struct . size(1) Largest target is 16
		 -> matrix7219.data(BANK0[16]), hal_print_MATRIX16x8@matrix7219(BANK0[16]), 

    set_matrix7219_bit@matrix	PTR struct . size(1) Largest target is 16
		 -> matrix7219.data(BANK0[16]), hal_print_MATRIX16x8@matrix7219(BANK0[16]), 

    sp__get_matrix7219	PTR struct . size(1) Largest target is 16
		 -> matrix7219.data(BANK0[16]), hal_print_MATRIX16x8@matrix7219(BANK0[16]), 

    get_matrix7219@matrix_matrix	PTR const struct . size(1) Largest target is 16
		 -> hal_print_MATRIX16x8@matrix7219(BANK0[16]), 


Critical Paths under _main in COMMON

    _max7219_init1->_Write_Matrix
    _dbg_init->_USARTInit
    _lg_merge1->_set_matrix_bit
    _hal_print_MATRIX_MATRIX7219->_Write_Matrix
    _Write_Matrix->_SPI1_write
    _Write_Matrix->_reverse
    _hal_MATRIX16x8_to_MATRIX_MATRIX7219->_set_matrix_matrix7219_bit
    _set_matrix_matrix7219_bit->_get_matrix7219
    _set_matrix_matrix7219_bit->_get_matrix_bit
    _get_matrix7219->___awdiv
    _lg_clear->_set_matrix_bit
    _set_matrix_bit->_setbit
    _get_matrix_bit->_getbit
    _lg_char_info_index_rand->___awmod
    _rand->___lmul
    _sprintf->___lwmod
    ___lwmod->___lwdiv
    _USARTWriteString->_USARTWriteChar

Critical Paths under _main in BANK0

    _main_init->_eeprom_read_int
    _eeprom_read_int->_sprintf
    _lg_merge->_dbg_print_MATRIX4x4
    _lg_hit_land->_sprintf
    _lg_find_best_solution->_dbg_print_cur_MATRIX4x4
    _lg_right_most->_lg_is_right_boundary
    _lg_is_right_boundary->_sprintf
    _lg_left_most->_lg_is_left_boundary
    _lg_is_left_boundary->_sprintf
    _lg_is_valid->_sprintf
    _lg_get_weight->_sprintf
    _lg_get_num_removed_rows->_lg_is_row_full
    _lg_get_num_of_orphan->_sprintf
    _lg_get_holes_after_merge->_sprintf
    _lg_get_height_after_merge->_sprintf
    _lg_get_height->_sprintf
    _lg_fall_off->_sprintf
    _dbg_print_cur_MATRIX4x4->_dbg_print_MATRIX4x4
    _dbg_print_MATRIX4x4->_sprintf
    _dbg_print_Screen->_dbg_print_MATRIX16x8
    ___wmul->_lg_get_holes_after_merge
    _lg_delete_matrix->_lg_is_row_full
    _lg_is_row_full->_dbg_print_MATRIX16x8
    _dbg_print_MATRIX16x8->_sprintf
    _hal_print_Screen->_hal_print_MATRIX16x8
    _hal_print_MATRIX16x8->_hal_MATRIX16x8_to_MATRIX_MATRIX7219
    _hal_MATRIX16x8_to_MATRIX_MATRIX7219->_set_matrix_matrix7219_bit
    _set_matrix_matrix7219_bit->_get_matrix7219
    _lg_char_info_index_rand->___awmod
    ___awmod->_rand
    _eeprom_write_int->_sprintf

Critical Paths under _main in BANK1

    _main->_lg_find_best_solution

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                11    11      0  657801
                                             65 BANK0     11    11      0
                   _USARTWriteString
               _dbg_print_MATRIX16x8
                   _eeprom_write_int
                   _hal_print_Screen
            _lg_char_info_index_rand
                           _lg_clear
                    _lg_clear_matrix
                   _lg_delete_matrix
              _lg_find_best_solution
                        _lg_hit_land
                           _lg_merge
                          _main_init
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _main_init                                            0     0      0   18353
                           _dbg_init
                    _eeprom_read_int
                      _max7219_init1
                              _srand
 ---------------------------------------------------------------------------------
 (2) _srand                                                2     0      2      75
                                              0 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (2) _max7219_init1                                       17    17      0    2560
                                              0 BANK0     17    17      0
                       _Write_Matrix
                             _memset
 ---------------------------------------------------------------------------------
 (2) _eeprom_read_int                                      9     7      2   15643
                                             21 BANK0      9     7      2
                   _USARTWriteString
                        _eeprom_read
                            _sprintf
 ---------------------------------------------------------------------------------
 (3) _eeprom_read                                          2     2      0      22
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (2) _dbg_init                                             0     0      0      75
                          _USARTInit
 ---------------------------------------------------------------------------------
 (3) _USARTInit                                            2     0      2      75
                                              0 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (1) _lg_merge                                             9     5      4   50429
                                             50 BANK0      9     5      4
               _dbg_print_MATRIX16x8
                _dbg_print_MATRIX4x4
                     _get_matrix_bit
                     _set_matrix_bit
 ---------------------------------------------------------------------------------
 (1) _lg_hit_land                                         17    13      4   21162
                                             21 BANK0     17    13      4
                   _USARTWriteString
                     _get_matrix_bit
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _lg_find_best_solution                               46    46      0  413018
                                              0 BANK1     46    46      0
                   _USARTWriteString
                             ___wmul
               _dbg_print_MATRIX16x8
                _dbg_print_MATRIX4x4
                   _dbg_print_Screen
            _dbg_print_cur_MATRIX4x4
                        _lg_fall_off
                      _lg_get_height
          _lg_get_height_after_merge
           _lg_get_holes_after_merge
               _lg_get_num_of_orphan
            _lg_get_num_removed_rows
                      _lg_get_weight
                        _lg_is_valid
                       _lg_left_most
                          _lg_merge1
                      _lg_right_most
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _lg_right_most                                        8     5      3   36589
                                             31 BANK0      8     5      3
                   _USARTWriteString
               _lg_is_right_boundary
                            _sprintf
 ---------------------------------------------------------------------------------
 (3) _lg_is_right_boundary                                10     7      3   20842
                                             21 BANK0     10     7      3
                   _USARTWriteString
                     _get_matrix_bit
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _lg_merge1                                           12     7      5    7177
                                              0 BANK0     12     7      5
                     _get_matrix_bit
                             _memcpy
                     _set_matrix_bit
 ---------------------------------------------------------------------------------
 (3) _memcpy                                               7     4      3     253
                                              0 COMMON     7     4      3
 ---------------------------------------------------------------------------------
 (2) _lg_left_most                                         7     4      3   36589
                                             34 BANK0      7     4      3
                   _USARTWriteString
                _lg_is_left_boundary
                            _sprintf
 ---------------------------------------------------------------------------------
 (3) _lg_is_left_boundary                                 13    10      3   20842
                                             21 BANK0     13    10      3
                   _USARTWriteString
                     _get_matrix_bit
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _lg_is_valid                                         25    21      4   21386
                                             21 BANK0     25    21      4
                   _USARTWriteString
                     _get_matrix_bit
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _lg_get_weight                                       14    12      2   21019
                                             21 BANK0     14    12      2
                   _USARTWriteString
                     _get_matrix_bit
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _lg_get_num_removed_rows                              7     7      0   53311
                                             55 BANK0      7     7      0
                   _USARTWriteString
                     _lg_is_row_full
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _lg_get_num_of_orphan                                13    11      2   20972
                                             21 BANK0     13    11      2
                   _USARTWriteString
                     _get_matrix_bit
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _lg_get_holes_after_merge                            20    20      0   21772
                                             21 BANK0     20    20      0
                   _USARTWriteString
                     _get_matrix_bit
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _lg_get_height_after_merge                           15    13      2   20946
                                             21 BANK0     15    13      2
                   _USARTWriteString
                     _get_matrix_bit
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _lg_get_height                                        6     6      0   15793
                                             21 BANK0      6     6      0
                   _USARTWriteString
                    _lg_is_row_empty
                            _sprintf
 ---------------------------------------------------------------------------------
 (3) _lg_is_row_empty                                      2     1      1     102
                                              0 COMMON     2     1      1
 ---------------------------------------------------------------------------------
 (2) _lg_fall_off                                         17    13      4   21207
                                             21 BANK0     17    13      4
                   _USARTWriteString
                     _get_matrix_bit
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _dbg_print_cur_MATRIX4x4                             15    11      4   37809
                                             50 BANK0     15    11      4
                   _USARTWriteString
                _dbg_print_MATRIX4x4
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _dbg_print_MATRIX4x4                                 29    23      6   21964
                                             21 BANK0     29    23      6
                   _USARTWriteString
                     _get_matrix_bit
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _dbg_print_Screen                                     7     5      2   37477
                                             44 BANK0      7     5      2
                   _USARTWriteString
               _dbg_print_MATRIX16x8
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     410
                                             41 BANK0      6     2      4
           _lg_get_holes_after_merge (ARG)
 ---------------------------------------------------------------------------------
 (1) _lg_delete_matrix                                     7     7      0   75358
                                             55 BANK0      7     7      0
                   _USARTWriteString
               _dbg_print_MATRIX16x8
               _lg_delete_matrix_row
                     _lg_is_row_full
                            _sprintf
 ---------------------------------------------------------------------------------
 (3) _lg_is_row_full                                      11     8      3   37591
                                             44 BANK0     11     8      3
                   _USARTWriteString
               _dbg_print_MATRIX16x8
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _dbg_print_MATRIX16x8                                23    19      4   21744
                                             21 BANK0     23    19      4
                   _USARTWriteString
                     _get_matrix_bit
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _lg_delete_matrix_row                                 6     5      1     324
                                              0 COMMON     6     5      1
 ---------------------------------------------------------------------------------
 (1) _lg_clear_matrix                                      0     0      0    9784
                   _hal_print_Screen
                             _memset
 ---------------------------------------------------------------------------------
 (3) _memset                                               7     3      4     894
                                              0 COMMON     7     3      4
 ---------------------------------------------------------------------------------
 (2) _hal_print_Screen                                     0     0      0    8890
               _hal_print_MATRIX16x8
 ---------------------------------------------------------------------------------
 (3) _hal_print_MATRIX16x8                                18    18      0    8890
                                             22 BANK0     18    18      0
_hal_MATRIX16x8_to_MATRIX_MATRIX7219
        _hal_print_MATRIX_MATRIX7219
 ---------------------------------------------------------------------------------
 (4) _hal_print_MATRIX_MATRIX7219                         14    14      0    1809
                                              0 BANK0     14    14      0
                       _Write_Matrix
 ---------------------------------------------------------------------------------
 (3) _Write_Matrix                                        10     8      2    1444
                                              4 COMMON    10     8      2
                         _SPI1_write
                            _reverse
 ---------------------------------------------------------------------------------
 (4) _reverse                                              4     4      0     237
                                              0 COMMON     4     4      0
 ---------------------------------------------------------------------------------
 (4) _SPI1_write                                           4     4      0      92
                                              0 COMMON     4     4      0
 ---------------------------------------------------------------------------------
 (4) _hal_MATRIX16x8_to_MATRIX_MATRIX7219                  9     8      1    6985
                                             13 BANK0      9     8      1
                     _get_matrix_bit
          _set_matrix_matrix7219_bit
 ---------------------------------------------------------------------------------
 (5) _set_matrix_matrix7219_bit                            8     5      3    1677
                                             12 COMMON     2     2      0
                                              7 BANK0      6     3      3
                     _get_matrix7219
                     _get_matrix_bit (ARG)
                 _set_matrix7219_bit
 ---------------------------------------------------------------------------------
 (6) _set_matrix7219_bit                                   9     6      3     386
                                              0 COMMON     9     6      3
 ---------------------------------------------------------------------------------
 (6) _get_matrix7219                                      10     8      2     950
                                              9 COMMON     3     1      2
                                              0 BANK0      7     7      0
                            ___awdiv
 ---------------------------------------------------------------------------------
 (7) ___awdiv                                              9     5      4     618
                                              0 COMMON     9     5      4
 ---------------------------------------------------------------------------------
 (1) _lg_clear                                             9     5      4    6763
                                              0 BANK0      9     5      4
                     _get_matrix_bit
                     _set_matrix_bit
 ---------------------------------------------------------------------------------
 (2) _set_matrix_bit                                       7     2      5    1180
                                              6 COMMON     7     2      5
                             _setbit
 ---------------------------------------------------------------------------------
 (3) _setbit                                               6     2      4     531
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (2) _get_matrix_bit                                       5     1      4    5004
                                              7 COMMON     5     1      4
                             _getbit
 ---------------------------------------------------------------------------------
 (4) _getbit                                               7     4      3     327
                                              0 COMMON     7     4      3
 ---------------------------------------------------------------------------------
 (1) _lg_char_info_index_rand                              0     0      0     706
                            ___awmod
                               _rand
 ---------------------------------------------------------------------------------
 (2) _rand                                                 7     5      2     198
                                              0 BANK0      7     5      2
                             ___lmul
 ---------------------------------------------------------------------------------
 (3) ___lmul                                              13     5      8     198
                                              0 COMMON    13     5      8
 ---------------------------------------------------------------------------------
 (2) ___awmod                                              7     3      4     508
                                             13 COMMON     1     1      0
                                              7 BANK0      6     2      4
                               _rand (ARG)
 ---------------------------------------------------------------------------------
 (1) _eeprom_write_int                                     7     5      2   15889
                                             21 BANK0      7     5      2
                   _USARTWriteString
                       _eeprom_write
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             29    21      8    7437
                                              0 BANK0     21    13      8
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              6     2      4     265
                                              8 COMMON     6     2      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              8     4      4     374
                                              0 COMMON     8     4      4
 ---------------------------------------------------------------------------------
 (2) _eeprom_write                                         3     2      1     150
                                              0 COMMON     3     2      1
 ---------------------------------------------------------------------------------
 (3) _USARTWriteString                                     2     0      2    8070
                                              1 COMMON     2     0      2
                     _USARTWriteChar
 ---------------------------------------------------------------------------------
 (4) _USARTWriteChar                                       1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _USARTWriteString
     _USARTWriteChar
   _dbg_print_MATRIX16x8
     _USARTWriteString
       _USARTWriteChar
     _get_matrix_bit
       _getbit
     _sprintf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
   _eeprom_write_int
     _USARTWriteString
       _USARTWriteChar
     _eeprom_write
     _sprintf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
   _hal_print_Screen
     _hal_print_MATRIX16x8
       _hal_MATRIX16x8_to_MATRIX_MATRIX7219
         _get_matrix_bit
           _getbit
         _set_matrix_matrix7219_bit
           _get_matrix7219
             ___awdiv
           _get_matrix_bit (ARG)
             _getbit
           _set_matrix7219_bit (ARG)
       _hal_print_MATRIX_MATRIX7219
         _Write_Matrix
           _SPI1_write
           _reverse
   _lg_char_info_index_rand
     ___awmod
       _rand (ARG)
         ___lmul
     _rand
       ___lmul
   _lg_clear
     _get_matrix_bit
       _getbit
     _set_matrix_bit
       _setbit
   _lg_clear_matrix
     _hal_print_Screen
       _hal_print_MATRIX16x8
         _hal_MATRIX16x8_to_MATRIX_MATRIX7219
           _get_matrix_bit
             _getbit
           _set_matrix_matrix7219_bit
             _get_matrix7219
               ___awdiv
             _get_matrix_bit (ARG)
               _getbit
             _set_matrix7219_bit (ARG)
         _hal_print_MATRIX_MATRIX7219
           _Write_Matrix
             _SPI1_write
             _reverse
     _memset
   _lg_delete_matrix
     _USARTWriteString
       _USARTWriteChar
     _dbg_print_MATRIX16x8
       _USARTWriteString
         _USARTWriteChar
       _get_matrix_bit
         _getbit
       _sprintf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
     _lg_delete_matrix_row
     _lg_is_row_full
       _USARTWriteString
         _USARTWriteChar
       _dbg_print_MATRIX16x8
         _USARTWriteString
           _USARTWriteChar
         _get_matrix_bit
           _getbit
         _sprintf
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
       _sprintf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
     _sprintf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
   _lg_find_best_solution
     _USARTWriteString
       _USARTWriteChar
     ___wmul
       _lg_get_holes_after_merge (ARG)
         _USARTWriteString
           _USARTWriteChar
         _get_matrix_bit
           _getbit
         _sprintf
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
     _dbg_print_MATRIX16x8
       _USARTWriteString
         _USARTWriteChar
       _get_matrix_bit
         _getbit
       _sprintf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
     _dbg_print_MATRIX4x4
       _USARTWriteString
         _USARTWriteChar
       _get_matrix_bit
         _getbit
       _sprintf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
     _dbg_print_Screen
       _USARTWriteString
         _USARTWriteChar
       _dbg_print_MATRIX16x8
         _USARTWriteString
           _USARTWriteChar
         _get_matrix_bit
           _getbit
         _sprintf
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
       _sprintf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
     _dbg_print_cur_MATRIX4x4
       _USARTWriteString
         _USARTWriteChar
       _dbg_print_MATRIX4x4
         _USARTWriteString
           _USARTWriteChar
         _get_matrix_bit
           _getbit
         _sprintf
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
       _sprintf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
     _lg_fall_off
       _USARTWriteString
         _USARTWriteChar
       _get_matrix_bit
         _getbit
       _sprintf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
     _lg_get_height
       _USARTWriteString
         _USARTWriteChar
       _lg_is_row_empty
       _sprintf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
     _lg_get_height_after_merge
       _USARTWriteString
         _USARTWriteChar
       _get_matrix_bit
         _getbit
       _sprintf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
     _lg_get_holes_after_merge
       _USARTWriteString
         _USARTWriteChar
       _get_matrix_bit
         _getbit
       _sprintf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
     _lg_get_num_of_orphan
       _USARTWriteString
         _USARTWriteChar
       _get_matrix_bit
         _getbit
       _sprintf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
     _lg_get_num_removed_rows
       _USARTWriteString
         _USARTWriteChar
       _lg_is_row_full
         _USARTWriteString
           _USARTWriteChar
         _dbg_print_MATRIX16x8
           _USARTWriteString
             _USARTWriteChar
           _get_matrix_bit
             _getbit
           _sprintf
             ___lwdiv
             ___lwmod
               ___lwdiv (ARG)
         _sprintf
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
       _sprintf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
     _lg_get_weight
       _USARTWriteString
         _USARTWriteChar
       _get_matrix_bit
         _getbit
       _sprintf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
     _lg_is_valid
       _USARTWriteString
         _USARTWriteChar
       _get_matrix_bit
         _getbit
       _sprintf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
     _lg_left_most
       _USARTWriteString
         _USARTWriteChar
       _lg_is_left_boundary
         _USARTWriteString
           _USARTWriteChar
         _get_matrix_bit
           _getbit
         _sprintf
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
       _sprintf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
     _lg_merge1
       _get_matrix_bit
         _getbit
       _memcpy
       _set_matrix_bit
         _setbit
     _lg_right_most
       _USARTWriteString
         _USARTWriteChar
       _lg_is_right_boundary
         _USARTWriteString
           _USARTWriteChar
         _get_matrix_bit
           _getbit
         _sprintf
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
       _sprintf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
     _sprintf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
   _lg_hit_land
     _USARTWriteString
       _USARTWriteChar
     _get_matrix_bit
       _getbit
     _sprintf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
   _lg_merge
     _dbg_print_MATRIX16x8
       _USARTWriteString
         _USARTWriteChar
       _get_matrix_bit
         _getbit
       _sprintf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
     _dbg_print_MATRIX4x4
       _USARTWriteString
         _USARTWriteChar
       _get_matrix_bit
         _getbit
       _sprintf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
     _get_matrix_bit
       _getbit
     _set_matrix_bit
       _setbit
   _main_init
     _dbg_init
       _USARTInit
     _eeprom_read_int
       _USARTWriteString
         _USARTWriteChar
       _eeprom_read
       _sprintf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
     _max7219_init1
       _Write_Matrix
         _SPI1_write
         _reverse
       _memset
     _srand
   _sprintf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60      0      50       9       83.3%
BITBANK3            60      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60      0      12      11       18.8%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50     2E      4D       7       96.3%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50     4C      50       5      100.0%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      E       E       1      100.0%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0     10D      12        0.0%
ABS                  0      0     10D       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V1.37 build -260352376 
Symbol Table                                                                                   Sat Sep 24 19:02:36 2016

                __size_of_lg_get_num_of_orphan 0067                               lg_hit_land@n_481 003D  
                             lg_hit_land@n_485 003F                               lg_hit_land@n_488 0041  
                                   __CFG_CP$ON 0000                                              pc 0002  
                                           l43 1BA9                                             l82 12A4  
                                           l87 1649                                             _RD 0C60  
                                  __CFG_CPD$ON 0000                                             _WR 0C61  
                                 ___awdiv@sign 0076                          _lg_find_best_solution 04A3  
                                           fsr 0004                            ___wmul@multiplicand 004B  
                        lg_get_num_of_orphan@n 003A                             USARTInit@baud_rate 0070  
                                 ?_lg_fall_off 0035                                    __CFG_LVP$ON 0000  
                                          l201 0173                                            l115 1161  
                                          l203 019C                                            l109 1B72  
                                          l221 0218                                            l150 0329  
                                          l303 1308                                            l144 02F7  
                                          l320 16AD                                            l233 028C  
                                          l138 02C5                                            l314 167B  
                                          l227 0252                                            l180 049B  
                                          l148 0300                                            l413 1C01  
                                          l174 0460                                            l191 0138  
                                          l168 0425                                            l197 016A  
                                          l294 1311                                            l552 14A1  
                                          l385 1B4D                                            l297 12D6  
                                          l652 1C12                                            l725 17BD  
                                          l637 147E                                            l736 17B2  
                                          l665 1C40                                            l923 1970  
                                          l916 1E5A                                            l876 0DAE  
                                          l869 0D74                                            l983 0EFC  
                                          l975 0ED5                                            l977 0E86  
                                          _GIE 005F                                            l988 0F24  
                                          _RA1 0029                                            _RA2 002A  
                                          _RA3 002B                   __end_of_dbg_print_MATRIX16x8 0294  
                 hal_print_MATRIX16x8@matrix88 0037                         __size_of_lg_right_most 002E  
                                          fsr0 0004                          eeprom_write_int@value 0035  
                                _lg_get_height 1BB5                                            indf 0000  
                                 ___awmod@sign 002C                                   ?_lg_hit_land 0035  
                       lg_delete_matrix@matrix 005C                                   __CFG_IESO$ON 0000  
                                _lg_get_weight 141A                              ?_dbg_print_Screen 004C  
                                 ?_lg_is_valid 0035                          __end_of_max7219_init1 15B7  
                  __size_of_set_matrix7219_bit 002B                                 lg_right_most@n 0044  
                               lg_right_most@x 0046                                           l1014 1A19  
                                         l1036 1AC2                                           l1126 1A62  
                                         l4020 10EC                                           l4100 0340  
                                         l4014 10BB                                           l4024 10F4  
                                         l4008 10B7                                           l4042 1E2D  
                                         l4116 03FC                                           l4204 0041  
                                         l4212 004E                                           l5004 1326  
                                         l4044 1E2F                                           l4052 1E38  
                                         l4038 0CF9                                           l4126 0439  
                                         l5030 1367                                           l5102 13FB  
                                         l5110 140D                                           l4046 1E31  
                                         l3600 15D6                                           l4136 0474  
                                         l4208 0043                                           l4216 0054  
                                         l4232 1F61                                           l5016 1334  
                                         l4048 1E33                                           l4242 1F92  
                                         l4250 1F9F                                           l4226 1F5B  
                                         l5026 1365                                           l5042 1386  
                                         l5106 1405                                           l3612 15F5  
                                         l3540 1FB1                                           l4316 16B6  
                                         l4404 005D                                           l4270 1D76  
                                         l3630 1621                                           l3606 15E5  
                                         l4094 033A                                           l4246 1F94  
                                         l4254 1FA5                                           l5038 1384  
                                         l5046 1391                                           l3704 1D5E  
                                         l3720 1CCF                                           l3624 1611  
                                         l4504 14AD                                           l4432 009B  
                                         l4416 006B                                           l5056 1399  
                                         l3722 1CDD                                           l3730 1CF6  
                                         l4274 1D8C                                           l3618 1602  
                                         l3546 1FBC                                           l4370 1D26  
                                         l4522 14E8                                           l4178 197D  
                                         l4194 0014                                           l4266 1AF0  
                                         l3708 1D69                                           l3900 1269  
                                         l3572 1FFB                                           l3564 1FE8  
                                         l3556 1FC4                                           l4372 1D2D  
                                         l4540 150C                                           l4612 121E  
                                         l4452 00CB                                           l4436 00A0  
                                         l4188 000E                                           l4700 1C36  
                                         l5092 13CB                                           l3726 1CEB  
                                         l3638 162F                                           l3902 1274  
                                         l3558 1FD2                                           l3750 1110  
                                         l4526 14EF                                           l4606 1200  
                                         l4622 1226                                           l4470 00ED  
                                         l3816 0EEF                                           l3904 127F  
                                         l3568 1FF3                                           l3672 1B75  
                                         l4544 1513                                           l4552 1524  
                                         l4456 00D0                                           l4712 1C5F  
                                         l3842 0F4C                                           l3594 15C9  
                                         l3770 1146                                           l4810 1700  
                                         l4394 1C0B                                           l4474 00F2  
                                         l5098 13D0                                           l3852 0F6A  
                                         l3844 0F55                                           l3588 15BC  
                                         l3908 128A                                           l3756 1114  
                                         l3940 01B1                                           l4548 151E  
                                         l4732 1BCF                                           l4740 1BDF  
                                         l4724 1BBE                                           l4820 1716  
                                         l4660 1489                                           l4644 1433  
                                         l4716 1C64                                           l3854 0F6F  
                                         l3870 0FE6                                           l3934 01AC  
                                         l4750 1EB9                                           l4830 173B  
                                         l4478 00FD                                           l3696 1D3A  
                                         l3856 0FA1                                           l3864 0FD5  
                                         l3872 0E99                                           l3768 1142  
                                         l4736 1BD7                                           l4840 1786  
                                         l4656 1480                                           l4648 144D  
                                         l4664 148F                                           l4488 0105  
                                         l5560 109B                                           l5640 0765  
                                         l5720 0DD5                                           l3698 1D48  
                                         l3874 0FF7                                           l4930 101B  
                                         l4922 1015                                           l3890 1232  
                                         l3778 1159                                           l4498 14A7  
                                         l4762 1EC7                                           l4674 1497  
                                         l5626 06A3                                           l3796 0E88  
                                         l4932 1029                                           l4940 1042  
                                         l3892 123D                                           l5580 1E79  
                                         l3948 01EF                                           l4596 11DE  
                                         l5564 10A5                                           l5556 1070  
                                         l5660 0785                                           l3886 1A33  
                                         l4918 100E                                           l3894 1248  
                                         l3958 022B                                           l4782 1EDF  
                                         l4790 1EF8                                           l5662 0521  
                                         l5830 1E46                                           l5718 0DB8  
                                         l4944 104A                                           l4936 1037  
                                         l3896 1253                                           l5584 1EA3  
                                         l3992 1E27                                           l3968 0265  
                                         l4880 17EC                                           l4848 1793  
                                         l4696 1C31                                           l5664 078F  
                                         l5648 0777                                           l5832 1E4B  
                                         l3898 125E                                           l3986 1DF9  
                                         l4786 1EED                                           l4890 17FC  
                                         l5666 04B3                                           l5834 1E50  
                                         l5738 0E2F                             ??_dbg_print_Screen 007E  
                                         l5588 1EAD                                           l5668 0797  
                                         l5836 1E55                                           l5692 0D15  
                                         l4878 17E6                                           l5686 07C6  
                                         l4986 11BC                                           l4898 1A5A  
                                         l5698 0D32                                           l4988 116D  
                                         STR_1 094C                                   __CFG_WDTE$ON 0000  
                                         STR_2 0CE9                                           STR_3 094C  
                                         STR_4 092C                                           STR_5 094C  
                                         STR_6 0CED                                           STR_7 094C  
                                         STR_8 0CEF                                           STR_9 094C  
                                  main@hit_res 006B                                           u4015 0F45  
                                         u4105 015C                                           u4115 018E  
                                         u4205 027E                                           u4155 01E0  
                                         u3525 1FC7                                           u3605 1DE3  
                                         u4165 020A                                           u3614 1B95  
                                         u3615 1B92                                           u4095 012A  
                                         u5135 00E7                                           u3545 1FD3  
                                         u4185 0244                                           u4425 0379  
                                         u6115 102F                                           u3555 1FDF  
                                         u6035 1A63                                           u4515 048D  
                                         _PEIE 005E                                           u3805 1D5F  
                                         u6125 1038                                           u3565 1FE9  
                                         u4285 10BE                                           u6045 1A6A  
                                         u4445 03B6                                           u4365 02B7  
                                         u4295 10CA                                           u4375 02E9  
                                         u5095 00C5                                           u4465 03ED  
                                         u4385 031B                                           u5265 1506  
                                         u7105 04CE                                           u3835 1CD2  
                                         u3595 1DC5                                           u4475 0417  
                                         _RCIE 0465                                           u3765 1D3D  
                                         u3855 1CE3                                           u6095 101E  
                                         u5535 1F44                                           u4495 0452  
                                         u6255 135F                                           u3785 1D49  
                                         u3865 1CEC                                           u7145 067B  
                                         u3795 1D55                                           u4755 1D8E  
                                         u7155 072C                                           u4765 1D96  
                                         u4925 1D0E                                           u4845 166D  
                                         u4685 1F8C                                           u4855 169F  
                                         u3985 0F1D                                           u4865 16C2  
                                         u7185 0771                                           u7337 0E22  
                                         u7265 0D66                                           u7347 0E69  
                                         u7357 1B7A                                           u7285 0DA0  
                                         u7367 1B82                                           u7295 0DC4  
                                         u5965 17E0                                           u6975 12C8  
                                         u6985 12FA                                           _WREN 0C62  
                               ??_eeprom_write 0071                          __size_of_Write_Matrix 005E  
                    __size_of_eeprom_write_int 0024                                           _Seed 00D3  
                                 __CFG_WRT$OFF 0000                         __end_of_USARTWriteChar 1977  
                                __CFG_FCMEN$ON 0000                              eeprom_read_int@at 003B  
                  __end_of_lg_is_left_boundary 0056                                           _main 0D10  
                                         _rand 1EFD                                           btemp 007E  
               lg_get_height_after_merge@n_652 003B                 lg_get_height_after_merge@n_655 003D  
               lg_get_height_after_merge@n_658 003F                                  __CFG_BOREN$ON 0000  
                      lg_get_num_of_orphan@col 0040                                           ltemp 007E  
                      lg_get_num_of_orphan@row 0041                                           start 0000  
                                         ttemp 007E                                           wtemp 007E  
                                  lg_clear@col 0028                                  ?_lg_left_most 0042  
                                  lg_clear@row 0027                                  __CFG_MCLRE$ON 0000  
           lg_find_best_solution@tem_sub_index 00C7                      ??_lg_get_num_removed_rows 0057  
                             lg_fall_off@n_562 0041                               lg_fall_off@n_556 003D  
                             lg_fall_off@n_559 003F                           lg_is_valid@matrix4x4 0036  
                                        ?_main 0070                                          ?_rand 0020  
                              __end_of___awdiv 2000                                          _EEADR 010D  
                                        STR_10 0C0E                                          STR_11 094C  
                                        STR_20 094C                                          STR_12 0B09  
                                        STR_13 094C                                          STR_21 0CEF  
                                        STR_22 094C                                          STR_14 094C  
                                        STR_30 0AF2                                          STR_23 0C0E  
                                        STR_15 0CE9                                          STR_40 094C  
                                        STR_24 094C                                          STR_16 094C  
                                        STR_41 0CE9                                          STR_25 0B09  
                                        STR_17 090B                                          STR_42 094C  
                                        STR_26 094C                                          STR_18 094C  
                                        STR_50 0CBA                                          STR_51 094C  
                                        STR_43 094C                                          STR_19 0CED  
                                        STR_44 0CE9                                          STR_60 094C  
                                        STR_52 0B9C                                __end_of___awmod 104F  
                     set_matrix7219_bit@matrix 0077                                          STR_53 094C  
                                        STR_45 094C                                          STR_61 08E6  
                                        STR_70 094C                                          STR_62 094C  
                                        STR_54 0CA2                                          STR_46 0A93  
                                        STR_47 094C                                          STR_71 0C3E  
                                        STR_55 0A7A                                          STR_63 0A2D  
                                        STR_80 094C                                          STR_72 094C  
                                        STR_64 094C                                          STR_48 0B20  
                                        STR_56 0AC3                                          STR_81 0A32  
                                        STR_73 0A32                                          STR_49 094C  
                                        STR_65 0A47                                          STR_57 0A12  
                                        STR_90 094C                                          STR_82 094C  
                                        STR_74 094C                                          STR_66 094C  
                                        STR_58 094C                                          STR_83 0CDA  
                                        STR_67 0CD0                                          STR_75 0C4B  
                                        STR_91 0BE1                                          STR_59 0B4E  
                                        STR_92 094C                                          STR_84 094C  
                                        STR_76 094C                                          STR_68 094C  
                                        STR_77 0A32                                          STR_93 0C7E  
                                        STR_85 09F7                                          STR_69 08C1  
                                        STR_94 094C                                          STR_86 094C  
                                        STR_78 094C                                          STR_95 0BE1  
                                        STR_79 0C58                                          STR_87 0988  
                                        STR_96 094C                                          STR_88 094C  
                                        STR_89 0C72                                          STR_97 0AAB  
                                        STR_98 0AAB                                          STR_99 0B37  
                                        _CARRY 0018                               USARTWriteChar@ch 0070  
                              ___awdiv@divisor 0070                                __end_of___lwdiv 1D6E  
                              __end_of___lwmod 1CFB                                 ?_lg_get_height 0070  
                              ___awdiv@counter 0075                                          _SPBRG 0099  
                            lg_is_row_full@row 004E                                          _TXREG 0019  
                          ___lmul@multiplicand 0074                                   _Write_Matrix 1107  
                               ?_lg_get_weight 0035             __size_of_set_matrix_matrix7219_bit 0029  
                lg_get_holes_after_merge@n_672 003D                  lg_get_holes_after_merge@n_675 003F  
                lg_get_holes_after_merge@n_678 0041                                    ?_SPI1_write 0070  
                          _dbg_print_MATRIX4x4 0294                              ??_lg_is_row_empty 0071  
                                  lg_merge@col 005A                                    lg_merge@row 0059  
                             _hal_print_Screen 1965                                __end_of_dpowers 081C  
                                        _cur_x 00EC                                          _cur_y 00D7  
                                        _randx 00E8                        __end_of_lg_clear_matrix 19B8  
                lg_get_holes_after_merge@start 0045                                          _srand 198F  
                                        main@n 0065                                          pclath 000A  
                              __end_of_reverse 1C9A                                          ltemp0 007E  
                                        ltemp1 0082                                          ltemp2 0086  
                                        ltemp3 0080                       lg_get_num_of_orphan@full 003E  
                           __size_of_USARTInit 0040                       lg_get_num_of_orphan@risk 003C  
                              ?_USARTWriteChar 0070                                          ttemp0 007E  
                                        ttemp1 0081                                          ttemp2 0084  
                                        ttemp3 0087                                          ttemp4 007F  
                                        status 0003                     lg_find_best_solution@n_720 00B8  
                   lg_find_best_solution@n_714 00B4                     lg_find_best_solution@n_731 00BE  
                   lg_find_best_solution@n_723 00BA                     lg_find_best_solution@n_717 00B6  
                   lg_find_best_solution@n_728 00BC                           lg_is_left_boundary@n 003D  
                         lg_is_left_boundary@x 003F                                          wtemp0 007E  
                                        wtemp1 0080                                          wtemp2 0082  
                                        wtemp3 0084                                          wtemp4 0086  
                                        wtemp5 0088                                          wtemp6 007F  
                              __end_of_sprintf 1000                                 ??_lg_left_most 0045  
                                _lg_right_most 1C3D                lg_get_height_after_merge@matrix 0035  
                           Write_Matrix@column 0075                                   lg_fall_off@n 003B  
                                 lg_fall_off@x 0043                                   lg_fall_off@y 0035  
                         ?_dbg_print_MATRIX4x4 0035                  __size_of_lg_delete_matrix_row 0037  
                           Write_Matrix@matrix 007B                        lg_delete_matrix_row@row 0070  
                              __initialization 07CD             lg_find_best_solution@temp_pre_risk 00C9  
                        dbg_print_Screen@n_373 0051                set_matrix_matrix7219_bit@matrix 007C  
                           Write_Matrix@option 0074                                   __end_of_main 0E7C  
                              _temp_matrix16x8 01D0                                   __end_of_rand 1F52  
                         lg_hit_land@matrix4x4 0036                          dbg_print_Screen@lable 004C  
                       ?_lg_find_best_solution 0070                                         ??_main 0061  
                            get_matrix_bit@col 007A                                         ??_rand 0022  
                            set_matrix_bit@col 0079                              get_matrix_bit@row 0079  
                 __end_of_lg_is_right_boundary 1FA7                              set_matrix_bit@row 0078  
                dbg_print_cur_MATRIX4x4@enable 0060                          lg_is_valid@matrix16x8 0038  
                dbg_print_cur_MATRIX4x4@matrix 005E             __size_of_lg_get_height_after_merge 004B  
                  get_matrix7219@matrix_matrix 007B                __end_of_lg_get_num_removed_rows 1C0F  
            __end_of_set_matrix_matrix7219_bit 1B37                       ?_lg_char_info_index_rand 0070  
                               _lg_is_row_full 1B37                                         STR_100 08B5  
                                       STR_101 094C                                         STR_102 08B5  
                                       STR_110 09C0                                         STR_111 094C  
                                       STR_103 094C                                         STR_112 0BE9  
                                       STR_120 0C65                                         STR_104 0BD0  
                                       STR_121 094C                                         STR_113 094C  
                                       STR_105 094C                                         STR_114 0CC5  
                                       STR_122 0C96                                         STR_130 0C20  
                                       STR_106 0B8A                                         STR_123 094C  
                                       STR_115 094C                                         STR_107 094C  
                                       STR_131 0B77                                         STR_116 09B2  
                                       STR_132 094C                                         STR_124 0BF2  
                                       STR_108 09A4                                         STR_140 0884  
                                       STR_141 094C                                         STR_125 094C  
                                       STR_117 094C                                         STR_109 094C  
                                       STR_133 0BBF                                         STR_118 0A3C  
                                       STR_134 094C                                         STR_142 0C02  
                                       STR_150 0A61                                         STR_126 09DC  
                                       STR_151 094C                                         STR_143 094C  
                                       STR_127 094C                                         STR_119 094C  
                                       STR_135 0B63                                         STR_152 0C02  
                                       STR_136 094C                                         STR_128 0C2F  
                                       STR_144 0ADB                                         STR_137 088B  
                                       STR_153 094C                                         STR_129 0C2F  
                                       STR_138 094C                                         STR_146 0C8A  
                                       STR_154 0C11                                         STR_155 094C  
                                       STR_139 0CE2                                         STR_156 0CAE  
                                       STR_148 096B                                         STR_157 0BAE  
                                       _EEDATA 010C                                         _EECON1 018C  
                                       _EECON2 018D                               ___awdiv@dividend 0072  
                                       ?_srand 0070                             lg_is_row_empty@row 0070  
                             __end_of_dbg_init 1987                                   lg_hit_land@n 003B  
                                 lg_hit_land@x 0043                                   lg_hit_land@y 0035  
                               ?_lg_right_most 003F                   __end_of_hal_print_MATRIX16x8 19DB  
                               __CFG_PWRTE$OFF 0000                          ??_dbg_print_MATRIX4x4 003B  
                         _dbg_print_MATRIX16x8 0107                                   lg_merge1@col 002B  
                     __size_of_eeprom_read_int 002F                                   lg_merge1@len 0028  
                                 lg_merge1@row 002A                           __size_of_eeprom_read 001B  
                             __end_of_lg_clear 1EB2                            __size_of_SPI1_write 002A  
                                       ___lmul 1D6E                                         ___wmul 1A56  
                             __end_of_lg_merge 141A                                      ??___awdiv 0074  
                                    ??___awmod 007D                       __end_of_lg_delete_matrix 11C6  
                                    ??___lwdiv 0074                                      ??___lwmod 007C  
                                       _getbit 15B7                 lg_get_holes_after_merge@matrix 0046  
                     __end_of_USARTWriteString 1A56                                         _memcpy 1AE7  
                                       _memset 0CF4                                   lg_is_valid@n 003B  
                                 lg_is_valid@x 004B                                   lg_is_valid@y 0035  
                             ___awdiv@quotient 0077                                ___awmod@divisor 0027  
                              ??_lg_get_height 0035                                         _setbit 122D  
                         __end_of_eeprom_write 1AE7                                ___awmod@counter 002B  
                            __end_of_USARTInit 1E6C                              lg_delete_matrix@n 0059  
                          max7219_init1@matrix 0021                             lg_merge@matrix16x8 0055  
                         __size_of_lg_fall_off 008B                                ??_lg_get_weight 0037  
                             ??_get_matrix7219 0020                         __end_of_lg_is_row_full 1B60  
                   lg_get_num_of_orphan@matrix 003F                                      ??_reverse 0070  
                                       srand@x 0070              __end_of_lg_get_height_after_merge 1EFD  
                         __size_of_lg_hit_land 007C                                      ??_sprintf 0028  
                             ??_get_matrix_bit 007B                               ?_lg_clear_matrix 0070  
                         __size_of_lg_is_valid 00B1               __size_of_dbg_print_cur_MATRIX4x4 009D  
                             _eeprom_write_int 1A79                        __end_of__initialization 07FC  
                              eeprom_read@addr 0071                    lg_find_best_solution@temp_x 00CD  
                  lg_find_best_solution@temp_y 00C8                          ?_dbg_print_MATRIX16x8 0035  
                   dbg_print_MATRIX16x8@enable 0049                   lg_get_height_after_merge@col 0042  
                 lg_get_height_after_merge@row 0043                                 __pcstackCOMMON 0070  
                   dbg_print_MATRIX16x8@matrix 0037                         set_matrix7219_bit@mask 0078  
                                 __pidataBANK1 196A                                   __pidataBANK2 19DB  
               set_matrix_matrix7219_bit@value 0029                          lg_hit_land@matrix16x8 0038  
                         lg_fall_off@matrix4x4 0036                       _lg_get_holes_after_merge 16E7  
                 dbg_print_cur_MATRIX4x4@n_384 005C                                  __end_of_srand 1998  
                       dbg_print_Screen@enable 004E                   dbg_print_cur_MATRIX4x4@lable 0052  
                      __size_of_set_matrix_bit 0013                           __end_of_lg_left_most 1C3D  
                 __end_of_lg_get_num_of_orphan 122D                                ?_lg_is_row_full 004C  
                            eeprom_write@value 0070         hal_MATRIX16x8_to_MATRIX_MATRIX7219@col 0034  
       hal_MATRIX16x8_to_MATRIX_MATRIX7219@row 0035                             get_matrix_bit@byte 0077  
                                      ??_srand 0072                             set_matrix_bit@byte 0076  
                           __size_of_lg_merge1 005B                             __size_of_main_init 0024  
                                   __pbssBANK0 006C                                     __pbssBANK1 00CE  
                                   __pbssBANK3 0190                              eeprom_write_int@n 0038  
                              ??_lg_right_most 0042                                 Write_Matrix@at 0079  
                         _lg_is_right_boundary 1F52                                   _g_matrix16x8 00D8  
                    __size_of_dbg_print_Screen 007A                      dbg_print_MATRIX16x8@n_321 003D  
                    dbg_print_MATRIX16x8@n_330 0041                      dbg_print_MATRIX16x8@n_324 003F  
                    dbg_print_MATRIX16x8@n_333 0043                      dbg_print_MATRIX16x8@n_336 0045  
                    dbg_print_MATRIX16x8@n_339 0047                                     __pmaintext 0D10  
                       lg_find_best_solution@n 00B2                      dbg_print_MATRIX16x8@lable 0035  
                                      ?___lmul 0070                       __end_of_hal_print_Screen 196A  
                     lg_find_best_solution@res 00C2                                        ?___wmul 0049  
                                      ?_getbit 0070                   ?_hal_print_MATRIX_MATRIX7219 0070  
                                      ?_memcpy 0070                                _lg_is_row_empty 1977  
                                      ?_memset 0070                              ??_eeprom_read_int 0037  
                               ___lmul@product 0079                                        ?_setbit 0070  
                        lg_left_most@matrix4x4 0042                                      ?_dbg_init 0070  
            hal_print_MATRIX_MATRIX7219@matrix 0029                           _hal_print_MATRIX16x8 19C9  
                   __end_of_set_matrix7219_bit 1BB5                            lg_is_row_full@n_439 0055  
                                 ??_SPI1_write 0070                               ??_USARTWriteChar 0070  
                           USARTWriteInt@F1605 00CE                                      ?_lg_clear 0020  
                                   __stringtab 0800                                      ?_lg_merge 0052  
                lg_is_right_boundary@matrix4x4 0035                         ??_dbg_print_MATRIX16x8 0039  
                        ?_lg_is_right_boundary 0035                                  lg_left_most@n 0046  
                                lg_left_most@x 0048                   lg_get_num_removed_rows@count 005C  
               hal_print_MATRIX_MATRIX7219@col 002B                        ??_lg_find_best_solution 00A0  
                        __size_of_eeprom_write 0026                   __size_of_lg_is_left_boundary 0051  
                                      ___awdiv 1FA7                                __size_of___lmul 003F  
                                      ___awmod 1002                             __end_of_SPI1_write 1B8A  
                         eeprom_read_int@value 003C                                __size_of___wmul 0023  
                       __size_of_max7219_init1 008E                                        ___lwdiv 1D32  
                                      ___lwmod 1CC9                              __end_of_lg_merge1 10AA  
                              __size_of_getbit 0093                                        _g_debug 0190  
                            __end_of_main_init 1AC1                                __size_of_memcpy 0027  
                                    _ANSELbits 0188                                __size_of_memset 001C  
                                      __ptext1 1A9D                                        __ptext2 198F  
                                      __ptext3 1529                                        __ptext4 1C9A  
                                      __ptext5 1A18                                        __ptext6 197F  
                                      __ptext7 1E2C                                        __ptext8 139B  
                                      __ptext9 131F                                __size_of_setbit 0078  
       lg_find_best_solution@tem_pre_sub_index 00C6                 lg_find_best_solution@temp_high 00C3  
               lg_find_best_solution@temp_risk 00CB                              __end_of_hexpowers 0824  
                                   ??_dbg_init 0072                                        _dpowers 0812  
                 __end_of_lg_delete_matrix_row 1D32                          ?_hal_print_MATRIX16x8 0070  
                             ___awmod@dividend 0029                                    SPI1_write@i 0073  
                                      _reverse 1C6B                               lg_is_valid@n_503 003D  
                             lg_is_valid@n_512 0043                               lg_is_valid@n_521 0049  
                             lg_is_valid@n_506 003F                               lg_is_valid@n_515 0045  
                             lg_is_valid@n_509 0041                               lg_is_valid@n_518 0047  
                                  setbit@value 0073                                        _sprintf 0E7C  
                      _dbg_print_cur_MATRIX4x4 164A                                        clrloop0 1988  
          set_matrix_matrix7219_bit@matrix_col 0028            set_matrix_matrix7219_bit@matrix_row 0027  
                                   ??_lg_clear 0024                           end_of_initialization 07FC  
                        lg_is_right_boundary@n 003A                          lg_is_right_boundary@x 003C  
                                   ??_lg_merge 0056                              dbg_print_Screen@n 004F  
                            lg_get_weight@risk 003D                   lg_is_left_boundary@matrix4x4 0035  
                                      memcpy@d 0075                                        memcpy@n 0071  
                                      memcpy@s 0076                                        memset@c 0070  
                   lg_get_num_removed_rows@row 005D                                        memset@n 0072  
                                      memset@p 0075                                   _eeprom_write 1AC1  
             lg_get_holes_after_merge@num_hole 0043                                 SPI1_write@data 0071  
                               SPI1_write@mask 0072                                    reverse@byte 0071  
  __end_of_hal_MATRIX16x8_to_MATRIX_MATRIX7219 1E2C   __size_of_hal_MATRIX16x8_to_MATRIX_MATRIX7219 0040  
        ??_hal_MATRIX16x8_to_MATRIX_MATRIX7219 002E           ?_hal_MATRIX16x8_to_MATRIX_MATRIX7219 002D  
          _hal_MATRIX16x8_to_MATRIX_MATRIX7219 1DEC                                    reverse@temp 0073  
                     ?_lg_get_num_removed_rows 0070                          lg_is_row_empty@matrix 0071  
                     dbg_print_MATRIX4x4@n_303 0047                       dbg_print_MATRIX4x4@n_312 004D  
                     dbg_print_MATRIX4x4@n_306 0049                       dbg_print_MATRIX4x4@n_309 004B  
                     dbg_print_MATRIX4x4@n_293 0043                       dbg_print_MATRIX4x4@n_296 0045  
                      __end_of_lg_is_row_empty 197F                        lg_right_most@matrix16x8 0041  
             __size_of_lg_char_info_index_rand 0018                           _lg_get_num_of_orphan 11C6  
                     dbg_print_MATRIX4x4@lable 0035                                      _RCSTAbits 0018  
                                 __pstringtext 0800                              ?_lg_delete_matrix 0070  
                       lg_is_left_boundary@col 0041                          __size_of_lg_left_most 002E  
                       lg_is_left_boundary@row 0040                       __end_of_eeprom_write_int 1A9D  
                            ?_USARTWriteString 0071                             ??_lg_delete_matrix 0057  
                      lg_merge1@matrix16x8_out 0024                                 _set_matrix_bit 19ED  
                           ??_USARTWriteString 0073                                      _USARTInit 1E2C  
                                    _TRISAbits 0085                                  _max7219_init1 1529  
                   ?_set_matrix_matrix7219_bit 0027           __size_of_hal_print_MATRIX_MATRIX7219 005D  
                         eeprom_write_int@temp 003B                    __end_of_dbg_print_MATRIX4x4 04A3  
                                   getbit@byte 0070                          lg_delete_matrix@count 005B  
                                   getbit@temp 0075                         ??_lg_is_right_boundary 0038  
                               lg_fall_off@col 0044                                 lg_fall_off@row 0045  
                                ??_eeprom_read 0070                                      _TXSTAbits 0098  
                              _g_cur_matrix4x4 006C                     ??_lg_get_holes_after_merge 0035  
                             eeprom_read_int@n 0039                      dbg_print_MATRIX4x4@enable 004F  
                                 _lg_left_most 1C0F                               _dbg_print_Screen 12A5  
                    dbg_print_MATRIX4x4@matrix 0039                          ?_lg_get_num_of_orphan 0035  
                        lg_delete_matrix_row@i 0075         set_matrix_matrix7219_bit@matrix_matrix 007D  
                               __end_of___lmul 1DAD                        set_matrix7219_bit@value 0072  
                               __end_of___wmul 1A79                                  ??_lg_fall_off 0039  
                       __end_of_set_matrix_bit 1A00                            __end_of_g_matrix4x4 0884  
                                   lg_merge1@x 0027                                     lg_merge1@y 0020  
                               __end_of_getbit 164A                          lg_fall_off@matrix16x8 0038  
                             ??_lg_is_row_full 004F                                 __end_of_memcpy 1B0E  
                               __end_of_memset 0D10                   lg_get_holes_after_merge@stop 0044  
                       ??_hal_print_MATRIX16x8 0036                          __end_of_lg_get_height 1BE1  
                               __end_of_setbit 12A5                                  ??_lg_hit_land 0039  
                          start_initialization 07CD                      ??_dbg_print_cur_MATRIX4x4 0056  
                                   ?_USARTInit 0070                          __end_of_lg_get_weight 149E  
                                ??_lg_is_valid 0039                              Write_Matrix@value 007A  
                               ?_max7219_init1 0070                     ?_lg_get_height_after_merge 0035  
                     get_matrix7219@matrix_col 007A                       get_matrix7219@matrix_row 0079  
                              _eeprom_read_int 1C9A                       __CFG_FOSC$INTRC_NOCLKOUT 0000  
                             lg_get_height@row 003A                       __size_of_lg_clear_matrix 0011  
                         _lg_delete_matrix_row 1CFB                               ?_lg_is_row_empty 0070  
                                     ??___lmul 0078                                       ??___wmul 007E  
                          __end_of_eeprom_read 1A33                                     init_fetch0 19B8  
                            ?_hal_print_Screen 0070                                       ??_getbit 0073  
                           lg_merge1@matrix4x4 0021                                    __pdataBANK1 00E8  
                                  __pdataBANK2 0110                              _g_char_info_index 006E  
                            lg_merge@matrix4x4 0053                                       ??_memcpy 0073  
                                     ??_memset 0074                                ?_set_matrix_bit 0076  
                           ??_hal_print_Screen 007E                                       ??_setbit 0074  
                                  _g_char_info 0110                            set_matrix_bit@value 007A  
         lg_find_best_solution@left_most_index 00C0                             eeprom_write_int@at 003A  
                                ?_Write_Matrix 0074                                      ___latbits 0002  
                          __end_of_lg_fall_off 1529                                  __pcstackBANK0 0020  
                                __pcstackBANK1 00A0                              __size_of_dbg_init 0008  
                        set_matrix7219_bit@col 0071                          set_matrix7219_bit@row 0070  
                          _lg_is_left_boundary 0005                                Write_Matrix@col 007C  
                              Write_Matrix@row 007D                            __end_of_lg_hit_land 139B  
                             eeprom_write@addr 0072                                 lg_get_height@n 0037  
                                  sprintf@ccnt 002C                                    sprintf@flag 0030  
                          __end_of_lg_is_valid 0107                              __size_of_lg_clear 0046  
                                  sprintf@prec 002F                          __end_of_lg_right_most 1C6B  
                            __size_of_lg_merge 007F                        __size_of_get_matrix7219 003F  
                           _set_matrix7219_bit 1B8A                         ??_lg_get_num_of_orphan 0037  
                      _lg_char_info_index_rand 1A00                __end_of_dbg_print_cur_MATRIX4x4 16E7  
                        ?_lg_delete_matrix_row 0070                               ___lwdiv@dividend 0072  
                                  _g_matrix4x4 0824                        __size_of_get_matrix_bit 000F  
                   lg_get_height_after_merge@n 0039                     lg_get_height_after_merge@y 0041  
                         ?_lg_is_left_boundary 0035                 __size_of_lg_find_best_solution 032A  
                __end_of_lg_find_best_solution 07CD                            ?_set_matrix7219_bit 0070  
                                     ?___awdiv 0070                                       ?___awmod 0027  
                                     ?___lwdiv 0070                                       ?___lwmod 0078  
                               lg_get_weight@n 003A                        dbg_print_MATRIX16x8@col 004B  
                      dbg_print_MATRIX16x8@row 004A                                      _lg_merge1 104F  
                               ??_Write_Matrix 0076                                      _main_init 1A9D  
                              ??_max7219_init1 0020                                    ??_USARTInit 0072  
                                     ?_reverse 0070                         lg_left_most@matrix16x8 0044  
                                    _hexpowers 081C                           ??_set_matrix7219_bit 0073  
                             ___lwdiv@quotient 0075                                       ?_sprintf 0020  
                      __end_of_eeprom_read_int 1CC9                                 __size_of_srand 0009  
                                   setbit@byte 0070                                     setbit@temp 0074  
                               ___wmul@product 004D               __end_of_lg_get_holes_after_merge 1800  
                             lg_get_weight@col 0041                               lg_get_weight@pre 0040  
                             lg_get_weight@row 0042                                      clear_ram0 1987  
                                  _eeprom_read 1A18                  __size_of_dbg_print_MATRIX16x8 018D  
                                   reverse@res 0072                                       _PIR1bits 000C  
                        ??_lg_is_left_boundary 0038                         lg_right_most@matrix4x4 003F  
                       lg_merge1@matrix16x8_in 0023                           lg_is_row_full@matrix 004C  
                            ??_lg_clear_matrix 007E                                    _lg_fall_off 149E  
                               lg_hit_land@col 0044                              ?_eeprom_write_int 0035  
                                  __stringbase 0812                                 lg_hit_land@row 0045  
                            ___wmul@multiplier 0049               __size_of_lg_get_num_removed_rows 002E  
                                    main@n_765 0067                                      main@n_769 0069  
                                   ?_lg_merge1 0020                                     ?_main_init 0070  
                           ??_eeprom_write_int 0037                                    _lg_hit_land 131F  
               lg_is_right_boundary@matrix16x8 0037                       __end_of_dbg_print_Screen 131F  
                                    lg_clear@x 0026                                      lg_clear@y 0020  
                          lg_get_height@matrix 0039                                    _lg_is_valid 0056  
                              lg_is_row_full@n 0053                              ___lmul@multiplier 0070  
                    __size_of_lg_delete_matrix 0061                                      lg_merge@x 0058  
                                    lg_merge@y 0052                      __size_of_USARTWriteString 0023  
                  ??_set_matrix_matrix7219_bit 002A                        lg_is_right_boundary@col 003E  
                      lg_is_right_boundary@row 003D                      ??_lg_char_info_index_rand 007E  
                          lg_get_weight@matrix 003F                         ??_lg_delete_matrix_row 0071  
                lg_get_num_removed_rows@matrix 005B                        __size_of_USARTWriteChar 0008  
          __end_of_hal_print_MATRIX_MATRIX7219 1107                    _hal_print_MATRIX_MATRIX7219 10AA  
                             __size_of___awdiv 0059                               __size_of___awmod 004D  
                             __size_of___lwdiv 003C                               __size_of___lwmod 0032  
                           __end_of__stringtab 0812                                       _dbg_init 197F  
                                   sprintf@idx 002B                                     sprintf@val 0031  
                ??_hal_print_MATRIX_MATRIX7219 0020                                ___lwdiv@divisor 0070  
                   lg_delete_matrix_row@matrix 0074                                ___lwdiv@counter 0077  
                                     __ptext10 04A3                                       __ptext11 1C3D  
                                     __ptext20 11C6                                       __ptext12 1F52  
                                     __ptext21 16E7                                       __ptext13 104F  
                                     __ptext30 1165                                       __ptext22 1EB2  
                                     __ptext14 1AE7                                       __ptext31 1B37  
                                     __ptext23 1BB5                                       __ptext15 1C0F  
                                     __ptext40 1C6B                                       __ptext32 0107  
                                     __ptext24 1977                                       __ptext16 0005  
                                     __ptext41 1B60                                       __ptext33 1CFB  
                                     __ptext25 149E                                       __ptext17 0056  
                                     __ptext50 1998                                       __ptext42 1DEC  
                                     __ptext34 19A7                                       __ptext26 164A  
                                     __ptext18 141A                                       __ptext51 15B7  
                                     __ptext43 1B0E                                       __ptext35 0CF4  
                                     __ptext27 0294                                       __ptext19 1BE1  
                                     __ptext60 1AC1                                       __ptext52 1A00  
                                     __ptext44 1B8A                                       __ptext36 1965  
                                     __ptext28 12A5                                       __ptext61 1A33  
                                     __ptext53 1EFD                                       __ptext45 1DAD  
                                     __ptext37 19C9                                       __ptext29 1A56  
                                     __ptext62 196F                                       __ptext54 1D6E  
                                     __ptext46 1FA7                                       __ptext38 10AA  
                                     __ptext55 1002                                       __ptext47 1E6C  
                                     __ptext39 1107                                       __ptext56 1A79  
                                     __ptext48 19ED                                       __ptext57 0E7C  
                                     __ptext49 122D                                       __ptext58 1CC9  
                                     __ptext59 1D32                              __CFG_BOR4V$BOR21V 0000  
                             __size_of_reverse 002F                          _g_char_info_sub_index 006F  
                  ??_lg_get_height_after_merge 0037                               ?_eeprom_read_int 0035  
                                     _lg_clear 1E6C                               __size_of_sprintf 0184  
                                     _lg_merge 139B                lg_find_best_solution@temp_pre_x 00C5  
                                __size_of_main 016C                                 _get_matrix7219 1DAD  
                                __size_of_rand 0055          hal_print_MATRIX_MATRIX7219@matrix7219 0028  
                __size_of_lg_is_right_boundary 0055                                 lg_is_valid@col 004D  
                               lg_is_valid@row 004C                           __end_of_Write_Matrix 1165  
                               _get_matrix_bit 1998                   __size_of_dbg_print_MATRIX4x4 020F  
        hal_print_MATRIX_MATRIX7219@matrix_col 002D                         dbg_print_MATRIX4x4@col 0051  
        hal_print_MATRIX_MATRIX7219@matrix_row 002C                               ??_set_matrix_bit 007B  
                       dbg_print_MATRIX4x4@row 0050                 hal_print_MATRIX16x8@matrix7219 0038  
                    _set_matrix_matrix7219_bit 1B0E                                       getbit@at 0072  
                          lg_delete_matrix@row 005D                __end_of_lg_char_info_index_rand 1A18  
                     dbg_print_cur_MATRIX4x4@n 005A                       dbg_print_cur_MATRIX4x4@x 0054  
                     dbg_print_cur_MATRIX4x4@y 0055              __size_of_lg_get_holes_after_merge 0119  
                    ?_lg_get_holes_after_merge 0070                                    ??_lg_merge1 0025  
                                  ??_main_init 007E                  lg_is_left_boundary@matrix16x8 0037  
                           lg_get_weight@start 003C                  __size_of_hal_print_MATRIX16x8 0012  
                                     memcpy@d1 0074                                       memcpy@s1 0070  
                                     init_ram0 19BC                                       memset@p1 0076  
                    __size_of_hal_print_Screen 0005                         __end_of_get_matrix7219 1DEC  
                                    sprintf@ap 002E                                      sprintf@sp 0034  
                             ___lwmod@dividend 007A                       lg_get_num_removed_rows@n 0059  
                        dbg_print_MATRIX16x8@n 003B                         __end_of_get_matrix_bit 19A7  
hal_MATRIX16x8_to_MATRIX_MATRIX7219@matrix7219 002D                         __size_of_lg_get_height 002C  
                                    stringcode 080A                                       setbit@at 0072  
hal_MATRIX16x8_to_MATRIX_MATRIX7219@matrix16x8 0033                         __size_of_lg_get_weight 0084  
                    _lg_get_height_after_merge 1EB2                            USARTWriteString@str 0071  
                      _lg_get_num_removed_rows 1BE1                      lg_get_holes_after_merge@n 003B  
                     __size_of_lg_is_row_empty 0008                       ?_dbg_print_cur_MATRIX4x4 0052  
                                     sprintf@c 0033                                       sprintf@f 0020  
        lg_find_best_solution@right_most_index 00C1                                ___lwmod@divisor 0078  
                              ___lwmod@counter 007D                                       stringtab 0800  
                                   _SPI1_write 1B60                           dbg_print_MATRIX4x4@n 0041  
                         dbg_print_MATRIX4x4@x 0037                           dbg_print_MATRIX4x4@y 0038  
                             _lg_delete_matrix 1165                             lg_clear@matrix16x8 0023  
                      __size_of_lg_is_row_full 0029                               _USARTWriteString 1A33  
                              ?_get_matrix7219 0079                    lg_get_holes_after_merge@col 0047  
                  lg_get_holes_after_merge@row 0048                             _temp_cur_matrix4x4 00D5  
                                ?_eeprom_write 0070                              lg_clear@matrix4x4 0021  
                                 ?_eeprom_read 0070                                ?_get_matrix_bit 0077  
                               _USARTWriteChar 196F                                _lg_clear_matrix 19A7  
